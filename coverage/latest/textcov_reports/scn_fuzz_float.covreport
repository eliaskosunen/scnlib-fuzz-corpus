_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  69.7k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  69.7k|  chars_format const fmt = options.format;
  277|  69.7k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  69.7k|  parsed_number_string_t<UC> answer;
  280|  69.7k|  answer.valid = false;
  281|  69.7k|  answer.too_many_digits = false;
  282|  69.7k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  69.7k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 150, False: 69.6k]
  ------------------
  287|    150|#endif
  288|    150|    ++p;
  289|    150|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 20, False: 130]
  ------------------
  290|     20|      return answer;
  291|     20|    }
  292|    130|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|    130|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 130]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|    130|    } else {
  297|    130|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 100, False: 30]
  |  Branch (297:30): [True: 90, False: 10]
  ------------------
  298|     90|        return answer;
  299|     90|      }
  300|    130|    }
  301|    130|  }
  302|  69.6k|  UC const * const start_digits = p;
  303|       |
  304|  69.6k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   184k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 167k, False: 17.3k]
  |  Branch (306:25): [True: 115k, False: 52.3k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   115k|    i = 10 * i +
  310|   115k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   115k|    ++p;
  312|   115k|  }
  313|  69.6k|  UC const * const end_of_integer_part = p;
  314|  69.6k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  69.6k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  69.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  69.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 69.6k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  69.6k|  int64_t exponent = 0;
  324|  69.6k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 52.3k, False: 17.3k]
  |  Branch (324:49): [True: 9.74k, False: 42.5k]
  ------------------
  325|  69.6k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 9.74k, False: 59.8k]
  ------------------
  326|  9.74k|    ++p;
  327|  9.74k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  9.74k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  25.5k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 22.2k, False: 3.28k]
  |  Branch (332:27): [True: 15.7k, False: 6.46k]
  ------------------
  333|  15.7k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  15.7k|      ++p;
  335|  15.7k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  15.7k|    }
  337|  9.74k|    exponent = before - p;
  338|  9.74k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  9.74k|    digit_count -= exponent;
  340|  9.74k|  }
  341|  69.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  69.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 69.6k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  69.6k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 30.3k, False: 39.3k]
  ------------------
  348|  30.3k|    return answer;
  349|  30.3k|  }
  350|  39.3k|  int64_t exp_number = 0;            // explicit exponential part
  351|  39.3k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 29.1k, False: 10.2k]
  ------------------
  352|  39.3k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 18.7k, False: 10.3k]
  ------------------
  353|  39.3k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 2.07k, False: 16.6k]
  |  Branch (353:29): [True: 532, False: 16.1k]
  ------------------
  354|  39.3k|       ||
  355|  39.3k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|  36.7k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 36.7k]
  ------------------
  356|  36.7k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  36.7k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.60k|    UC const * location_of_e = p;
  359|  2.60k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 2.07k, False: 532]
  |  Branch (359:28): [True: 532, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.60k|      ++p;
  361|  2.60k|    }
  362|  2.60k|    bool neg_exp = false;
  363|  2.60k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 2.46k, False: 140]
  |  Branch (363:24): [True: 332, False: 2.13k]
  ------------------
  364|    332|      neg_exp = true;
  365|    332|      ++p;
  366|  2.27k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 2.13k, False: 140]
  |  Branch (366:31): [True: 88, False: 2.04k]
  ------------------
  367|     88|      ++p;
  368|     88|    }
  369|  2.60k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 140, False: 2.46k]
  |  Branch (369:24): [True: 240, False: 2.22k]
  ------------------
  370|    380|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 380]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    380|      p = location_of_e;
  376|  2.22k|    } else {
  377|  24.8k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 23.8k, False: 964]
  |  Branch (377:29): [True: 22.5k, False: 1.26k]
  ------------------
  378|  22.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  22.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 8.06k, False: 14.5k]
  ------------------
  380|  8.06k|          exp_number = 10 * exp_number + digit;
  381|  8.06k|        }
  382|  22.5k|        ++p;
  383|  22.5k|      }
  384|  2.22k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 322, False: 1.90k]
  ------------------
  385|  2.22k|      exponent += exp_number;
  386|  2.22k|    }
  387|  36.7k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  36.7k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 26.5k, False: 10.2k]
  |  Branch (389:44): [True: 0, False: 26.5k]
  ------------------
  390|  36.7k|  }
  391|  39.3k|  answer.lastmatch = p;
  392|  39.3k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  39.3k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 2.52k, False: 36.8k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  2.52k|    UC const * start = start_digits;
  405|  4.79k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 4.78k, False: 16]
  |  Branch (405:32): [True: 2.02k, False: 2.75k]
  |  Branch (405:53): [True: 250, False: 2.50k]
  ------------------
  406|  2.27k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.02k, False: 250]
  ------------------
  407|  2.27k|      start++;
  408|  2.27k|    }
  409|       |
  410|  2.52k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 2.33k, False: 185]
  ------------------
  411|  2.33k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  2.33k|      i = 0;
  416|  2.33k|      p = answer.integer.ptr;
  417|  2.33k|      UC const* int_end = p + answer.integer.len();
  418|  2.33k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  27.8k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 26.6k, False: 1.20k]
  |  Branch (419:54): [True: 25.5k, False: 1.12k]
  ------------------
  420|  25.5k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  25.5k|        ++p;
  422|  25.5k|      }
  423|  2.33k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 1.20k, False: 1.12k]
  ------------------
  424|  1.20k|        exponent = end_of_integer_part - p + exp_number;
  425|  1.20k|      }
  426|  1.12k|      else { // We have a value with a fractional component.
  427|  1.12k|        p = answer.fraction.ptr;
  428|  1.12k|        UC const* frac_end = p + answer.fraction.len();
  429|  20.4k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 19.3k, False: 1.12k]
  |  Branch (429:56): [True: 19.3k, False: 0]
  ------------------
  430|  19.3k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  19.3k|          ++p;
  432|  19.3k|        }
  433|  1.12k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  1.12k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  2.33k|    }
  437|  2.52k|  }
  438|  39.3k|  answer.exponent = exponent;
  439|  39.3k|  answer.mantissa = i;
  440|  39.3k|  return answer;
  441|  39.3k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|   216k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   216k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 21.2k, False: 194k]
  |  Branch (36:27): [True: 39.0k, False: 155k]
  ------------------
   37|   216k|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|  9.74k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  17.6k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 12.7k, False: 4.86k]
  |  Branch (249:43): [True: 7.86k, False: 4.88k]
  ------------------
  250|  7.86k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  7.86k|    p += 8;
  252|  7.86k|  }
  253|  9.74k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  12.7k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  12.7k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  12.7k|     0x8080808080808080));
  172|  12.7k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  20.6k|uint64_t read8_to_u64(const UC *chars) {
   54|  20.6k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  20.6k|  uint64_t val;
   63|  20.6k|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  20.6k|  return val;
   69|  20.6k|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  7.86k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  7.86k|  const uint64_t mask = 0x000000FF000000FF;
  148|  7.86k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  7.86k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  7.86k|  val -= 0x3030303030303030;
  151|  7.86k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  7.86k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  7.86k|  return uint32_t(val);
  154|  7.86k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   125k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   125k|  chars_format const fmt = options.format;
  277|   125k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   125k|  parsed_number_string_t<UC> answer;
  280|   125k|  answer.valid = false;
  281|   125k|  answer.too_many_digits = false;
  282|   125k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   125k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 120, False: 125k]
  ------------------
  287|    120|#endif
  288|    120|    ++p;
  289|    120|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 20, False: 100]
  ------------------
  290|     20|      return answer;
  291|     20|    }
  292|    100|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|    100|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 100]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|    100|    } else {
  297|    100|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 70, False: 30]
  |  Branch (297:30): [True: 60, False: 10]
  ------------------
  298|     60|        return answer;
  299|     60|      }
  300|    100|    }
  301|    100|  }
  302|   125k|  UC const * const start_digits = p;
  303|       |
  304|   125k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   215k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 204k, False: 11.4k]
  |  Branch (306:25): [True: 90.0k, False: 114k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  90.0k|    i = 10 * i +
  310|  90.0k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  90.0k|    ++p;
  312|  90.0k|  }
  313|   125k|  UC const * const end_of_integer_part = p;
  314|   125k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   125k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   125k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   125k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 125k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   125k|  int64_t exponent = 0;
  324|   125k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 114k, False: 11.4k]
  |  Branch (324:49): [True: 7.01k, False: 107k]
  ------------------
  325|   125k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 7.01k, False: 118k]
  ------------------
  326|  7.01k|    ++p;
  327|  7.01k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  7.01k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  73.2k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 70.9k, False: 2.25k]
  |  Branch (332:27): [True: 66.2k, False: 4.75k]
  ------------------
  333|  66.2k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  66.2k|      ++p;
  335|  66.2k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  66.2k|    }
  337|  7.01k|    exponent = before - p;
  338|  7.01k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  7.01k|    digit_count -= exponent;
  340|  7.01k|  }
  341|   125k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   125k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 125k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   125k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 98.0k, False: 27.4k]
  ------------------
  348|  98.0k|    return answer;
  349|  98.0k|  }
  350|  27.4k|  int64_t exp_number = 0;            // explicit exponential part
  351|  27.4k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 20.7k, False: 6.67k]
  ------------------
  352|  27.4k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 13.7k, False: 7.03k]
  ------------------
  353|  27.4k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 1.59k, False: 12.1k]
  |  Branch (353:29): [True: 480, False: 11.6k]
  ------------------
  354|  27.4k|       ||
  355|  27.4k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|  25.3k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 25.3k]
  ------------------
  356|  25.3k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  25.3k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.07k|    UC const * location_of_e = p;
  359|  2.07k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 1.59k, False: 480]
  |  Branch (359:28): [True: 480, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.07k|      ++p;
  361|  2.07k|    }
  362|  2.07k|    bool neg_exp = false;
  363|  2.07k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 1.93k, False: 140]
  |  Branch (363:24): [True: 214, False: 1.72k]
  ------------------
  364|    214|      neg_exp = true;
  365|    214|      ++p;
  366|  1.86k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 1.72k, False: 140]
  |  Branch (366:31): [True: 38, False: 1.68k]
  ------------------
  367|     38|      ++p;
  368|     38|    }
  369|  2.07k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 140, False: 1.93k]
  |  Branch (369:24): [True: 210, False: 1.72k]
  ------------------
  370|    350|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 350]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    350|      p = location_of_e;
  376|  1.72k|    } else {
  377|  22.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 21.5k, False: 764]
  |  Branch (377:29): [True: 20.6k, False: 965]
  ------------------
  378|  20.6k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  20.6k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 6.22k, False: 14.3k]
  ------------------
  380|  6.22k|          exp_number = 10 * exp_number + digit;
  381|  6.22k|        }
  382|  20.6k|        ++p;
  383|  20.6k|      }
  384|  1.72k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 204, False: 1.52k]
  ------------------
  385|  1.72k|      exponent += exp_number;
  386|  1.72k|    }
  387|  25.3k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  25.3k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 18.6k, False: 6.67k]
  |  Branch (389:44): [True: 0, False: 18.6k]
  ------------------
  390|  25.3k|  }
  391|  27.4k|  answer.lastmatch = p;
  392|  27.4k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  27.4k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 2.15k, False: 25.2k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  2.15k|    UC const * start = start_digits;
  405|  3.84k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.83k, False: 8]
  |  Branch (405:32): [True: 1.43k, False: 2.39k]
  |  Branch (405:53): [True: 250, False: 2.14k]
  ------------------
  406|  1.68k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 1.43k, False: 250]
  ------------------
  407|  1.68k|      start++;
  408|  1.68k|    }
  409|       |
  410|  2.15k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 2.04k, False: 113]
  ------------------
  411|  2.04k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  2.04k|      i = 0;
  416|  2.04k|      p = answer.integer.ptr;
  417|  2.04k|      UC const* int_end = p + answer.integer.len();
  418|  2.04k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  24.5k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 23.4k, False: 1.05k]
  |  Branch (419:54): [True: 22.4k, False: 984]
  ------------------
  420|  22.4k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  22.4k|        ++p;
  422|  22.4k|      }
  423|  2.04k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 1.05k, False: 984]
  ------------------
  424|  1.05k|        exponent = end_of_integer_part - p + exp_number;
  425|  1.05k|      }
  426|    984|      else { // We have a value with a fractional component.
  427|    984|        p = answer.fraction.ptr;
  428|    984|        UC const* frac_end = p + answer.fraction.len();
  429|  17.7k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 16.7k, False: 984]
  |  Branch (429:56): [True: 16.7k, False: 0]
  ------------------
  430|  16.7k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  16.7k|          ++p;
  432|  16.7k|        }
  433|    984|        exponent = answer.fraction.ptr - p + exp_number;
  434|    984|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  2.04k|    }
  437|  2.15k|  }
  438|  27.4k|  answer.exponent = exponent;
  439|  27.4k|  answer.mantissa = i;
  440|  27.4k|  return answer;
  441|  27.4k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   298k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   298k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 94.2k, False: 204k]
  |  Branch (36:27): [True: 25.7k, False: 178k]
  ------------------
   37|   298k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|  7.01k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  7.01k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  7.01k|    return;
  240|  7.01k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|  6.84k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|  6.84k|  adjusted_mantissa answer;
   96|  6.84k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 120, False: 6.72k]
  |  Branch (96:19): [True: 163, False: 6.56k]
  ------------------
   97|    283|    answer.power2 = 0;
   98|    283|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|    283|    return answer;
  101|    283|  }
  102|  6.56k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 1.23k, False: 5.33k]
  ------------------
  103|       |    // we want to get infinity:
  104|  1.23k|    answer.power2 = binary::infinite_power();
  105|  1.23k|    answer.mantissa = 0;
  106|  1.23k|    return answer;
  107|  1.23k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|  5.33k|  int lz = leading_zeroes(w);
  112|  5.33k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|  5.33k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|  5.33k|  int upperbit = int(product.high >> 63);
  130|       |
  131|  5.33k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|  5.33k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|  5.33k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 9, False: 5.32k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|      9|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 0, False: 9]
  ------------------
  137|      0|      answer.power2 = 0;
  138|      0|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|      0|      return answer;
  141|      0|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|      9|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|      9|    answer.mantissa += (answer.mantissa & 1); // round up
  147|      9|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|      9|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 9, False: 0]
  ------------------
  156|      9|    return answer;
  157|      9|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|  5.32k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 987, False: 4.33k]
  |  Branch (162:30): [True: 971, False: 16]
  |  Branch (162:77): [True: 847, False: 124]
  ------------------
  163|  5.32k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 488, False: 359]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|    488|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 54, False: 434]
  ------------------
  168|     54|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|     54|    }
  170|    488|  }
  171|       |
  172|  5.32k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|  5.32k|  answer.mantissa >>= 1;
  174|  5.32k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 18, False: 5.30k]
  ------------------
  175|     18|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|     18|    answer.power2++; // undo previous addition
  177|     18|  }
  178|       |
  179|  5.32k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|  5.32k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 758, False: 4.56k]
  ------------------
  181|    758|    answer.power2 = binary::infinite_power();
  182|    758|    answer.mantissa = 0;
  183|    758|  }
  184|  5.32k|  return answer;
  185|  5.33k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|  5.33k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|  5.33k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|  5.33k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|  5.33k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|  5.33k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|  5.33k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|  5.33k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 54, False: 5.27k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|     54|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|     54|    firstproduct.low += secondproduct.high;
   35|     54|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 54, False: 0]
  ------------------
   36|     54|      firstproduct.high++;
   37|     54|    }
   38|     54|  }
   39|  5.33k|  return firstproduct;
   40|  5.33k|}
_ZN10fast_float6detail5powerEi:
   58|  10.3k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  10.3k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  10.3k|  }
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|  5.97k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|  5.97k|  adjusted_mantissa answer;
   96|  5.97k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 55, False: 5.91k]
  |  Branch (96:19): [True: 127, False: 5.78k]
  ------------------
   97|    182|    answer.power2 = 0;
   98|    182|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|    182|    return answer;
  101|    182|  }
  102|  5.78k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 778, False: 5.01k]
  ------------------
  103|       |    // we want to get infinity:
  104|    778|    answer.power2 = binary::infinite_power();
  105|    778|    answer.mantissa = 0;
  106|    778|    return answer;
  107|    778|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|  5.01k|  int lz = leading_zeroes(w);
  112|  5.01k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|  5.01k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|  5.01k|  int upperbit = int(product.high >> 63);
  130|       |
  131|  5.01k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|  5.01k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|  5.01k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 0, False: 5.01k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|      0|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 0, False: 0]
  ------------------
  137|      0|      answer.power2 = 0;
  138|      0|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|      0|      return answer;
  141|      0|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|      0|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|      0|    answer.mantissa += (answer.mantissa & 1); // round up
  147|      0|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|      0|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 0, False: 0]
  ------------------
  156|      0|    return answer;
  157|      0|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|  5.01k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 391, False: 4.62k]
  |  Branch (162:30): [True: 355, False: 36]
  |  Branch (162:77): [True: 309, False: 46]
  ------------------
  163|  5.01k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 74, False: 235]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|     74|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 0, False: 74]
  ------------------
  168|      0|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|      0|    }
  170|     74|  }
  171|       |
  172|  5.01k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|  5.01k|  answer.mantissa >>= 1;
  174|  5.01k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 0, False: 5.01k]
  ------------------
  175|      0|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|      0|    answer.power2++; // undo previous addition
  177|      0|  }
  178|       |
  179|  5.01k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|  5.01k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 18, False: 4.99k]
  ------------------
  181|     18|    answer.power2 = binary::infinite_power();
  182|     18|    answer.mantissa = 0;
  183|     18|  }
  184|  5.01k|  return answer;
  185|  5.01k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|  5.01k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|  5.01k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|  5.01k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|  5.01k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|  5.01k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|  5.01k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|  5.01k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 122, False: 4.88k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|    122|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|    122|    firstproduct.low += secondproduct.high;
   35|    122|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 36, False: 86]
  ------------------
   36|     36|      firstproduct.high++;
   37|     36|    }
   38|    122|  }
   39|  5.01k|  return firstproduct;
   40|  5.01k|}

_ZN10fast_float4spanIKcEC2Ev:
  224|   139k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  223|  79.3k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  226|  3.46k|  constexpr size_t len() const noexcept {
  227|  3.46k|    return length;
  228|  3.46k|  }
_ZN10fast_float21fastfloat_strncasecmpIcEEbPKT_S3_m:
  206|  58.5k|fastfloat_strncasecmp(UC const * input1, UC const * input2, size_t length) {
  207|  58.5k|  char running_diff{0};
  208|   234k|  for (size_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (208:22): [True: 175k, False: 58.5k]
  ------------------
  209|   175k|    running_diff |= (char(input1[i]) ^ char(input2[i]));
  210|   175k|  }
  211|  58.5k|  return (running_diff == 0) || (running_diff == 32);
  ------------------
  |  Branch (211:10): [True: 0, False: 58.5k]
  |  Branch (211:33): [True: 20, False: 58.5k]
  ------------------
  212|  58.5k|}
float_reader.cpp:_ZN10fast_floatL13str_const_nanIcEEPKT_v:
  648|  29.2k|{
  649|  29.2k|    return "nan";
  650|  29.2k|}
float_reader.cpp:_ZN10fast_floatL13str_const_infIcEEPKT_v:
  673|  29.2k|{
  674|  29.2k|    return "infinity";
  675|  29.2k|}
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  453|  33.2k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  454|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  455|       |  return 0;
  456|       |#else
  457|  33.2k|  return -10;
  458|  33.2k|#endif
  459|  33.2k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  504|  31.5k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  505|  31.5k|  return 10;
  506|  31.5k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  518|  29.4k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  519|  29.4k|  return uint64_t(2) << mantissa_explicit_bits();
  520|  29.4k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  464|  50.6k|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  465|  50.6k|  return 23;
  466|  50.6k|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  535|  28.5k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  536|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  537|  28.5k|  return (void)powers_of_ten[0], powers_of_ten[power];
  538|  28.5k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  336|  12.8k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  555|  6.72k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  556|  6.72k|  return -65;
  557|  6.72k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  546|  6.56k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  547|  6.56k|  return 38;
  548|  6.56k|}
_ZN10fast_float14leading_zeroesEm:
  257|  10.3k|int leading_zeroes(uint64_t input_num) {
  258|  10.3k|  assert(input_num > 0);
  259|  10.3k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (259:7): [Folded - Ignored]
  ------------------
  260|      0|    return leading_zeroes_generic(input_num);
  261|      0|  }
  262|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  263|       |  #if defined(_M_X64) || defined(_M_ARM64)
  264|       |  unsigned long leading_zero = 0;
  265|       |  // Search the mask data from most significant bit (MSB)
  266|       |  // to least significant bit (LSB) for a set bit (1).
  267|       |  _BitScanReverse64(&leading_zero, input_num);
  268|       |  return (int)(63 - leading_zero);
  269|       |  #else
  270|       |  return leading_zeroes_generic(input_num);
  271|       |  #endif
  272|       |#else
  273|  10.3k|  return __builtin_clzll(input_num);
  274|  10.3k|#endif
  275|  10.3k|}
_ZN10fast_float19full_multiplicationEmm:
  309|  10.5k|value128 full_multiplication(uint64_t a, uint64_t b) {
  310|  10.5k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (310:7): [Folded - Ignored]
  ------------------
  311|      0|    value128 answer;
  312|      0|    answer.low = umul128_generic(a, b, &answer.high);
  313|      0|    return answer;
  314|      0|  }
  315|  10.5k|  value128 answer;
  316|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  317|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  318|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  319|       |  answer.high = __umulh(a, b);
  320|       |  answer.low = a * b;
  321|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  322|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  323|       |#elif defined(FASTFLOAT_64BIT)
  324|  10.5k|  __uint128_t r = ((__uint128_t)a) * b;
  325|  10.5k|  answer.low = uint64_t(r);
  326|  10.5k|  answer.high = uint64_t(r >> 64);
  327|       |#else
  328|       |  answer.low = umul128_generic(a, b, &answer.high);
  329|       |#endif
  330|  10.5k|  return answer;
  331|  10.5k|}
_ZN10fast_float8value128C2Ev:
  240|  10.5k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  487|  5.33k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  488|  5.33k|  return -127;
  489|  5.33k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  480|    987|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  481|    987|  return -17;
  482|    987|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  472|    971|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  473|    971|  return 10;
  474|    971|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  340|  4.37k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  341|  4.37k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (341:12): [True: 0, False: 4.37k]
  |  Branch (341:38): [True: 0, False: 4.37k]
  ------------------
  342|  4.37k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  595|  4.73k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|  4.73k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|  4.73k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|  4.73k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|  4.73k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|  4.73k|  ::memcpy(&value, &word, sizeof(T));
  604|  4.73k|#endif
  605|  4.73k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  499|  4.73k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  494|  11.8k|template <> inline constexpr int binary_format<float>::infinite_power() {
  495|  11.8k|  return 0xFF;
  496|  11.8k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   42|  69.7k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  224|   251k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  223|   132k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  226|  3.02k|  constexpr size_t len() const noexcept {
  227|  3.02k|    return length;
  228|  3.02k|  }
_ZN10fast_float21fastfloat_strncasecmpIDiEEbPKT_S3_m:
  206|   182k|fastfloat_strncasecmp(UC const * input1, UC const * input2, size_t length) {
  207|   182k|  char running_diff{0};
  208|   728k|  for (size_t i = 0; i < length; ++i) {
  ------------------
  |  Branch (208:22): [True: 546k, False: 182k]
  ------------------
  209|   546k|    running_diff |= (char(input1[i]) ^ char(input2[i]));
  210|   546k|  }
  211|   182k|  return (running_diff == 0) || (running_diff == 32);
  ------------------
  |  Branch (211:10): [True: 130, False: 181k]
  |  Branch (211:33): [True: 50, False: 181k]
  ------------------
  212|   182k|}
float_reader.cpp:_ZN10fast_floatL13str_const_nanIDiEEPKT_v:
  663|  91.0k|{
  664|  91.0k|    return U"nan";
  665|  91.0k|}
float_reader.cpp:_ZN10fast_floatL13str_const_infIDiEEPKT_v:
  688|  91.0k|{
  689|  91.0k|    return U"infinity";
  690|  91.0k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   42|   125k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  445|  33.5k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  446|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  447|       |  return 0;
  448|       |#else
  449|  33.5k|  return -22;
  450|  33.5k|#endif
  451|  33.5k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  501|  33.3k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  502|  33.3k|  return 22;
  503|  33.3k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  508|  30.1k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  509|  30.1k|  return uint64_t(2) << mantissa_explicit_bits();
  510|  30.1k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  461|  48.9k|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  462|  48.9k|  return 52;
  463|  48.9k|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  530|  29.8k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  531|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  532|  29.8k|  return (void)powers_of_ten[0], powers_of_ten[power];
  533|  29.8k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  551|  5.91k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  552|  5.91k|  return -342;
  553|  5.91k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  542|  5.78k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  543|  5.78k|  return 308;
  544|  5.78k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  484|  5.01k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  485|  5.01k|  return -1023;
  486|  5.01k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  476|    391|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  477|    391|  return -4;
  478|    391|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  468|    355|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  469|    355|  return 23;
  470|    355|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  595|  3.70k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|  3.70k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|  3.70k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|  3.70k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|  3.70k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|  3.70k|  ::memcpy(&value, &word, sizeof(T));
  604|  3.70k|#endif
  605|  3.70k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  498|  3.70k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  491|  9.38k|template <> inline constexpr int binary_format<double>::infinite_power() {
  492|  9.38k|  return 0x7FF;
  493|  9.38k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  34.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  34.7k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  34.7k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  34.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  34.7k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  34.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  34.7k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  34.7k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 34.7k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  34.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  34.7k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 15.1k, False: 19.5k]
  ------------------
  164|  15.1k|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 15.1k]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|  15.1k|    } else {
  169|  15.1k|      return detail::parse_infnan(first, last, value);
  170|  15.1k|    }
  171|  15.1k|  }
  172|       |
  173|  19.5k|  answer.ec = std::errc(); // be optimistic
  174|  19.5k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  19.5k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 18.6k, False: 921]
  |  Branch (180:69): [True: 17.6k, False: 991]
  |  Branch (180:131): [True: 17.4k, False: 194]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|  17.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 17.4k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|  17.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 16.9k, False: 542]
  ------------------
  192|  16.9k|        value = T(pns.mantissa);
  193|  16.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 1.92k, False: 15.0k]
  ------------------
  194|  15.0k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|  16.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 15, False: 16.9k]
  ------------------
  196|  16.9k|        return answer;
  197|  16.9k|      }
  198|  17.4k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|  17.4k|  }
  215|  2.64k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  2.64k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 1.12k, False: 1.52k]
  |  Branch (216:29): [True: 1.12k, False: 0]
  ------------------
  217|  1.12k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 0, False: 1.12k]
  ------------------
  218|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|      0|    }
  220|  1.12k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  2.64k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 0, False: 2.64k]
  ------------------
  224|  2.64k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  2.64k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 2.57k, False: 74]
  |  Branch (226:29): [True: 842, False: 1.73k]
  |  Branch (226:49): [True: 86, False: 756]
  |  Branch (226:68): [True: 747, False: 1.81k]
  ------------------
  227|    833|    answer.ec = std::errc::result_out_of_range;
  228|    833|  }
  229|  2.64k|  return answer;
  230|  19.5k|}
_ZN10fast_float6detail12parse_infnanIfcEENS_19from_chars_result_tIT0_EEPKS3_S6_RT_:
   25|  15.1k|parse_infnan(UC const * first, UC const * last, T &value)  noexcept  {
   26|  15.1k|  from_chars_result_t<UC> answer{};
   27|  15.1k|  answer.ptr = first;
   28|  15.1k|  answer.ec = std::errc(); // be optimistic
   29|  15.1k|  bool minusSign = false;
   30|  15.1k|  if (*first == UC('-')) { // assume first < last, so dereference without checks; C++17 20.19.3.(7.1) explicitly forbids '+' here
  ------------------
  |  Branch (30:7): [True: 60, False: 15.0k]
  ------------------
   31|     60|      minusSign = true;
   32|     60|      ++first;
   33|     60|  }
   34|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
   35|       |  if (*first == UC('+')) {
   36|       |      ++first;
   37|       |  }
   38|       |#endif
   39|  15.1k|  if (last - first >= 3) {
  ------------------
  |  Branch (39:7): [True: 14.5k, False: 560]
  ------------------
   40|  14.5k|    if (fastfloat_strncasecmp(first, str_const_nan<UC>(), 3)) {
  ------------------
  |  Branch (40:9): [True: 10, False: 14.5k]
  ------------------
   41|     10|      answer.ptr = (first += 3);
   42|     10|      value = minusSign ? -std::numeric_limits<T>::quiet_NaN() : std::numeric_limits<T>::quiet_NaN();
  ------------------
  |  Branch (42:15): [True: 10, False: 0]
  ------------------
   43|       |      // Check for possible nan(n-char-seq-opt), C++17 20.19.3.7, C11 7.20.1.3.3. At least MSVC produces nan(ind) and nan(snan).
   44|     10|      if(first != last && *first == UC('(')) {
  ------------------
  |  Branch (44:10): [True: 10, False: 0]
  |  Branch (44:27): [True: 0, False: 10]
  ------------------
   45|      0|        for(UC const * ptr = first + 1; ptr != last; ++ptr) {
  ------------------
  |  Branch (45:41): [True: 0, False: 0]
  ------------------
   46|      0|          if (*ptr == UC(')')) {
  ------------------
  |  Branch (46:15): [True: 0, False: 0]
  ------------------
   47|      0|            answer.ptr = ptr + 1; // valid nan(n-char-seq-opt)
   48|      0|            break;
   49|      0|          }
   50|      0|          else if(!((UC('a') <= *ptr && *ptr <= UC('z')) || (UC('A') <= *ptr && *ptr <= UC('Z')) || (UC('0') <= *ptr && *ptr <= UC('9')) || *ptr == UC('_')))
  ------------------
  |  Branch (50:22): [True: 0, False: 0]
  |  Branch (50:41): [True: 0, False: 0]
  |  Branch (50:62): [True: 0, False: 0]
  |  Branch (50:81): [True: 0, False: 0]
  |  Branch (50:102): [True: 0, False: 0]
  |  Branch (50:121): [True: 0, False: 0]
  |  Branch (50:141): [True: 0, False: 0]
  ------------------
   51|      0|            break; // forbidden char, not nan(n-char-seq-opt)
   52|      0|        }
   53|      0|      }
   54|     10|      return answer;
   55|     10|    }
   56|  14.5k|    if (fastfloat_strncasecmp(first, str_const_inf<UC>(), 3)) {
  ------------------
  |  Branch (56:9): [True: 0, False: 14.5k]
  ------------------
   57|      0|      if ((last - first >= 8) && fastfloat_strncasecmp(first + 3, str_const_inf<UC>() + 3, 5)) {
  ------------------
  |  Branch (57:11): [True: 0, False: 0]
  |  Branch (57:34): [True: 0, False: 0]
  ------------------
   58|      0|        answer.ptr = first + 8;
   59|      0|      } else {
   60|      0|        answer.ptr = first + 3;
   61|      0|      }
   62|      0|      value = minusSign ? -std::numeric_limits<T>::infinity() : std::numeric_limits<T>::infinity();
  ------------------
  |  Branch (62:15): [True: 0, False: 0]
  ------------------
   63|      0|      return answer;
   64|      0|    }
   65|  14.5k|  }
   66|  15.1k|  answer.ec = std::errc::invalid_argument;
   67|  15.1k|  return answer;
   68|  15.1k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   75|  59.5k|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   76|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   77|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   78|       |  return false;
   79|       |#endif
   80|       |  // See
   81|       |  // A fast function to check your floating-point rounding mode
   82|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   83|       |  //
   84|       |  // This function is meant to be equivalent to :
   85|       |  // prior: #include <cfenv>
   86|       |  //  return fegetround() == FE_TONEAREST;
   87|       |  // However, it is expected to be much faster than the fegetround()
   88|       |  // function call.
   89|       |  //
   90|       |  // The volatile keywoard prevents the compiler from computing the function
   91|       |  // at compile-time.
   92|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   93|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   94|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   95|       |  // precision, as in 387 instructions).
   96|  59.5k|  static volatile float fmin = std::numeric_limits<float>::min();
   97|  59.5k|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   98|       |  //
   99|       |  // Explanation:
  100|       |  // Only when fegetround() == FE_TONEAREST do we have that
  101|       |  // fmin + 1.0f == 1.0f - fmin.
  102|       |  //
  103|       |  // FE_UPWARD:
  104|       |  //  fmin + 1.0f > 1
  105|       |  //  1.0f - fmin == 1
  106|       |  //
  107|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  108|       |  //  fmin + 1.0f == 1
  109|       |  //  1.0f - fmin < 1
  110|       |  //
  111|       |  // Note: This may fail to be accurate if fast-math has been
  112|       |  // enabled, as rounding conventions may not apply.
  113|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  114|       |  #   pragma warning(push)
  115|       |  //  todo: is there a VS warning?
  116|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  117|       |  #elif defined(__clang__)
  118|  59.5k|  #   pragma clang diagnostic push
  119|  59.5k|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  120|       |  #elif defined(__GNUC__)
  121|       |  #   pragma GCC diagnostic push
  122|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  123|       |  #endif
  124|  59.5k|  return (fmini + 1.0f == 1.0f - fmini);
  125|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  126|       |  #   pragma warning(pop)
  127|       |  #elif defined(__clang__)
  128|  59.5k|  #   pragma clang diagnostic pop
  129|       |  #elif defined(__GNUC__)
  130|       |  #   pragma GCC diagnostic pop
  131|       |  #endif
  132|  59.5k|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  62.6k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  62.6k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  62.6k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  62.6k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  62.6k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  62.6k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  62.6k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  62.6k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 62.6k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  62.6k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  62.6k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 49.0k, False: 13.6k]
  ------------------
  164|  49.0k|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 49.0k]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|  49.0k|    } else {
  169|  49.0k|      return detail::parse_infnan(first, last, value);
  170|  49.0k|    }
  171|  49.0k|  }
  172|       |
  173|  13.6k|  answer.ec = std::errc(); // be optimistic
  174|  13.6k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  13.6k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 12.9k, False: 751]
  |  Branch (180:69): [True: 12.1k, False: 801]
  |  Branch (180:131): [True: 11.9k, False: 178]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|  11.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 11.9k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|  11.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 11.5k, False: 357]
  ------------------
  192|  11.5k|        value = T(pns.mantissa);
  193|  11.5k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 1.35k, False: 10.2k]
  ------------------
  194|  10.2k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|  11.5k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 15, False: 11.5k]
  ------------------
  196|  11.5k|        return answer;
  197|  11.5k|      }
  198|  11.9k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|  11.9k|  }
  215|  2.08k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  2.08k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 985, False: 1.10k]
  |  Branch (216:29): [True: 985, False: 0]
  ------------------
  217|    985|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 0, False: 985]
  ------------------
  218|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|      0|    }
  220|    985|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  2.08k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 0, False: 2.08k]
  ------------------
  224|  2.08k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  2.08k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 2.04k, False: 46]
  |  Branch (226:29): [True: 693, False: 1.34k]
  |  Branch (226:49): [True: 77, False: 616]
  |  Branch (226:68): [True: 607, False: 1.40k]
  ------------------
  227|    684|    answer.ec = std::errc::result_out_of_range;
  228|    684|  }
  229|  2.08k|  return answer;
  230|  13.6k|}
_ZN10fast_float6detail12parse_infnanIfDiEENS_19from_chars_result_tIT0_EEPKS3_S6_RT_:
   25|  49.0k|parse_infnan(UC const * first, UC const * last, T &value)  noexcept  {
   26|  49.0k|  from_chars_result_t<UC> answer{};
   27|  49.0k|  answer.ptr = first;
   28|  49.0k|  answer.ec = std::errc(); // be optimistic
   29|  49.0k|  bool minusSign = false;
   30|  49.0k|  if (*first == UC('-')) { // assume first < last, so dereference without checks; C++17 20.19.3.(7.1) explicitly forbids '+' here
  ------------------
  |  Branch (30:7): [True: 45, False: 48.9k]
  ------------------
   31|     45|      minusSign = true;
   32|     45|      ++first;
   33|     45|  }
   34|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
   35|       |  if (*first == UC('+')) {
   36|       |      ++first;
   37|       |  }
   38|       |#endif
   39|  49.0k|  if (last - first >= 3) {
  ------------------
  |  Branch (39:7): [True: 45.4k, False: 3.56k]
  ------------------
   40|  45.4k|    if (fastfloat_strncasecmp(first, str_const_nan<UC>(), 3)) {
  ------------------
  |  Branch (40:9): [True: 30, False: 45.4k]
  ------------------
   41|     30|      answer.ptr = (first += 3);
   42|     30|      value = minusSign ? -std::numeric_limits<T>::quiet_NaN() : std::numeric_limits<T>::quiet_NaN();
  ------------------
  |  Branch (42:15): [True: 10, False: 20]
  ------------------
   43|       |      // Check for possible nan(n-char-seq-opt), C++17 20.19.3.7, C11 7.20.1.3.3. At least MSVC produces nan(ind) and nan(snan).
   44|     30|      if(first != last && *first == UC('(')) {
  ------------------
  |  Branch (44:10): [True: 25, False: 5]
  |  Branch (44:27): [True: 0, False: 25]
  ------------------
   45|      0|        for(UC const * ptr = first + 1; ptr != last; ++ptr) {
  ------------------
  |  Branch (45:41): [True: 0, False: 0]
  ------------------
   46|      0|          if (*ptr == UC(')')) {
  ------------------
  |  Branch (46:15): [True: 0, False: 0]
  ------------------
   47|      0|            answer.ptr = ptr + 1; // valid nan(n-char-seq-opt)
   48|      0|            break;
   49|      0|          }
   50|      0|          else if(!((UC('a') <= *ptr && *ptr <= UC('z')) || (UC('A') <= *ptr && *ptr <= UC('Z')) || (UC('0') <= *ptr && *ptr <= UC('9')) || *ptr == UC('_')))
  ------------------
  |  Branch (50:22): [True: 0, False: 0]
  |  Branch (50:41): [True: 0, False: 0]
  |  Branch (50:62): [True: 0, False: 0]
  |  Branch (50:81): [True: 0, False: 0]
  |  Branch (50:102): [True: 0, False: 0]
  |  Branch (50:121): [True: 0, False: 0]
  |  Branch (50:141): [True: 0, False: 0]
  ------------------
   51|      0|            break; // forbidden char, not nan(n-char-seq-opt)
   52|      0|        }
   53|      0|      }
   54|     30|      return answer;
   55|     30|    }
   56|  45.4k|    if (fastfloat_strncasecmp(first, str_const_inf<UC>(), 3)) {
  ------------------
  |  Branch (56:9): [True: 60, False: 45.3k]
  ------------------
   57|     60|      if ((last - first >= 8) && fastfloat_strncasecmp(first + 3, str_const_inf<UC>() + 3, 5)) {
  ------------------
  |  Branch (57:11): [True: 40, False: 20]
  |  Branch (57:34): [True: 0, False: 40]
  ------------------
   58|      0|        answer.ptr = first + 8;
   59|     60|      } else {
   60|     60|        answer.ptr = first + 3;
   61|     60|      }
   62|     60|      value = minusSign ? -std::numeric_limits<T>::infinity() : std::numeric_limits<T>::infinity();
  ------------------
  |  Branch (62:15): [True: 0, False: 60]
  ------------------
   63|     60|      return answer;
   64|     60|    }
   65|  45.4k|  }
   66|  48.9k|  answer.ec = std::errc::invalid_argument;
   67|  48.9k|  return answer;
   68|  49.0k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  35.0k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  35.0k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  35.0k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  35.0k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  35.0k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  35.0k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  35.0k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  35.0k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 35.0k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  35.0k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  35.0k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 15.3k, False: 19.7k]
  ------------------
  164|  15.3k|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 15.3k]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|  15.3k|    } else {
  169|  15.3k|      return detail::parse_infnan(first, last, value);
  170|  15.3k|    }
  171|  15.3k|  }
  172|       |
  173|  19.7k|  answer.ec = std::errc(); // be optimistic
  174|  19.7k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  19.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 19.6k, False: 100]
  |  Branch (180:69): [True: 18.7k, False: 873]
  |  Branch (180:131): [True: 17.9k, False: 856]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|  17.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 17.9k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|  17.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 17.7k, False: 195]
  ------------------
  192|  17.7k|        value = T(pns.mantissa);
  193|  17.7k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 2.30k, False: 15.4k]
  ------------------
  194|  15.4k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|  17.7k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 15, False: 17.7k]
  ------------------
  196|  17.7k|        return answer;
  197|  17.7k|      }
  198|  17.9k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|  17.9k|  }
  215|  2.02k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  2.02k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 1.20k, False: 816]
  |  Branch (216:29): [True: 1.20k, False: 0]
  ------------------
  217|  1.20k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 0, False: 1.20k]
  ------------------
  218|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|      0|    }
  220|  1.20k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  2.02k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 0, False: 2.02k]
  ------------------
  224|  2.02k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  2.02k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 1.99k, False: 32]
  |  Branch (226:29): [True: 477, False: 1.51k]
  |  Branch (226:49): [True: 68, False: 409]
  |  Branch (226:68): [True: 409, False: 1.54k]
  ------------------
  227|    477|    answer.ec = std::errc::result_out_of_range;
  228|    477|  }
  229|  2.02k|  return answer;
  230|  19.7k|}
_ZN10fast_float6detail12parse_infnanIdcEENS_19from_chars_result_tIT0_EEPKS3_S6_RT_:
   25|  15.3k|parse_infnan(UC const * first, UC const * last, T &value)  noexcept  {
   26|  15.3k|  from_chars_result_t<UC> answer{};
   27|  15.3k|  answer.ptr = first;
   28|  15.3k|  answer.ec = std::errc(); // be optimistic
   29|  15.3k|  bool minusSign = false;
   30|  15.3k|  if (*first == UC('-')) { // assume first < last, so dereference without checks; C++17 20.19.3.(7.1) explicitly forbids '+' here
  ------------------
  |  Branch (30:7): [True: 60, False: 15.2k]
  ------------------
   31|     60|      minusSign = true;
   32|     60|      ++first;
   33|     60|  }
   34|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
   35|       |  if (*first == UC('+')) {
   36|       |      ++first;
   37|       |  }
   38|       |#endif
   39|  15.3k|  if (last - first >= 3) {
  ------------------
  |  Branch (39:7): [True: 14.7k, False: 585]
  ------------------
   40|  14.7k|    if (fastfloat_strncasecmp(first, str_const_nan<UC>(), 3)) {
  ------------------
  |  Branch (40:9): [True: 10, False: 14.7k]
  ------------------
   41|     10|      answer.ptr = (first += 3);
   42|     10|      value = minusSign ? -std::numeric_limits<T>::quiet_NaN() : std::numeric_limits<T>::quiet_NaN();
  ------------------
  |  Branch (42:15): [True: 10, False: 0]
  ------------------
   43|       |      // Check for possible nan(n-char-seq-opt), C++17 20.19.3.7, C11 7.20.1.3.3. At least MSVC produces nan(ind) and nan(snan).
   44|     10|      if(first != last && *first == UC('(')) {
  ------------------
  |  Branch (44:10): [True: 10, False: 0]
  |  Branch (44:27): [True: 0, False: 10]
  ------------------
   45|      0|        for(UC const * ptr = first + 1; ptr != last; ++ptr) {
  ------------------
  |  Branch (45:41): [True: 0, False: 0]
  ------------------
   46|      0|          if (*ptr == UC(')')) {
  ------------------
  |  Branch (46:15): [True: 0, False: 0]
  ------------------
   47|      0|            answer.ptr = ptr + 1; // valid nan(n-char-seq-opt)
   48|      0|            break;
   49|      0|          }
   50|      0|          else if(!((UC('a') <= *ptr && *ptr <= UC('z')) || (UC('A') <= *ptr && *ptr <= UC('Z')) || (UC('0') <= *ptr && *ptr <= UC('9')) || *ptr == UC('_')))
  ------------------
  |  Branch (50:22): [True: 0, False: 0]
  |  Branch (50:41): [True: 0, False: 0]
  |  Branch (50:62): [True: 0, False: 0]
  |  Branch (50:81): [True: 0, False: 0]
  |  Branch (50:102): [True: 0, False: 0]
  |  Branch (50:121): [True: 0, False: 0]
  |  Branch (50:141): [True: 0, False: 0]
  ------------------
   51|      0|            break; // forbidden char, not nan(n-char-seq-opt)
   52|      0|        }
   53|      0|      }
   54|     10|      return answer;
   55|     10|    }
   56|  14.7k|    if (fastfloat_strncasecmp(first, str_const_inf<UC>(), 3)) {
  ------------------
  |  Branch (56:9): [True: 0, False: 14.7k]
  ------------------
   57|      0|      if ((last - first >= 8) && fastfloat_strncasecmp(first + 3, str_const_inf<UC>() + 3, 5)) {
  ------------------
  |  Branch (57:11): [True: 0, False: 0]
  |  Branch (57:34): [True: 0, False: 0]
  ------------------
   58|      0|        answer.ptr = first + 8;
   59|      0|      } else {
   60|      0|        answer.ptr = first + 3;
   61|      0|      }
   62|      0|      value = minusSign ? -std::numeric_limits<T>::infinity() : std::numeric_limits<T>::infinity();
  ------------------
  |  Branch (62:15): [True: 0, False: 0]
  ------------------
   63|      0|      return answer;
   64|      0|    }
   65|  14.7k|  }
   66|  15.2k|  answer.ec = std::errc::invalid_argument;
   67|  15.2k|  return answer;
   68|  15.3k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  62.9k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  62.9k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  62.9k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  62.9k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  62.9k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  62.9k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  62.9k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  62.9k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 62.9k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  62.9k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  62.9k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 49.1k, False: 13.7k]
  ------------------
  164|  49.1k|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 49.1k]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|  49.1k|    } else {
  169|  49.1k|      return detail::parse_infnan(first, last, value);
  170|  49.1k|    }
  171|  49.1k|  }
  172|       |
  173|  13.7k|  answer.ec = std::errc(); // be optimistic
  174|  13.7k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  13.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 13.6k, False: 82]
  |  Branch (180:69): [True: 12.9k, False: 715]
  |  Branch (180:131): [True: 12.2k, False: 741]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|  12.2k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 12.2k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|  12.2k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 12.0k, False: 144]
  ------------------
  192|  12.0k|        value = T(pns.mantissa);
  193|  12.0k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 1.55k, False: 10.5k]
  ------------------
  194|  10.5k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|  12.0k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 15, False: 12.0k]
  ------------------
  196|  12.0k|        return answer;
  197|  12.0k|      }
  198|  12.2k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|  12.2k|  }
  215|  1.68k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  1.68k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 1.05k, False: 625]
  |  Branch (216:29): [True: 1.05k, False: 0]
  ------------------
  217|  1.05k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 0, False: 1.05k]
  ------------------
  218|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|      0|    }
  220|  1.05k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  1.68k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 0, False: 1.68k]
  ------------------
  224|  1.68k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  1.68k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 1.65k, False: 23]
  |  Branch (226:29): [True: 382, False: 1.27k]
  |  Branch (226:49): [True: 59, False: 323]
  |  Branch (226:68): [True: 323, False: 1.30k]
  ------------------
  227|    382|    answer.ec = std::errc::result_out_of_range;
  228|    382|  }
  229|  1.68k|  return answer;
  230|  13.7k|}
_ZN10fast_float6detail12parse_infnanIdDiEENS_19from_chars_result_tIT0_EEPKS3_S6_RT_:
   25|  49.1k|parse_infnan(UC const * first, UC const * last, T &value)  noexcept  {
   26|  49.1k|  from_chars_result_t<UC> answer{};
   27|  49.1k|  answer.ptr = first;
   28|  49.1k|  answer.ec = std::errc(); // be optimistic
   29|  49.1k|  bool minusSign = false;
   30|  49.1k|  if (*first == UC('-')) { // assume first < last, so dereference without checks; C++17 20.19.3.(7.1) explicitly forbids '+' here
  ------------------
  |  Branch (30:7): [True: 45, False: 49.1k]
  ------------------
   31|     45|      minusSign = true;
   32|     45|      ++first;
   33|     45|  }
   34|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
   35|       |  if (*first == UC('+')) {
   36|       |      ++first;
   37|       |  }
   38|       |#endif
   39|  49.1k|  if (last - first >= 3) {
  ------------------
  |  Branch (39:7): [True: 45.5k, False: 3.58k]
  ------------------
   40|  45.5k|    if (fastfloat_strncasecmp(first, str_const_nan<UC>(), 3)) {
  ------------------
  |  Branch (40:9): [True: 30, False: 45.5k]
  ------------------
   41|     30|      answer.ptr = (first += 3);
   42|     30|      value = minusSign ? -std::numeric_limits<T>::quiet_NaN() : std::numeric_limits<T>::quiet_NaN();
  ------------------
  |  Branch (42:15): [True: 10, False: 20]
  ------------------
   43|       |      // Check for possible nan(n-char-seq-opt), C++17 20.19.3.7, C11 7.20.1.3.3. At least MSVC produces nan(ind) and nan(snan).
   44|     30|      if(first != last && *first == UC('(')) {
  ------------------
  |  Branch (44:10): [True: 25, False: 5]
  |  Branch (44:27): [True: 0, False: 25]
  ------------------
   45|      0|        for(UC const * ptr = first + 1; ptr != last; ++ptr) {
  ------------------
  |  Branch (45:41): [True: 0, False: 0]
  ------------------
   46|      0|          if (*ptr == UC(')')) {
  ------------------
  |  Branch (46:15): [True: 0, False: 0]
  ------------------
   47|      0|            answer.ptr = ptr + 1; // valid nan(n-char-seq-opt)
   48|      0|            break;
   49|      0|          }
   50|      0|          else if(!((UC('a') <= *ptr && *ptr <= UC('z')) || (UC('A') <= *ptr && *ptr <= UC('Z')) || (UC('0') <= *ptr && *ptr <= UC('9')) || *ptr == UC('_')))
  ------------------
  |  Branch (50:22): [True: 0, False: 0]
  |  Branch (50:41): [True: 0, False: 0]
  |  Branch (50:62): [True: 0, False: 0]
  |  Branch (50:81): [True: 0, False: 0]
  |  Branch (50:102): [True: 0, False: 0]
  |  Branch (50:121): [True: 0, False: 0]
  |  Branch (50:141): [True: 0, False: 0]
  ------------------
   51|      0|            break; // forbidden char, not nan(n-char-seq-opt)
   52|      0|        }
   53|      0|      }
   54|     30|      return answer;
   55|     30|    }
   56|  45.5k|    if (fastfloat_strncasecmp(first, str_const_inf<UC>(), 3)) {
  ------------------
  |  Branch (56:9): [True: 60, False: 45.4k]
  ------------------
   57|     60|      if ((last - first >= 8) && fastfloat_strncasecmp(first + 3, str_const_inf<UC>() + 3, 5)) {
  ------------------
  |  Branch (57:11): [True: 40, False: 20]
  |  Branch (57:34): [True: 0, False: 40]
  ------------------
   58|      0|        answer.ptr = first + 8;
   59|     60|      } else {
   60|     60|        answer.ptr = first + 3;
   61|     60|      }
   62|     60|      value = minusSign ? -std::numeric_limits<T>::infinity() : std::numeric_limits<T>::infinity();
  ------------------
  |  Branch (62:15): [True: 0, False: 60]
  ------------------
   63|     60|      return answer;
   64|     60|    }
   65|  45.5k|  }
   66|  49.0k|  answer.ec = std::errc::invalid_argument;
   67|  49.0k|  return answer;
   68|  49.1k|}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  41.0M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   263k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   266k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   271k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   271k|  return idx < lenminusstep;
   70|   271k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  4.45k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  4.45k|  return &buf[idx];
   75|  4.45k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   271k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   271k|  idx += STEP_SIZE;
   88|   271k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   266k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   266k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 266k]
  ------------------
   80|   266k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   266k|  std::memcpy(dst, buf + idx, len - idx);
   82|   266k|  return len - idx;
   83|   266k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   264k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   264k|    size_t pos = 0;
   12|   264k|    size_t count = 0;
   13|   265k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 938, False: 264k]
  ------------------
   14|    938|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|    938|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|    938|      count += count_ones(utf8_continuation_mask);
   17|    938|    }
   18|   264k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   264k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  40.5M|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  40.3M|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  40.3M|      size_t pos = 0;
  131|  40.3M|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  40.3M|      size_t leading_byte = 0;
  139|  40.3M|      size_t margin = size;
  140|   125M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 84.9M, False: 40.3M]
  |  Branch (140:27): [True: 84.9M, False: 0]
  ------------------
  141|  84.9M|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  84.9M|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  40.3M|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  40.3M|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 40.3M]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  40.3M|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 40.3M]
  ------------------
  195|  40.3M|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 40.3M, False: 0]
  ------------------
  196|  40.3M|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  40.3M|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 22.7M, False: 17.6M]
  ------------------
  198|  17.6M|        utf32_output += howmany;
  199|  17.6M|      }
  200|  17.6M|      return utf32_output - start;
  201|  40.3M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  40.5M|    simdutf_really_inline bool errors() const {
  291|  40.5M|      return this->error.any_bits_set_anywhere();
  292|  40.5M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|   131k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|   131k|      size_t pos = 0;
  205|   131k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|   131k|      size_t leading_byte = 0;
  213|   131k|      size_t margin = size;
  214|   263k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 131k, False: 131k]
  |  Branch (214:27): [True: 131k, False: 0]
  ------------------
  215|   131k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   131k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|   131k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|   131k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 131k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|   131k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 131k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|   131k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 131k, False: 0]
  ------------------
  279|   131k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|   131k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 131k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|   131k|        } else {    // In case of success, we want the number of word written
  284|   131k|          utf32_output += res.count;
  285|   131k|        }
  286|   131k|      }
  287|   131k|      return result(error_code::SUCCESS, utf32_output - start);
  288|   131k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.58k|    char32_t* utf32_output) noexcept {
   13|  1.58k|  size_t pos = 0;
   14|  1.58k|  char32_t* start{utf32_output};
   15|  1.58k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  2.39k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 805, False: 1.58k]
  ------------------
   17|    805|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|    805|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 751, False: 54]
  ------------------
   19|    751|      in.store_ascii_as_utf32(utf32_output);
   20|    751|      utf32_output += 64;
   21|    751|      pos += 64;
   22|    751|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|     54|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|     54|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|     54|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|     54|    size_t max_starting_point = (pos + 64) - 12;
   28|    316|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 262, False: 54]
  ------------------
   29|    262|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|    262|                          utf8_end_of_code_point_mask, utf32_output);
   31|    262|      pos += consumed;
   32|    262|      utf8_end_of_code_point_mask >>= consumed;
   33|    262|      }
   34|     54|    }
   35|    805|  }
   36|  1.58k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.58k|  return utf32_output - start;
   38|  1.58k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   271k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   271k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   271k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 266k, False: 4.58k]
  |  |  ------------------
  ------------------
  154|   266k|        this->error |= this->prev_incomplete;
  155|   266k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  4.58k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  4.58k|            "We support either two or four chunks per 64-byte block.");
  159|  4.58k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  4.58k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  4.58k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  4.58k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  4.58k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  4.58k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  4.58k|      }
  172|   271k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  9.17k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  9.17k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  9.17k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  9.17k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  9.17k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  9.17k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  9.17k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  9.17k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  9.17k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  9.17k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  9.17k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  9.17k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  9.17k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  9.17k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  9.17k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  9.17k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  9.17k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  9.17k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  9.17k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  9.17k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  9.17k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  9.17k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  9.17k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  9.17k|    );
   51|  9.17k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  9.17k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  9.17k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  9.17k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  9.17k|      CARRY,
   59|  9.17k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  9.17k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  9.17k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  9.17k|    );
   80|  9.17k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  9.17k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  9.17k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  9.17k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  9.17k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  9.17k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  9.17k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  9.17k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  9.17k|    );
   96|  9.17k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  9.17k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  9.17k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  9.17k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  9.17k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  9.17k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  9.17k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  9.17k|    return must23_80 ^ sc;
  105|  9.17k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  4.58k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  4.58k|    static const uint8_t max_array[32] = {
  115|  4.58k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  4.58k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  4.58k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  4.58k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  4.58k|    };
  120|  4.58k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  4.58k|    return input.gt_bits(max_value);
  122|  4.58k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   266k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   266k|      this->error |= this->prev_incomplete;
  150|   266k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   266k|    simdutf_really_inline bool errors() const {
  176|   266k|      return this->error.any_bits_set_anywhere();
  177|   266k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   266k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   266k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   266k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   266k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   266k|    checker c{};
   12|   266k|    buf_block_reader<64> reader(input, length);
   13|   271k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 4.45k, False: 266k]
  ------------------
   14|  4.45k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  4.45k|      c.check_next_input(in);
   16|  4.45k|      reader.advance();
   17|  4.45k|    }
   18|   266k|    uint8_t block[64]{};
   19|   266k|    reader.get_remainder(block);
   20|   266k|    simd::simd8x64<uint8_t> in(block);
   21|   266k|    c.check_next_input(in);
   22|   266k|    reader.advance();
   23|   266k|    c.check_eof();
   24|   266k|    return !c.errors();
   25|   266k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|    262|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|    262|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|    262|  const uint16_t input_utf8_end_of_code_point_mask =
   23|    262|      utf8_end_of_code_point_mask & 0xfff;
   24|    262|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 141, False: 121]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|    141|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|    141|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|    141|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|    141|    return 16; // We consumed 16 bytes.
   30|    141|  }
   31|    121|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 0, False: 121]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|      0|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|      0|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|      0|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|      0|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|      0|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|      0|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|      0|    return 16;
   42|      0|  }
   43|    121|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 0, False: 121]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|      0|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|      0|    const __m128i ascii =
   49|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|      0|    const __m128i middlebyte =
   51|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|      0|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|      0|    const __m128i highbyte =
   54|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|      0|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|      0|    const __m128i composed =
   57|      0|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|      0|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|      0|    utf32_output += 4;
   60|      0|    return 12;
   61|      0|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|    121|  const uint8_t idx =
   65|    121|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|    121|  const uint8_t consumed =
   67|    121|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|    121|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 120, False: 1]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|    120|    const __m128i sh =
   75|    120|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|    120|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|    120|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|    120|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|    120|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|    120|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|    120|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|    120|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 0, False: 1]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|      0|    const __m128i sh =
   86|      0|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|      0|    const __m128i ascii =
   89|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|      0|    const __m128i middlebyte =
   91|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|      0|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|      0|    const __m128i highbyte =
   94|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|      0|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|      0|    const __m128i composed =
   97|      0|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|      0|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|      0|    utf32_output += 4;
  100|      1|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 1, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|      1|    const __m128i sh =
  103|      1|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|      1|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|      1|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|      1|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|      1|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|      1|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|      1|    const __m128i correct =
  111|      1|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|      1|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|      1|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|      1|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|      1|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|      1|    const __m128i composed =
  117|      1|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|      1|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|      1|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|      1|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|      1|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|    121|  return consumed;
  125|    121|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   266k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   266k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   266k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  40.3M|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  40.3M|  utf8_to_utf32::validating_transcoder converter;
  276|  40.3M|  return converter.convert(buf, len, utf32_output);
  277|  40.3M|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|   131k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|   131k|  utf8_to_utf32::validating_transcoder converter;
  281|   131k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|   131k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.58k|    char32_t* utf32_output) const noexcept {
  286|  1.58k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.58k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   264k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   264k|  return utf8::count_code_points(input, length);
  778|   264k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   271k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   271k|  return input.reduce_or().is_ascii();
   25|   271k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  9.17k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  9.17k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  9.17k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  9.17k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  9.17k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  41.0M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  41.0M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  41.0M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  41.0M|    return active_implementation;
  815|  41.0M|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   266k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   266k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   266k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  40.3M|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  40.3M|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  40.3M|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|   131k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|   131k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|   131k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.58k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.58k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.58k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   264k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   264k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   264k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   264k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   264k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   264k|    size_t counter{0};
  171|   565k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 300k, False: 264k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   300k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 299k, False: 95]
  ------------------
  174|   300k|    }
  175|   264k|    return counter;
  176|   264k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  40.3M|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  40.3M| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  40.3M|  size_t pos = 0;
   12|  40.3M|  char32_t* start{utf32_output};
   13|  58.0M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 40.3M, False: 17.6M]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  40.3M|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 40.3M]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  40.3M|    uint8_t leading_byte = data[pos]; // leading byte
   31|  40.3M|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 16.6M, False: 23.7M]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  16.6M|      *utf32_output++ = char32_t(leading_byte);
   34|  16.6M|      pos++;
   35|  23.7M|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.32M, False: 18.4M]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.32M|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.32M]
  ------------------
   38|  5.32M|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 4.40M, False: 915k]
  ------------------
   39|       |      // range check
   40|   915k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|   915k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 9.33k, False: 906k]
  |  Branch (41:32): [True: 0, False: 906k]
  ------------------
   42|   906k|      *utf32_output++ = char32_t(code_point);
   43|   906k|      pos += 2;
   44|  18.4M|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 16.1M, False: 2.28M]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  16.1M|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 16.1M]
  ------------------
   47|       |
   48|  16.1M|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 15.9M, False: 217k]
  ------------------
   49|   217k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 79.4k, False: 137k]
  ------------------
   50|       |      // range check
   51|   137k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|   137k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|   137k|                   (data[pos + 2] & 0b00111111);
   54|   137k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 12.1k, False: 125k]
  |  Branch (54:33): [True: 0, False: 125k]
  ------------------
   55|   137k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 11.3k, False: 114k]
  |  Branch (55:35): [True: 7.77k, False: 3.53k]
  ------------------
   56|  19.9k|        return 0;
   57|  19.9k|      }
   58|   117k|      *utf32_output++ = char32_t(code_point);
   59|   117k|      pos += 3;
   60|  2.28M|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 2.28M, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  2.28M|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 2.28M]
  ------------------
   63|  2.28M|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 2.20M, False: 74.8k]
  ------------------
   64|  74.8k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 21.1k, False: 53.7k]
  ------------------
   65|  53.7k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 6.98k, False: 46.7k]
  ------------------
   66|       |
   67|       |      // range check
   68|  46.7k|      uint32_t code_point =
   69|  46.7k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  46.7k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  46.7k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 10.4k, False: 36.3k]
  |  Branch (71:35): [True: 14.6k, False: 21.6k]
  ------------------
   72|  21.6k|      *utf32_output++ = char32_t(code_point);
   73|  21.6k|      pos += 4;
   74|  21.6k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  40.3M|  }
   78|  17.6M|  return utf32_output - start;
   79|  40.3M|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|   131k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|   131k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|   131k|  size_t pos = 0;
   84|   131k|  char32_t* start{utf32_output};
   85|   263k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 131k, False: 131k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   131k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 131k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|   131k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   131k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 131k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   131k|      *utf32_output++ = char32_t(leading_byte);
  106|   131k|      pos++;
  107|   131k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|   131k|  }
  151|   131k|  return result(error_code::SUCCESS, utf32_output - start);
  152|   131k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|   131k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|   131k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|   131k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|   131k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 131k, False: 0]
  ------------------
  172|   131k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|   131k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 131k, False: 0]
  ------------------
  175|   131k|    unsigned char byte = buf[0-i];
  176|   131k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|   131k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 131k, False: 0]
  ------------------
  178|   131k|      buf -= i;
  179|   131k|      extra_len = i;
  180|   131k|      break;
  181|   131k|    }
  182|   131k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|   131k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 131k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|   131k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|   131k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 131k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|   131k|  return res;
  202|   131k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.58k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.58k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.58k|  size_t pos = 0;
   12|  1.58k|  char32_t* start{utf32_output};
   13|  12.3k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 10.7k, False: 1.58k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  10.7k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.23k, False: 5.48k]
  ------------------
   16|  5.23k|      uint64_t v;
   17|  5.23k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.23k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 4.97k, False: 260]
  ------------------
   19|  4.97k|        size_t final_pos = pos + 8;
   20|  44.7k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 39.7k, False: 4.97k]
  ------------------
   21|  39.7k|          *utf32_output++ = char32_t(buf[pos]);
   22|  39.7k|          pos++;
   23|  39.7k|        }
   24|  4.97k|        continue;
   25|  4.97k|      }
   26|  5.23k|    }
   27|  5.74k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.74k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.65k, False: 94]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.65k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.65k|      pos++;
   32|  5.65k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 92, False: 2]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|     92|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 92]
  ------------------
   35|     92|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|     92|      pos += 2;
   37|     92|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 1, False: 1]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|      1|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 1]
  ------------------
   40|      1|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|      1|      pos += 3;
   42|      1|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 1, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|      1|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 1]
  ------------------
   45|      1|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|      1|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|      1|      *utf32_output++ = char32_t(code_word);
   48|      1|      pos += 4;
   49|      1|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.74k|  }
   54|  1.58k|  return utf32_output - start;
   55|  1.58k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|    938|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|    938|  return _popcnt64(input_num);
   16|    938|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   800k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   800k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   800k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   800k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   271k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   546k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   546k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   546k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  42.1M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  42.1M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  42.1M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  42.1M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   271k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   271k|      return this->chunks[0] | this->chunks[1];
  297|   271k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|   822k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  83.7M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   271k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   542k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  9.17k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  9.17k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  9.17k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  18.3k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  27.5k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  27.5k|      return lookup_16(simd8<L>::repeat_16(
  140|  27.5k|        replace0,  replace1,  replace2,  replace3,
  141|  27.5k|        replace4,  replace5,  replace6,  replace7,
  142|  27.5k|        replace8,  replace9,  replace10, replace11,
  143|  27.5k|        replace12, replace13, replace14, replace15
  144|  27.5k|      ));
  145|  27.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  27.5k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  27.5k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  27.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  36.7k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  27.5k|    ) {
  218|  27.5k|      return simd8<uint8_t>(
  219|  27.5k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  27.5k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  27.5k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  27.5k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  27.5k|      );
  224|  27.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  27.5k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  55.0k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  40.5M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  40.5M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  9.17k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  9.17k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  9.17k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  9.17k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  9.17k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  9.17k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  22.9k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  23.6k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  23.6k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  23.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  23.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  11.0k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  30.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  11.1k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  11.1k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  11.1k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  9.17k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  10.1k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  9.17k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  9.17k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  4.58k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  4.58k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  40.7M|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  40.7M|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  1.74k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  3.48k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  3.48k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  3.48k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|    805|    simdutf_really_inline bool is_ascii() const {
  300|    805|      return this->reduce_or().is_ascii();
  301|    805|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|    805|    simdutf_really_inline simd8<T> reduce_or() const {
  296|    805|      return this->chunks[0] | this->chunks[1];
  297|    805|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|    805|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|    805|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|     54|    simdutf_really_inline uint64_t lt(const T m) const {
  363|     54|      const simd8<T> mask = simd8<T>::splat(m);
  364|     54|      return  simd8x64<bool>(
  365|     54|        this->chunks[0] < mask,
  366|     54|        this->chunks[1] < mask
  367|     54|      ).to_bitmask();
  368|     54|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|    108|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|    992|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|    992|    simdutf_really_inline uint64_t to_bitmask() const {
  284|    992|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|    992|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|    992|      return r_lo | (r_hi << 32);
  287|    992|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  1.98k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  1.98k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|    751|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|    751|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|    751|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|    751|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  1.50k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  1.50k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  1.50k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  1.50k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  1.50k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  1.50k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|    938|    simdutf_really_inline uint64_t gt(const T m) const {
  371|    938|      const simd8<T> mask = simd8<T>::splat(m);
  372|    938|      return  simd8x64<bool>(
  373|    938|        this->chunks[0] > mask,
  374|    938|        this->chunks[1] > mask
  375|    938|      ).to_bitmask();
  376|    938|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   691k|{
  619|   691k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   691k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   691k|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  386|  2.58M|{
  387|  2.58M|    static_assert(
  388|  2.58M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.58M|        "Scan argument types must be default constructible");
  390|  2.58M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.58M|                  "Scan argument types must be Destructible");
  392|  2.58M|    static_assert(
  393|  2.58M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.58M|        "Scan argument types must not be references");
  395|  2.58M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   691k|    {
  564|   691k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   691k|    {
  574|   691k|        return {
  575|   691k|            detail::make_arg<base::is_packed, Context,
  576|   691k|                             detail::mapped_type_constant<
  577|   691k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   691k|                args)...};
  579|   691k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   691k|{
  415|   691k|    return make_value<Context>(value);
  416|   691k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  371|   701k|{
  372|   701k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   701k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   701k|                                  needs_context_tag>) {
  376|   701k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   701k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   701k|    }
  378|   701k|    else {
  379|   701k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   701k|            value, context_tag<Context>{}));
  381|   701k|    }
  382|   701k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  216|   701k|    {                                                                        \
  217|   701k|        return val;                                                          \
  218|   701k|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  340|  2.58M|{
  341|  2.58M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.58M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.58M|    constexpr bool scannable_char =
  345|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.58M|    static_assert(scannable_char,
  347|  2.58M|                  "Cannot scan an argument of an unsupported character "
  348|  2.58M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.58M|    constexpr bool scannable_const =
  351|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.58M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.58M|    constexpr bool scannable_disabled =
  355|  2.58M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.58M|    static_assert(scannable_disabled,
  357|  2.58M|                  "Cannot scan an argument that has been disabled by "
  358|  2.58M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.58M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.58M|    static_assert(
  362|  2.58M|        scannable,
  363|  2.58M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.58M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.58M|    return arg_value{arg};
  367|  2.58M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  2.58M|    {
  160|  2.58M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   691k|    {
  647|   691k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.13M|    {
  694|  2.13M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  553|   610k|    {
  554|   610k|        return m_args;
  555|   610k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  9.55k|{
  400|  9.55k|    check_scan_arg_types<T>();
  401|       |
  402|  9.55k|    basic_scan_arg<Context> arg;
  403|  9.55k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  9.55k|    arg.m_value = make_value<Context>(value);
  405|  9.55k|    return arg;
  406|  9.55k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  2.16M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  7.83M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   710k|{
  619|   710k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   710k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   710k|    static_cast<    \
  |  |  247|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   710k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  2.61M|{
  387|  2.61M|    static_assert(
  388|  2.61M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.61M|        "Scan argument types must be default constructible");
  390|  2.61M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.61M|                  "Scan argument types must be Destructible");
  392|  2.61M|    static_assert(
  393|  2.61M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.61M|        "Scan argument types must not be references");
  395|  2.61M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   710k|    {
  564|   710k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   710k|    {
  574|   710k|        return {
  575|   710k|            detail::make_arg<base::is_packed, Context,
  576|   710k|                             detail::mapped_type_constant<
  577|   710k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   710k|                args)...};
  579|   710k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   710k|{
  415|   710k|    return make_value<Context>(value);
  416|   710k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|   719k|{
  372|   719k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   719k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   719k|                                  needs_context_tag>) {
  376|   719k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   719k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   719k|    }
  378|   719k|    else {
  379|   719k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   719k|            value, context_tag<Context>{}));
  381|   719k|    }
  382|   719k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|   719k|    {                                                                        \
  217|   719k|        return val;                                                          \
  218|   719k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  2.61M|{
  341|  2.61M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.61M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.61M|    constexpr bool scannable_char =
  345|  2.61M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.61M|    static_assert(scannable_char,
  347|  2.61M|                  "Cannot scan an argument of an unsupported character "
  348|  2.61M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.61M|    constexpr bool scannable_const =
  351|  2.61M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.61M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.61M|    constexpr bool scannable_disabled =
  355|  2.61M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.61M|    static_assert(scannable_disabled,
  357|  2.61M|                  "Cannot scan an argument that has been disabled by "
  358|  2.61M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.61M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.61M|    static_assert(
  362|  2.61M|        scannable,
  363|  2.61M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.61M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.61M|    return arg_value{arg};
  367|  2.61M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  2.61M|    {
  160|  2.61M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   710k|    {
  647|   710k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  553|   628k|    {
  554|   628k|        return m_args;
  555|   628k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  9.64k|{
  400|  9.64k|    check_scan_arg_types<T>();
  401|       |
  402|  9.64k|    basic_scan_arg<Context> arg;
  403|  9.64k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  9.64k|    arg.m_value = make_value<Context>(value);
  405|  9.64k|    return arg;
  406|  9.64k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   729k|{
  619|   729k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   729k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   729k|    static_cast<    \
  |  |  247|   729k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   729k|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  386|  2.63M|{
  387|  2.63M|    static_assert(
  388|  2.63M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.63M|        "Scan argument types must be default constructible");
  390|  2.63M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.63M|                  "Scan argument types must be Destructible");
  392|  2.63M|    static_assert(
  393|  2.63M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.63M|        "Scan argument types must not be references");
  395|  2.63M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   729k|    {
  564|   729k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   729k|    {
  574|   729k|        return {
  575|   729k|            detail::make_arg<base::is_packed, Context,
  576|   729k|                             detail::mapped_type_constant<
  577|   729k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   729k|                args)...};
  579|   729k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   729k|{
  415|   729k|    return make_value<Context>(value);
  416|   729k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  371|   739k|{
  372|   739k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   739k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   739k|                                  needs_context_tag>) {
  376|   739k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   739k|    }
  378|   739k|    else {
  379|   739k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   739k|            value, context_tag<Context>{}));
  381|   739k|    }
  382|   739k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  216|   739k|    {                                                                        \
  217|   739k|        return val;                                                          \
  218|   739k|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  340|  2.63M|{
  341|  2.63M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.63M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.63M|    constexpr bool scannable_char =
  345|  2.63M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.63M|    static_assert(scannable_char,
  347|  2.63M|                  "Cannot scan an argument of an unsupported character "
  348|  2.63M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.63M|    constexpr bool scannable_const =
  351|  2.63M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.63M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.63M|    constexpr bool scannable_disabled =
  355|  2.63M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.63M|    static_assert(scannable_disabled,
  357|  2.63M|                  "Cannot scan an argument that has been disabled by "
  358|  2.63M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.63M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.63M|    static_assert(
  362|  2.63M|        scannable,
  363|  2.63M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.63M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.63M|    return arg_value{arg};
  367|  2.63M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  2.63M|    {
  160|  2.63M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   729k|    {
  647|   729k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  553|   648k|    {
  554|   648k|        return m_args;
  555|   648k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  9.70k|{
  400|  9.70k|    check_scan_arg_types<T>();
  401|       |
  402|  9.70k|    basic_scan_arg<Context> arg;
  403|  9.70k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  9.70k|    arg.m_value = make_value<Context>(value);
  405|  9.70k|    return arg;
  406|  9.70k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.86M|{
  619|  1.86M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.86M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.86M|    static_cast<    \
  |  |  247|  1.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.86M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  563|  1.86M|    {
  564|  1.86M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.86M|    {
  574|  1.86M|        return {
  575|  1.86M|            detail::make_arg<base::is_packed, Context,
  576|  1.86M|                             detail::mapped_type_constant<
  577|  1.86M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.86M|                args)...};
  579|  1.86M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|  1.86M|{
  415|  1.86M|    return make_value<Context>(value);
  416|  1.86M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  371|  1.88M|{
  372|  1.88M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.88M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.88M|                                  needs_context_tag>) {
  376|  1.88M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.88M|    }
  378|  1.88M|    else {
  379|  1.88M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.88M|            value, context_tag<Context>{}));
  381|  1.88M|    }
  382|  1.88M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  216|  1.88M|    {                                                                        \
  217|  1.88M|        return val;                                                          \
  218|  1.88M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.86M|    {
  647|  1.86M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  5.61M|    {
  694|  5.61M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  553|  1.62M|    {
  554|  1.62M|        return m_args;
  555|  1.62M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  22.1k|{
  400|  22.1k|    check_scan_arg_types<T>();
  401|       |
  402|  22.1k|    basic_scan_arg<Context> arg;
  403|  22.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  22.1k|    arg.m_value = make_value<Context>(value);
  405|  22.1k|    return arg;
  406|  22.1k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  5.67M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.87M|{
  619|  1.87M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.87M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.87M|    static_cast<    \
  |  |  247|  1.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.87M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  1.87M|    {
  564|  1.87M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.87M|    {
  574|  1.87M|        return {
  575|  1.87M|            detail::make_arg<base::is_packed, Context,
  576|  1.87M|                             detail::mapped_type_constant<
  577|  1.87M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.87M|                args)...};
  579|  1.87M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  1.87M|{
  415|  1.87M|    return make_value<Context>(value);
  416|  1.87M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|  1.89M|{
  372|  1.89M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.89M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.89M|                                  needs_context_tag>) {
  376|  1.89M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.89M|    }
  378|  1.89M|    else {
  379|  1.89M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.89M|            value, context_tag<Context>{}));
  381|  1.89M|    }
  382|  1.89M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|  1.89M|    {                                                                        \
  217|  1.89M|        return val;                                                          \
  218|  1.89M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.87M|    {
  647|  1.87M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  553|  1.62M|    {
  554|  1.62M|        return m_args;
  555|  1.62M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  22.2k|{
  400|  22.2k|    check_scan_arg_types<T>();
  401|       |
  402|  22.2k|    basic_scan_arg<Context> arg;
  403|  22.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  22.2k|    arg.m_value = make_value<Context>(value);
  405|  22.2k|    return arg;
  406|  22.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.87M|{
  619|  1.87M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.87M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.87M|    static_cast<    \
  |  |  247|  1.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.87M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  563|  1.87M|    {
  564|  1.87M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.87M|    {
  574|  1.87M|        return {
  575|  1.87M|            detail::make_arg<base::is_packed, Context,
  576|  1.87M|                             detail::mapped_type_constant<
  577|  1.87M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.87M|                args)...};
  579|  1.87M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|  1.87M|{
  415|  1.87M|    return make_value<Context>(value);
  416|  1.87M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  371|  1.89M|{
  372|  1.89M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.89M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.89M|                                  needs_context_tag>) {
  376|  1.89M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.89M|    }
  378|  1.89M|    else {
  379|  1.89M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.89M|            value, context_tag<Context>{}));
  381|  1.89M|    }
  382|  1.89M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  216|  1.89M|    {                                                                        \
  217|  1.89M|        return val;                                                          \
  218|  1.89M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.87M|    {
  647|  1.87M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  553|  1.63M|    {
  554|  1.63M|        return m_args;
  555|  1.63M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  22.2k|{
  400|  22.2k|    check_scan_arg_types<T>();
  401|       |
  402|  22.2k|    basic_scan_arg<Context> arg;
  403|  22.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  22.2k|    arg.m_value = make_value<Context>(value);
  405|  22.2k|    return arg;
  406|  22.2k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  2.13M|    {
  682|  2.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.13M|        return static_cast<std::size_t>(m_desc &
  687|  2.13M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.13M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  4.26M|    {
  702|  4.26M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.26M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  2.13M|    {
  655|  2.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.13M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.13M|        const auto t = type(id);
  667|  2.13M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.13M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.13M|        basic_scan_arg<Context> arg;
  672|  2.13M|        arg.m_type = t;
  673|  2.13M|        arg.m_value = m_values[id];
  674|  2.13M|        return arg;
  675|  2.13M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  2.13M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.13M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.13M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.13M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.13M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  4.23M|    {
  483|  4.23M|        return m_type != detail::arg_type::none_type;
  484|  4.23M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  4.14M|    {
  488|  4.14M|        return m_type;
  489|  4.14M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  5.61M|    {
  682|  5.61M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.61M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  5.61M|        return static_cast<std::size_t>(m_desc &
  687|  5.61M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  5.61M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  11.2M|    {
  702|  11.2M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  11.2M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  5.61M|    {
  655|  5.61M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.61M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  5.61M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.61M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  5.61M|        const auto t = type(id);
  667|  5.61M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.61M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  5.61M|        basic_scan_arg<Context> arg;
  672|  5.61M|        arg.m_type = t;
  673|  5.61M|        arg.m_value = m_values[id];
  674|  5.61M|        return arg;
  675|  5.61M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  5.61M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  5.61M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  5.61M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  5.61M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  5.61M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  11.1M|    {
  483|  11.1M|        return m_type != detail::arg_type::none_type;
  484|  11.1M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  10.9M|    {
  488|  10.9M|        return m_type;
  489|  10.9M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|  28.9k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|  66.6k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   101k|    {
  109|   101k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.07M|    {
   60|  2.07M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   202k|    {
  124|   202k|        return m_current;
  125|   202k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.07M|    {
   43|  2.07M|        return m_args.get(id);
   44|  2.07M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.07M|    {
   53|  2.07M|        return m_locale;
   54|  2.07M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   101k|    {
  132|   101k|        return ranges_std::default_sentinel;
  133|   101k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   101k|    {
  140|   101k|        return ranges::subrange{begin(), end()};
  141|   101k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   303k|    {
  109|   303k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  5.47M|    {
   60|  5.47M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   607k|    {
  124|   607k|        return m_current;
  125|   607k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  5.47M|    {
   43|  5.47M|        return m_args.get(id);
   44|  5.47M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  5.47M|    {
   53|  5.47M|        return m_locale;
   54|  5.47M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   303k|    {
  132|   303k|        return ranges_std::default_sentinel;
  133|   303k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   303k|    {
  140|   303k|        return ranges::subrange{begin(), end()};
  141|   303k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  8.79M|    {
   69|  8.79M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  8.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  8.79M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  44.5M|    {
   75|  44.5M|        return m_code == good;
   76|  44.5M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   810k|    {
   86|   810k|        return m_code;
   87|   810k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   810k|{
  111|   810k|    return a.code() == b;
  112|   810k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   810k|{
  116|   810k|    return !(a == b);
  117|   810k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  29.3M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   651k|    {
  675|   651k|        return m_str;
  676|   651k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.13M|{
  385|  2.13M|    return s;
  386|  2.13M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.13M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   651k|    {
  671|   651k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   669k|    {
  675|   669k|        return m_str;
  676|   669k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   669k|    {
  671|   669k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   689k|    {
  675|   689k|        return m_str;
  676|   689k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   689k|    {
  671|   689k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  40.5k|    {
  675|  40.5k|        return m_str;
  676|  40.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  40.5k|    {
  671|  40.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  40.5k|    {
  675|  40.5k|        return m_str;
  676|  40.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  40.5k|    {
  671|  40.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  40.5k|    {
  675|  40.5k|        return m_str;
  676|  40.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  40.5k|    {
  671|  40.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.74M|    {
  675|  1.74M|        return m_str;
  676|  1.74M|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  5.61M|{
  390|  5.61M|    return s;
  391|  5.61M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  5.61M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.74M|    {
  671|  1.74M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.74M|    {
  675|  1.74M|        return m_str;
  676|  1.74M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.74M|    {
  671|  1.74M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.75M|    {
  675|  1.75M|        return m_str;
  676|  1.75M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.75M|    {
  671|  1.75M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   121k|    {
  675|   121k|        return m_str;
  676|   121k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   121k|    {
  671|   121k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   121k|    {
  675|   121k|        return m_str;
  676|   121k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   121k|    {
  671|   121k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   121k|    {
  675|   121k|        return m_str;
  676|   121k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   121k|    {
  671|   121k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  7.55M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|   191k|    {
  245|   191k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|   191k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|   191k|            m_specs.localized = true;
  247|   191k|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|   191k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  7.36M|    {
  260|  7.36M|        m_specs.type = type;
  261|  7.36M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  7.55M|    {
  333|  7.55M|        return static_cast<bool>(m_error);
  334|  7.55M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|   191k|{
  981|   191k|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 191k]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 0, False: 191k]
  ------------------
  986|      0|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 191k]
  ------------------
  987|      0|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 0, False: 191k]
  ------------------
  988|      0|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 191k]
  ------------------
  989|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 0, False: 191k]
  ------------------
  990|      0|            return arg_type_category::integer;
  991|       |
  992|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 191k]
  ------------------
  993|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 191k]
  ------------------
  994|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 191k]
  ------------------
  995|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 191k]
  ------------------
  996|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 0, False: 191k]
  ------------------
  997|      0|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 191k]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 191k]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 191k]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 191k]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 191k]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|  63.4k|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 63.4k, False: 127k]
  ------------------
 1009|   127k|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 63.7k, False: 127k]
  ------------------
 1010|   191k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 63.9k, False: 127k]
  ------------------
 1011|   191k|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 191k]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 191k]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 191k]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 191k]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 191k]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 191k]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|   191k|            SCN_CLANG_POP
 1028|   191k|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|   191k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  1.97M|{
  962|  1.97M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  1.97M|    handler.check_args_exhausted();
  964|  1.97M|    return handler.get_error();
  965|  1.97M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  1.97M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  1.97M|    auto begin = format.data();
  931|  1.97M|    auto it = begin;
  932|  1.97M|    const auto end = format.data() + format.size();
  933|       |
  934|  3.84M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 1.97M, False: 1.87M]
  ------------------
  935|  1.97M|        const auto ch = *it++;
  936|  1.97M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 1.97M, False: 0]
  ------------------
  937|  1.97M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  1.97M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  1.97M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 101k, False: 1.87M]
  ------------------
  941|   101k|                return;
  942|   101k|            }
  943|  1.97M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  1.97M|    }
  954|       |
  955|  1.87M|    handler.on_literal_text(begin, end);
  956|  1.87M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  1.97M|{
  860|  1.97M|    struct id_adapter {
  861|  1.97M|        constexpr void operator()()
  862|  1.97M|        {
  863|  1.97M|            arg_id = handler.on_arg_id();
  864|  1.97M|        }
  865|  1.97M|        constexpr void operator()(std::size_t id)
  866|  1.97M|        {
  867|  1.97M|            arg_id = handler.on_arg_id(id);
  868|  1.97M|        }
  869|       |
  870|  1.97M|        constexpr void on_error(const char* msg)
  871|  1.97M|        {
  872|  1.97M|            SCN_UNLIKELY_ATTR
  873|  1.97M|            handler.on_error(msg);
  874|  1.97M|        }
  875|       |
  876|  1.97M|        Handler& handler;
  877|  1.97M|        std::size_t arg_id;
  878|  1.97M|    };
  879|       |
  880|  1.97M|    ++begin;
  881|  1.97M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  1.97M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 1.97M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  1.97M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 1.97M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  1.97M|    else {
  893|  1.97M|        auto adapter = id_adapter{handler, 0};
  894|  1.97M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  1.97M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  1.97M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 1.97M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  1.97M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 1.97M, False: 0]
  ------------------
  905|  1.97M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  1.97M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  1.97M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  |  Branch (153:45): [True: 0, False: 1.97M]
  |  |  |  Branch (153:45): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|  1.97M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  1.97M|    }
  921|  1.97M|    return begin + 1;
  922|  1.97M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.97M|{
  400|  1.97M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.97M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.97M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.97M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.97M|    handler();
  406|  1.97M|    return begin;
  407|  1.97M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  1.97M|        {
  863|  1.97M|            arg_id = handler.on_arg_id();
  864|  1.97M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  1.97M|    {
 1040|  1.97M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  1.97M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  1.97M|{
  789|  1.97M|    auto do_presentation = [&]() -> const CharT* {
  790|  1.97M|        if (*begin == CharT{'['}) {
  791|  1.97M|            auto set = parse_presentation_set(begin, end, handler);
  792|  1.97M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  1.97M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  1.97M|                return begin;
  797|  1.97M|            }
  798|  1.97M|            handler.on_character_set_string(set);
  799|  1.97M|            return begin;
  800|  1.97M|        }
  801|  1.97M|        if (*begin == CharT{'/'}) {
  802|  1.97M|            return parse_presentation_regex(begin, end, handler);
  803|  1.97M|        }
  804|  1.97M|        presentation_type type = parse_presentation_type(*begin++);
  805|  1.97M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  1.97M|            handler.on_error("Invalid type specifier in format string");
  807|  1.97M|            return begin;
  808|  1.97M|        }
  809|  1.97M|        handler.on_type(type);
  810|  1.97M|        return begin;
  811|  1.97M|    };
  812|       |
  813|  1.97M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 1.97M, False: 0]
  |  Branch (813:28): [True: 1.97M, False: 0]
  ------------------
  814|  1.97M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 1.97M, False: 0]
  |  Branch (814:36): [True: 1.93M, False: 37.5k]
  ------------------
  815|  1.93M|        return do_presentation();
  816|  1.93M|    }
  817|       |
  818|  37.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  37.5k|    begin = parse_align(begin, end, handler);
  824|  37.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  37.5k|    begin = parse_width(begin, end, handler);
  830|  37.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  37.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 37.5k, False: 0]
  ------------------
  836|  37.5k|        handler.on_localized();
  837|  37.5k|        ++begin;
  838|  37.5k|    }
  839|  37.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  37.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 37.5k, False: 0]
  |  Branch (844:25): [True: 0, False: 37.5k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  37.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  37.5k|    return begin;
  853|  37.5k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.07M|{
  464|  2.07M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.01M, False: 57.8k]
  |  Branch (464:33): [True: 2.01M, False: 0]
  ------------------
  465|  2.07M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 57.8k, False: 0]
  |  Branch (465:33): [True: 57.8k, False: 0]
  ------------------
  466|  2.07M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  1.93M|    auto do_presentation = [&]() -> const CharT* {
  790|  1.93M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 1.93M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  1.93M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 1.93M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  1.93M|        presentation_type type = parse_presentation_type(*begin++);
  805|  1.93M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|  1.93M|        handler.on_type(type);
  810|  1.93M|        return begin;
  811|  1.93M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.01M|{
  412|  2.01M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 2.01M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 2.01M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 2.01M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 2.01M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.01M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 2.01M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 2.01M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.01M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.01M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.01M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|  1.86M|        case 'a':
  ------------------
  |  Branch (430:9): [True: 1.86M, False: 154k]
  ------------------
  431|  1.86M|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.01M]
  ------------------
  432|  1.86M|            return presentation_type::float_hex;
  433|  41.1k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 41.1k, False: 1.97M]
  ------------------
  434|  41.1k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.01M]
  ------------------
  435|  41.1k|            return presentation_type::float_scientific;
  436|  56.3k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 56.3k, False: 1.95M]
  ------------------
  437|  56.3k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.01M]
  ------------------
  438|  56.3k|            return presentation_type::float_fixed;
  439|  56.4k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 56.4k, False: 1.95M]
  ------------------
  440|  56.4k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.01M]
  ------------------
  441|  56.4k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.01M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.01M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.01M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.01M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.01M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.01M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 2.01M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  2.01M|    }
  459|  2.01M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  37.5k|{
  489|  37.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  37.5k|        switch (ch) {
  493|  37.5k|            case L'<':
  494|  37.5k|                return align_type::left;
  495|  37.5k|            case L'>':
  496|  37.5k|                return align_type::right;
  497|  37.5k|            case L'^':
  498|  37.5k|                return align_type::center;
  499|  37.5k|            default:
  500|  37.5k|                return align_type::none;
  501|  37.5k|        }
  502|  37.5k|    };
  503|       |
  504|  37.5k|    auto potential_fill_len = code_point_length(begin, end);
  505|  37.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  75.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  |  Branch (153:45): [True: 0, False: 37.5k]
  |  |  |  Branch (153:45): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  506|  37.5k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  37.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  37.5k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  37.5k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  37.5k|    const auto begin_before_fill = begin;
  516|  37.5k|    begin += potential_fill_len;
  517|       |
  518|  37.5k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 37.5k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  37.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  37.5k|    const auto begin_after_fill = begin;
  524|  37.5k|    ++begin;
  525|       |
  526|  37.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 37.5k, False: 0]
  ------------------
  527|  37.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.5k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  37.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 37.5k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  37.5k|    }
  535|       |
  536|  37.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 37.5k, False: 0]
  ------------------
  537|  37.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 37.5k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  37.5k|        return begin_before_fill;
  542|  37.5k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  37.5k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  57.8k|{
  471|  57.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  57.8k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  57.8k|        return 1;
  474|  57.8k|    }
  475|  57.8k|    else {
  476|  57.8k|        const auto lengths =
  477|  57.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  57.8k|            "\3\4";
  479|  57.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  57.8k|        return len;
  481|  57.8k|    }
  482|  57.8k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  75.1k|    auto check_align = [](wchar_t ch) {
  492|  75.1k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 75.1k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 75.1k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 75.1k]
  ------------------
  498|      0|                return align_type::center;
  499|  75.1k|            default:
  ------------------
  |  Branch (499:13): [True: 75.1k, False: 0]
  ------------------
  500|  75.1k|                return align_type::none;
  501|  75.1k|        }
  502|  75.1k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  37.5k|{
  554|  37.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  37.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 37.5k, False: 0]
  |  Branch (556:33): [True: 0, False: 37.5k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  37.5k|    return begin;
  567|  37.5k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  37.5k|    {
 1045|  37.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  37.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 37.5k, False: 0]
  ------------------
 1047|  37.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 37.5k, False: 0]
  ------------------
 1048|  37.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 37.5k]
  ------------------
 1049|  37.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  37.5k|        Handler::on_localized();
 1057|  37.5k|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1110|  7.55M|{
 1111|  7.55M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1111:9): [True: 7.36M, False: 191k]
  ------------------
 1112|  7.55M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1112:10): [True: 0, False: 7.36M]
  ------------------
 1113|  7.36M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1113:10): [True: 0, False: 7.36M]
  ------------------
 1114|      0|        SCN_UNLIKELY_ATTR
 1115|      0|        return handler.on_error("Invalid type specifier for float type");
 1116|      0|    }
 1117|  7.55M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   101k|{
  962|   101k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   101k|    handler.check_args_exhausted();
  964|   101k|    return handler.get_error();
  965|   101k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   101k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   101k|    auto begin = format.data();
  931|   101k|    auto it = begin;
  932|   101k|    const auto end = format.data() + format.size();
  933|       |
  934|   101k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 101k, False: 0]
  ------------------
  935|   101k|        const auto ch = *it++;
  936|   101k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 101k, False: 0]
  ------------------
  937|   101k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   101k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   101k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 101k, False: 0]
  ------------------
  941|   101k|                return;
  942|   101k|            }
  943|   101k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   101k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   101k|{
  860|   101k|    struct id_adapter {
  861|   101k|        constexpr void operator()()
  862|   101k|        {
  863|   101k|            arg_id = handler.on_arg_id();
  864|   101k|        }
  865|   101k|        constexpr void operator()(std::size_t id)
  866|   101k|        {
  867|   101k|            arg_id = handler.on_arg_id(id);
  868|   101k|        }
  869|       |
  870|   101k|        constexpr void on_error(const char* msg)
  871|   101k|        {
  872|   101k|            SCN_UNLIKELY_ATTR
  873|   101k|            handler.on_error(msg);
  874|   101k|        }
  875|       |
  876|   101k|        Handler& handler;
  877|   101k|        std::size_t arg_id;
  878|   101k|    };
  879|       |
  880|   101k|    ++begin;
  881|   101k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   101k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 101k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   101k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 101k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   101k|    else {
  893|   101k|        auto adapter = id_adapter{handler, 0};
  894|   101k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   101k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   101k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 101k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   101k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 101k, False: 0]
  ------------------
  905|   101k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   101k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   101k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  |  Branch (153:45): [True: 0, False: 101k]
  |  |  |  Branch (153:45): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|   101k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   101k|    }
  921|   101k|    return begin + 1;
  922|   101k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   101k|{
  400|   101k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   101k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 101k, False: 0]
  |  Branch (401:26): [True: 0, False: 101k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   101k|    handler();
  406|   101k|    return begin;
  407|   101k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   101k|        {
  863|   101k|            arg_id = handler.on_arg_id();
  864|   101k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   101k|    {
 1040|   101k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   101k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   101k|{
  789|   101k|    auto do_presentation = [&]() -> const CharT* {
  790|   101k|        if (*begin == CharT{'['}) {
  791|   101k|            auto set = parse_presentation_set(begin, end, handler);
  792|   101k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   101k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   101k|                return begin;
  797|   101k|            }
  798|   101k|            handler.on_character_set_string(set);
  799|   101k|            return begin;
  800|   101k|        }
  801|   101k|        if (*begin == CharT{'/'}) {
  802|   101k|            return parse_presentation_regex(begin, end, handler);
  803|   101k|        }
  804|   101k|        presentation_type type = parse_presentation_type(*begin++);
  805|   101k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   101k|            handler.on_error("Invalid type specifier in format string");
  807|   101k|            return begin;
  808|   101k|        }
  809|   101k|        handler.on_type(type);
  810|   101k|        return begin;
  811|   101k|    };
  812|       |
  813|   101k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 101k, False: 0]
  |  Branch (813:28): [True: 101k, False: 0]
  ------------------
  814|   101k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 101k, False: 0]
  |  Branch (814:36): [True: 81.0k, False: 20.2k]
  ------------------
  815|  81.0k|        return do_presentation();
  816|  81.0k|    }
  817|       |
  818|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  20.2k|    begin = parse_align(begin, end, handler);
  824|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  20.2k|    begin = parse_width(begin, end, handler);
  830|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  20.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 20.2k, False: 0]
  ------------------
  836|  20.2k|        handler.on_localized();
  837|  20.2k|        ++begin;
  838|  20.2k|    }
  839|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  20.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 20.2k, False: 0]
  |  Branch (844:25): [True: 0, False: 20.2k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  20.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  20.2k|    return begin;
  853|  20.2k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|  81.0k|    auto do_presentation = [&]() -> const CharT* {
  790|  81.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 81.0k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  81.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 81.0k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  81.0k|        presentation_type type = parse_presentation_type(*begin++);
  805|  81.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 81.0k]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|  81.0k|        handler.on_type(type);
  810|  81.0k|        return begin;
  811|  81.0k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  20.2k|{
  489|  20.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  20.2k|        switch (ch) {
  493|  20.2k|            case L'<':
  494|  20.2k|                return align_type::left;
  495|  20.2k|            case L'>':
  496|  20.2k|                return align_type::right;
  497|  20.2k|            case L'^':
  498|  20.2k|                return align_type::center;
  499|  20.2k|            default:
  500|  20.2k|                return align_type::none;
  501|  20.2k|        }
  502|  20.2k|    };
  503|       |
  504|  20.2k|    auto potential_fill_len = code_point_length(begin, end);
  505|  20.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  Branch (153:45): [True: 0, False: 20.2k]
  |  |  |  Branch (153:45): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  506|  20.2k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  20.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  20.2k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  20.2k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  20.2k|    const auto begin_before_fill = begin;
  516|  20.2k|    begin += potential_fill_len;
  517|       |
  518|  20.2k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 20.2k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  20.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  20.2k|    const auto begin_after_fill = begin;
  524|  20.2k|    ++begin;
  525|       |
  526|  20.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 20.2k, False: 0]
  ------------------
  527|  20.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  20.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 20.2k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  20.2k|    }
  535|       |
  536|  20.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 20.2k, False: 0]
  ------------------
  537|  20.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 20.2k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  20.2k|        return begin_before_fill;
  542|  20.2k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  20.2k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  40.5k|    auto check_align = [](wchar_t ch) {
  492|  40.5k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 40.5k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 40.5k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 40.5k]
  ------------------
  498|      0|                return align_type::center;
  499|  40.5k|            default:
  ------------------
  |  Branch (499:13): [True: 40.5k, False: 0]
  ------------------
  500|  40.5k|                return align_type::none;
  501|  40.5k|        }
  502|  40.5k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  20.2k|{
  554|  20.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  20.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 20.2k, False: 0]
  |  Branch (556:33): [True: 0, False: 20.2k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  20.2k|    return begin;
  567|  20.2k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  20.2k|    {
 1045|  20.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  20.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 20.2k, False: 0]
  ------------------
 1047|  20.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 20.2k, False: 0]
  ------------------
 1048|  20.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 20.2k]
  ------------------
 1049|  20.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  20.2k|        Handler::on_localized();
 1057|  20.2k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  5.17M|{
  962|  5.17M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  5.17M|    handler.check_args_exhausted();
  964|  5.17M|    return handler.get_error();
  965|  5.17M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  5.17M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  5.17M|    auto begin = format.data();
  931|  5.17M|    auto it = begin;
  932|  5.17M|    const auto end = format.data() + format.size();
  933|       |
  934|  10.0M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 5.17M, False: 4.86M]
  ------------------
  935|  5.17M|        const auto ch = *it++;
  936|  5.17M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 5.17M, False: 0]
  ------------------
  937|  5.17M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  5.17M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  5.17M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 303k, False: 4.86M]
  ------------------
  941|   303k|                return;
  942|   303k|            }
  943|  5.17M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  5.17M|    }
  954|       |
  955|  4.86M|    handler.on_literal_text(begin, end);
  956|  4.86M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  5.17M|{
  860|  5.17M|    struct id_adapter {
  861|  5.17M|        constexpr void operator()()
  862|  5.17M|        {
  863|  5.17M|            arg_id = handler.on_arg_id();
  864|  5.17M|        }
  865|  5.17M|        constexpr void operator()(std::size_t id)
  866|  5.17M|        {
  867|  5.17M|            arg_id = handler.on_arg_id(id);
  868|  5.17M|        }
  869|       |
  870|  5.17M|        constexpr void on_error(const char* msg)
  871|  5.17M|        {
  872|  5.17M|            SCN_UNLIKELY_ATTR
  873|  5.17M|            handler.on_error(msg);
  874|  5.17M|        }
  875|       |
  876|  5.17M|        Handler& handler;
  877|  5.17M|        std::size_t arg_id;
  878|  5.17M|    };
  879|       |
  880|  5.17M|    ++begin;
  881|  5.17M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  5.17M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 5.17M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  5.17M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 5.17M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  5.17M|    else {
  893|  5.17M|        auto adapter = id_adapter{handler, 0};
  894|  5.17M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  5.17M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  5.17M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 5.17M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  5.17M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 5.17M, False: 0]
  ------------------
  905|  5.17M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  5.17M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  5.17M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  10.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  |  Branch (153:45): [True: 0, False: 5.17M]
  |  |  |  Branch (153:45): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|  5.17M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  5.17M|    }
  921|  5.17M|    return begin + 1;
  922|  5.17M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  5.17M|{
  400|  5.17M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  5.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  5.17M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 5.17M, False: 0]
  |  Branch (401:26): [True: 0, False: 5.17M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  5.17M|    handler();
  406|  5.17M|    return begin;
  407|  5.17M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  5.17M|        {
  863|  5.17M|            arg_id = handler.on_arg_id();
  864|  5.17M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  5.17M|    {
 1040|  5.17M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  5.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  5.17M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  5.17M|{
  789|  5.17M|    auto do_presentation = [&]() -> const CharT* {
  790|  5.17M|        if (*begin == CharT{'['}) {
  791|  5.17M|            auto set = parse_presentation_set(begin, end, handler);
  792|  5.17M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  5.17M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  5.17M|                return begin;
  797|  5.17M|            }
  798|  5.17M|            handler.on_character_set_string(set);
  799|  5.17M|            return begin;
  800|  5.17M|        }
  801|  5.17M|        if (*begin == CharT{'/'}) {
  802|  5.17M|            return parse_presentation_regex(begin, end, handler);
  803|  5.17M|        }
  804|  5.17M|        presentation_type type = parse_presentation_type(*begin++);
  805|  5.17M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  5.17M|            handler.on_error("Invalid type specifier in format string");
  807|  5.17M|            return begin;
  808|  5.17M|        }
  809|  5.17M|        handler.on_type(type);
  810|  5.17M|        return begin;
  811|  5.17M|    };
  812|       |
  813|  5.17M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 5.17M, False: 0]
  |  Branch (813:28): [True: 5.17M, False: 0]
  ------------------
  814|  5.17M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 5.17M, False: 0]
  |  Branch (814:36): [True: 5.10M, False: 72.5k]
  ------------------
  815|  5.10M|        return do_presentation();
  816|  5.10M|    }
  817|       |
  818|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  72.5k|    begin = parse_align(begin, end, handler);
  824|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  72.5k|    begin = parse_width(begin, end, handler);
  830|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  72.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 72.5k, False: 0]
  ------------------
  836|  72.5k|        handler.on_localized();
  837|  72.5k|        ++begin;
  838|  72.5k|    }
  839|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  72.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 72.5k, False: 0]
  |  Branch (844:25): [True: 0, False: 72.5k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  72.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  72.5k|    return begin;
  853|  72.5k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  5.47M|{
  464|  5.47M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 5.34M, False: 133k]
  |  Branch (464:33): [True: 5.34M, False: 0]
  ------------------
  465|  5.47M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 133k, False: 0]
  |  Branch (465:33): [True: 133k, False: 0]
  ------------------
  466|  5.47M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  5.10M|    auto do_presentation = [&]() -> const CharT* {
  790|  5.10M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 5.10M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  5.10M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 5.10M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  5.10M|        presentation_type type = parse_presentation_type(*begin++);
  805|  5.10M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  5.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.10M]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|  5.10M|        handler.on_type(type);
  810|  5.10M|        return begin;
  811|  5.10M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  5.34M|{
  412|  5.34M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 5.34M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 5.34M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 5.34M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 5.34M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 5.34M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 5.34M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 5.34M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 5.34M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 5.34M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 5.34M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|  4.95M|        case 'a':
  ------------------
  |  Branch (430:9): [True: 4.95M, False: 385k]
  ------------------
  431|  4.95M|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 5.34M]
  ------------------
  432|  4.95M|            return presentation_type::float_hex;
  433|   121k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 121k, False: 5.22M]
  ------------------
  434|   121k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 5.34M]
  ------------------
  435|   121k|            return presentation_type::float_scientific;
  436|   131k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 131k, False: 5.21M]
  ------------------
  437|   131k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 5.34M]
  ------------------
  438|   131k|            return presentation_type::float_fixed;
  439|   132k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 132k, False: 5.21M]
  ------------------
  440|   132k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 5.34M]
  ------------------
  441|   132k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 5.34M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 5.34M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 5.34M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 5.34M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 5.34M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 5.34M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 5.34M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  5.34M|    }
  459|  5.34M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  72.5k|{
  489|  72.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  72.5k|        switch (ch) {
  493|  72.5k|            case L'<':
  494|  72.5k|                return align_type::left;
  495|  72.5k|            case L'>':
  496|  72.5k|                return align_type::right;
  497|  72.5k|            case L'^':
  498|  72.5k|                return align_type::center;
  499|  72.5k|            default:
  500|  72.5k|                return align_type::none;
  501|  72.5k|        }
  502|  72.5k|    };
  503|       |
  504|  72.5k|    auto potential_fill_len = code_point_length(begin, end);
  505|  72.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  |  Branch (153:45): [True: 0, False: 72.5k]
  |  |  |  Branch (153:45): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  506|  72.5k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  72.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  72.5k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  72.5k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  72.5k|    const auto begin_before_fill = begin;
  516|  72.5k|    begin += potential_fill_len;
  517|       |
  518|  72.5k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 72.5k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  72.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  72.5k|    const auto begin_after_fill = begin;
  524|  72.5k|    ++begin;
  525|       |
  526|  72.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 72.5k, False: 0]
  ------------------
  527|  72.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  72.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 72.5k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  72.5k|    }
  535|       |
  536|  72.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 72.5k, False: 0]
  ------------------
  537|  72.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 72.5k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  72.5k|        return begin_before_fill;
  542|  72.5k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  72.5k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   133k|{
  471|   133k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   133k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   133k|        return 1;
  474|   133k|    }
  475|   133k|    else {
  476|   133k|        const auto lengths =
  477|   133k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   133k|            "\3\4";
  479|   133k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   133k|        return len;
  481|   133k|    }
  482|   133k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   145k|    auto check_align = [](wchar_t ch) {
  492|   145k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 145k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 145k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 145k]
  ------------------
  498|      0|                return align_type::center;
  499|   145k|            default:
  ------------------
  |  Branch (499:13): [True: 145k, False: 0]
  ------------------
  500|   145k|                return align_type::none;
  501|   145k|        }
  502|   145k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  72.5k|{
  554|  72.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  72.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 72.5k, False: 0]
  |  Branch (556:33): [True: 0, False: 72.5k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  72.5k|    return begin;
  567|  72.5k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|  72.5k|    {
 1045|  72.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  72.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 72.5k, False: 0]
  ------------------
 1047|  72.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 72.5k, False: 0]
  ------------------
 1048|  72.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 72.5k]
  ------------------
 1049|  72.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  72.5k|        Handler::on_localized();
 1057|  72.5k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   303k|{
  962|   303k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   303k|    handler.check_args_exhausted();
  964|   303k|    return handler.get_error();
  965|   303k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   303k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   303k|    auto begin = format.data();
  931|   303k|    auto it = begin;
  932|   303k|    const auto end = format.data() + format.size();
  933|       |
  934|   303k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 303k, False: 0]
  ------------------
  935|   303k|        const auto ch = *it++;
  936|   303k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 303k, False: 0]
  ------------------
  937|   303k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   303k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   303k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 303k, False: 0]
  ------------------
  941|   303k|                return;
  942|   303k|            }
  943|   303k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   303k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|   303k|{
  860|   303k|    struct id_adapter {
  861|   303k|        constexpr void operator()()
  862|   303k|        {
  863|   303k|            arg_id = handler.on_arg_id();
  864|   303k|        }
  865|   303k|        constexpr void operator()(std::size_t id)
  866|   303k|        {
  867|   303k|            arg_id = handler.on_arg_id(id);
  868|   303k|        }
  869|       |
  870|   303k|        constexpr void on_error(const char* msg)
  871|   303k|        {
  872|   303k|            SCN_UNLIKELY_ATTR
  873|   303k|            handler.on_error(msg);
  874|   303k|        }
  875|       |
  876|   303k|        Handler& handler;
  877|   303k|        std::size_t arg_id;
  878|   303k|    };
  879|       |
  880|   303k|    ++begin;
  881|   303k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   303k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 303k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   303k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 303k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   303k|    else {
  893|   303k|        auto adapter = id_adapter{handler, 0};
  894|   303k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   303k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   303k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 303k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   303k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 303k, False: 0]
  ------------------
  905|   303k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   303k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   303k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  |  Branch (153:45): [True: 0, False: 303k]
  |  |  |  Branch (153:45): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|   303k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   303k|    }
  921|   303k|    return begin + 1;
  922|   303k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   303k|{
  400|   303k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   303k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 303k, False: 0]
  |  Branch (401:26): [True: 0, False: 303k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   303k|    handler();
  406|   303k|    return begin;
  407|   303k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   303k|        {
  863|   303k|            arg_id = handler.on_arg_id();
  864|   303k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   303k|    {
 1040|   303k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   303k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|   303k|{
  789|   303k|    auto do_presentation = [&]() -> const CharT* {
  790|   303k|        if (*begin == CharT{'['}) {
  791|   303k|            auto set = parse_presentation_set(begin, end, handler);
  792|   303k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   303k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   303k|                return begin;
  797|   303k|            }
  798|   303k|            handler.on_character_set_string(set);
  799|   303k|            return begin;
  800|   303k|        }
  801|   303k|        if (*begin == CharT{'/'}) {
  802|   303k|            return parse_presentation_regex(begin, end, handler);
  803|   303k|        }
  804|   303k|        presentation_type type = parse_presentation_type(*begin++);
  805|   303k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   303k|            handler.on_error("Invalid type specifier in format string");
  807|   303k|            return begin;
  808|   303k|        }
  809|   303k|        handler.on_type(type);
  810|   303k|        return begin;
  811|   303k|    };
  812|       |
  813|   303k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 303k, False: 0]
  |  Branch (813:28): [True: 303k, False: 0]
  ------------------
  814|   303k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 303k, False: 0]
  |  Branch (814:36): [True: 243k, False: 60.7k]
  ------------------
  815|   243k|        return do_presentation();
  816|   243k|    }
  817|       |
  818|  60.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  60.7k|    begin = parse_align(begin, end, handler);
  824|  60.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  60.7k|    begin = parse_width(begin, end, handler);
  830|  60.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  60.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 60.7k, False: 0]
  ------------------
  836|  60.7k|        handler.on_localized();
  837|  60.7k|        ++begin;
  838|  60.7k|    }
  839|  60.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  60.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 60.7k, False: 0]
  |  Branch (844:25): [True: 0, False: 60.7k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  60.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  60.7k|    return begin;
  853|  60.7k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   243k|    auto do_presentation = [&]() -> const CharT* {
  790|   243k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 243k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   243k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 243k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   243k|        presentation_type type = parse_presentation_type(*begin++);
  805|   243k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|   243k|        handler.on_type(type);
  810|   243k|        return begin;
  811|   243k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  60.7k|{
  489|  60.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  60.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  60.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  60.7k|        switch (ch) {
  493|  60.7k|            case L'<':
  494|  60.7k|                return align_type::left;
  495|  60.7k|            case L'>':
  496|  60.7k|                return align_type::right;
  497|  60.7k|            case L'^':
  498|  60.7k|                return align_type::center;
  499|  60.7k|            default:
  500|  60.7k|                return align_type::none;
  501|  60.7k|        }
  502|  60.7k|    };
  503|       |
  504|  60.7k|    auto potential_fill_len = code_point_length(begin, end);
  505|  60.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  |  Branch (153:45): [True: 0, False: 60.7k]
  |  |  |  Branch (153:45): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  506|  60.7k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  60.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  60.7k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  60.7k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  60.7k|    const auto begin_before_fill = begin;
  516|  60.7k|    begin += potential_fill_len;
  517|       |
  518|  60.7k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 60.7k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  60.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  60.7k|    const auto begin_after_fill = begin;
  524|  60.7k|    ++begin;
  525|       |
  526|  60.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 60.7k, False: 0]
  ------------------
  527|  60.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  60.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 60.7k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  60.7k|    }
  535|       |
  536|  60.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 60.7k, False: 0]
  ------------------
  537|  60.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 60.7k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  60.7k|        return begin_before_fill;
  542|  60.7k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  60.7k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   121k|    auto check_align = [](wchar_t ch) {
  492|   121k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 121k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 121k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 121k]
  ------------------
  498|      0|                return align_type::center;
  499|   121k|            default:
  ------------------
  |  Branch (499:13): [True: 121k, False: 0]
  ------------------
  500|   121k|                return align_type::none;
  501|   121k|        }
  502|   121k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  60.7k|{
  554|  60.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  60.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  60.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  60.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 60.7k, False: 0]
  |  Branch (556:33): [True: 0, False: 60.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  60.7k|    return begin;
  567|  60.7k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|  60.7k|    {
 1045|  60.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  60.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 60.7k, False: 0]
  ------------------
 1047|  60.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 60.7k, False: 0]
  ------------------
 1048|  60.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 60.7k]
  ------------------
 1049|  60.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  60.7k|        Handler::on_localized();
 1057|  60.7k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.02M|{
  226|  2.02M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.02M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.02M|                  "\n"
  230|  2.02M|                  "Unsupported range type given as input to a scanning "
  231|  2.02M|                  "function.\n"
  232|  2.02M|                  "A range needs to have a character type (value type) "
  233|  2.02M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.02M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.02M|                  "to be included.\n"
  236|  2.02M|                  "See the scnlib documentation for more details.");
  237|  2.02M|    static_assert(
  238|  2.02M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.02M|        "\n"
  240|  2.02M|        "Unsupported range type given as input to a scanning "
  241|  2.02M|        "function.\n"
  242|  2.02M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.02M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.02M|        "not supported.");
  245|  2.02M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.02M|                  "\n"
  247|  2.02M|                  "Unsupported range type given as input to a scanning "
  248|  2.02M|                  "function.\n"
  249|  2.02M|                  "file_marker_found cannot be used as an "
  250|  2.02M|                  "source range type to scn::scan.\n"
  251|  2.02M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.02M|                  "and do not provide an explicit source range, "
  253|  2.02M|                  "or use scn::scan with a FILE* directly.");
  254|  2.02M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.02M|                  "\n"
  256|  2.02M|                  "Unsupported range type given as input to a scanning "
  257|  2.02M|                  "function.\n"
  258|  2.02M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.02M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.02M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.02M|                  "\n"
  262|  2.02M|                  "Unsupported range type given as input to a scanning "
  263|  2.02M|                  "function.\n"
  264|  2.02M|                  "A range needs to model forward_range and have a valid "
  265|  2.02M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.02M|                  "Examples of scannable ranges are std::string, "
  267|  2.02M|                  "std::string_view, "
  268|  2.02M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.02M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.02M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.02M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.02M|{
  153|  2.02M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.02M|        return std::basic_string_view{ranges::data(r),
  155|  2.02M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.02M|    }
  162|  2.02M|    else {
  163|  2.02M|        return invalid_char_type{};
  164|  2.02M|    }
  165|  2.02M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   131k|{
  226|   131k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   131k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   131k|                  "\n"
  230|   131k|                  "Unsupported range type given as input to a scanning "
  231|   131k|                  "function.\n"
  232|   131k|                  "A range needs to have a character type (value type) "
  233|   131k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   131k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   131k|                  "to be included.\n"
  236|   131k|                  "See the scnlib documentation for more details.");
  237|   131k|    static_assert(
  238|   131k|        !std::is_same_v<T, custom_char_traits>,
  239|   131k|        "\n"
  240|   131k|        "Unsupported range type given as input to a scanning "
  241|   131k|        "function.\n"
  242|   131k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   131k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   131k|        "not supported.");
  245|   131k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   131k|                  "\n"
  247|   131k|                  "Unsupported range type given as input to a scanning "
  248|   131k|                  "function.\n"
  249|   131k|                  "file_marker_found cannot be used as an "
  250|   131k|                  "source range type to scn::scan.\n"
  251|   131k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   131k|                  "and do not provide an explicit source range, "
  253|   131k|                  "or use scn::scan with a FILE* directly.");
  254|   131k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   131k|                  "\n"
  256|   131k|                  "Unsupported range type given as input to a scanning "
  257|   131k|                  "function.\n"
  258|   131k|                  "In order to be scannable, a range needs to satisfy "
  259|   131k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   131k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   131k|                  "\n"
  262|   131k|                  "Unsupported range type given as input to a scanning "
  263|   131k|                  "function.\n"
  264|   131k|                  "A range needs to model forward_range and have a valid "
  265|   131k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   131k|                  "Examples of scannable ranges are std::string, "
  267|   131k|                  "std::string_view, "
  268|   131k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   131k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   131k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   131k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   131k|{
  196|   131k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   131k|        return file_marker_found{};
  198|   131k|    }
  199|   131k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   131k|        if constexpr (ranges::input_range<Range>) {
  201|   131k|            return insufficient_range{};
  202|   131k|        }
  203|   131k|        else {
  204|   131k|            return invalid_input_range{};
  205|   131k|        }
  206|   131k|    }
  207|   131k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   131k|        return invalid_char_type{};
  209|   131k|    }
  210|   131k|    else {
  211|   131k|        return make_forward_scan_buffer(r);
  212|   131k|    }
  213|   131k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.28M|{
  226|  5.28M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.28M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.28M|                  "\n"
  230|  5.28M|                  "Unsupported range type given as input to a scanning "
  231|  5.28M|                  "function.\n"
  232|  5.28M|                  "A range needs to have a character type (value type) "
  233|  5.28M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.28M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.28M|                  "to be included.\n"
  236|  5.28M|                  "See the scnlib documentation for more details.");
  237|  5.28M|    static_assert(
  238|  5.28M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.28M|        "\n"
  240|  5.28M|        "Unsupported range type given as input to a scanning "
  241|  5.28M|        "function.\n"
  242|  5.28M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.28M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.28M|        "not supported.");
  245|  5.28M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.28M|                  "\n"
  247|  5.28M|                  "Unsupported range type given as input to a scanning "
  248|  5.28M|                  "function.\n"
  249|  5.28M|                  "file_marker_found cannot be used as an "
  250|  5.28M|                  "source range type to scn::scan.\n"
  251|  5.28M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.28M|                  "and do not provide an explicit source range, "
  253|  5.28M|                  "or use scn::scan with a FILE* directly.");
  254|  5.28M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.28M|                  "\n"
  256|  5.28M|                  "Unsupported range type given as input to a scanning "
  257|  5.28M|                  "function.\n"
  258|  5.28M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.28M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.28M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.28M|                  "\n"
  262|  5.28M|                  "Unsupported range type given as input to a scanning "
  263|  5.28M|                  "function.\n"
  264|  5.28M|                  "A range needs to model forward_range and have a valid "
  265|  5.28M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.28M|                  "Examples of scannable ranges are std::string, "
  267|  5.28M|                  "std::string_view, "
  268|  5.28M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.28M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.28M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.28M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.28M|{
  153|  5.28M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.28M|        return std::basic_string_view{ranges::data(r),
  155|  5.28M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.28M|    }
  162|  5.28M|    else {
  163|  5.28M|        return invalid_char_type{};
  164|  5.28M|    }
  165|  5.28M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   395k|{
  226|   395k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   395k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   395k|                  "\n"
  230|   395k|                  "Unsupported range type given as input to a scanning "
  231|   395k|                  "function.\n"
  232|   395k|                  "A range needs to have a character type (value type) "
  233|   395k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   395k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   395k|                  "to be included.\n"
  236|   395k|                  "See the scnlib documentation for more details.");
  237|   395k|    static_assert(
  238|   395k|        !std::is_same_v<T, custom_char_traits>,
  239|   395k|        "\n"
  240|   395k|        "Unsupported range type given as input to a scanning "
  241|   395k|        "function.\n"
  242|   395k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   395k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   395k|        "not supported.");
  245|   395k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   395k|                  "\n"
  247|   395k|                  "Unsupported range type given as input to a scanning "
  248|   395k|                  "function.\n"
  249|   395k|                  "file_marker_found cannot be used as an "
  250|   395k|                  "source range type to scn::scan.\n"
  251|   395k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   395k|                  "and do not provide an explicit source range, "
  253|   395k|                  "or use scn::scan with a FILE* directly.");
  254|   395k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   395k|                  "\n"
  256|   395k|                  "Unsupported range type given as input to a scanning "
  257|   395k|                  "function.\n"
  258|   395k|                  "In order to be scannable, a range needs to satisfy "
  259|   395k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   395k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   395k|                  "\n"
  262|   395k|                  "Unsupported range type given as input to a scanning "
  263|   395k|                  "function.\n"
  264|   395k|                  "A range needs to model forward_range and have a valid "
  265|   395k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   395k|                  "Examples of scannable ranges are std::string, "
  267|   395k|                  "std::string_view, "
  268|   395k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   395k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   395k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   395k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   395k|{
  196|   395k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   395k|        return file_marker_found{};
  198|   395k|    }
  199|   395k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   395k|        if constexpr (ranges::input_range<Range>) {
  201|   395k|            return insufficient_range{};
  202|   395k|        }
  203|   395k|        else {
  204|   395k|            return invalid_input_range{};
  205|   395k|        }
  206|   395k|    }
  207|   395k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   395k|        return invalid_char_type{};
  209|   395k|    }
  210|   395k|    else {
  211|   395k|        return make_forward_scan_buffer(r);
  212|   395k|    }
  213|   395k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  11.7M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.07M|    {
   45|  2.07M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.07M|    {
   66|  2.07M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.07M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.07M|        do_check_arg_id(id);
   74|  2.07M|        return id;
   75|  2.07M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.07M|{
  210|  2.07M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.07M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.07M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.07M|    {
   61|  2.07M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.07M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  4.14M|    {
   50|  4.14M|        return m_format.data();
   51|  4.14M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  5.47M|    {
   45|  5.47M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  5.47M|    {
   66|  5.47M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  5.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.47M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  5.47M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  5.47M|        do_check_arg_id(id);
   74|  5.47M|        return id;
   75|  5.47M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  5.47M|{
  210|  5.47M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  5.47M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  5.47M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  5.47M|    {
   61|  5.47M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  5.47M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  10.9M|    {
   50|  10.9M|        return m_format.data();
   51|  10.9M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  153|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.04M|    {
  482|  4.04M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.04M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.04M|    {
  473|  4.04M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.04M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.28M|    {
  482|  5.28M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  5.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.28M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  5.28M|    {
  473|  5.28M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  5.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.28M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.93M|    {
  482|  1.93M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.93M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.93M|    {
  473|  1.93M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.93M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.87M|    {
  549|  1.87M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.87M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.87M|    {
  541|  1.87M|        return ranges::distance(lhs, rhs);
  542|  1.87M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   334k|    {
  513|   334k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   334k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   334k|    {
  498|   334k|        it.batch_advance(n);
  499|   334k|        return it;
  500|   334k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  5.03M|    {
  482|  5.03M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  5.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  5.03M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  5.03M|    {
  473|  5.03M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  5.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  5.03M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  4.86M|    {
  549|  4.86M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  4.86M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  4.86M|    {
  541|  4.86M|        return ranges::distance(lhs, rhs);
  542|  4.86M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   607k|    {
  513|   607k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   607k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   607k|    {
  498|   607k|        it.batch_advance(n);
  499|   607k|        return it;
  500|   607k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.87M|    {
  482|  1.87M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.87M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISO_E4typeEE4typeE_EEOSH_:
  472|  1.87M|    {
  473|  1.87M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.87M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  1.89M|{
  343|  1.89M|    return {ranges::next(ranges::begin(source), n),
  344|  1.89M|            make_vscan_result_range_end(source)};
  345|  1.89M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.89M|{
  330|  1.89M|    return ranges::end(source);
  331|  1.89M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   613k|    {
  253|   613k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  1.89M|    {
  104|  1.89M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  2.23M|    {
   39|  2.23M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.89M|    {
  121|  1.89M|        return ranges::begin(m_range);
  122|  1.89M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   631k|    {
  253|   631k|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  2.26M|    {
   39|  2.26M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   651k|    {
  253|   651k|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  2.28M|    {
   39|  2.28M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.88M|{
  343|  4.88M|    return {ranges::next(ranges::begin(source), n),
  344|  4.88M|            make_vscan_result_range_end(source)};
  345|  4.88M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.88M|{
  330|  4.88M|    return ranges::end(source);
  331|  4.88M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|  1.62M|    {
  253|  1.62M|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.88M|    {
  104|  4.88M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.88M|    {
  121|  4.88M|        return ranges::begin(m_range);
  122|  4.88M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|  1.62M|    {
  253|  1.62M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|  1.63M|    {
  253|  1.63M|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   325k|{
  117|   325k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   325k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   325k|{
   77|   325k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   325k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   325k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   325k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   325k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   651k|{
   55|   651k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 610k]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|   610k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   610k|    static_cast<    \
  |  |  247|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   610k|    static_cast<    \
  |  |  247|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   651k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   325k|{
  201|   325k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   325k|                                                      format, {});
  203|   325k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   325k|{
  163|   325k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   325k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   325k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   325k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   325k|    static_cast<    \
  |  |  247|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   325k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  6.18k|{
  248|  6.18k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.18k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  6.18k|{
  229|  6.18k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.18k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 2.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  6.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.80k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.80k|    static_cast<    \
  |  |  247|  2.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.80k|    static_cast<    \
  |  |  247|  2.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.18k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   334k|{
  117|   334k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   334k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   334k|{
   77|   334k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   334k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   334k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   334k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   334k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   669k|{
   55|   669k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 628k]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|   628k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   628k|    static_cast<    \
  |  |  247|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   628k|    static_cast<    \
  |  |  247|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   669k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   334k|{
  201|   334k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   334k|                                                      format, {});
  203|   334k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   334k|{
  163|   334k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   334k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   334k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   334k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   334k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  6.26k|{
  248|  6.26k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.26k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  6.26k|{
  229|  6.26k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.26k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 2.88k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  6.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.88k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.88k|    static_cast<    \
  |  |  247|  2.88k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.88k|    static_cast<    \
  |  |  247|  2.88k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.26k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   344k|{
  117|   344k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   344k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   344k|{
   77|   344k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   344k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   344k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   344k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   344k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   689k|{
   55|   689k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 648k]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|   648k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   648k|    static_cast<    \
  |  |  247|   648k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   648k|    static_cast<    \
  |  |  247|   648k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   689k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   344k|{
  201|   344k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   344k|                                                      format, {});
  203|   344k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   344k|{
  163|   344k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   344k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   344k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   344k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   344k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  6.33k|{
  248|  6.33k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.33k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  6.33k|{
  229|  6.33k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 2.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  6.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.95k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.95k|    static_cast<    \
  |  |  247|  2.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.95k|    static_cast<    \
  |  |  247|  2.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.33k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.2k|{
  117|  20.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.2k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.2k|{
   77|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  40.5k|{
   55|  40.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  40.5k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.2k|{
  201|  20.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.2k|                                                      format, {});
  203|  20.2k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.2k|{
  163|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.37k|{
  248|  3.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.37k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.37k|{
  229|  3.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  3.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.37k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.2k|{
  117|  20.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.2k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.2k|{
   77|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  40.5k|{
   55|  40.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  40.5k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.2k|{
  201|  20.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.2k|                                                      format, {});
  203|  20.2k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.2k|{
  163|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.37k|{
  248|  3.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.37k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.37k|{
  229|  3.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  3.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.37k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  20.2k|{
  117|  20.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  20.2k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  20.2k|{
   77|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  20.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  20.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  40.5k|{
   55|  40.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  40.5k|        return unexpected(result.error());
   57|  40.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  40.5k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  20.2k|{
  201|  20.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  20.2k|                                                      format, {});
  203|  20.2k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  20.2k|{
  163|  20.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  20.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  20.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  20.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  3.37k|{
  248|  3.37k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  3.37k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.37k|{
  229|  3.37k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.37k|    }                                                  \
  |  |  |  |   70|  3.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.37k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   871k|{
   77|   871k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   871k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   871k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   871k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   871k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.74M|{
   55|  1.74M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 1.62M]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|  1.62M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.74M|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   871k|{
  163|   871k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   871k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   871k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   871k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   871k|    static_cast<    \
  |  |  247|   871k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   871k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  12.0k|{
  229|  12.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  12.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.89k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.89k|    static_cast<    \
  |  |  247|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.89k|    static_cast<    \
  |  |  247|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  12.0k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   874k|{
   77|   874k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   874k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   874k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   874k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   874k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.74M|{
   55|  1.74M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 1.62M]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|  1.62M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.62M|    static_cast<    \
  |  |  247|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.74M|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   874k|{
  163|   874k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   874k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   874k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   874k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   874k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  12.1k|{
  229|  12.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  12.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 1.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.97k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.97k|    static_cast<    \
  |  |  247|  1.97k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.97k|    static_cast<    \
  |  |  247|  1.97k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  12.1k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   877k|{
   77|   877k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   877k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   877k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   877k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   877k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.75M|{
   55|  1.75M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 1.63M]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|  1.63M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.63M|    static_cast<    \
  |  |  247|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.63M|    static_cast<    \
  |  |  247|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.75M|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   877k|{
  163|   877k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   877k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   877k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   877k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   877k|    static_cast<    \
  |  |  247|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   877k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  12.1k|{
  229|  12.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  12.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 2.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.00k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.00k|    static_cast<    \
  |  |  247|  2.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.00k|    static_cast<    \
  |  |  247|  2.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  12.1k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  60.7k|{
   77|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  60.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  60.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   121k|{
   55|   121k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 0]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   121k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  60.7k|{
  163|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  60.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  60.7k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  10.1k|{
  229|  10.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  10.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  10.1k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  60.7k|{
   77|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  60.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  60.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   121k|{
   55|   121k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 0]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   121k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  60.7k|{
  163|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  60.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  60.7k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  10.1k|{
  229|  10.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  10.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  10.1k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  60.7k|{
   77|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  60.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  60.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   121k|{
   55|   121k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 0]
  |  |  ------------------
  ------------------
   56|   121k|        return unexpected(result.error());
   57|   121k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   121k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  60.7k|{
  163|  60.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  60.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  60.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  60.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  60.7k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  10.1k|{
  229|  10.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  10.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.1k|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  10.1k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   131k|{
  486|   131k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   131k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   131k|    {
  378|   131k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   131k|    {
  360|   131k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   131k|    {
  129|   131k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   131k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   790k|    {
  382|   790k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 744, False: 789k]
  ------------------
  383|    744|            return false;
  384|    744|        }
  385|   789k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 657k, False: 131k]
  ------------------
  386|   657k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   657k|                                          this->m_current_view.begin(),
  388|   657k|                                          this->m_current_view.end());
  389|   657k|        }
  390|   789k|        m_latest = *m_cursor;
  391|   789k|        ++m_cursor;
  392|   789k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   789k|        return true;
  394|   790k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   131k|    {
   49|   131k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   131k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   131k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   395k|{
  486|   395k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   395k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   395k|    {
  378|   395k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   395k|    {
  360|   395k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   395k|    {
  129|   395k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   395k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  5.52M|    {
  382|  5.52M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.66k, False: 5.52M]
  ------------------
  383|  1.66k|            return false;
  384|  1.66k|        }
  385|  5.52M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 5.13M, False: 395k]
  ------------------
  386|  5.13M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  5.13M|                                          this->m_current_view.begin(),
  388|  5.13M|                                          this->m_current_view.end());
  389|  5.13M|        }
  390|  5.52M|        m_latest = *m_cursor;
  391|  5.52M|        ++m_cursor;
  392|  5.52M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  5.52M|        return true;
  394|  5.52M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   395k|    {
   49|   395k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   395k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   395k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  19.1M|    {
  173|  19.1M|        return m_end == nullptr;
  174|  19.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  1.18M|    {
  189|  1.18M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.18M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.18M|        return parent()->get_segment_starting_at(position());
  195|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  10.4M|    {
  183|  10.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  10.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  1.18M|    {
   79|  1.18M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 394k, False: 790k]
  |  |  ------------------
  ------------------
   80|  1.18M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   394k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   394k|        }
   83|   790k|        const auto start = pos - m_putback_buffer.size();
   84|   790k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.18M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   334k|    {
  178|   334k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   334k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.30M|    {
  168|  2.30M|        return m_position;
  169|  2.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   395k|    {
  101|   395k|        return m_is_contiguous;
  102|   395k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|   116M|    {
  173|   116M|        return m_end == nullptr;
  174|   116M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  8.68M|    {
  189|  8.68M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 8.68M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  8.68M|        return parent()->get_segment_starting_at(position());
  195|  8.68M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  65.5M|    {
  183|  65.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  65.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  65.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  65.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  8.68M|    {
   79|  8.68M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  8.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.94M, False: 4.73M]
  |  |  ------------------
  ------------------
   80|  8.68M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  3.94M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  3.94M|        }
   83|  4.73M|        const auto start = pos - m_putback_buffer.size();
   84|  4.73M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  4.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  8.68M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.00M|    {
  178|  1.00M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.00M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  17.5M|    {
  168|  17.5M|        return m_position;
  169|  17.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.18M|    {
  101|  1.18M|        return m_is_contiguous;
  102|  1.18M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   131k|{
  322|   131k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 131k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   131k|    return ranges::subrange{forward_iterator{this, 0},
  327|   131k|                            ranges_std::default_sentinel};
  328|   131k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   131k|    {
  155|   131k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   131k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   131k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   790k|    {
  258|   790k|        return x.is_at_end();
  259|   790k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.97M|    {
  302|  1.97M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.97M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.97M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.97M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.97M|        return !read_at_position();
  309|  1.97M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  5.07M|    {
  282|  5.07M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.07M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.07M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.07M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.28M, False: 790k]
  |  |  ------------------
  ------------------
  289|  4.28M|            return true;
  290|  4.28M|        }
  291|       |
  292|  1.58M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 790k, False: 789k]
  ------------------
  293|   790k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 744, False: 789k]
  ------------------
  294|    744|                return false;
  295|    744|            }
  296|   790k|        }
  297|   789k|        return true;
  298|   790k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  6.98M|    {
   59|  6.98M|        return m_putback_buffer.size() + m_current_view.size();
   60|  6.98M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.18M|    {
  269|  1.18M|        return !x.is_at_end();
  270|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.78M|    {
  217|  1.78M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.78M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.78M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.78M|        auto res = read_at_position();
  226|  1.78M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.78M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.78M|    {
   90|  1.78M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.12M, False: 658k]
  |  |  ------------------
  ------------------
   91|  1.78M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.12M|            return m_putback_buffer[pos];
   93|  1.12M|        }
   94|   658k|        const auto start = pos - m_putback_buffer.size();
   95|   658k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   658k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   658k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.78M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  1.31M|    {
  203|  1.31M|        ++m_position;
  204|  1.31M|        std::ignore = read_at_position();
  205|  1.31M|        return *this;
  206|  1.31M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  1.12M|    {
  252|  1.12M|        return !(lhs == rhs);
  253|  1.12M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.25M|    {
  247|  1.25M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.25M, False: 0]
  |  Branch (247:46): [True: 526k, False: 728k]
  ------------------
  248|  1.25M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   334k|    {
  232|   334k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   334k|        return *this;
  235|   334k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   131k|    {
   54|   131k|        sync(0);
   55|   131k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   395k|{
  322|   395k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 395k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   395k|    return ranges::subrange{forward_iterator{this, 0},
  327|   395k|                            ranges_std::default_sentinel};
  328|   395k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   395k|    {
  155|   395k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   395k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   395k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.36M|    {
  258|  2.36M|        return x.is_at_end();
  259|  2.36M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  10.6M|    {
  302|  10.6M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 10.6M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  10.6M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 10.6M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  10.6M|        return !read_at_position();
  309|  10.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  30.2M|    {
  282|  30.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  30.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  30.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 30.2M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  30.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  30.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 24.6M, False: 5.52M]
  |  |  ------------------
  ------------------
  289|  24.6M|            return true;
  290|  24.6M|        }
  291|       |
  292|  11.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 5.52M, False: 5.52M]
  ------------------
  293|  5.52M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.66k, False: 5.52M]
  ------------------
  294|  1.66k|                return false;
  295|  1.66k|            }
  296|  5.52M|        }
  297|  5.52M|        return true;
  298|  5.52M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  42.2M|    {
   59|  42.2M|        return m_putback_buffer.size() + m_current_view.size();
   60|  42.2M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  8.29M|    {
  269|  8.29M|        return !x.is_at_end();
  270|  8.29M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  10.0M|    {
  217|  10.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  10.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 10.0M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  10.0M|        auto res = read_at_position();
  226|  10.0M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  10.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  10.0M|    {
   90|  10.0M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  10.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.13M, False: 3.94M]
  |  |  ------------------
  ------------------
   91|  10.0M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  6.13M|            return m_putback_buffer[pos];
   93|  6.13M|        }
   94|  3.94M|        const auto start = pos - m_putback_buffer.size();
   95|  3.94M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  3.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  10.0M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  9.47M|    {
  203|  9.47M|        ++m_position;
  204|  9.47M|        std::ignore = read_at_position();
  205|  9.47M|        return *this;
  206|  9.47M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  8.89M|    {
  252|  8.89M|        return !(lhs == rhs);
  253|  8.89M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  9.29M|    {
  247|  9.29M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 9.29M, False: 0]
  |  Branch (247:46): [True: 4.34M, False: 4.95M]
  ------------------
  248|  9.29M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   607k|    {
  232|   607k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   607k|        return *this;
  235|   607k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   395k|    {
   54|   395k|        sync(0);
   55|   395k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   136M|{
   72|   136M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   136M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   136M|    }
   75|   136M|    else if constexpr (sizeof(U) == 2) {
   76|   136M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   136M|    }
   78|   136M|    else {
   79|       |        // utf-32
   80|   136M|        static_assert(sizeof(U) == 4);
   81|   136M|        SCN_UNUSED(ch);
   82|   136M|        return 1;
   83|   136M|    }
   84|   136M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   136M|{
   36|   136M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   136M|    SCN_GCC_COMPAT_PUSH
   39|   136M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   136M|    constexpr char lengths[] =
   41|   136M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   136M|        "\1\1\1\1\1\1\1\1"
   43|   136M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   136M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   136M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   136M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   136M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   136M|    SCN_GCC_COMPAT_POP
   50|   136M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  1.16G|{
   72|  1.16G|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.16G|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.16G|    }
   75|  1.16G|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  1.16G|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.16G|    }
   78|  1.16G|    else {
   79|       |        // utf-32
   80|  1.16G|        static_assert(sizeof(U) == 4);
   81|  1.16G|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  1.16G|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  1.16G|        return 1;
   83|  1.16G|    }
   84|  1.16G|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  56.3k|{
   36|  56.3k|#define SCN_VISIT(Type)                                         \
   37|  56.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  56.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  56.3k|    }                                                           \
   40|  56.3k|    else {                                                      \
   41|  56.3k|        return vis(monostate_val);                              \
   42|  56.3k|    }
   43|       |
   44|  56.3k|    monostate monostate_val{};
   45|       |
   46|  56.3k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 56.3k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 56.3k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 56.3k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 56.3k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 56.3k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 56.3k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 56.3k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 56.3k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 56.3k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 56.3k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 56.3k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 56.3k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 56.3k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 56.3k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 56.3k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  18.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 18.5k, False: 37.7k]
  ------------------
   78|  18.5k|            SCN_VISIT(float);
  ------------------
  |  |   37|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.5k|    }                                                           \
  |  |   40|  18.5k|    else {                                                      \
  |  |   41|  18.5k|        return vis(monostate_val);                              \
  |  |   42|  18.5k|    }
  ------------------
   79|  18.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 18.7k, False: 37.5k]
  ------------------
   80|  18.7k|            SCN_VISIT(double);
  ------------------
  |  |   37|  18.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.7k|    }                                                           \
  |  |   40|  18.7k|    else {                                                      \
  |  |   41|  18.7k|        return vis(monostate_val);                              \
  |  |   42|  18.7k|    }
  ------------------
   81|  18.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 18.9k, False: 37.3k]
  ------------------
   82|  18.9k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.9k|    }                                                           \
  |  |   40|  18.9k|    else {                                                      \
  |  |   41|  18.9k|        return vis(monostate_val);                              \
  |  |   42|  18.9k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 56.3k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 56.3k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 56.3k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 56.3k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 56.3k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 56.3k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 56.3k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 56.3k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 56.3k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  56.3k|            SCN_CLANG_POP
  114|  56.3k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  56.3k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  30.3k|{
   36|  30.3k|#define SCN_VISIT(Type)                                         \
   37|  30.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  30.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  30.3k|    }                                                           \
   40|  30.3k|    else {                                                      \
   41|  30.3k|        return vis(monostate_val);                              \
   42|  30.3k|    }
   43|       |
   44|  30.3k|    monostate monostate_val{};
   45|       |
   46|  30.3k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 30.3k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 30.3k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 30.3k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 30.3k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 30.3k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 30.3k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 30.3k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 30.3k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 30.3k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 30.3k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 30.3k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 30.3k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 30.3k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 30.3k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 30.3k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  10.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 10.1k, False: 20.2k]
  ------------------
   78|  10.1k|            SCN_VISIT(float);
  ------------------
  |  |   37|  10.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.1k|    }                                                           \
  |  |   40|  10.1k|    else {                                                      \
  |  |   41|  10.1k|        return vis(monostate_val);                              \
  |  |   42|  10.1k|    }
  ------------------
   79|  10.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 10.1k, False: 20.2k]
  ------------------
   80|  10.1k|            SCN_VISIT(double);
  ------------------
  |  |   37|  10.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.1k|    }                                                           \
  |  |   40|  10.1k|    else {                                                      \
  |  |   41|  10.1k|        return vis(monostate_val);                              \
  |  |   42|  10.1k|    }
  ------------------
   81|  10.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 10.1k, False: 20.2k]
  ------------------
   82|  10.1k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  10.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  10.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  10.1k|    }                                                           \
  |  |   40|  10.1k|    else {                                                      \
  |  |   41|  10.1k|        return vis(monostate_val);                              \
  |  |   42|  10.1k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 30.3k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 30.3k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 30.3k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 30.3k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 30.3k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 30.3k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 30.3k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 30.3k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 30.3k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  30.3k|            SCN_CLANG_POP
  114|  30.3k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  30.3k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.97M|{
   36|  1.97M|#define SCN_VISIT(Type)                                         \
   37|  1.97M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.97M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.97M|    }                                                           \
   40|  1.97M|    else {                                                      \
   41|  1.97M|        return vis(monostate_val);                              \
   42|  1.97M|    }
   43|       |
   44|  1.97M|    monostate monostate_val{};
   45|       |
   46|  1.97M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.97M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.97M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.97M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.97M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.97M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.97M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.97M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.97M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.97M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.97M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.97M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.97M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.97M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.97M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.97M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   638k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 638k, False: 1.33M]
  ------------------
   78|   638k|            SCN_VISIT(float);
  ------------------
  |  |   37|   638k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   638k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   638k|    }                                                           \
  |  |   40|   638k|    else {                                                      \
  |  |   41|   638k|        return vis(monostate_val);                              \
  |  |   42|   638k|    }
  ------------------
   79|   656k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 656k, False: 1.31M]
  ------------------
   80|   656k|            SCN_VISIT(double);
  ------------------
  |  |   37|   656k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   656k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   656k|    }                                                           \
  |  |   40|   656k|    else {                                                      \
  |  |   41|   656k|        return vis(monostate_val);                              \
  |  |   42|   656k|    }
  ------------------
   81|   676k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 676k, False: 1.29M]
  ------------------
   82|   676k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   676k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   676k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   676k|    }                                                           \
  |  |   40|   676k|    else {                                                      \
  |  |   41|   676k|        return vis(monostate_val);                              \
  |  |   42|   676k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.97M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.97M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.97M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.97M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.97M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.97M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.97M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.97M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.97M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.97M|            SCN_CLANG_POP
  114|  1.97M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.97M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   101k|{
   36|   101k|#define SCN_VISIT(Type)                                         \
   37|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   101k|    }                                                           \
   40|   101k|    else {                                                      \
   41|   101k|        return vis(monostate_val);                              \
   42|   101k|    }
   43|       |
   44|   101k|    monostate monostate_val{};
   45|       |
   46|   101k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 101k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 101k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 101k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 101k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 101k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 101k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 101k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 101k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 101k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 101k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 101k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 101k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 101k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 101k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 101k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  33.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 33.7k, False: 67.5k]
  ------------------
   78|  33.7k|            SCN_VISIT(float);
  ------------------
  |  |   37|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  33.7k|    }                                                           \
  |  |   40|  33.7k|    else {                                                      \
  |  |   41|  33.7k|        return vis(monostate_val);                              \
  |  |   42|  33.7k|    }
  ------------------
   79|  33.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 33.7k, False: 67.5k]
  ------------------
   80|  33.7k|            SCN_VISIT(double);
  ------------------
  |  |   37|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  33.7k|    }                                                           \
  |  |   40|  33.7k|    else {                                                      \
  |  |   41|  33.7k|        return vis(monostate_val);                              \
  |  |   42|  33.7k|    }
  ------------------
   81|  33.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 33.7k, False: 67.5k]
  ------------------
   82|  33.7k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  33.7k|    }                                                           \
  |  |   40|  33.7k|    else {                                                      \
  |  |   41|  33.7k|        return vis(monostate_val);                              \
  |  |   42|  33.7k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 101k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 101k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 101k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 101k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 101k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 101k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 101k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 101k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 101k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   101k|            SCN_CLANG_POP
  114|   101k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   101k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   108k|{
   36|   108k|#define SCN_VISIT(Type)                                         \
   37|   108k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   108k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   108k|    }                                                           \
   40|   108k|    else {                                                      \
   41|   108k|        return vis(monostate_val);                              \
   42|   108k|    }
   43|       |
   44|   108k|    monostate monostate_val{};
   45|       |
   46|   108k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 108k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 108k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 108k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 108k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 108k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 108k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 108k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 108k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 108k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 108k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 108k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 108k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 108k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 108k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 108k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  36.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 36.0k, False: 72.7k]
  ------------------
   78|  36.0k|            SCN_VISIT(float);
  ------------------
  |  |   37|  36.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  36.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  36.0k|    }                                                           \
  |  |   40|  36.0k|    else {                                                      \
  |  |   41|  36.0k|        return vis(monostate_val);                              \
  |  |   42|  36.0k|    }
  ------------------
   79|  36.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 36.3k, False: 72.4k]
  ------------------
   80|  36.3k|            SCN_VISIT(double);
  ------------------
  |  |   37|  36.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  36.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  36.3k|    }                                                           \
  |  |   40|  36.3k|    else {                                                      \
  |  |   41|  36.3k|        return vis(monostate_val);                              \
  |  |   42|  36.3k|    }
  ------------------
   81|  36.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 36.4k, False: 72.3k]
  ------------------
   82|  36.4k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  36.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  36.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  36.4k|    }                                                           \
  |  |   40|  36.4k|    else {                                                      \
  |  |   41|  36.4k|        return vis(monostate_val);                              \
  |  |   42|  36.4k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 108k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 108k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 108k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 108k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 108k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 108k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 108k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 108k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 108k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   108k|            SCN_CLANG_POP
  114|   108k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   108k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  5.17M|{
   36|  5.17M|#define SCN_VISIT(Type)                                         \
   37|  5.17M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  5.17M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  5.17M|    }                                                           \
   40|  5.17M|    else {                                                      \
   41|  5.17M|        return vis(monostate_val);                              \
   42|  5.17M|    }
   43|       |
   44|  5.17M|    monostate monostate_val{};
   45|       |
   46|  5.17M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 5.17M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 5.17M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 5.17M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 5.17M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 5.17M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 5.17M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 5.17M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 5.17M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 5.17M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 5.17M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 5.17M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 5.17M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 5.17M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 5.17M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 5.17M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  1.71M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 1.71M, False: 3.45M]
  ------------------
   78|  1.71M|            SCN_VISIT(float);
  ------------------
  |  |   37|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.71M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.71M|    }                                                           \
  |  |   40|  1.71M|    else {                                                      \
  |  |   41|  1.71M|        return vis(monostate_val);                              \
  |  |   42|  1.71M|    }
  ------------------
   79|  1.72M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 1.72M, False: 3.44M]
  ------------------
   80|  1.72M|            SCN_VISIT(double);
  ------------------
  |  |   37|  1.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.72M|    }                                                           \
  |  |   40|  1.72M|    else {                                                      \
  |  |   41|  1.72M|        return vis(monostate_val);                              \
  |  |   42|  1.72M|    }
  ------------------
   81|  1.73M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 1.73M, False: 3.44M]
  ------------------
   82|  1.73M|            SCN_VISIT(long double);
  ------------------
  |  |   37|  1.73M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.73M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.73M|    }                                                           \
  |  |   40|  1.73M|    else {                                                      \
  |  |   41|  1.73M|        return vis(monostate_val);                              \
  |  |   42|  1.73M|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 5.17M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 5.17M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 5.17M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 5.17M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 5.17M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 5.17M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 5.17M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 5.17M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 5.17M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  5.17M|            SCN_CLANG_POP
  114|  5.17M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  5.17M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  91.1k|{
   36|  91.1k|#define SCN_VISIT(Type)                                         \
   37|  91.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  91.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  91.1k|    }                                                           \
   40|  91.1k|    else {                                                      \
   41|  91.1k|        return vis(monostate_val);                              \
   42|  91.1k|    }
   43|       |
   44|  91.1k|    monostate monostate_val{};
   45|       |
   46|  91.1k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 91.1k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 91.1k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 91.1k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 91.1k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 91.1k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 91.1k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 91.1k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 91.1k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 91.1k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 91.1k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 91.1k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 91.1k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 91.1k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 91.1k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 91.1k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  30.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 30.3k, False: 60.7k]
  ------------------
   78|  30.3k|            SCN_VISIT(float);
  ------------------
  |  |   37|  30.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.3k|    }                                                           \
  |  |   40|  30.3k|    else {                                                      \
  |  |   41|  30.3k|        return vis(monostate_val);                              \
  |  |   42|  30.3k|    }
  ------------------
   79|  30.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 30.3k, False: 60.7k]
  ------------------
   80|  30.3k|            SCN_VISIT(double);
  ------------------
  |  |   37|  30.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.3k|    }                                                           \
  |  |   40|  30.3k|    else {                                                      \
  |  |   41|  30.3k|        return vis(monostate_val);                              \
  |  |   42|  30.3k|    }
  ------------------
   81|  30.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 30.3k, False: 60.7k]
  ------------------
   82|  30.3k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  30.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  30.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  30.3k|    }                                                           \
  |  |   40|  30.3k|    else {                                                      \
  |  |   41|  30.3k|        return vis(monostate_val);                              \
  |  |   42|  30.3k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 91.1k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 91.1k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 91.1k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 91.1k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 91.1k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 91.1k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 91.1k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 91.1k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 91.1k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  91.1k|            SCN_CLANG_POP
  114|  91.1k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  91.1k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   303k|{
   36|   303k|#define SCN_VISIT(Type)                                         \
   37|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   303k|    }                                                           \
   40|   303k|    else {                                                      \
   41|   303k|        return vis(monostate_val);                              \
   42|   303k|    }
   43|       |
   44|   303k|    monostate monostate_val{};
   45|       |
   46|   303k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 303k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 303k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 303k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 303k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 303k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 303k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 303k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 303k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 303k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 303k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 303k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 303k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 303k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 303k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 303k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   101k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 101k, False: 202k]
  ------------------
   78|   101k|            SCN_VISIT(float);
  ------------------
  |  |   37|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   101k|    }                                                           \
  |  |   40|   101k|    else {                                                      \
  |  |   41|   101k|        return vis(monostate_val);                              \
  |  |   42|   101k|    }
  ------------------
   79|   101k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 101k, False: 202k]
  ------------------
   80|   101k|            SCN_VISIT(double);
  ------------------
  |  |   37|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   101k|    }                                                           \
  |  |   40|   101k|    else {                                                      \
  |  |   41|   101k|        return vis(monostate_val);                              \
  |  |   42|   101k|    }
  ------------------
   81|   101k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 101k, False: 202k]
  ------------------
   82|   101k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   101k|    }                                                           \
  |  |   40|   101k|    else {                                                      \
  |  |   41|   101k|        return vis(monostate_val);                              \
  |  |   42|   101k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 303k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 303k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 303k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 303k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 303k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 303k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 303k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 303k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 303k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   303k|            SCN_CLANG_POP
  114|   303k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   303k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.00M|{
  174|  1.00M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.00M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.00M|{
  111|  1.00M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.00M|    auto result = vscan_impl(buffer, format, args);
  114|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.7k, False: 944k]
  |  |  ------------------
  ------------------
  115|  60.7k|        return unexpected(result.error());
  116|  60.7k|    }
  117|   944k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   944k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.00M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.00M|{
  192|  1.00M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.00M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.00M|{
  127|  1.00M|#if !SCN_DISABLE_LOCALE
  128|  1.00M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.00M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.00M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.00M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.7k, False: 944k]
  |  |  ------------------
  ------------------
  135|  60.7k|        return unexpected(result.error());
  136|  60.7k|    }
  137|   944k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   944k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.00M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  18.7k|{
  205|  18.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  18.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  18.7k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  18.7k|{
  151|  18.7k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  18.7k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  18.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.1k, False: 8.64k]
  |  |  ------------------
  ------------------
  155|  10.1k|        return unexpected(result.error());
  156|  10.1k|    }
  157|  8.64k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  8.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  18.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  60.7k|{
  174|  60.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  60.7k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  60.7k|{
  111|  60.7k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  60.7k|    auto result = vscan_impl(buffer, format, args);
  114|  60.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.7k, False: 0]
  |  |  ------------------
  ------------------
  115|  60.7k|        return unexpected(result.error());
  116|  60.7k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  60.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  60.7k|{
  192|  60.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  60.7k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  60.7k|{
  127|  60.7k|#if !SCN_DISABLE_LOCALE
  128|  60.7k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  60.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  60.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  60.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  60.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.7k, False: 0]
  |  |  ------------------
  ------------------
  135|  60.7k|        return unexpected(result.error());
  136|  60.7k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  60.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  10.1k|{
  205|  10.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  10.1k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  10.1k|{
  151|  10.1k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  10.1k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  10.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.1k, False: 0]
  |  |  ------------------
  ------------------
  155|  10.1k|        return unexpected(result.error());
  156|  10.1k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  10.1k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.62M|{
  111|  2.62M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.62M|    auto result = vscan_impl(buffer, format, args);
  114|  2.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 2.44M]
  |  |  ------------------
  ------------------
  115|   182k|        return unexpected(result.error());
  116|   182k|    }
  117|  2.44M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.62M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.62M|{
  127|  2.62M|#if !SCN_DISABLE_LOCALE
  128|  2.62M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.62M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.62M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.62M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.62M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 2.44M]
  |  |  ------------------
  ------------------
  135|   182k|        return unexpected(result.error());
  136|   182k|    }
  137|  2.44M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.62M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  36.2k|{
  151|  36.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  36.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  36.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.3k, False: 5.87k]
  |  |  ------------------
  ------------------
  155|  30.3k|        return unexpected(result.error());
  156|  30.3k|    }
  157|  5.87k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  5.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  36.2k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   182k|{
  111|   182k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   182k|    auto result = vscan_impl(buffer, format, args);
  114|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 0]
  |  |  ------------------
  ------------------
  115|   182k|        return unexpected(result.error());
  116|   182k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   182k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   182k|{
  127|   182k|#if !SCN_DISABLE_LOCALE
  128|   182k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   182k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   182k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   182k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 0]
  |  |  ------------------
  ------------------
  135|   182k|        return unexpected(result.error());
  136|   182k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   182k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  30.3k|{
  151|  30.3k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  30.3k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  30.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.3k, False: 0]
  |  |  ------------------
  ------------------
  155|  30.3k|        return unexpected(result.error());
  156|  30.3k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  30.3k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   871k|{
   90|   871k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   871k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.62M|{
   45|  2.62M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.62M|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   871k|{
  125|   871k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   871k|                                                         format, {});
  127|   871k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.62M|{
   61|  2.62M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.62M|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  12.0k|{
  159|  12.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  12.0k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  36.2k|{
   73|  36.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  36.2k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   874k|{
   90|   874k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   874k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   874k|{
  125|   874k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   874k|                                                         format, {});
  127|   874k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  12.1k|{
  159|  12.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  12.1k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   877k|{
   90|   877k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   877k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   877k|{
  125|   877k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   877k|                                                         format, {});
  127|   877k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  12.1k|{
  159|  12.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  12.1k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  60.7k|{
   90|  60.7k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  60.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   182k|{
   45|   182k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   182k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  60.7k|{
  125|  60.7k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  60.7k|                                                         format, {});
  127|  60.7k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   182k|{
   61|   182k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   182k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  10.1k|{
  159|  10.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  10.1k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  30.3k|{
   73|  30.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  30.3k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  60.7k|{
   90|  60.7k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  60.7k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  60.7k|{
  125|  60.7k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  60.7k|                                                         format, {});
  127|  60.7k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  10.1k|{
  159|  10.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  10.1k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  60.7k|{
   90|  60.7k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  60.7k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  60.7k|{
  125|  60.7k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  60.7k|                                                         format, {});
  127|  60.7k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  10.1k|{
  159|  10.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  10.1k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  19.5M|            {
 2693|  19.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  19.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  19.5M|            {
 2672|  19.5M|                return decay_copy(t.begin());
 2673|  19.5M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   101M|    {
 2606|   101M|        return std::forward<T>(t);
 2607|   101M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.04M|            {
 3178|  4.04M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.04M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.04M|            {
 3158|  4.04M|                return t.data();
 3159|  4.04M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.04M|    {
 6095|  4.04M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 9.73k, False: 4.03M]
  ------------------
 6096|  4.04M|                   ? nullptr
 6097|  4.04M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.04M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.04M|            {
 3127|  4.04M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.04M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.04M|            {
 3098|  4.04M|                return bool((std::forward<T>(t).empty()));
 3099|  4.04M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  11.8M|        {
 6454|  11.8M|            return data_.begin_ == data_.end_;
 6455|  11.8M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  8.08M|    {
 6049|  8.08M|        return static_cast<const D&>(*this);
 6050|  8.08M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  14.0M|            {
 2693|  14.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  14.0M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  14.0M|            {
 2672|  14.0M|                return decay_copy(t.begin());
 2673|  14.0M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  45.9M|        {
 6444|  45.9M|            return data_.begin_;
 6445|  45.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.04M|            {
 3038|  4.04M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.04M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.04M|            {
 3000|  4.04M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.04M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  37.6M|    {
 2606|  37.6M|        return std::forward<T>(t);
 2607|  37.6M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  11.9M|        {
 6462|  11.9M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  11.9M|                return data_.size_;
 6464|  11.9M|            }
 6465|  11.9M|            else {
 6466|  11.9M|                return data_.end_ - data_.begin_;
 6467|  11.9M|            }
 6468|  11.9M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  7.71M|            {
 3788|  7.71M|                ranges::advance(x, n);
 3789|  7.71M|                return x;
 3790|  7.71M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  7.71M|            {
 3678|  7.71M|                fn::impl(i, n);
 3679|  7.71M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  7.71M|            {
 3562|  7.71M|                r += n;
 3563|  7.71M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  29.8M|            {
 2693|  29.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  29.8M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  29.8M|            {
 2672|  29.8M|                return decay_copy(t.begin());
 2673|  29.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  7.99M|            {
 2759|  7.99M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.99M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  7.99M|            {
 2739|  7.99M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.99M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  21.9M|        {
 6449|  21.9M|            return data_.end_;
 6450|  21.9M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  19.9M|            {
 2759|  19.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  19.9M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  19.9M|            {
 2739|  19.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  19.9M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  17.9M|        {
 6375|  17.9M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  17.9M|        {
 6294|  17.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   131k|            {
 2693|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   131k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   131k|            {
 2672|   131k|                return decay_copy(t.begin());
 2673|   131k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.18M|    {
 2606|  1.18M|        return std::forward<T>(t);
 2607|  1.18M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   131k|            {
 2693|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   131k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   131k|            {
 2672|   131k|                return decay_copy(t.begin());
 2673|   131k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   131k|        {
 6444|   131k|            return data_.begin_;
 6445|   131k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   790k|            {
 2759|   790k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   790k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   790k|            {
 2739|   790k|                return decay_copy(std::forward<T>(t).end());
 2740|   790k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   790k|        {
 6449|   790k|            return data_.end_;
 6450|   790k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   131k|            {
 2759|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   131k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   131k|            {
 2739|   131k|                return decay_copy(std::forward<T>(t).end());
 2740|   131k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   131k|        {
 6375|   131k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   131k|        {
 6294|   131k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  5.70M|            {
 2693|  5.70M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.70M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  5.70M|            {
 2672|  5.70M|                return decay_copy(t.begin());
 2673|  5.70M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|  1.43G|    {
 2606|  1.43G|        return std::forward<T>(t);
 2607|  1.43G|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.28M|            {
 3178|  5.28M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.28M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.28M|            {
 3158|  5.28M|                return t.data();
 3159|  5.28M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  5.28M|    {
 6095|  5.28M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 56.4k, False: 5.22M]
  ------------------
 6096|  5.28M|                   ? nullptr
 6097|  5.28M|                   : std::addressof(*ranges::begin(derived()));
 6098|  5.28M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  5.28M|            {
 3127|  5.28M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.28M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  5.28M|            {
 3098|  5.28M|                return bool((std::forward<T>(t).empty()));
 3099|  5.28M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  10.3M|        {
 6454|  10.3M|            return data_.begin_ == data_.end_;
 6455|  10.3M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  10.5M|    {
 6049|  10.5M|        return static_cast<const D&>(*this);
 6050|  10.5M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  36.3M|            {
 2693|  36.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  36.3M|            {
 2672|  36.3M|                return decay_copy(t.begin());
 2673|  36.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   138M|        {
 6444|   138M|            return data_.begin_;
 6445|   138M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  5.28M|            {
 3038|  5.28M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  5.28M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  5.28M|            {
 3000|  5.28M|                return decay_copy(std::forward<T>(t).size());
 3001|  5.28M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  25.7M|        {
 6462|  25.7M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  25.7M|                return data_.size_;
 6464|  25.7M|            }
 6465|  25.7M|            else {
 6466|  25.7M|                return data_.end_ - data_.begin_;
 6467|  25.7M|            }
 6468|  25.7M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  24.8M|            {
 3788|  24.8M|                ranges::advance(x, n);
 3789|  24.8M|                return x;
 3790|  24.8M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  24.8M|            {
 3678|  24.8M|                fn::impl(i, n);
 3679|  24.8M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  24.8M|            {
 3562|  24.8M|                r += n;
 3563|  24.8M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  96.9M|            {
 2693|  96.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  96.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  96.9M|            {
 2672|  96.9M|                return decay_copy(t.begin());
 2673|  96.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  1.17G|            {
 2759|  1.17G|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.17G|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  1.17G|            {
 2739|  1.17G|                return decay_copy(std::forward<T>(t).end());
 2740|  1.17G|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.29G|        {
 6449|  1.29G|            return data_.end_;
 6450|  1.29G|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  11.7M|            {
 2759|  11.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  11.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  11.7M|            {
 2739|  11.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  11.7M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  51.3M|        {
 6375|  51.3M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  51.3M|        {
 6294|  51.3M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   395k|            {
 2693|   395k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   395k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   395k|            {
 2672|   395k|                return decay_copy(t.begin());
 2673|   395k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  6.71M|    {
 2606|  6.71M|        return std::forward<T>(t);
 2607|  6.71M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   395k|            {
 2693|   395k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   395k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   395k|            {
 2672|   395k|                return decay_copy(t.begin());
 2673|   395k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   395k|        {
 6444|   395k|            return data_.begin_;
 6445|   395k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  5.52M|            {
 2759|  5.52M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.52M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  5.52M|            {
 2739|  5.52M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.52M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  5.52M|        {
 6449|  5.52M|            return data_.end_;
 6450|  5.52M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   395k|            {
 2759|   395k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   395k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   395k|            {
 2739|   395k|                return decay_copy(std::forward<T>(t).end());
 2740|   395k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   395k|        {
 6375|   395k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   395k|        {
 6294|   395k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  5.21M|        {
 6444|  5.21M|            return data_.begin_;
 6445|  5.21M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  23.1M|        {
 6444|  23.1M|            return data_.begin_;
 6445|  23.1M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  15.6M|    {
 6044|  15.6M|        return static_cast<D&>(*this);
 6045|  15.6M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  7.80M|            {
 3098|  7.80M|                return bool((std::forward<T>(t).empty()));
 3099|  7.80M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  7.80M|            {
 3127|  7.80M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  7.80M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  7.80M|    {
 6085|  7.80M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 12, False: 7.80M]
  ------------------
 6086|  7.80M|                   ? nullptr
 6087|  7.80M|                   : std::addressof(*ranges::begin(derived()));
 6088|  7.80M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  10.1M|            {
 2739|  10.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  10.1M|            {
 2759|  10.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.1M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  10.0M|    {
 6044|  10.0M|        return static_cast<D&>(*this);
 6045|  10.0M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  5.03M|            {
 3098|  5.03M|                return bool((std::forward<T>(t).empty()));
 3099|  5.03M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  5.03M|            {
 3127|  5.03M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  5.03M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  5.03M|    {
 6085|  5.03M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 5.03M]
  ------------------
 6086|  5.03M|                   ? nullptr
 6087|  5.03M|                   : std::addressof(*ranges::begin(derived()));
 6088|  5.03M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   108M|            {
 2739|   108M|                return decay_copy(std::forward<T>(t).end());
 2740|   108M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   108M|            {
 2759|   108M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   108M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  2.08M|            {
 3780|  2.08M|                ++x;
 3781|  2.08M|                return x;
 3782|  2.08M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.85M|            {
 3038|  7.85M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.85M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.85M|            {
 3000|  7.85M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.85M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  7.80M|            {
 3178|  7.80M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  7.80M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  7.80M|            {
 3158|  7.80M|                return t.data();
 3159|  7.80M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  25.4M|    {
 2606|  25.4M|        return std::forward<T>(t);
 2607|  25.4M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  16.7M|            {
 3077|  16.7M|                return fn::impl(std::forward<T>(t));
 3078|  16.7M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  16.7M|            {
 3067|  16.7M|                return static_cast<ssize_return_t<T>>(
 3068|  16.7M|                    ranges::size(std::forward<T>(t)));
 3069|  16.7M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  18.6M|            {
 3038|  18.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  18.6M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  18.6M|            {
 3000|  18.6M|                return decay_copy(std::forward<T>(t).size());
 3001|  18.6M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.90M|            {
 3597|  1.90M|                i = std::move(bound);
 3598|  1.90M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  6.78M|            {
 3077|  6.78M|                return fn::impl(std::forward<T>(t));
 3078|  6.78M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  6.78M|            {
 3067|  6.78M|                return static_cast<ssize_return_t<T>>(
 3068|  6.78M|                    ranges::size(std::forward<T>(t)));
 3069|  6.78M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.78M|            {
 3038|  6.78M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.78M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  6.78M|            {
 3000|  6.78M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.78M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|   135k|        {
 6793|   135k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   135k|                                    proj);
 6795|   135k|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|   135k|        {
 6761|   325k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 323k, False: 1.34k]
  ------------------
 6762|   323k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 134k, False: 189k]
  ------------------
 6763|   134k|                    return first;
 6764|   134k|                }
 6765|   189k|                ++first;
 6766|   189k|            }
 6767|  1.34k|            return first;
 6768|   135k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|   323k|            {
 1300|   323k|                return fn::impl(std::forward<F>(f),
 1301|   323k|                                std::forward<Args>(args)...);
 1302|   323k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|   323k|            {
 1289|   323k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   323k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   124M|            {
 1300|   124M|                return fn::impl(std::forward<F>(f),
 1301|   124M|                                std::forward<Args>(args)...);
 1302|   124M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|   124M|            {
 1289|   124M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   124M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|   124M|    {
 1142|   124M|        return std::forward<T>(t);
 1143|   124M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.90M|            {
 3798|  1.90M|                ranges::advance(x, bound);
 3799|  1.90M|                return x;
 3800|  1.90M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.90M|            {
 3686|  1.90M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.90M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  48.5M|            {
 3756|  48.5M|                return fn::impl(std::move(first), std::move(last));
 3757|  48.5M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  48.5M|            {
 3716|  48.5M|                return s - i;
 3717|  48.5M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.17M|        {
 6375|  1.17M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.17M|        {
 6294|  1.17M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.05M|            {
 2693|  2.05M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.05M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.05M|            {
 2672|  2.05M|                return decay_copy(t.begin());
 2673|  2.05M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  5.11M|    {
 2606|  5.11M|        return std::forward<T>(t);
 2607|  5.11M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.46M|            {
 2759|  1.46M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.46M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.46M|            {
 2739|  1.46M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.46M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  19.1M|    {
 2606|  19.1M|        return std::forward<T>(t);
 2607|  19.1M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.91M|        {
 6449|  2.91M|            return data_.end_;
 6450|  2.91M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.18M|        {
 6444|  1.18M|            return data_.begin_;
 6445|  1.18M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.18M|        {
 6449|  1.18M|            return data_.end_;
 6450|  1.18M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   394k|        {
 6375|   394k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   394k|        {
 6294|   394k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   131k|            {
 3780|   131k|                ++x;
 3781|   131k|                return x;
 3782|   131k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   131k|        {
 6793|   131k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   131k|                                    proj);
 6795|   131k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   131k|        {
 6761|   131k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 131k, False: 0]
  ------------------
 6762|   131k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 131k, False: 0]
  ------------------
 6763|   131k|                    return first;
 6764|   131k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   131k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   131k|            {
 1300|   131k|                return fn::impl(std::forward<F>(f),
 1301|   131k|                                std::forward<Args>(args)...);
 1302|   131k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   131k|            {
 1289|   131k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   131k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   131k|            {
 1300|   131k|                return fn::impl(std::forward<F>(f),
 1301|   131k|                                std::forward<Args>(args)...);
 1302|   131k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   131k|            {
 1289|   131k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   131k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   131k|    {
 1142|   131k|        return std::forward<T>(t);
 1143|   131k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.44M|            {
 2759|  1.44M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.44M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.44M|            {
 2739|  1.44M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.44M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.05M|            {
 2693|  3.05M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.05M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.05M|            {
 2672|  3.05M|                return decay_copy(t.begin());
 2673|  3.05M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  5.03M|            {
 3178|  5.03M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.03M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.03M|            {
 3158|  5.03M|                return t.data();
 3159|  5.03M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  20.4M|            {
 3038|  20.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  20.4M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  20.4M|            {
 3000|  20.4M|                return decay_copy(std::forward<T>(t).size());
 3001|  20.4M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  5.01M|            {
 3597|  5.01M|                i = std::move(bound);
 3598|  5.01M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.26M|            {
 3780|  5.26M|                ++x;
 3781|  5.26M|                return x;
 3782|  5.26M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  15.4M|            {
 3077|  15.4M|                return fn::impl(std::forward<T>(t));
 3078|  15.4M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  15.4M|            {
 3067|  15.4M|                return static_cast<ssize_return_t<T>>(
 3068|  15.4M|                    ranges::size(std::forward<T>(t)));
 3069|  15.4M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|   230k|        {
 6793|   230k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   230k|                                    proj);
 6795|   230k|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|   230k|        {
 6761|   379k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 377k, False: 1.79k]
  ------------------
 6762|   377k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 228k, False: 148k]
  ------------------
 6763|   228k|                    return first;
 6764|   228k|                }
 6765|   148k|                ++first;
 6766|   148k|            }
 6767|  1.79k|            return first;
 6768|   230k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|   377k|            {
 1300|   377k|                return fn::impl(std::forward<F>(f),
 1301|   377k|                                std::forward<Args>(args)...);
 1302|   377k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|   377k|            {
 1289|   377k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   377k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   377k|            {
 1300|   377k|                return fn::impl(std::forward<F>(f),
 1301|   377k|                                std::forward<Args>(args)...);
 1302|   377k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|   377k|            {
 1289|   377k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   377k|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|   377k|    {
 1142|   377k|        return std::forward<T>(t);
 1143|   377k|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  5.01M|            {
 3798|  5.01M|                ranges::advance(x, bound);
 3799|  5.01M|                return x;
 3800|  5.01M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  5.01M|            {
 3686|  5.01M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  5.01M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  4.91M|            {
 3756|  4.91M|                return fn::impl(std::move(first), std::move(last));
 3757|  4.91M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  4.91M|            {
 3716|  4.91M|                return s - i;
 3717|  4.91M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  6.28M|        {
 6375|  6.28M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  6.28M|        {
 6294|  6.28M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  5.77M|            {
 2693|  5.77M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.77M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  5.77M|            {
 2672|  5.77M|                return decay_copy(t.begin());
 2673|  5.77M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  22.8M|    {
 2606|  22.8M|        return std::forward<T>(t);
 2607|  22.8M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  6.37M|            {
 2759|  6.37M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.37M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  6.37M|            {
 2739|  6.37M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.37M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  16.2M|        {
 6449|  16.2M|            return data_.end_;
 6450|  16.2M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  11.8M|        {
 6444|  11.8M|            return data_.begin_;
 6445|  11.8M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  11.8M|        {
 6449|  11.8M|            return data_.end_;
 6450|  11.8M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  3.94M|        {
 6375|  3.94M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  3.94M|        {
 6294|  3.94M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   394k|            {
 3780|   394k|                ++x;
 3781|   394k|                return x;
 3782|   394k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   394k|        {
 6793|   394k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   394k|                                    proj);
 6795|   394k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   394k|        {
 6761|   394k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 394k, False: 39]
  ------------------
 6762|   394k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 394k, False: 0]
  ------------------
 6763|   394k|                    return first;
 6764|   394k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|     39|            return first;
 6768|   394k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   394k|            {
 1300|   394k|                return fn::impl(std::forward<F>(f),
 1301|   394k|                                std::forward<Args>(args)...);
 1302|   394k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   394k|            {
 1289|   394k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   394k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   394k|            {
 1300|   394k|                return fn::impl(std::forward<F>(f),
 1301|   394k|                                std::forward<Args>(args)...);
 1302|   394k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   394k|            {
 1289|   394k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   394k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   394k|    {
 1142|   394k|        return std::forward<T>(t);
 1143|   394k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  9.87M|            {
 2759|  9.87M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.87M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  9.87M|            {
 2739|  9.87M|                return decay_copy(std::forward<T>(t).end());
 2740|  9.87M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  17.0M|            {
 2693|  17.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  17.0M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  17.0M|            {
 2672|  17.0M|                return decay_copy(t.begin());
 2673|  17.0M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  1.87M|            {
 3178|  1.87M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.87M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.87M|            {
 3158|  1.87M|                return t.data();
 3159|  1.87M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  16.1M|        {
 6793|  16.1M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  16.1M|                                    proj);
 6795|  16.1M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  16.1M|        {
 6761|   138M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 123M, False: 14.9M]
  ------------------
 6762|   123M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.20M, False: 121M]
  ------------------
 6763|  1.20M|                    return first;
 6764|  1.20M|                }
 6765|   121M|                ++first;
 6766|   121M|            }
 6767|  14.9M|            return first;
 6768|  16.1M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   123M|            {
 1300|   123M|                return fn::impl(std::forward<F>(f),
 1301|   123M|                                std::forward<Args>(args)...);
 1302|   123M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|   123M|            {
 1289|   123M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   123M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  1.29M|        {
 6793|  1.29M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.29M|                                    proj);
 6795|  1.29M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  1.29M|        {
 6761|  1.55M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.39M, False: 154k]
  ------------------
 6762|  1.39M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.14M, False: 254k]
  ------------------
 6763|  1.14M|                    return first;
 6764|  1.14M|                }
 6765|   254k|                ++first;
 6766|   254k|            }
 6767|   154k|            return first;
 6768|  1.29M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  1.39M|            {
 1300|  1.39M|                return fn::impl(std::forward<F>(f),
 1301|  1.39M|                                std::forward<Args>(args)...);
 1302|  1.39M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  1.39M|            {
 1289|  1.39M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.39M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.04M|    {
   44|  2.04M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|     68|{
   50|     68|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|     68|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  20.5k|{
   50|  20.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  20.5k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|    915|{
   50|    915|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|    915|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|    915|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   263k|    {
   44|   263k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  5.38M|    {
   44|  5.38M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   789k|    {
   44|   789k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   151k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|   128k|{
   50|   128k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   128k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  22.3M|    {
 1191|  22.3M|        return has_value();
 1192|  22.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  44.1M|    {
  189|  44.1M|        return m_has_value;
  190|  44.1M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.45M|    {
 1197|  1.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.45M|    {
  172|  1.45M|        return m_unexpected;
  173|  1.45M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.5M|    {
   72|  10.5M|        return m_unexpected;
   73|  10.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.25M|    {
   58|  5.25M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.25M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  13.9M|    {
   67|  13.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  13.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  13.9M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.02M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  6.78M|    {
 1251|  6.78M|        return value();
 1252|  6.78M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  20.3M|    {
 1221|  20.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  20.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  20.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  20.3M|    {
  155|  20.3M|        return m_value;
  156|  20.3M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  1.89M|    {
 1034|  1.89M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  1.89M|    {
  142|  1.89M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.02M|    {
 1191|  2.02M|        return has_value();
 1192|  2.02M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.05M|    {
  189|  4.05M|        return m_has_value;
  190|  4.05M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   131k|    {
 1197|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   131k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   131k|    {
  172|   131k|        return m_unexpected;
  173|   131k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   657k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.88M|    {
 1251|  1.88M|        return value();
 1252|  1.88M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  1.89M|    {
 1221|  1.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.89M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.89M|    {
  155|  1.89M|        return m_value;
  156|  1.89M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   613k|    {
 1034|   613k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   613k|    {
  142|   613k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   657k|    {
 1191|   657k|        return has_value();
 1192|   657k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.27M|    {
  189|  1.27M|        return m_has_value;
  190|  1.27M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   613k|    {
 1274|   613k|        return std::addressof(value());
 1275|   613k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   613k|    {
 1221|   613k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   613k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   613k|    {
  155|   613k|        return m_value;
  156|   613k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|  8.64k|    {
 1263|  8.64k|        return std::move(value());
 1264|  8.64k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   675k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   631k|    {
 1034|   631k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   631k|    {
  142|   631k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   675k|    {
 1191|   675k|        return has_value();
 1192|   675k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.30M|    {
  189|  1.30M|        return m_has_value;
  190|  1.30M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   631k|    {
 1274|   631k|        return std::addressof(value());
 1275|   631k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   631k|    {
 1221|   631k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   631k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   631k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   631k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   631k|    {
  155|   631k|        return m_value;
  156|   631k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   695k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   651k|    {
 1034|   651k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   651k|    {
  142|   651k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   695k|    {
 1191|   695k|        return has_value();
 1192|   695k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   651k|    {
 1274|   651k|        return std::addressof(value());
 1275|   651k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   651k|    {
 1221|   651k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   651k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   651k|    {
  155|   651k|        return m_value;
  156|   651k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   263k|    {
  189|   263k|        return m_has_value;
  190|   263k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   131k|    {
 1197|   131k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   131k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   131k|    {
  172|   131k|        return m_unexpected;
  173|   131k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  43.9k|    {
 1191|  43.9k|        return has_value();
 1192|  43.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.9k|    {
  189|  43.9k|        return m_has_value;
  190|  43.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  43.9k|    {
 1191|  43.9k|        return has_value();
 1192|  43.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.9k|    {
  189|  43.9k|        return m_has_value;
  190|  43.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.9k|    {
 1078|  43.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.9k|    {
  151|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  43.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  43.9k|    {
 1191|  43.9k|        return has_value();
 1192|  43.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  43.9k|    {
  189|  43.9k|        return m_has_value;
  190|  43.9k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   395k|    {
 1078|   395k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   395k|    {
  151|   395k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.28M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.88M|    {
 1034|  4.88M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.88M|    {
  142|  4.88M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.28M|    {
 1191|  5.28M|        return has_value();
 1192|  5.28M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.5M|    {
  189|  10.5M|        return m_has_value;
  190|  10.5M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   395k|    {
 1197|   395k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   395k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   395k|    {
  172|   395k|        return m_unexpected;
  173|   395k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.75M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.88M|    {
 1251|  4.88M|        return value();
 1252|  4.88M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.88M|    {
 1221|  4.88M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.88M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.88M|    {
  155|  4.88M|        return m_value;
  156|  4.88M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.62M|    {
 1034|  1.62M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.62M|    {
  142|  1.62M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  1.75M|    {
 1191|  1.75M|        return has_value();
 1192|  1.75M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.37M|    {
  189|  3.37M|        return m_has_value;
  190|  3.37M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  1.62M|    {
 1274|  1.62M|        return std::addressof(value());
 1275|  1.62M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.62M|    {
 1221|  1.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.62M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.62M|    {
  155|  1.62M|        return m_value;
  156|  1.62M|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|  5.87k|    {
 1263|  5.87k|        return std::move(value());
 1264|  5.87k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.76M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.62M|    {
 1034|  1.62M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.62M|    {
  142|  1.62M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  1.76M|    {
 1191|  1.76M|        return has_value();
 1192|  1.76M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.38M|    {
  189|  3.38M|        return m_has_value;
  190|  3.38M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  1.62M|    {
 1274|  1.62M|        return std::addressof(value());
 1275|  1.62M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.62M|    {
 1221|  1.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.62M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.62M|    {
  155|  1.62M|        return m_value;
  156|  1.62M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.76M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.63M|    {
 1034|  1.63M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.63M|    {
  142|  1.63M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  1.76M|    {
 1191|  1.76M|        return has_value();
 1192|  1.76M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.40M|    {
  189|  3.40M|        return m_has_value;
  190|  3.40M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  1.63M|    {
 1274|  1.63M|        return std::addressof(value());
 1275|  1.63M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.63M|    {
 1221|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.63M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.63M|    {
  155|  1.63M|        return m_value;
  156|  1.63M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   395k|    {
 1078|   395k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   395k|    {
  151|   395k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   395k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   395k|    {
 1191|   395k|        return has_value();
 1192|   395k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   790k|    {
  189|   790k|        return m_has_value;
  190|   790k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   395k|    {
 1197|   395k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   395k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   395k|    {
  172|   395k|        return m_unexpected;
  173|   395k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   131k|    {
  189|   131k|        return m_has_value;
  190|   131k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   131k|    {
  189|   131k|        return m_has_value;
  190|   131k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   131k|    {
  189|   131k|        return m_has_value;
  190|   131k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.02M|    {
 1405|  2.02M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.02M|                                            std::forward<F>(f));
 1407|  2.02M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.02M|{
  927|  2.02M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.02M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.02M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.02M|            return result(*std::forward<Exp>(exp));
  931|  2.02M|        }
  932|       |
  933|  2.02M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.02M|        return result(unexpect, monostate{});
  935|  2.02M|    }
  936|  2.02M|    else {
  937|  2.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.00M, False: 22.9k]
  |  |  ------------------
  ------------------
  939|  2.02M|                   ? result(*std::forward<Exp>(exp))
  940|  2.02M|                   : result(unexpect,
  941|  22.9k|                            std::invoke(std::forward<F>(f),
  942|  22.9k|                                        std::forward<Exp>(exp).error()));
  943|  2.02M|    }
  944|  2.02M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  6.17M|    {
  189|  6.17M|        return m_has_value;
  190|  6.17M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.00M|    {
 1263|  2.00M|        return std::move(value());
 1264|  2.00M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.04M|    {
 1221|  2.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.04M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  2.04M|    {
  155|  2.04M|        return m_value;
  156|  2.04M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  7.79M|    {
 1034|  7.79M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  7.79M|    {
  142|  7.79M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  22.9k|    {
 1207|  22.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  22.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  24.0k|    {
  172|  24.0k|        return m_unexpected;
  173|  24.0k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   831k|    {
   72|   831k|        return m_unexpected;
   73|   831k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.06M|    {
 1088|  2.06M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.27M|    {
  151|  2.27M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  12.0M|    {
 1191|  12.0M|        return has_value();
 1192|  12.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  18.1M|    {
  189|  18.1M|        return m_has_value;
  190|  18.1M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   272k|    {
 1197|   272k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   272k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   272k|    {
  172|   272k|        return m_unexpected;
  173|   272k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   203k|    {
 1078|   203k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.97M|    {
 1263|  3.97M|        return std::move(value());
 1264|  3.97M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.85M|    {
 1221|  5.85M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.85M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  5.85M|    {
  155|  5.85M|        return m_value;
  156|  5.85M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   149k|    {
   58|   149k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   149k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   149k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.45M|    {
 1078|  1.45M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.45M|    {
  151|  1.45M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  21.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  90.8k|    {
   58|  90.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  90.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  90.8k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  24.0k|    {
 1078|  24.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  24.0k|    {
  151|  24.0k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   415k|    {
   67|   415k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   415k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   415k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.11M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  4.08M|    {
 1034|  4.08M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.08M|    {
  142|  4.08M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  2.08M|    {
 1191|  2.08M|        return has_value();
 1192|  2.08M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.13k|    {
 1197|  1.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.13k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  55.6k|    {
   58|  55.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  55.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.05M|    {
 1078|  2.05M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  31.9M|    {
   72|  31.9M|        return m_unexpected;
   73|  31.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.05M|    {
  151|  2.05M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  8.44M|    {
   67|  8.44M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  8.44M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  36.5k|    {
 1251|  36.5k|        return value();
 1252|  36.5k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  37.4k|    {
 1034|  37.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  37.4k|    {
  142|  37.4k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  30.5M|    {
   58|  30.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  30.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  30.5M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  7.96M|    {
 1078|  7.96M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  30.5M|    {
   72|  30.5M|        return m_unexpected;
   73|  30.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  7.96M|    {
  151|  7.96M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  30.5M|    {
   67|  30.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  30.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  30.5M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  12.1M|    {
 1191|  12.1M|        return has_value();
 1192|  12.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  20.3M|    {
  189|  20.3M|        return m_has_value;
  190|  20.3M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.02M|    {
 1197|  6.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.02M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.02M|    {
  172|  6.02M|        return m_unexpected;
  173|  6.02M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.00M|    {
 1034|  2.00M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.00M|    {
  142|  2.00M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   324k|    {
   58|   324k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   324k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   324k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|     84|    {
 1078|     84|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|     84|    {
  151|     84|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|   174k|    {
 1251|   174k|        return value();
 1252|   174k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|   174k|    {
 1221|   174k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   174k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   174k|    {
  155|   174k|        return m_value;
  156|   174k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  1.58k|    {
 1191|  1.58k|        return has_value();
 1192|  1.58k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.01M|    {
  189|  4.01M|        return m_has_value;
  190|  4.01M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.00M|    {
 1263|  2.00M|        return std::move(value());
 1264|  2.00M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.00M|    {
 1221|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.00M|    {
  155|  2.00M|        return m_value;
  156|  2.00M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  87.4k|    {
 1034|  87.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  87.4k|    {
  142|  87.4k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.87M|    {
 1251|  1.87M|        return value();
 1252|  1.87M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|  8.03k|    {
 1034|  8.03k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.03k|    {
  142|  8.03k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  8.06M|    {
   58|  8.06M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  8.06M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  13.5M|    {
 1263|  13.5M|        return std::move(value());
 1264|  13.5M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.00M|    {
 1405|  2.00M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.00M|                                            std::forward<F>(f));
 1407|  2.00M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.00M|{
  927|  2.00M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.00M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.00M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.00M|            return result(*std::forward<Exp>(exp));
  931|  2.00M|        }
  932|       |
  933|  2.00M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.00M|        return result(unexpect, monostate{});
  935|  2.00M|    }
  936|  2.00M|    else {
  937|  2.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.00M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.00M|                   ? result(*std::forward<Exp>(exp))
  940|  2.00M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.00M|    }
  944|  2.00M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.00M|    {
 1034|  2.00M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.00M|    {
  142|  2.00M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.00M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.00M|    {
 1191|  2.00M|        return has_value();
 1192|  2.00M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.01M|    {
  189|  4.01M|        return m_has_value;
  190|  4.01M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.00M|    {
 1263|  2.00M|        return std::move(value());
 1264|  2.00M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.00M|    {
 1221|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.00M|    {
  155|  2.00M|        return m_value;
  156|  2.00M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  2.04M|    {
 1395|  2.04M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.04M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.04M|{
  927|  2.04M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.04M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.04M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.04M|            return result(*std::forward<Exp>(exp));
  931|  2.04M|        }
  932|       |
  933|  2.04M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.04M|        return result(unexpect, monostate{});
  935|  2.04M|    }
  936|  2.04M|    else {
  937|  2.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
  939|  2.04M|                   ? result(*std::forward<Exp>(exp))
  940|  2.04M|                   : result(unexpect,
  941|  2.04M|                            std::invoke(std::forward<F>(f),
  942|  2.04M|                                        std::forward<Exp>(exp).error()));
  943|  2.04M|    }
  944|  2.04M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  1.50k|    {
 1274|  1.50k|        return std::addressof(value());
 1275|  1.50k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  20.3M|    {
 1034|  20.3M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  20.3M|    {
  142|  20.3M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    255|    {
 1078|    255|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    255|    {
  151|    255|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   597k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   597k|    {
 1034|   597k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   597k|    {
  142|   597k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   131k|    {
 1405|   131k|        return detail::transform_error_impl(std::move(*this),
 1406|   131k|                                            std::forward<F>(f));
 1407|   131k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   131k|{
  927|   131k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   131k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   131k|        if (SCN_LIKELY(exp.has_value())) {
  930|   131k|            return result(*std::forward<Exp>(exp));
  931|   131k|        }
  932|       |
  933|   131k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   131k|        return result(unexpect, monostate{});
  935|   131k|    }
  936|   131k|    else {
  937|   131k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   131k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 131k, False: 78]
  |  |  ------------------
  ------------------
  939|   131k|                   ? result(*std::forward<Exp>(exp))
  940|   131k|                   : result(unexpect,
  941|     78|                            std::invoke(std::forward<F>(f),
  942|     78|                                        std::forward<Exp>(exp).error()));
  943|   131k|    }
  944|   131k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.06M|    {
  189|  1.06M|        return m_has_value;
  190|  1.06M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   465k|    {
 1263|   465k|        return std::move(value());
 1264|   465k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   465k|    {
 1221|   465k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   465k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   465k|    {
  155|   465k|        return m_value;
  156|   465k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   131k|    {
 1034|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   131k|    {
  142|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   658k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    255|    {
 1207|    255|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    255|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    255|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    255|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    255|    {
  172|    255|        return m_unexpected;
  173|    255|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   263k|    {
 1088|   263k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   526k|    {
  151|   526k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   131k|    {
 1078|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   131k|    {
  151|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.06M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   597k|    {
 1078|   597k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   597k|    {
  151|   597k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.19M|    {
 1191|  1.19M|        return has_value();
 1192|  1.19M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.31M|    {
  189|  2.31M|        return m_has_value;
  190|  2.31M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   526k|    {
 1197|   526k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   526k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   526k|    {
  172|   526k|        return m_unexpected;
  173|   526k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   131k|    {
 1034|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   131k|    {
  142|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   333k|    {
 1221|   333k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   333k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   333k|    {
  155|   333k|        return m_value;
  156|   333k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   263k|    {
  189|   263k|        return m_has_value;
  190|   263k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   131k|    {
 1263|   131k|        return std::move(value());
 1264|   131k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   131k|    {
 1221|   131k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   131k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   131k|    {
  155|   131k|        return m_value;
  156|   131k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   334k|    {
 1405|   334k|        return detail::transform_error_impl(std::move(*this),
 1406|   334k|                                            std::forward<F>(f));
 1407|   334k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   334k|{
  927|   334k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   334k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   334k|        if (SCN_LIKELY(exp.has_value())) {
  930|   334k|            return result(*std::forward<Exp>(exp));
  931|   334k|        }
  932|       |
  933|   334k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   334k|        return result(unexpect, monostate{});
  935|   334k|    }
  936|   334k|    else {
  937|   334k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   334k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   334k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 333k, False: 177]
  |  |  ------------------
  ------------------
  939|   334k|                   ? result(*std::forward<Exp>(exp))
  940|   334k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   334k|    }
  944|   334k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   333k|    {
 1034|   333k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   333k|    {
  142|   333k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   333k|    {
 1263|   333k|        return std::move(value());
 1264|   333k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   263k|    {
 1078|   263k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   131k|    {
 1221|   131k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.31M|    {
  189|  1.31M|        return m_has_value;
  190|  1.31M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   131k|    {
  155|   131k|        return m_value;
  156|   131k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   131k|    {
 1405|   131k|        return detail::transform_error_impl(std::move(*this),
 1406|   131k|                                            std::forward<F>(f));
 1407|   131k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   131k|{
  927|   131k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   131k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   131k|        if (SCN_LIKELY(exp.has_value())) {
  930|   131k|            return result(*std::forward<Exp>(exp));
  931|   131k|        }
  932|       |
  933|   131k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   131k|        return result(unexpect, monostate{});
  935|   131k|    }
  936|   131k|    else {
  937|   131k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   131k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 131k, False: 0]
  |  |  ------------------
  ------------------
  939|   131k|                   ? result(*std::forward<Exp>(exp))
  940|   131k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   131k|    }
  944|   131k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   131k|    {
 1034|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   131k|    {
  142|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   131k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   131k|    {
 1191|   131k|        return has_value();
 1192|   131k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   263k|    {
  189|   263k|        return m_has_value;
  190|   263k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   131k|    {
 1263|   131k|        return std::move(value());
 1264|   131k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   131k|    {
 1221|   131k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   131k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   131k|    {
  155|   131k|        return m_value;
  156|   131k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   263k|    {
 1395|   263k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   263k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   263k|{
  927|   263k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   263k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   263k|        if (SCN_LIKELY(exp.has_value())) {
  930|   263k|            return result(*std::forward<Exp>(exp));
  931|   263k|        }
  932|       |
  933|   263k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   263k|        return result(unexpect, monostate{});
  935|   263k|    }
  936|   263k|    else {
  937|   263k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   263k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   263k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
  939|   263k|                   ? result(*std::forward<Exp>(exp))
  940|   263k|                   : result(unexpect,
  941|   263k|                            std::invoke(std::forward<F>(f),
  942|   263k|                                        std::forward<Exp>(exp).error()));
  943|   263k|    }
  944|   263k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   789k|    {
 1191|   789k|        return has_value();
 1192|   789k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   395k|    {
 1197|   395k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   395k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   395k|    {
  172|   395k|        return m_unexpected;
  173|   395k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   131k|    {
 1263|   131k|        return std::move(value());
 1264|   131k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   390k|    {
 1078|   390k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   390k|    {
  151|   390k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  25.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  25.6M|    {
 1034|  25.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  25.6M|    {
  142|  25.6M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.28M|    {
 1405|  5.28M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.28M|                                            std::forward<F>(f));
 1407|  5.28M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.28M|{
  927|  5.28M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.28M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.28M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.28M|            return result(*std::forward<Exp>(exp));
  931|  5.28M|        }
  932|       |
  933|  5.28M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.28M|        return result(unexpect, monostate{});
  935|  5.28M|    }
  936|  5.28M|    else {
  937|  5.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.21M, False: 64.9k]
  |  |  ------------------
  ------------------
  939|  5.28M|                   ? result(*std::forward<Exp>(exp))
  940|  5.28M|                   : result(unexpect,
  941|  64.9k|                            std::invoke(std::forward<F>(f),
  942|  64.9k|                                        std::forward<Exp>(exp).error()));
  943|  5.28M|    }
  944|  5.28M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  46.7M|    {
  189|  46.7M|        return m_has_value;
  190|  46.7M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  20.3M|    {
 1263|  20.3M|        return std::move(value());
 1264|  20.3M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  20.3M|    {
 1221|  20.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  20.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  20.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  20.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  20.3M|    {
  155|  20.3M|        return m_value;
  156|  20.3M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  20.1M|    {
 1034|  20.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  20.1M|    {
  142|  20.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   389k|    {
 1207|   389k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   389k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   389k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   389k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   390k|    {
  172|   390k|        return m_unexpected;
  173|   390k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  5.45M|    {
 1088|  5.45M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  6.03M|    {
  151|  6.03M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   583k|    {
 1078|   583k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  5.26M|    {
 1191|  5.26M|        return has_value();
 1192|  5.26M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.38k|    {
 1197|  1.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.38k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  5.54M|    {
 1078|  5.54M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  5.86M|    {
  151|  5.86M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  41.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  21.5k|    {
 1251|  21.5k|        return value();
 1252|  21.5k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  22.0k|    {
 1034|  22.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  22.0k|    {
  142|  22.0k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  20.5M|    {
 1078|  20.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  20.5M|    {
  151|  20.5M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  46.8M|    {
 1191|  46.8M|        return has_value();
 1192|  46.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  83.5M|    {
  189|  83.5M|        return m_has_value;
  190|  83.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  16.1M|    {
 1197|  16.1M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  16.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  16.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  16.1M|    {
  172|  16.1M|        return m_unexpected;
  173|  16.1M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.21M|    {
 1034|  5.21M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.21M|    {
  142|  5.21M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|     84|    {
 1078|     84|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|     84|    {
  151|     84|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|   106k|    {
 1251|   106k|        return value();
 1252|   106k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.2M|    {
 1221|  15.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.2M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  15.2M|    {
  155|  15.2M|        return m_value;
  156|  15.2M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  1.25k|    {
 1191|  1.25k|        return has_value();
 1192|  1.25k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.4M|    {
  189|  10.4M|        return m_has_value;
  190|  10.4M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.21M|    {
 1263|  5.21M|        return std::move(value());
 1264|  5.21M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.21M|    {
 1221|  5.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.21M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.21M|    {
  155|  5.21M|        return m_value;
  156|  5.21M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  15.4M|    {
 1405|  15.4M|        return detail::transform_error_impl(std::move(*this),
 1406|  15.4M|                                            std::forward<F>(f));
 1407|  15.4M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  15.4M|{
  927|  15.4M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  15.4M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  15.4M|        if (SCN_LIKELY(exp.has_value())) {
  930|  15.4M|            return result(*std::forward<Exp>(exp));
  931|  15.4M|        }
  932|       |
  933|  15.4M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  15.4M|        return result(unexpect, monostate{});
  935|  15.4M|    }
  936|  15.4M|    else {
  937|  15.4M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  15.4M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  15.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 15.1M, False: 324k]
  |  |  ------------------
  ------------------
  939|  15.4M|                   ? result(*std::forward<Exp>(exp))
  940|  15.4M|                   : result(unexpect,
  941|   324k|                            std::invoke(std::forward<F>(f),
  942|   324k|                                        std::forward<Exp>(exp).error()));
  943|  15.4M|    }
  944|  15.4M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  15.1M|    {
 1034|  15.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  15.1M|    {
  142|  15.1M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   324k|    {
 1088|   324k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  15.1M|    {
 1263|  15.1M|        return std::move(value());
 1264|  15.1M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.87M|    {
 1251|  4.87M|        return value();
 1252|  4.87M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.1M|    {
 1221|  15.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  47.3M|    {
  189|  47.3M|        return m_has_value;
  190|  47.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  15.1M|    {
  155|  15.1M|        return m_value;
  156|  15.1M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|  4.53k|    {
 1034|  4.53k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.53k|    {
  142|  4.53k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  5.21M|    {
 1405|  5.21M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.21M|                                            std::forward<F>(f));
 1407|  5.21M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  5.21M|{
  927|  5.21M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.21M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.21M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.21M|            return result(*std::forward<Exp>(exp));
  931|  5.21M|        }
  932|       |
  933|  5.21M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.21M|        return result(unexpect, monostate{});
  935|  5.21M|    }
  936|  5.21M|    else {
  937|  5.21M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.21M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.21M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.21M|                   ? result(*std::forward<Exp>(exp))
  940|  5.21M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.21M|    }
  944|  5.21M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  5.21M|    {
 1034|  5.21M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.21M|    {
  142|  5.21M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  5.21M|    {
 1191|  5.21M|        return has_value();
 1192|  5.21M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.4M|    {
  189|  10.4M|        return m_has_value;
  190|  10.4M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.21M|    {
 1263|  5.21M|        return std::move(value());
 1264|  5.21M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.21M|    {
 1221|  5.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.21M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.21M|    {
  155|  5.21M|        return m_value;
  156|  5.21M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  5.38M|    {
 1395|  5.38M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  5.38M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  5.38M|{
  927|  5.38M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.38M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.38M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.38M|            return result(*std::forward<Exp>(exp));
  931|  5.38M|        }
  932|       |
  933|  5.38M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.38M|        return result(unexpect, monostate{});
  935|  5.38M|    }
  936|  5.38M|    else {
  937|  5.38M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.38M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 5.38M]
  |  |  ------------------
  ------------------
  939|  5.38M|                   ? result(*std::forward<Exp>(exp))
  940|  5.38M|                   : result(unexpect,
  941|  5.38M|                            std::invoke(std::forward<F>(f),
  942|  5.38M|                                        std::forward<Exp>(exp).error()));
  943|  5.38M|    }
  944|  5.38M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  1.16k|    {
 1274|  1.16k|        return std::addressof(value());
 1275|  1.16k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  31.4M|    {
 1191|  31.4M|        return has_value();
 1192|  31.4M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   820k|    {
 1197|   820k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   820k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   820k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   820k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   820k|    {
  172|   820k|        return m_unexpected;
  173|   820k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.2M|    {
 1263|  10.2M|        return std::move(value());
 1264|  10.2M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   789k|    {
 1078|   789k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.57M|    {
  151|  1.57M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.97M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   394k|    {
 1034|   394k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   394k|    {
  142|   394k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  2.36M|    {
 1191|  2.36M|        return has_value();
 1192|  2.36M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.94M|    {
  189|  3.94M|        return m_has_value;
  190|  3.94M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.18M|    {
 1197|  1.18M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.18M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.18M|    {
  172|  1.18M|        return m_unexpected;
  173|  1.18M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   394k|    {
 1221|   394k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   394k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   394k|    {
  155|   394k|        return m_value;
  156|   394k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    627|    {
 1078|    627|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    627|    {
  151|    627|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.79M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.79M|    {
 1034|  1.79M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.79M|    {
  142|  1.79M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   395k|    {
 1405|   395k|        return detail::transform_error_impl(std::move(*this),
 1406|   395k|                                            std::forward<F>(f));
 1407|   395k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   395k|{
  927|   395k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   395k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   395k|        if (SCN_LIKELY(exp.has_value())) {
  930|   395k|            return result(*std::forward<Exp>(exp));
  931|   395k|        }
  932|       |
  933|   395k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   395k|        return result(unexpect, monostate{});
  935|   395k|    }
  936|   395k|    else {
  937|   395k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   395k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   395k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 394k, False: 351]
  |  |  ------------------
  ------------------
  939|   395k|                   ? result(*std::forward<Exp>(exp))
  940|   395k|                   : result(unexpect,
  941|    351|                            std::invoke(std::forward<F>(f),
  942|    351|                                        std::forward<Exp>(exp).error()));
  943|   395k|    }
  944|   395k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  3.58M|    {
  189|  3.58M|        return m_has_value;
  190|  3.58M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.39M|    {
 1263|  1.39M|        return std::move(value());
 1264|  1.39M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.79M|    {
 1221|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.79M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.79M|    {
  155|  1.79M|        return m_value;
  156|  1.79M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    627|    {
 1207|    627|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    627|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    627|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    627|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    627|    {
  172|    627|        return m_unexpected;
  173|    627|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   789k|    {
 1088|   789k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   394k|    {
 1191|   394k|        return has_value();
 1192|   394k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   395k|    {
 1078|   395k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   395k|    {
  151|   395k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.18M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   394k|    {
 1251|   394k|        return value();
 1252|   394k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   394k|    {
 1034|   394k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   394k|    {
  142|   394k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.39M|    {
 1078|  1.39M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.39M|    {
  151|  1.39M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.58M|    {
 1191|  3.58M|        return has_value();
 1192|  3.58M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.95M|    {
  189|  6.95M|        return m_has_value;
  190|  6.95M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  1.18M|    {
 1197|  1.18M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.18M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.18M|    {
  172|  1.18M|        return m_unexpected;
  173|  1.18M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   394k|    {
 1034|   394k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   394k|    {
  142|   394k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   394k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   394k|    {
 1251|   394k|        return value();
 1252|   394k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.39M|    {
 1221|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.39M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.39M|    {
  155|  1.39M|        return m_value;
  156|  1.39M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   789k|    {
  189|   789k|        return m_has_value;
  190|   789k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   394k|    {
 1263|   394k|        return std::move(value());
 1264|   394k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   394k|    {
 1221|   394k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   394k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   394k|    {
  155|   394k|        return m_value;
  156|   394k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.00M|    {
 1405|  1.00M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.00M|                                            std::forward<F>(f));
 1407|  1.00M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.00M|{
  927|  1.00M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.00M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.00M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.00M|            return result(*std::forward<Exp>(exp));
  931|  1.00M|        }
  932|       |
  933|  1.00M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.00M|        return result(unexpect, monostate{});
  935|  1.00M|    }
  936|  1.00M|    else {
  937|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.00M, False: 276]
  |  |  ------------------
  ------------------
  939|  1.00M|                   ? result(*std::forward<Exp>(exp))
  940|  1.00M|                   : result(unexpect,
  941|    276|                            std::invoke(std::forward<F>(f),
  942|    276|                                        std::forward<Exp>(exp).error()));
  943|  1.00M|    }
  944|  1.00M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.00M|    {
 1034|  1.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.00M|    {
  142|  1.00M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    276|    {
 1088|    276|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.00M|    {
 1263|  1.00M|        return std::move(value());
 1264|  1.00M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   394k|    {
 1405|   394k|        return detail::transform_error_impl(std::move(*this),
 1406|   394k|                                            std::forward<F>(f));
 1407|   394k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   394k|{
  927|   394k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   394k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   394k|        if (SCN_LIKELY(exp.has_value())) {
  930|   394k|            return result(*std::forward<Exp>(exp));
  931|   394k|        }
  932|       |
  933|   394k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   394k|        return result(unexpect, monostate{});
  935|   394k|    }
  936|   394k|    else {
  937|   394k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   394k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   394k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 394k, False: 0]
  |  |  ------------------
  ------------------
  939|   394k|                   ? result(*std::forward<Exp>(exp))
  940|   394k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   394k|    }
  944|   394k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   394k|    {
 1034|   394k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   394k|    {
  142|   394k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   394k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   394k|    {
 1191|   394k|        return has_value();
 1192|   394k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   789k|    {
  189|   789k|        return m_has_value;
  190|   789k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   394k|    {
 1263|   394k|        return std::move(value());
 1264|   394k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   394k|    {
 1221|   394k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   394k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   394k|    {
  155|   394k|        return m_value;
  156|   394k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   789k|    {
 1395|   789k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   789k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   789k|{
  927|   789k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   789k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   789k|        if (SCN_LIKELY(exp.has_value())) {
  930|   789k|            return result(*std::forward<Exp>(exp));
  931|   789k|        }
  932|       |
  933|   789k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   789k|        return result(unexpect, monostate{});
  935|   789k|    }
  936|   789k|    else {
  937|   789k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   789k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   789k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
  939|   789k|                   ? result(*std::forward<Exp>(exp))
  940|   789k|                   : result(unexpect,
  941|   789k|                            std::invoke(std::forward<F>(f),
  942|   789k|                                        std::forward<Exp>(exp).error()));
  943|   789k|    }
  944|   789k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   394k|    {
 1263|   394k|        return std::move(value());
 1264|   394k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|  12.5k|    {
 1034|  12.5k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|  12.5k|    {
  142|  12.5k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.75k|{
  200|  6.75k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.75k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  6.75k|{
  180|  6.75k|    return p;
  181|  6.75k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.75k|{
  200|  6.75k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.75k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  6.75k|{
  180|  6.75k|    return p;
  181|  6.75k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.75k|{
  200|  6.75k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.75k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  6.75k|{
  180|  6.75k|    return p;
  181|  6.75k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   265M|{
  200|   265M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   265M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   265M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|   266M|{
  180|   266M|    return p;
  181|   266M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   150M|{
  200|   150M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   150M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   150M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|   150M|{
  180|   150M|    return p;
  181|   150M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   789k|{
  200|   789k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   789k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   150M|{
  200|   150M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   150M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   150M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|   158M|{
  180|   158M|    return p;
  181|   158M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  7.89M|{
  200|  7.89M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  7.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  7.89M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  26.9k|    {
  242|  26.9k|        return static_cast<size_type>(m_end - m_ptr);
  243|  26.9k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  6.75k|    {
  181|  6.75k|        return m_ptr;
  182|  6.75k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  6.75k|    {
  185|  6.75k|        return m_end;
  186|  6.75k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  3.37k|    {
  238|  3.37k|        return m_ptr;
  239|  3.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  3.37k|    {
  120|  3.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  40.5k|    {
  181|  40.5k|        return m_ptr;
  182|  40.5k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  40.5k|    {
  185|  40.5k|        return m_end;
  186|  40.5k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  3.37k|    {
  120|  3.37k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   121k|    {
  181|   121k|        return m_ptr;
  182|   121k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   121k|    {
  185|   121k|        return m_end;
  186|   121k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  3.37k|    {
  120|  3.37k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  75.3M|    {
  120|  75.3M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  75.3M|    {
  238|  75.3M|        return m_ptr;
  239|  75.3M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  75.3M|    {
  242|  75.3M|        return static_cast<size_type>(m_end - m_ptr);
  243|  75.3M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   131k|{
   60|   131k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   131k|                                          const CharT*, const CharT*>) {
   62|   131k|        return {first, last};
   63|   131k|    }
   64|   131k|    else {
   65|   131k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   131k|    }
   67|   131k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  75.1M|{
   60|  75.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  75.1M|                                          const CharT*, const CharT*>) {
   62|  75.1M|        return {first, last};
   63|  75.1M|    }
   64|  75.1M|    else {
   65|  75.1M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  75.1M|    }
   67|  75.1M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  74.1M|{
   44|  74.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  74.1M|                                          decltype(first), decltype(last)> &&
   46|  74.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  74.1M|        return {first, last};
   48|  74.1M|    }
   49|  74.1M|    else {
   50|  74.1M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  74.1M|                                       to_address(first), to_address(last)))};
   52|  74.1M|    }
   53|  74.1M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  62.9M|{
   75|  62.9M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  62.9M|                      typename std::basic_string_view<CharT>::iterator,
   77|  62.9M|                      decltype(it)> &&
   78|  62.9M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  62.9M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  62.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  62.9M|        return it;
   81|  62.9M|    }
   82|  62.9M|    else {
   83|  62.9M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  62.9M|    }
   85|  62.9M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   131k|{
   54|   131k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   131k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   131k|        return true;
   57|   131k|    }
   58|   131k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   131k|                           ranges::iterator_t<Range>,
   60|   131k|                           typename detail::basic_scan_buffer<
   61|   131k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   131k|        auto beg = ranges::begin(r);
   63|   131k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 131k, False: 0]
  ------------------
   64|   131k|            return false;
   65|   131k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   131k|    else {
   79|   131k|        return false;
   80|   131k|    }
   81|   131k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   263k|{
  112|   263k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   263k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   263k|        return r;
  115|   263k|    }
  116|   263k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   263k|                           ranges::iterator_t<Range>,
  118|   263k|                           typename detail::basic_scan_buffer<
  119|   263k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   263k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   263k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   263k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   263k|                ranges::begin(r), ranges::end(r)));
  124|   263k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   263k|        }
  126|   263k|        else {
  127|   263k|            return ranges::begin(r).contiguous_segment();
  128|   263k|        }
  129|   263k|    }
  130|   263k|    else {
  131|   263k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   263k|    }
  133|   263k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   334k|{
  166|   334k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   334k|        return ranges_polyfill::usize(r);
  168|   334k|    }
  169|   334k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   334k|                           ranges::iterator_t<Range>,
  171|   334k|                           typename detail::basic_scan_buffer<
  172|   334k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   334k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   334k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   334k|                                       ranges::begin(r).position());
  176|   334k|        }
  177|   334k|        else {
  178|   334k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 334k, False: 0]
  ------------------
  179|   334k|                return static_cast<size_t>(
  180|   334k|                    ranges::begin(r).parent()->chars_available() -
  181|   334k|                    ranges::begin(r).position());
  182|   334k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   334k|        }
  185|   334k|    }
  186|   334k|    else {
  187|   334k|        return 0;
  188|   334k|    }
  189|   334k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   395k|{
   54|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   395k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   395k|        return true;
   57|   395k|    }
   58|   395k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   395k|                           ranges::iterator_t<Range>,
   60|   395k|                           typename detail::basic_scan_buffer<
   61|   395k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   395k|        auto beg = ranges::begin(r);
   63|   395k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 395k, False: 0]
  ------------------
   64|   395k|            return false;
   65|   395k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   395k|    else {
   79|   395k|        return false;
   80|   395k|    }
   81|   395k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   395k|{
  112|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   395k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   395k|        return r;
  115|   395k|    }
  116|   395k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   395k|                           ranges::iterator_t<Range>,
  118|   395k|                           typename detail::basic_scan_buffer<
  119|   395k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   395k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   395k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   395k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   395k|                ranges::begin(r), ranges::end(r)));
  124|   395k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   395k|        }
  126|   395k|        else {
  127|   395k|            return ranges::begin(r).contiguous_segment();
  128|   395k|        }
  129|   395k|    }
  130|   395k|    else {
  131|   395k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   395k|    }
  133|   395k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.00M|{
  166|  1.00M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.00M|        return ranges_polyfill::usize(r);
  168|  1.00M|    }
  169|  1.00M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.00M|                           ranges::iterator_t<Range>,
  171|  1.00M|                           typename detail::basic_scan_buffer<
  172|  1.00M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.00M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.00M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.00M|                                       ranges::begin(r).position());
  176|  1.00M|        }
  177|  1.00M|        else {
  178|  1.00M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.00M, False: 0]
  ------------------
  179|  1.00M|                return static_cast<size_t>(
  180|  1.00M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.00M|                    ranges::begin(r).position());
  182|  1.00M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.00M|        }
  185|  1.00M|    }
  186|  1.00M|    else {
  187|  1.00M|        return 0;
  188|  1.00M|    }
  189|  1.00M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.01M|{
  235|  2.01M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.01M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.01M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.01M|    }
  240|  2.01M|    else {
  241|  2.01M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.01M|    }
  243|  2.01M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.01M|    {
   50|  2.01M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  7.77M|    {
   63|  7.77M|        return sv;
   64|  7.77M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  4.20M|    {
  142|  4.20M|        return m_view;
  143|  4.20M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  4.66M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  4.27M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.93M|    {
  137|  1.93M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.93M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.93M|    {
  181|  1.93M|        using value_t = ranges::range_value_t<Range>;
  182|  1.93M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.93M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.93M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.93M|            m_storage.reset();
  186|  1.93M|            m_view = string_view_type{ranges::data(range),
  187|  1.93M|                                      ranges_polyfill::usize(range)};
  188|  1.93M|        }
  189|  1.93M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.93M|                                          std::basic_string<CharT>>) {
  191|  1.93M|            m_storage.emplace(SCN_FWD(range));
  192|  1.93M|            m_view = string_view_type{*m_storage};
  193|  1.93M|        }
  194|  1.93M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.93M|                                          typename detail::basic_scan_buffer<
  196|  1.93M|                                              value_t>::forward_iterator> &&
  197|  1.93M|                           ranges::common_range<Range>) {
  198|  1.93M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.93M|            auto end_seg = range.end().contiguous_segment();
  200|  1.93M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.93M|                             detail::to_address(end_seg.end()))) {
  202|  1.93M|                auto& str = m_storage.emplace();
  203|  1.93M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.93M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.93M|                m_view = string_view_type{str};
  206|  1.93M|                return;
  207|  1.93M|            }
  208|       |
  209|  1.93M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.93M|                                                            end_seg.data());
  211|  1.93M|            m_storage.reset();
  212|  1.93M|        }
  213|  1.93M|        else {
  214|  1.93M|            auto& str = m_storage.emplace();
  215|  1.93M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.93M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.93M|            }
  218|  1.93M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.93M|                      std::back_inserter(str));
  220|  1.93M|            m_view = string_view_type{str};
  221|  1.93M|        }
  222|  1.93M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  5.55M|    {
  147|  5.55M|        return m_storage.has_value();
  148|  5.55M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  3.67M|    {
  152|  3.67M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  3.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  3.67M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   394k|{
  235|   394k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   394k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   394k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   394k|        return string_view_wrapper{SCN_FWD(range)};
  239|   394k|    }
  240|   394k|    else {
  241|   394k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   394k|    }
  243|   394k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   394k|    {
   97|   394k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   394k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   394k|    {
  181|   394k|        using value_t = ranges::range_value_t<Range>;
  182|   394k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   394k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   394k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   394k|            m_storage.reset();
  186|   394k|            m_view = string_view_type{ranges::data(range),
  187|   394k|                                      ranges_polyfill::usize(range)};
  188|   394k|        }
  189|   394k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   394k|                                          std::basic_string<CharT>>) {
  191|   394k|            m_storage.emplace(SCN_FWD(range));
  192|   394k|            m_view = string_view_type{*m_storage};
  193|   394k|        }
  194|   394k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   394k|                                          typename detail::basic_scan_buffer<
  196|   394k|                                              value_t>::forward_iterator> &&
  197|   394k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   394k|            auto beg_seg = range.begin().contiguous_segment();
  199|   394k|            auto end_seg = range.end().contiguous_segment();
  200|   394k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 394k, False: 117]
  |  |  ------------------
  ------------------
  201|   394k|                             detail::to_address(end_seg.end()))) {
  202|   394k|                auto& str = m_storage.emplace();
  203|   394k|                str.reserve(range.end().position() - range.begin().position());
  204|   394k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   394k|                m_view = string_view_type{str};
  206|   394k|                return;
  207|   394k|            }
  208|       |
  209|    117|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    117|                                                            end_seg.data());
  211|    117|            m_storage.reset();
  212|    117|        }
  213|   394k|        else {
  214|   394k|            auto& str = m_storage.emplace();
  215|   394k|            if constexpr (ranges::sized_range<Range>) {
  216|   394k|                str.reserve(ranges_polyfill::usize(range));
  217|   394k|            }
  218|   394k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   394k|                      std::back_inserter(str));
  220|   394k|            m_view = string_view_type{str};
  221|   394k|        }
  222|   394k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  14.0M|    {
  142|  14.0M|        return m_view;
  143|  14.0M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  15.1M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  11.2M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  5.03M|    {
  137|  5.03M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  5.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  5.03M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  5.03M|    {
  181|  5.03M|        using value_t = ranges::range_value_t<Range>;
  182|  5.03M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  5.03M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  5.03M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  5.03M|            m_storage.reset();
  186|  5.03M|            m_view = string_view_type{ranges::data(range),
  187|  5.03M|                                      ranges_polyfill::usize(range)};
  188|  5.03M|        }
  189|  5.03M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  5.03M|                                          std::basic_string<CharT>>) {
  191|  5.03M|            m_storage.emplace(SCN_FWD(range));
  192|  5.03M|            m_view = string_view_type{*m_storage};
  193|  5.03M|        }
  194|  5.03M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  5.03M|                                          typename detail::basic_scan_buffer<
  196|  5.03M|                                              value_t>::forward_iterator> &&
  197|  5.03M|                           ranges::common_range<Range>) {
  198|  5.03M|            auto beg_seg = range.begin().contiguous_segment();
  199|  5.03M|            auto end_seg = range.end().contiguous_segment();
  200|  5.03M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  5.03M|                             detail::to_address(end_seg.end()))) {
  202|  5.03M|                auto& str = m_storage.emplace();
  203|  5.03M|                str.reserve(range.end().position() - range.begin().position());
  204|  5.03M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  5.03M|                m_view = string_view_type{str};
  206|  5.03M|                return;
  207|  5.03M|            }
  208|       |
  209|  5.03M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  5.03M|                                                            end_seg.data());
  211|  5.03M|            m_storage.reset();
  212|  5.03M|        }
  213|  5.03M|        else {
  214|  5.03M|            auto& str = m_storage.emplace();
  215|  5.03M|            if constexpr (ranges::sized_range<Range>) {
  216|  5.03M|                str.reserve(ranges_polyfill::usize(range));
  217|  5.03M|            }
  218|  5.03M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  5.03M|                      std::back_inserter(str));
  220|  5.03M|            m_view = string_view_type{str};
  221|  5.03M|        }
  222|  5.03M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  14.6M|    {
  147|  14.6M|        return m_storage.has_value();
  148|  14.6M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  9.74M|    {
  152|  9.74M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  9.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  9.74M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  3.94M|{
  235|  3.94M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.94M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.94M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.94M|        return string_view_wrapper{SCN_FWD(range)};
  239|  3.94M|    }
  240|  3.94M|    else {
  241|  3.94M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  3.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  3.94M|    }
  243|  3.94M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  3.94M|    {
   97|  3.94M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  3.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  3.94M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  3.94M|    {
  181|  3.94M|        using value_t = ranges::range_value_t<Range>;
  182|  3.94M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  3.94M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  3.94M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  3.94M|            m_storage.reset();
  186|  3.94M|            m_view = string_view_type{ranges::data(range),
  187|  3.94M|                                      ranges_polyfill::usize(range)};
  188|  3.94M|        }
  189|  3.94M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  3.94M|                                          std::basic_string<CharT>>) {
  191|  3.94M|            m_storage.emplace(SCN_FWD(range));
  192|  3.94M|            m_view = string_view_type{*m_storage};
  193|  3.94M|        }
  194|  3.94M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  3.94M|                                          typename detail::basic_scan_buffer<
  196|  3.94M|                                              value_t>::forward_iterator> &&
  197|  3.94M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  3.94M|            auto beg_seg = range.begin().contiguous_segment();
  199|  3.94M|            auto end_seg = range.end().contiguous_segment();
  200|  3.94M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.94M, False: 390]
  |  |  ------------------
  ------------------
  201|  3.94M|                             detail::to_address(end_seg.end()))) {
  202|  3.94M|                auto& str = m_storage.emplace();
  203|  3.94M|                str.reserve(range.end().position() - range.begin().position());
  204|  3.94M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  3.94M|                m_view = string_view_type{str};
  206|  3.94M|                return;
  207|  3.94M|            }
  208|       |
  209|    390|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    390|                                                            end_seg.data());
  211|    390|            m_storage.reset();
  212|    390|        }
  213|  3.94M|        else {
  214|  3.94M|            auto& str = m_storage.emplace();
  215|  3.94M|            if constexpr (ranges::sized_range<Range>) {
  216|  3.94M|                str.reserve(ranges_polyfill::usize(range));
  217|  3.94M|            }
  218|  3.94M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  3.94M|                      std::back_inserter(str));
  220|  3.94M|            m_view = string_view_type{str};
  221|  3.94M|        }
  222|  3.94M|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  1.87M|{
  235|  1.87M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.87M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.87M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.87M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.87M|    }
  240|  1.87M|    else {
  241|  1.87M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.87M|    }
  243|  1.87M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  1.87M|    {
   50|  1.87M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  1.87M|    {
  137|  1.87M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.87M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  1.87M|    {
  181|  1.87M|        using value_t = ranges::range_value_t<Range>;
  182|  1.87M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.87M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.87M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.87M|            m_storage.reset();
  186|  1.87M|            m_view = string_view_type{ranges::data(range),
  187|  1.87M|                                      ranges_polyfill::usize(range)};
  188|  1.87M|        }
  189|  1.87M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.87M|                                          std::basic_string<CharT>>) {
  191|  1.87M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.87M|            m_view = string_view_type{*m_storage};
  193|  1.87M|        }
  194|  1.87M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.87M|                                          typename detail::basic_scan_buffer<
  196|  1.87M|                                              value_t>::forward_iterator> &&
  197|  1.87M|                           ranges::common_range<Range>) {
  198|  1.87M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.87M|            auto end_seg = range.end().contiguous_segment();
  200|  1.87M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.87M|                             detail::to_address(end_seg.end()))) {
  202|  1.87M|                auto& str = m_storage.emplace();
  203|  1.87M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.87M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.87M|                m_view = string_view_type{str};
  206|  1.87M|                return;
  207|  1.87M|            }
  208|       |
  209|  1.87M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.87M|                                                            end_seg.data());
  211|  1.87M|            m_storage.reset();
  212|  1.87M|        }
  213|  1.87M|        else {
  214|  1.87M|            auto& str = m_storage.emplace();
  215|  1.87M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.87M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.87M|            }
  218|  1.87M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.87M|                      std::back_inserter(str));
  220|  1.87M|            m_view = string_view_type{str};
  221|  1.87M|        }
  222|  1.87M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|  4.90M|    {
  137|  4.90M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  4.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  4.90M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|  4.90M|    {
  181|  4.90M|        using value_t = ranges::range_value_t<Range>;
  182|  4.90M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  4.90M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  4.90M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  4.90M|            m_storage.reset();
  186|  4.90M|            m_view = string_view_type{ranges::data(range),
  187|  4.90M|                                      ranges_polyfill::usize(range)};
  188|  4.90M|        }
  189|  4.90M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  4.90M|                                          std::basic_string<CharT>>) {
  191|  4.90M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  4.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  4.90M|            m_view = string_view_type{*m_storage};
  193|  4.90M|        }
  194|  4.90M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  4.90M|                                          typename detail::basic_scan_buffer<
  196|  4.90M|                                              value_t>::forward_iterator> &&
  197|  4.90M|                           ranges::common_range<Range>) {
  198|  4.90M|            auto beg_seg = range.begin().contiguous_segment();
  199|  4.90M|            auto end_seg = range.end().contiguous_segment();
  200|  4.90M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  4.90M|                             detail::to_address(end_seg.end()))) {
  202|  4.90M|                auto& str = m_storage.emplace();
  203|  4.90M|                str.reserve(range.end().position() - range.begin().position());
  204|  4.90M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  4.90M|                m_view = string_view_type{str};
  206|  4.90M|                return;
  207|  4.90M|            }
  208|       |
  209|  4.90M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  4.90M|                                                            end_seg.data());
  211|  4.90M|            m_storage.reset();
  212|  4.90M|        }
  213|  4.90M|        else {
  214|  4.90M|            auto& str = m_storage.emplace();
  215|  4.90M|            if constexpr (ranges::sized_range<Range>) {
  216|  4.90M|                str.reserve(ranges_polyfill::usize(range));
  217|  4.90M|            }
  218|  4.90M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  4.90M|                      std::back_inserter(str));
  220|  4.90M|            m_view = string_view_type{str};
  221|  4.90M|        }
  222|  4.90M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  6.13M|{
   97|  6.13M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  6.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.0k, False: 6.10M]
  |  |  ------------------
  ------------------
   98|  24.0k|        return eof_error::eof;
   99|  24.0k|    }
  100|  6.10M|    return eof_error::good;
  101|  6.13M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  6.13M|{
   91|  6.13M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  6.13M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  6.13M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  6.13M|    {
   84|  6.13M|        return begin == end;
   85|  6.13M|    }
   86|  6.13M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   395k|{
   97|   395k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 394k]
  |  |  ------------------
  ------------------
   98|     78|        return eof_error::eof;
   99|     78|    }
  100|   394k|    return eof_error::good;
  101|   395k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   395k|{
   91|   395k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   395k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   395k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   395k|    {
   84|   395k|        return begin == end;
   85|   395k|    }
   86|   395k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  15.7M|{
   97|  15.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  15.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66.3k, False: 15.7M]
  |  |  ------------------
  ------------------
   98|  66.3k|        return eof_error::eof;
   99|  66.3k|    }
  100|  15.7M|    return eof_error::good;
  101|  15.7M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  15.7M|{
   91|  15.7M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  15.7M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  15.7M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  15.7M|    {
   84|  15.7M|        return begin == end;
   85|  15.7M|    }
   86|  15.7M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.18M|{
   97|  1.18M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 351, False: 1.18M]
  |  |  ------------------
  ------------------
   98|    351|        return eof_error::eof;
   99|    351|    }
  100|  1.18M|    return eof_error::good;
  101|  1.18M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.18M|{
   91|  1.18M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.18M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.18M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.18M|    {
   84|  1.18M|        return begin == end;
   85|  1.18M|    }
   86|  1.18M|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  1.87M|{
  120|  1.87M|    return find_classic_impl(
  121|  1.87M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  1.87M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  1.87M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.15M|{
  128|  2.15M|    return find_classic_impl(
  129|  2.15M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.15M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.15M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  1.87M|{
   44|  1.87M|    auto it = source.begin();
   45|       |
   46|  28.3M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 28.0M, False: 318k]
  ------------------
   47|  28.0M|        auto sv =
   48|  28.0M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  28.0M|                .substr(0, 8);
   50|       |
   51|  28.0M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 16.1M, False: 11.9M]
  ------------------
   52|  16.1M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  16.1M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  16.1M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 1.20M, False: 14.9M]
  ------------------
   55|  1.20M|                break;
   56|  1.20M|            }
   57|  14.9M|            continue;
   58|  16.1M|        }
   59|       |
   60|  54.6M|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 43.0M, False: 11.5M]
  ------------------
   61|  43.0M|            auto tmp =
   62|  43.0M|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  43.0M|            auto res = get_next_code_point(tmp);
   64|  43.0M|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 350k, False: 42.6M]
  ------------------
   65|   350k|                return it;
   66|   350k|            }
   67|  42.6M|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  42.6M|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  42.6M|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  42.6M|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  42.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  42.6M|        }
   71|  11.9M|    }
   72|       |
   73|  1.51M|    return detail::make_string_view_iterator(source, it);
   74|  1.87M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  30.2M|{
   31|  30.2M|    static_assert(sizeof(*source.data()) == 1);
   32|  30.2M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  30.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  30.2M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  30.2M|    return has_byte_greater(word, 127) != 0;
   37|  30.2M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|   123M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|  43.0M|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  2.15M|{
   44|  2.15M|    auto it = source.begin();
   45|       |
   46|  2.30M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.16M, False: 144k]
  ------------------
   47|  2.16M|        auto sv =
   48|  2.16M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.16M|                .substr(0, 8);
   50|       |
   51|  2.16M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 1.29M, False: 862k]
  ------------------
   52|  1.29M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  1.29M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  1.29M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 1.14M, False: 154k]
  ------------------
   55|  1.14M|                break;
   56|  1.14M|            }
   57|   154k|            continue;
   58|  1.29M|        }
   59|       |
   60|   876k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 875k, False: 931]
  ------------------
   61|   875k|            auto tmp =
   62|   875k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   875k|            auto res = get_next_code_point(tmp);
   64|   875k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 861k, False: 13.0k]
  ------------------
   65|   861k|                return it;
   66|   861k|            }
   67|  13.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  13.0k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  13.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  13.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  13.0k|        }
   71|   862k|    }
   72|       |
   73|  1.28M|    return detail::make_string_view_iterator(source, it);
   74|  2.15M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  1.39M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   875k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.01M|{
  300|  2.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.01M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.01M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.01M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.01M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.01M|        return ranges::next(ranges::begin(range),
  306|  2.01M|                            ranges::distance(buf.view().begin(), it));
  307|  2.01M|    }
  308|  2.01M|    else {
  309|  2.01M|        auto it = ranges::begin(range);
  310|       |
  311|  2.01M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.01M|            auto seg = get_contiguous_beginning(range);
  313|  2.01M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.01M|                seg_it != seg.end()) {
  315|  2.01M|                return ranges_polyfill::batch_next(
  316|  2.01M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.01M|            }
  318|  2.01M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.01M|        }
  320|       |
  321|  2.01M|        return read_while_code_point(
  322|  2.01M|            SCN_FWD(range),
  323|  2.01M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.01M|    }
  325|  2.01M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.03M|{
  459|  2.03M|    auto it = read_code_unit(range);
  460|  2.03M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 456, False: 2.03M]
  |  |  ------------------
  ------------------
  461|    456|        return unexpected(make_eof_parse_error(it.error()));
  462|    456|    }
  463|       |
  464|  4.05M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.05M, False: 2.00M]
  ------------------
  465|  4.05M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 29.0k, False: 4.02M]
  ------------------
  466|  29.0k|            return *it;
  467|  29.0k|        }
  468|  4.05M|    }
  469|       |
  470|  2.00M|    return unexpected(parse_error::error);
  471|  2.03M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.91M|{
  418|  5.91M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.91M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.91M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.91M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 52.5k, False: 5.86M]
  ------------------
  423|  52.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  52.5k|        }
  425|  5.86M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 5.82M, False: 32.2k]
  ------------------
  426|  5.82M|            return unexpected(parse_error::error);
  427|  5.82M|        }
  428|  32.2k|        return ranges::next(ranges::begin(range), str.size());
  429|  5.86M|    }
  430|  5.91M|    else {
  431|  5.91M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.91M|            if (ch < 'A' || ch > 'Z') {
  433|  5.91M|                return ch;
  434|  5.91M|            }
  435|  5.91M|            return static_cast<char_type>(ch +
  436|  5.91M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.91M|        };
  438|       |
  439|  5.91M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  5.91M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.91M|        if (SCN_UNLIKELY(!std::equal(
  443|  5.91M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.91M|                    return ascii_tolower(a) ==
  445|  5.91M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.91M|                }))) {
  447|  5.91M|            return unexpected(parse_error::error);
  448|  5.91M|        }
  449|       |
  450|  5.91M|        return it;
  451|  5.91M|    }
  452|  5.91M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  5.86M|{
  407|  5.86M|    unsigned char running_diff{0};
  408|  21.5M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 15.7M, False: 5.86M]
  ------------------
  409|  15.7M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  15.7M|    }
  411|  5.86M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 30.8k, False: 5.83M]
  |  Branch (411:33): [True: 2.35k, False: 5.83M]
  ------------------
  412|  5.86M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  4.60k|{
  418|  4.60k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  4.60k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  4.60k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  4.60k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 616, False: 3.98k]
  ------------------
  423|    616|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    616|        }
  425|  3.98k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 3.07k, False: 915]
  ------------------
  426|  3.07k|            return unexpected(parse_error::error);
  427|  3.07k|        }
  428|    915|        return ranges::next(ranges::begin(range), str.size());
  429|  3.98k|    }
  430|  4.60k|    else {
  431|  4.60k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  4.60k|            if (ch < 'A' || ch > 'Z') {
  433|  4.60k|                return ch;
  434|  4.60k|            }
  435|  4.60k|            return static_cast<char_type>(ch +
  436|  4.60k|                                          static_cast<char_type>('a' - 'A'));
  437|  4.60k|        };
  438|       |
  439|  4.60k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  4.60k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  4.60k|        if (SCN_UNLIKELY(!std::equal(
  443|  4.60k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  4.60k|                    return ascii_tolower(a) ==
  445|  4.60k|                           static_cast<detail::char_t<Range>>(b);
  446|  4.60k|                }))) {
  447|  4.60k|            return unexpected(parse_error::error);
  448|  4.60k|        }
  449|       |
  450|  4.60k|        return it;
  451|  4.60k|    }
  452|  4.60k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|  47.6k|{
  332|  47.6k|    auto it = read_code_unit(range);
  333|  47.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 675, False: 47.0k]
  |  |  ------------------
  ------------------
  334|    675|        return unexpected(make_eof_parse_error(it.error()));
  335|    675|    }
  336|       |
  337|  47.0k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.6k, False: 7.41k]
  |  |  ------------------
  ------------------
  338|  47.0k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  39.6k|        return unexpected(parse_error::error);
  340|  39.6k|    }
  341|       |
  342|  7.41k|    return *it;
  343|  47.0k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|     68|{
  139|     68|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|     68|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|     68|{
  131|     68|    return ranges::find_if(range, pred);
  132|     68|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|   135k|{
  159|   135k|    auto it = read_while_code_unit(range, pred);
  160|   135k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 85.1k, False: 50.5k]
  ------------------
  161|  85.1k|        return unexpected(parse_error::error);
  162|  85.1k|    }
  163|  50.5k|    return it;
  164|   135k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|   135k|{
  139|   135k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   135k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|   135k|{
  131|   135k|    return ranges::find_if(range, pred);
  132|   135k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   131k|{
  300|   131k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   131k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   131k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   131k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   131k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   131k|        return ranges::next(ranges::begin(range),
  306|   131k|                            ranges::distance(buf.view().begin(), it));
  307|   131k|    }
  308|   131k|    else {
  309|   131k|        auto it = ranges::begin(range);
  310|       |
  311|   131k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   131k|            auto seg = get_contiguous_beginning(range);
  313|   131k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   131k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 0, False: 131k]
  ------------------
  315|      0|                return ranges_polyfill::batch_next(
  316|      0|                    it, ranges::distance(seg.begin(), seg_it));
  317|      0|            }
  318|   131k|            ranges_polyfill::batch_next(it, seg.size());
  319|   131k|        }
  320|       |
  321|   131k|        return read_while_code_point(
  322|   131k|            SCN_FWD(range),
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   131k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   131k|    }
  325|   131k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   131k|{
  264|   131k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   131k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   131k|{
  231|   131k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   131k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   131k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   131k|    }
  235|   131k|    else {
  236|   131k|        auto it = ranges::begin(range);
  237|   131k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   131k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   131k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 131k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   395k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 394k, False: 78]
  ------------------
  246|   394k|            const auto [iter, value] =
  247|   394k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   394k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   394k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 131k, False: 263k]
  ------------------
  250|   131k|                return it;
  251|   131k|            }
  252|   263k|            it = iter;
  253|   263k|        }
  254|       |
  255|     78|        return it;
  256|   131k|    }
  257|   131k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   131k|{
  178|   131k|    static_assert(ranges::contiguous_range<Range> &&
  179|   131k|                  ranges::sized_range<Range>);
  180|       |
  181|   131k|    std::array<char32_t, 16> cp_buf{};
  182|   131k|    std::array<uint8_t, 16> idx_buf{};
  183|   131k|    auto it = ranges::begin(range);
  184|   263k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 131k, False: 131k]
  ------------------
  185|   131k|        auto chunk_begin = it;
  186|   131k|        size_t code_point_count = 0;
  187|   131k|        uint8_t code_unit_idx = 0;
  188|   263k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 263k, False: 0]
  |  Branch (188:52): [True: 131k, False: 131k]
  ------------------
  189|   131k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 131k, False: 0]
  ------------------
  190|   131k|                idx_buf[code_point_count] = code_unit_idx;
  191|   131k|                ++code_point_count;
  192|   131k|            }
  193|   131k|            ++it;
  194|   131k|            ++code_unit_idx;
  195|   131k|        }
  196|       |
  197|   131k|        auto input = detail::make_string_view_from_pointers(
  198|   131k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   131k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   131k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   131k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   263k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 131k, False: 131k]
  ------------------
  217|   131k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 131k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   131k|        }
  221|   131k|    }
  222|       |
  223|   131k|    return it;
  224|   131k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   394k|{
   42|   394k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   394k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   394k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 263k]
  |  |  ------------------
  ------------------
   48|   263k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 263k, False: 39]
  ------------------
   49|   263k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 131k, False: 131k]
  ------------------
   50|   131k|                break;
   51|   131k|            }
   52|   263k|        }
   53|       |
   54|   131k|        return {it, make_contiguous_buffer(
   55|   131k|                        ranges::subrange{ranges::begin(range), it})};
   56|   131k|    }
   57|       |
   58|   263k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 263k, False: 0]
  ------------------
   59|   263k|        ++it;
   60|   263k|        return {it, make_contiguous_buffer(
   61|   263k|                        ranges::subrange{ranges::begin(range), it})};
   62|   263k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   263k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   526k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   131k|{
  459|   131k|    auto it = read_code_unit(range);
  460|   131k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   263k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 263k, False: 131k]
  ------------------
  465|   263k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 263k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   263k|    }
  469|       |
  470|   131k|    return unexpected(parse_error::error);
  471|   131k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   334k|{
  418|   334k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   334k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   334k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   334k|        if (ranges::size(range) < str.size()) {
  423|   334k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   334k|        }
  425|   334k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   334k|            return unexpected(parse_error::error);
  427|   334k|        }
  428|   334k|        return ranges::next(ranges::begin(range), str.size());
  429|   334k|    }
  430|   334k|    else {
  431|   334k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   334k|            if (ch < 'A' || ch > 'Z') {
  433|   334k|                return ch;
  434|   334k|            }
  435|   334k|            return static_cast<char_type>(ch +
  436|   334k|                                          static_cast<char_type>('a' - 'A'));
  437|   334k|        };
  438|       |
  439|   334k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   333k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   333k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 333k, False: 0]
  |  |  ------------------
  ------------------
  443|   333k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   333k|                    return ascii_tolower(a) ==
  445|   333k|                           static_cast<detail::char_t<Range>>(b);
  446|   333k|                }))) {
  447|   333k|            return unexpected(parse_error::error);
  448|   333k|        }
  449|       |
  450|      0|        return it;
  451|   333k|    }
  452|   334k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   333k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   333k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 333k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   333k|                return ch;
  434|   333k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   333k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   131k|{
  139|   131k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   131k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   131k|{
  131|   131k|    return ranges::find_if(range, pred);
  132|   131k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   131k|{
  159|   131k|    auto it = read_while_code_unit(range, pred);
  160|   131k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 131k, False: 0]
  ------------------
  161|   131k|        return unexpected(parse_error::error);
  162|   131k|    }
  163|      0|    return it;
  164|   131k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.22M|{
  300|  5.22M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.22M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.22M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.22M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  5.22M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.22M|        return ranges::next(ranges::begin(range),
  306|  5.22M|                            ranges::distance(buf.view().begin(), it));
  307|  5.22M|    }
  308|  5.22M|    else {
  309|  5.22M|        auto it = ranges::begin(range);
  310|       |
  311|  5.22M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  5.22M|            auto seg = get_contiguous_beginning(range);
  313|  5.22M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.22M|                seg_it != seg.end()) {
  315|  5.22M|                return ranges_polyfill::batch_next(
  316|  5.22M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.22M|            }
  318|  5.22M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.22M|        }
  320|       |
  321|  5.22M|        return read_while_code_point(
  322|  5.22M|            SCN_FWD(range),
  ------------------
  |  |  248|  5.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.22M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.22M|    }
  325|  5.22M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  5.22M|{
  264|  5.22M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  5.22M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  5.22M|{
  231|  5.22M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  5.22M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  5.22M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  5.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  5.22M|    }
  235|  5.22M|    else {
  236|  5.22M|        auto it = ranges::begin(range);
  237|  5.22M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  5.22M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  5.22M|            seg_it != seg.end()) {
  241|  5.22M|            return ranges_polyfill::batch_next(
  242|  5.22M|                it, ranges::distance(seg.begin(), seg_it));
  243|  5.22M|        }
  244|       |
  245|  5.22M|        while (it != ranges::end(range)) {
  246|  5.22M|            const auto [iter, value] =
  247|  5.22M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  5.22M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  5.22M|            if (pred(cp)) {
  250|  5.22M|                return it;
  251|  5.22M|            }
  252|  5.22M|            it = iter;
  253|  5.22M|        }
  254|       |
  255|  5.22M|        return it;
  256|  5.22M|    }
  257|  5.22M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  5.22M|{
  178|  5.22M|    static_assert(ranges::contiguous_range<Range> &&
  179|  5.22M|                  ranges::sized_range<Range>);
  180|       |
  181|  5.22M|    std::array<char32_t, 16> cp_buf{};
  182|  5.22M|    std::array<uint8_t, 16> idx_buf{};
  183|  5.22M|    auto it = ranges::begin(range);
  184|  5.23M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 5.22M, False: 8.52k]
  ------------------
  185|  5.22M|        auto chunk_begin = it;
  186|  5.22M|        size_t code_point_count = 0;
  187|  5.22M|        uint8_t code_unit_idx = 0;
  188|  81.8M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 77.4M, False: 4.41M]
  |  Branch (188:52): [True: 76.6M, False: 819k]
  ------------------
  189|  76.6M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 76.6M, False: 0]
  ------------------
  190|  76.6M|                idx_buf[code_point_count] = code_unit_idx;
  191|  76.6M|                ++code_point_count;
  192|  76.6M|            }
  193|  76.6M|            ++it;
  194|  76.6M|            ++code_unit_idx;
  195|  76.6M|        }
  196|       |
  197|  5.22M|        auto input = detail::make_string_view_from_pointers(
  198|  5.22M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  5.22M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  5.22M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  5.22M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  5.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.22M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  5.33M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 5.32M, False: 11.9k]
  ------------------
  217|  5.32M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 5.21M, False: 107k]
  ------------------
  218|  5.21M|                return chunk_begin + idx_buf[i];
  219|  5.21M|            }
  220|  5.32M|        }
  221|  5.22M|    }
  222|       |
  223|  8.52k|    return it;
  224|  5.22M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  5.32M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.23M|{
  459|  5.23M|    auto it = read_code_unit(range);
  460|  5.23M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 564, False: 5.23M]
  |  |  ------------------
  ------------------
  461|    564|        return unexpected(make_eof_parse_error(it.error()));
  462|    564|    }
  463|       |
  464|  10.4M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.4M, False: 5.22M]
  ------------------
  465|  10.4M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 16.6k, False: 10.4M]
  ------------------
  466|  16.6k|            return *it;
  467|  16.6k|        }
  468|  10.4M|    }
  469|       |
  470|  5.22M|    return unexpected(parse_error::error);
  471|  5.23M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  15.4M|{
  418|  15.4M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  15.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  15.4M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  15.4M|        if (ranges::size(range) < str.size()) {
  423|  15.4M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  15.4M|        }
  425|  15.4M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  15.4M|            return unexpected(parse_error::error);
  427|  15.4M|        }
  428|  15.4M|        return ranges::next(ranges::begin(range), str.size());
  429|  15.4M|    }
  430|  15.4M|    else {
  431|  15.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  15.4M|            if (ch < 'A' || ch > 'Z') {
  433|  15.4M|                return ch;
  434|  15.4M|            }
  435|  15.4M|            return static_cast<char_type>(ch +
  436|  15.4M|                                          static_cast<char_type>('a' - 'A'));
  437|  15.4M|        };
  438|       |
  439|  15.4M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  15.4M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  15.4M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  15.4M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  15.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 323k, False: 15.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   323k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   323k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   323k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   323k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   323k|    }                                                  \
  |  |  |  |   70|  15.4M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  15.1M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  15.1M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.1M, False: 16.5k]
  |  |  ------------------
  ------------------
  443|  15.1M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  15.1M|                    return ascii_tolower(a) ==
  445|  15.1M|                           static_cast<detail::char_t<Range>>(b);
  446|  15.1M|                }))) {
  447|  15.1M|            return unexpected(parse_error::error);
  448|  15.1M|        }
  449|       |
  450|  16.5k|        return it;
  451|  15.1M|    }
  452|  15.4M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  15.1M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  15.1M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 12.6M, False: 2.50M]
  |  Branch (432:29): [True: 2.42M, False: 87.9k]
  ------------------
  433|  15.0M|                return ch;
  434|  15.0M|            }
  435|  87.9k|            return static_cast<char_type>(ch +
  436|  87.9k|                                          static_cast<char_type>('a' - 'A'));
  437|  15.1M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  2.44k|{
  418|  2.44k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.44k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.44k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.44k|        if (ranges::size(range) < str.size()) {
  423|  2.44k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.44k|        }
  425|  2.44k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.44k|            return unexpected(parse_error::error);
  427|  2.44k|        }
  428|  2.44k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.44k|    }
  430|  2.44k|    else {
  431|  2.44k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.44k|            if (ch < 'A' || ch > 'Z') {
  433|  2.44k|                return ch;
  434|  2.44k|            }
  435|  2.44k|            return static_cast<char_type>(ch +
  436|  2.44k|                                          static_cast<char_type>('a' - 'A'));
  437|  2.44k|        };
  438|       |
  439|  2.44k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 541, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    541|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    541|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    541|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    541|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    541|    }                                                  \
  |  |  |  |   70|  2.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.90k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.90k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.45k, False: 451]
  |  |  ------------------
  ------------------
  443|  1.90k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.90k|                    return ascii_tolower(a) ==
  445|  1.90k|                           static_cast<detail::char_t<Range>>(b);
  446|  1.90k|                }))) {
  447|  1.45k|            return unexpected(parse_error::error);
  448|  1.45k|        }
  449|       |
  450|    451|        return it;
  451|  1.90k|    }
  452|  2.44k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|  4.83k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  4.83k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 893, False: 3.93k]
  |  Branch (432:29): [True: 3.73k, False: 200]
  ------------------
  433|  4.63k|                return ch;
  434|  4.63k|            }
  435|    200|            return static_cast<char_type>(ch +
  436|    200|                                          static_cast<char_type>('a' - 'A'));
  437|  4.83k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|  30.6k|{
  332|  30.6k|    auto it = read_code_unit(range);
  333|  30.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 819, False: 29.8k]
  |  |  ------------------
  ------------------
  334|    819|        return unexpected(make_eof_parse_error(it.error()));
  335|    819|    }
  336|       |
  337|  29.8k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 4.94k]
  |  |  ------------------
  ------------------
  338|  29.8k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  24.9k|        return unexpected(parse_error::error);
  340|  24.9k|    }
  341|       |
  342|  4.94k|    return *it;
  343|  29.8k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|   230k|{
  159|   230k|    auto it = read_while_code_unit(range, pred);
  160|   230k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 197k, False: 33.0k]
  ------------------
  161|   197k|        return unexpected(parse_error::error);
  162|   197k|    }
  163|  33.0k|    return it;
  164|   230k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|   230k|{
  139|   230k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   230k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|   230k|{
  131|   230k|    return ranges::find_if(range, pred);
  132|   230k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|  4.90M|{
  231|  4.90M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  4.90M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  4.90M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  4.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  4.90M|    }
  235|  4.90M|    else {
  236|  4.90M|        auto it = ranges::begin(range);
  237|  4.90M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  4.90M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  4.90M|            seg_it != seg.end()) {
  241|  4.90M|            return ranges_polyfill::batch_next(
  242|  4.90M|                it, ranges::distance(seg.begin(), seg_it));
  243|  4.90M|        }
  244|       |
  245|  4.90M|        while (it != ranges::end(range)) {
  246|  4.90M|            const auto [iter, value] =
  247|  4.90M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  4.90M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  4.90M|            if (pred(cp)) {
  250|  4.90M|                return it;
  251|  4.90M|            }
  252|  4.90M|            it = iter;
  253|  4.90M|        }
  254|       |
  255|  4.90M|        return it;
  256|  4.90M|    }
  257|  4.90M|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|  4.90M|{
  178|  4.90M|    static_assert(ranges::contiguous_range<Range> &&
  179|  4.90M|                  ranges::sized_range<Range>);
  180|       |
  181|  4.90M|    std::array<char32_t, 16> cp_buf{};
  182|  4.90M|    std::array<uint8_t, 16> idx_buf{};
  183|  4.90M|    auto it = ranges::begin(range);
  184|  73.7M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 69.5M, False: 4.15M]
  ------------------
  185|  69.5M|        auto chunk_begin = it;
  186|  69.5M|        size_t code_point_count = 0;
  187|  69.5M|        uint8_t code_unit_idx = 0;
  188|  1.14G|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.08G, False: 65.4M]
  |  Branch (188:52): [True: 1.07G, False: 4.12M]
  ------------------
  189|  1.07G|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 1.07G, False: 0]
  ------------------
  190|  1.07G|                idx_buf[code_point_count] = code_unit_idx;
  191|  1.07G|                ++code_point_count;
  192|  1.07G|            }
  193|  1.07G|            ++it;
  194|  1.07G|            ++code_unit_idx;
  195|  1.07G|        }
  196|       |
  197|  69.5M|        auto input = detail::make_string_view_from_pointers(
  198|  69.5M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  69.5M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  69.5M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  69.5M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  69.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 69.5M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  1.14G|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 1.07G, False: 68.8M]
  ------------------
  217|  1.07G|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 749k, False: 1.07G]
  ------------------
  218|   749k|                return chunk_begin + idx_buf[i];
  219|   749k|            }
  220|  1.07G|        }
  221|  69.5M|    }
  222|       |
  223|  4.15M|    return it;
  224|  4.90M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   395k|{
  178|   395k|    static_assert(ranges::contiguous_range<Range> &&
  179|   395k|                  ranges::sized_range<Range>);
  180|       |
  181|   395k|    std::array<char32_t, 16> cp_buf{};
  182|   395k|    std::array<uint8_t, 16> idx_buf{};
  183|   395k|    auto it = ranges::begin(range);
  184|   790k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 395k, False: 395k]
  ------------------
  185|   395k|        auto chunk_begin = it;
  186|   395k|        size_t code_point_count = 0;
  187|   395k|        uint8_t code_unit_idx = 0;
  188|   790k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 790k, False: 0]
  |  Branch (188:52): [True: 395k, False: 395k]
  ------------------
  189|   395k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 395k, False: 0]
  ------------------
  190|   395k|                idx_buf[code_point_count] = code_unit_idx;
  191|   395k|                ++code_point_count;
  192|   395k|            }
  193|   395k|            ++it;
  194|   395k|            ++code_unit_idx;
  195|   395k|        }
  196|       |
  197|   395k|        auto input = detail::make_string_view_from_pointers(
  198|   395k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   395k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   395k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   395k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   790k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 395k, False: 395k]
  ------------------
  217|   395k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 395k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   395k|        }
  221|   395k|    }
  222|       |
  223|   395k|    return it;
  224|   395k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   395k|{
  300|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   395k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   395k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   395k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   395k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   395k|        return ranges::next(ranges::begin(range),
  306|   395k|                            ranges::distance(buf.view().begin(), it));
  307|   395k|    }
  308|   395k|    else {
  309|   395k|        auto it = ranges::begin(range);
  310|       |
  311|   395k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   395k|            auto seg = get_contiguous_beginning(range);
  313|   395k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   395k|                seg_it != seg.end()) {
  315|   395k|                return ranges_polyfill::batch_next(
  316|   395k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   395k|            }
  318|   395k|            ranges_polyfill::batch_next(it, seg.size());
  319|   395k|        }
  320|       |
  321|   395k|        return read_while_code_point(
  322|   395k|            SCN_FWD(range),
  ------------------
  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   395k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   395k|    }
  325|   395k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   395k|{
  264|   395k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   395k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   395k|{
  231|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   395k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   395k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   395k|    }
  235|   395k|    else {
  236|   395k|        auto it = ranges::begin(range);
  237|   395k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   395k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   395k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 395k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  3.94M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 3.94M, False: 351]
  ------------------
  246|  3.94M|            const auto [iter, value] =
  247|  3.94M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.94M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.94M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 394k, False: 3.55M]
  ------------------
  250|   394k|                return it;
  251|   394k|            }
  252|  3.55M|            it = iter;
  253|  3.55M|        }
  254|       |
  255|    351|        return it;
  256|   395k|    }
  257|   395k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  3.94M|{
   42|  3.94M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  3.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  3.94M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  3.94M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.94M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  3.94M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 3.94M, False: 0]
  ------------------
   59|  3.94M|        ++it;
   60|  3.94M|        return {it, make_contiguous_buffer(
   61|  3.94M|                        ranges::subrange{ranges::begin(range), it})};
   62|  3.94M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  3.94M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  4.34M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   394k|{
  459|   394k|    auto it = read_code_unit(range);
  460|   394k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   394k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 394k, False: 0]
  ------------------
  465|   394k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 394k, False: 0]
  ------------------
  466|   394k|            return *it;
  467|   394k|        }
  468|   394k|    }
  469|       |
  470|      0|    return unexpected(parse_error::error);
  471|   394k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.00M|{
  418|  1.00M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.00M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.00M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.00M|        if (ranges::size(range) < str.size()) {
  423|  1.00M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.00M|        }
  425|  1.00M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.00M|            return unexpected(parse_error::error);
  427|  1.00M|        }
  428|  1.00M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.00M|    }
  430|  1.00M|    else {
  431|  1.00M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.00M|            if (ch < 'A' || ch > 'Z') {
  433|  1.00M|                return ch;
  434|  1.00M|            }
  435|  1.00M|            return static_cast<char_type>(ch +
  436|  1.00M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.00M|        };
  438|       |
  439|  1.00M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.00M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.00M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.00M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.00M|                    return ascii_tolower(a) ==
  445|  1.00M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.00M|                }))) {
  447|  1.00M|            return unexpected(parse_error::error);
  448|  1.00M|        }
  449|       |
  450|      0|        return it;
  451|  1.00M|    }
  452|  1.00M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.00M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.00M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 1.00M, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|  1.00M|                return ch;
  434|  1.00M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.00M|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   394k|{
  139|   394k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   394k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   394k|{
  131|   394k|    return ranges::find_if(range, pred);
  132|   394k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   394k|{
  159|   394k|    auto it = read_while_code_unit(range, pred);
  160|   394k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 394k, False: 0]
  ------------------
  161|   394k|        return unexpected(parse_error::error);
  162|   394k|    }
  163|      0|    return it;
  164|   394k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.87M|{
  270|  1.87M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.87M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.87M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.87M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  1.87M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.87M|        return ranges::next(ranges::begin(range),
  276|  1.87M|                            ranges::distance(buf.view().begin(), it));
  277|  1.87M|    }
  278|  1.87M|    else {
  279|  1.87M|        auto it = ranges::begin(range);
  280|       |
  281|  1.87M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  1.87M|            auto seg = get_contiguous_beginning(range);
  283|  1.87M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.87M|                seg_it != seg.end()) {
  285|  1.87M|                return ranges_polyfill::batch_next(
  286|  1.87M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.87M|            }
  288|  1.87M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.87M|        }
  290|       |
  291|  1.87M|        return read_until_code_point(
  292|  1.87M|            ranges::subrange{it, ranges::end(range)},
  293|  1.87M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.87M|    }
  295|  1.87M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  4.90M|{
  270|  4.90M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  4.90M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  4.90M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  4.90M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  4.90M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  4.90M|        return ranges::next(ranges::begin(range),
  276|  4.90M|                            ranges::distance(buf.view().begin(), it));
  277|  4.90M|    }
  278|  4.90M|    else {
  279|  4.90M|        auto it = ranges::begin(range);
  280|       |
  281|  4.90M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  4.90M|            auto seg = get_contiguous_beginning(range);
  283|  4.90M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  4.90M|                seg_it != seg.end()) {
  285|  4.90M|                return ranges_polyfill::batch_next(
  286|  4.90M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  4.90M|            }
  288|  4.90M|            ranges_polyfill::batch_next(it, seg.size());
  289|  4.90M|        }
  290|       |
  291|  4.90M|        return read_until_code_point(
  292|  4.90M|            ranges::subrange{it, ranges::end(range)},
  293|  4.90M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  4.90M|    }
  295|  4.90M|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  1.07G|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  2.08M|{
   36|  2.08M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.13k, False: 2.08M]
  |  |  ------------------
  ------------------
   37|  1.13k|        return unexpected(e);
   38|  1.13k|    }
   39|       |
   40|  2.08M|    return ranges::next(ranges::begin(range));
   41|  2.08M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.90M|{
   30|  1.90M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.90M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   131k|{
   36|   131k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   131k|    return ranges::next(ranges::begin(range));
   41|   131k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   334k|{
   48|   334k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   334k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   334k|        const auto sz = ranges::ssize(range);
   52|   334k|        if (sz < count) {
   53|   334k|            return unexpected(eof_error::eof);
   54|   334k|        }
   55|       |
   56|   334k|        return ranges::next(ranges::begin(range), count);
   57|   334k|    }
   58|   334k|    else {
   59|   334k|        auto it = ranges::begin(range);
   60|   334k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 202k, False: 131k]
  ------------------
   61|   202k|            return ranges_polyfill::batch_next(it, count);
   62|   202k|        }
   63|       |
   64|   526k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 395k, False: 131k]
  ------------------
   65|   395k|             ++i, (void)++it) {
   66|   395k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 394k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   395k|        }
   70|       |
   71|   131k|        return it;
   72|   131k|    }
   73|   334k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.26M|{
   36|  5.26M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.38k, False: 5.26M]
  |  |  ------------------
  ------------------
   37|  1.38k|        return unexpected(e);
   38|  1.38k|    }
   39|       |
   40|  5.26M|    return ranges::next(ranges::begin(range));
   41|  5.26M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  15.4M|{
   48|  15.4M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  15.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  15.4M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  15.4M|        const auto sz = ranges::ssize(range);
   52|  15.4M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 324k, False: 15.1M]
  ------------------
   53|   324k|            return unexpected(eof_error::eof);
   54|   324k|        }
   55|       |
   56|  15.1M|        return ranges::next(ranges::begin(range), count);
   57|  15.4M|    }
   58|  15.4M|    else {
   59|  15.4M|        auto it = ranges::begin(range);
   60|  15.4M|        if (guaranteed_minimum_size(range) >= count) {
   61|  15.4M|            return ranges_polyfill::batch_next(it, count);
   62|  15.4M|        }
   63|       |
   64|  15.4M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  15.4M|             ++i, (void)++it) {
   66|  15.4M|            if (it == ranges::end(range)) {
   67|  15.4M|                return unexpected(eof_error::eof);
   68|  15.4M|            }
   69|  15.4M|        }
   70|       |
   71|  15.4M|        return it;
   72|  15.4M|    }
   73|  15.4M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  5.01M|{
   30|  5.01M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  5.01M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   394k|{
   36|   394k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   394k|    return ranges::next(ranges::begin(range));
   41|   394k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.00M|{
   48|  1.00M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.00M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.00M|        const auto sz = ranges::ssize(range);
   52|  1.00M|        if (sz < count) {
   53|  1.00M|            return unexpected(eof_error::eof);
   54|  1.00M|        }
   55|       |
   56|  1.00M|        return ranges::next(ranges::begin(range), count);
   57|  1.00M|    }
   58|  1.00M|    else {
   59|  1.00M|        auto it = ranges::begin(range);
   60|  1.00M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 607k, False: 394k]
  ------------------
   61|   607k|            return ranges_polyfill::batch_next(it, count);
   62|   607k|        }
   63|       |
   64|  1.57M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 1.18M, False: 394k]
  ------------------
   65|  1.18M|             ++i, (void)++it) {
   66|  1.18M|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 276, False: 1.18M]
  ------------------
   67|    276|                return unexpected(eof_error::eof);
   68|    276|            }
   69|  1.18M|        }
   70|       |
   71|   394k|        return it;
   72|   394k|    }
   73|  1.00M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.87M|{
   33|  3.87M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.87M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   188k|{
   39|   188k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   188k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 94.2k, False: 94.2k]
  ------------------
   41|   188k|                    : std::locale{};
   42|   188k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|  56.5k|    {
  112|  56.5k|        auto stdloc = loc.get<std::locale>();
  113|  56.5k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|  56.5k|        grouping = numpunct.grouping();
  115|  56.5k|        thousands_sep =
  116|  56.5k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 56.5k]
  ------------------
  117|  56.5k|        decimal_point = numpunct.decimal_point();
  118|  56.5k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|  56.5k|{
   49|  56.5k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 56.5k, False: 0]
  ------------------
   50|  56.5k|        return std::use_facet<Facet>(stdloc);
   51|  56.5k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|  56.5k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  2.13M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  6.77M|    {
   89|  6.77M|        std::setlocale(cat, "C");
   90|  6.77M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  6.77M|    {
   60|  6.77M|        const auto loc = std::setlocale(cat, nullptr);
   61|  6.77M|        std::strcpy(m_locbuf, loc);
   62|  6.77M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  6.77M|    {
   65|       |        // Restore locale to what it was before
   66|  6.77M|        std::setlocale(m_category, m_locbuf);
   67|  6.77M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   131k|    {
  112|   131k|        auto stdloc = loc.get<std::locale>();
  113|   131k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   131k|        grouping = numpunct.grouping();
  115|   131k|        thousands_sep =
  116|   131k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 131k]
  ------------------
  117|   131k|        decimal_point = numpunct.decimal_point();
  118|   131k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   131k|{
   49|   131k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 131k, False: 0]
  ------------------
   50|   131k|        return std::use_facet<Facet>(stdloc);
   51|   131k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   131k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  5.61M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.01M|{
   46|  2.01M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.01M, False: 0]
  ------------------
   47|  2.01M|        auto it = read_while_classic_space(range);
   48|  2.01M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.01M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.2k, False: 2.00M]
  |  |  ------------------
  ------------------
   50|  13.2k|            return unexpected(e);
   51|  13.2k|        }
   52|       |
   53|  2.00M|        return it;
   54|  2.01M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.01M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  2.16M|    {
  126|  2.16M|        return true;
  127|  2.16M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   131k|{
   46|   131k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 131k, False: 0]
  ------------------
   47|   131k|        auto it = read_while_classic_space(range);
   48|   131k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   131k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 131k]
  |  |  ------------------
  ------------------
   50|     78|            return unexpected(e);
   51|     78|        }
   52|       |
   53|   131k|        return it;
   54|   131k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   131k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  7.55M|    {
   35|  7.55M|        return m_msg == nullptr;
   36|  7.55M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.07M|    {
  131|  2.07M|        reader_error_handler eh{};
  132|  2.07M|        get_derived().check_specs_impl(specs, eh);
  133|  2.07M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.07M|        return {};
  137|  2.07M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  2.07M|    {
  142|  2.07M|        return static_cast<Derived&>(*this);
  143|  2.07M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.22M|{
   46|  5.22M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.22M, False: 0]
  ------------------
   47|  5.22M|        auto it = read_while_classic_space(range);
   48|  5.22M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.22M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.52k, False: 5.21M]
  |  |  ------------------
  ------------------
   50|  8.52k|            return unexpected(e);
   51|  8.52k|        }
   52|       |
   53|  5.21M|        return it;
   54|  5.22M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.22M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  5.67M|    {
  126|  5.67M|        return true;
  127|  5.67M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  5.47M|    {
  131|  5.47M|        reader_error_handler eh{};
  132|  5.47M|        get_derived().check_specs_impl(specs, eh);
  133|  5.47M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.47M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  5.47M|        return {};
  137|  5.47M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  5.47M|    {
  142|  5.47M|        return static_cast<Derived&>(*this);
  143|  5.47M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   395k|{
   46|   395k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 395k, False: 0]
  ------------------
   47|   395k|        auto it = read_while_classic_space(range);
   48|   395k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   395k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 351, False: 394k]
  |  |  ------------------
  ------------------
   50|    351|            return unexpected(e);
   51|    351|        }
   52|       |
   53|   394k|        return it;
   54|   395k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   395k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  626|   630k|{
  627|   630k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|   630k|                                  m_nan_payload_buffer, value);
  629|   630k|    value = this->setsign(value);
  630|   630k|    return n;
  631|   630k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  626|  1.67M|{
  627|  1.67M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|  1.67M|                                  m_nan_payload_buffer, value);
  629|  1.67M|    value = this->setsign(value);
  630|  1.67M|    return n;
  631|  1.67M|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  626|   648k|{
  627|   648k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|   648k|                                  m_nan_payload_buffer, value);
  629|   648k|    value = this->setsign(value);
  630|   648k|    return n;
  631|   648k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  626|  1.67M|{
  627|  1.67M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|  1.67M|                                  m_nan_payload_buffer, value);
  629|  1.67M|    value = this->setsign(value);
  630|  1.67M|    return n;
  631|  1.67M|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  626|   667k|{
  627|   667k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|   667k|                                  m_nan_payload_buffer, value);
  629|   667k|    value = this->setsign(value);
  630|   667k|    return n;
  631|   667k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  626|  1.68M|{
  627|  1.68M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  628|  1.68M|                                  m_nan_payload_buffer, value);
  629|  1.68M|    value = this->setsign(value);
  630|  1.68M|    return n;
  631|  1.68M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|   630k|{
  556|   630k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 1.19k, False: 629k]
  ------------------
  557|  1.19k|        value = std::numeric_limits<T>::infinity();
  558|  1.19k|        return 3;
  559|  1.19k|    }
  560|   629k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 294, False: 629k]
  ------------------
  561|    294|        value = std::numeric_limits<T>::infinity();
  562|    294|        return 8;
  563|    294|    }
  564|   629k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 1.11k, False: 628k]
  ------------------
  565|  1.11k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  1.11k|        return 3;
  567|  1.11k|    }
  568|   628k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 628k]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|   628k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|   628k|        if constexpr (sizeof(double) == sizeof(long double)) {
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|   628k|            double tmp{};
  606|   628k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|   628k|            value = tmp;
  608|   628k|            return ret;
  609|   628k|        }
  610|   628k|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|   628k|            return fast_float_fallback(data, value);
  614|   628k|        }
  615|   628k|    }
  616|   628k|    else {
  617|       |        // Default to fast_float
  618|   628k|        return fast_float_impl<CharT, T>{data}(value);
  619|   628k|    }
  620|   628k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  495|   628k|    {
  496|   628k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  129|  3.14M|    {
  130|  3.14M|        return {kind, options};
  131|  3.14M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  499|   628k|    {
  500|   628k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 585k, False: 42.7k]
  ------------------
  501|   628k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 7.98k, False: 34.7k]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   593k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   593k|                                              value);
  505|   593k|        }
  506|       |
  507|  34.7k|        const auto flags = get_flags();
  508|  34.7k|        const auto view = get_view();
  509|  34.7k|        const auto result = fast_float::from_chars(
  510|  34.7k|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  34.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  34.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.1k, False: 19.6k]
  |  |  ------------------
  ------------------
  513|  15.1k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|  15.1k|                                         "fast_float: invalid_argument");
  515|  15.1k|        }
  516|  19.6k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 833, False: 18.7k]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|    833|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|    833|                                              value);
  520|    833|        }
  521|       |
  522|  18.7k|        return result.ptr - view.data();
  523|  19.6k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   594k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   594k|    {
  466|   594k|#if !SCN_DISABLE_STRTOD
  467|   594k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   594k|    }
  474|   594k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  311|   594k|    {
  312|   594k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  143|  2.20M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  315|   594k|    {
  316|   594k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   594k|                           generic_strtod);
  318|   594k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  149|   594k|    {
  150|   594k|        CharT* end{};
  151|   594k|        errno = 0;
  152|   594k|        value = strtod_cb(src, &end);
  153|   594k|        const auto saved_errno = errno;
  154|   594k|        auto chars_read = end - src;
  155|       |
  156|   594k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   594k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.18k, False: 592k]
  |  |  ------------------
  ------------------
  158|  2.18k|            return unexpected(e);
  159|  2.18k|        }
  160|       |
  161|   592k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 584k, False: 7.43k]
  ------------------
  162|   592k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 20.8k, False: 563k]
  ------------------
  163|  20.8k|            chars_read -= 2;
  164|  20.8k|        }
  165|       |
  166|   592k|        return chars_read;
  167|   594k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  195|  2.20M|    {
  196|  2.20M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 2.16M, False: 38.5k]
  |  Branch (196:37): [True: 61, False: 2.16M]
  ------------------
  197|     61|            SCN_UNLIKELY_ATTR
  198|     61|            return {scan_error::invalid_scanned_value,
  199|     61|                    "strtod failed: No conversion"};
  200|     61|        }
  201|       |
  202|  2.20M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 11.8k, False: 2.19M]
  ------------------
  203|  2.20M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 11.8k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|  2.20M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 3.63k, False: 2.20M]
  |  Branch (209:34): [True: 715, False: 2.92k]
  ------------------
  210|    715|            SCN_UNLIKELY_ATTR
  211|    715|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|    715|        }
  213|       |
  214|  2.20M|        SCN_GCC_COMPAT_PUSH
  215|  2.20M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|  2.20M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 2.20M, False: 0]
  ------------------
  218|  2.20M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 2.20M, False: 0]
  ------------------
  219|  2.20M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 2.90k, False: 2.20M]
  ------------------
  220|  2.90k|            SCN_UNLIKELY_ATTR
  221|  2.90k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|  2.90k|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|  2.20M|            return {};
  227|  2.20M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  104|  2.20M|{
  105|  2.20M|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (105:12): [True: 2.16M, False: 41.5k]
  |  Branch (105:25): [True: 0, False: 41.5k]
  ------------------
  106|  2.20M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   594k|    {
  173|   594k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 594k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   594k|            auto first_space = read_until_classic_space(input.view());
  176|   594k|            input.assign(
  177|   594k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   594k|        }
  179|       |
  180|   594k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 585k, False: 8.82k]
  ------------------
  181|   585k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   585k|                input.get_allocated_string().insert(0, "0x");
  183|   585k|            }
  184|   585k|            else {
  185|   585k|                input.get_allocated_string().insert(0, L"0x");
  186|   585k|            }
  187|   585k|        }
  188|       |
  189|   594k|        return input.get_allocated_string().c_str();
  190|   594k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  322|   594k|    {
  323|   594k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   594k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   594k|        }
  326|   594k|        else {
  327|   594k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   594k|        }
  329|   594k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  230|   594k|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|   594k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|   594k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|   594k|            return std::strtof(str, str_end);
  257|   594k|        }
  258|   594k|        else if constexpr (std::is_same_v<T, double>) {
  259|   594k|            return std::strtod(str, str_end);
  260|   594k|        }
  261|   594k|        else if constexpr (std::is_same_v<T, long double>) {
  262|   594k|            return std::strtold(str, str_end);
  263|   594k|        }
  264|   594k|#endif
  265|   594k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  478|   195k|    {
  479|   195k|        unsigned format_flags{};
  480|   195k|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (480:13): [True: 194k, False: 580]
  ------------------
  481|   194k|            format_flags |= fast_float::fixed;
  482|   194k|        }
  483|   195k|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (483:13): [True: 178k, False: 16.8k]
  ------------------
  484|   178k|            format_flags |= fast_float::scientific;
  485|   178k|        }
  486|       |
  487|   195k|        return static_cast<fast_float::chars_format>(format_flags);
  488|   195k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  527|  34.7k|    {
  528|  34.7k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  34.7k|            return m_input.view();
  530|  34.7k|        }
  531|  34.7k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  532|  34.7k|            return std::u16string_view{
  533|  34.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  34.7k|                m_input.view().size()};
  535|  34.7k|        }
  536|  34.7k|        else {
  537|  34.7k|            return std::u32string_view{
  538|  34.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  34.7k|                m_input.view().size()};
  540|  34.7k|        }
  541|  34.7k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.67M|{
  556|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 632, False: 1.67M]
  ------------------
  557|    632|        value = std::numeric_limits<T>::infinity();
  558|    632|        return 3;
  559|    632|    }
  560|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 140, False: 1.67M]
  ------------------
  561|    140|        value = std::numeric_limits<T>::infinity();
  562|    140|        return 8;
  563|    140|    }
  564|  1.67M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 679, False: 1.67M]
  ------------------
  565|    679|        value = std::numeric_limits<T>::quiet_NaN();
  566|    679|        return 3;
  567|    679|    }
  568|  1.67M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 1.67M]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|  1.67M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|  1.67M|        if constexpr (sizeof(double) == sizeof(long double)) {
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|  1.67M|            double tmp{};
  606|  1.67M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|  1.67M|            value = tmp;
  608|  1.67M|            return ret;
  609|  1.67M|        }
  610|  1.67M|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|  1.67M|            return fast_float_fallback(data, value);
  614|  1.67M|        }
  615|  1.67M|    }
  616|  1.67M|    else {
  617|       |        // Default to fast_float
  618|  1.67M|        return fast_float_impl<CharT, T>{data}(value);
  619|  1.67M|    }
  620|  1.67M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  495|  1.67M|    {
  496|  1.67M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  129|  8.25M|    {
  130|  8.25M|        return {kind, options};
  131|  8.25M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  499|  1.67M|    {
  500|  1.67M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 1.60M, False: 66.6k]
  ------------------
  501|  1.67M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 3.97k, False: 62.6k]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|  1.60M|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|  1.60M|                                              value);
  505|  1.60M|        }
  506|       |
  507|  62.6k|        const auto flags = get_flags();
  508|  62.6k|        const auto view = get_view();
  509|  62.6k|        const auto result = fast_float::from_chars(
  510|  62.6k|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  62.6k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 48.9k, False: 13.7k]
  |  |  ------------------
  ------------------
  513|  48.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|  48.9k|                                         "fast_float: invalid_argument");
  515|  48.9k|        }
  516|  13.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 684, False: 13.0k]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|    684|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|    684|                                              value);
  520|    684|        }
  521|       |
  522|  13.0k|        return result.ptr - view.data();
  523|  13.7k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|  1.61M|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|  1.61M|    {
  466|  1.61M|#if !SCN_DISABLE_STRTOD
  467|  1.61M|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|  1.61M|    }
  474|  1.61M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  311|  1.61M|    {
  312|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  315|  1.61M|    {
  316|  1.61M|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|  1.61M|                           generic_strtod);
  318|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  149|  1.61M|    {
  150|  1.61M|        CharT* end{};
  151|  1.61M|        errno = 0;
  152|  1.61M|        value = strtod_cb(src, &end);
  153|  1.61M|        const auto saved_errno = errno;
  154|  1.61M|        auto chars_read = end - src;
  155|       |
  156|  1.61M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|  1.61M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.49k, False: 1.60M]
  |  |  ------------------
  ------------------
  158|  1.49k|            return unexpected(e);
  159|  1.49k|        }
  160|       |
  161|  1.60M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 1.60M, False: 3.62k]
  ------------------
  162|  1.60M|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 10.5k, False: 1.59M]
  ------------------
  163|  10.5k|            chars_read -= 2;
  164|  10.5k|        }
  165|       |
  166|  1.60M|        return chars_read;
  167|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|  1.61M|    {
  173|  1.61M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 1.61M, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|  1.61M|            auto first_space = read_until_classic_space(input.view());
  176|  1.61M|            input.assign(
  177|  1.61M|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|  1.61M|        }
  179|       |
  180|  1.61M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 1.60M, False: 4.65k]
  ------------------
  181|  1.60M|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|  1.60M|                input.get_allocated_string().insert(0, "0x");
  183|  1.60M|            }
  184|  1.60M|            else {
  185|  1.60M|                input.get_allocated_string().insert(0, L"0x");
  186|  1.60M|            }
  187|  1.60M|        }
  188|       |
  189|  1.61M|        return input.get_allocated_string().c_str();
  190|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  322|  1.61M|    {
  323|  1.61M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|  1.61M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|  1.61M|        }
  326|  1.61M|        else {
  327|  1.61M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|  1.61M|        }
  329|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  268|  1.61M|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|  1.61M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|  1.61M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|  1.61M|            return std::wcstof(str, str_end);
  295|  1.61M|        }
  296|  1.61M|        else if constexpr (std::is_same_v<T, double>) {
  297|  1.61M|            return std::wcstod(str, str_end);
  298|  1.61M|        }
  299|  1.61M|        else if constexpr (std::is_same_v<T, long double>) {
  300|  1.61M|            return std::wcstold(str, str_end);
  301|  1.61M|        }
  302|  1.61M|#endif
  303|  1.61M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  527|  62.6k|    {
  528|  62.6k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  62.6k|            return m_input.view();
  530|  62.6k|        }
  531|  62.6k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (531:28): [Folded - Ignored]
  ------------------
  532|  62.6k|            return std::u16string_view{
  533|  62.6k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  62.6k|                m_input.view().size()};
  535|  62.6k|        }
  536|  62.6k|        else {
  537|  62.6k|            return std::u32string_view{
  538|  62.6k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  62.6k|                m_input.view().size()};
  540|  62.6k|        }
  541|  62.6k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|   648k|{
  556|   648k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 1.22k, False: 647k]
  ------------------
  557|  1.22k|        value = std::numeric_limits<T>::infinity();
  558|  1.22k|        return 3;
  559|  1.22k|    }
  560|   647k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 303, False: 646k]
  ------------------
  561|    303|        value = std::numeric_limits<T>::infinity();
  562|    303|        return 8;
  563|    303|    }
  564|   646k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 1.13k, False: 645k]
  ------------------
  565|  1.13k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  1.13k|        return 3;
  567|  1.13k|    }
  568|   645k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 645k]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|   645k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|   645k|        if constexpr (sizeof(double) == sizeof(long double)) {
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|   645k|            double tmp{};
  606|   645k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|   645k|            value = tmp;
  608|   645k|            return ret;
  609|   645k|        }
  610|   645k|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|   645k|            return fast_float_fallback(data, value);
  614|   645k|        }
  615|   645k|    }
  616|   645k|    else {
  617|       |        // Default to fast_float
  618|   645k|        return fast_float_impl<CharT, T>{data}(value);
  619|   645k|    }
  620|   645k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  495|   645k|    {
  496|   645k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  499|   645k|    {
  500|   645k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 602k, False: 43.1k]
  ------------------
  501|   645k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 8.06k, False: 35.0k]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   610k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   610k|                                              value);
  505|   610k|        }
  506|       |
  507|  35.0k|        const auto flags = get_flags();
  508|  35.0k|        const auto view = get_view();
  509|  35.0k|        const auto result = fast_float::from_chars(
  510|  35.0k|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  35.0k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.2k, False: 19.7k]
  |  |  ------------------
  ------------------
  513|  15.2k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|  15.2k|                                         "fast_float: invalid_argument");
  515|  15.2k|        }
  516|  19.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 477, False: 19.2k]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|    477|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|    477|                                              value);
  520|    477|        }
  521|       |
  522|  19.2k|        return result.ptr - view.data();
  523|  19.7k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   611k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   611k|    {
  466|   611k|#if !SCN_DISABLE_STRTOD
  467|   611k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   611k|    }
  474|   611k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  311|   611k|    {
  312|   611k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  143|  2.22M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  315|   611k|    {
  316|   611k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   611k|                           generic_strtod);
  318|   611k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  149|   611k|    {
  150|   611k|        CharT* end{};
  151|   611k|        errno = 0;
  152|   611k|        value = strtod_cb(src, &end);
  153|   611k|        const auto saved_errno = errno;
  154|   611k|        auto chars_read = end - src;
  155|       |
  156|   611k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   611k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 609k]
  |  |  ------------------
  ------------------
  158|  1.26k|            return unexpected(e);
  159|  1.26k|        }
  160|       |
  161|   609k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 602k, False: 7.65k]
  ------------------
  162|   609k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 22.3k, False: 579k]
  ------------------
  163|  22.3k|            chars_read -= 2;
  164|  22.3k|        }
  165|       |
  166|   609k|        return chars_read;
  167|   611k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  195|  2.22M|    {
  196|  2.22M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 2.18M, False: 39.6k]
  |  Branch (196:37): [True: 63, False: 2.18M]
  ------------------
  197|     63|            SCN_UNLIKELY_ATTR
  198|     63|            return {scan_error::invalid_scanned_value,
  199|     63|                    "strtod failed: No conversion"};
  200|     63|        }
  201|       |
  202|  2.22M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 11.9k, False: 2.21M]
  ------------------
  203|  2.22M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 11.9k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|  2.22M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 2.01k, False: 2.22M]
  |  Branch (209:34): [True: 517, False: 1.49k]
  ------------------
  210|    517|            SCN_UNLIKELY_ATTR
  211|    517|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|    517|        }
  213|       |
  214|  2.22M|        SCN_GCC_COMPAT_PUSH
  215|  2.22M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|  2.22M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 2.22M, False: 0]
  ------------------
  218|  2.22M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 2.22M, False: 0]
  ------------------
  219|  2.22M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 1.48k, False: 2.22M]
  ------------------
  220|  1.48k|            SCN_UNLIKELY_ATTR
  221|  1.48k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|  1.48k|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|  2.22M|            return {};
  227|  2.22M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  108|  2.22M|{
  109|  2.22M|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (109:12): [True: 2.18M, False: 41.1k]
  |  Branch (109:24): [True: 0, False: 41.1k]
  ------------------
  110|  2.22M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   611k|    {
  173|   611k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 611k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   611k|            auto first_space = read_until_classic_space(input.view());
  176|   611k|            input.assign(
  177|   611k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   611k|        }
  179|       |
  180|   611k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 602k, False: 8.53k]
  ------------------
  181|   602k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   602k|                input.get_allocated_string().insert(0, "0x");
  183|   602k|            }
  184|   602k|            else {
  185|   602k|                input.get_allocated_string().insert(0, L"0x");
  186|   602k|            }
  187|   602k|        }
  188|       |
  189|   611k|        return input.get_allocated_string().c_str();
  190|   611k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  322|   611k|    {
  323|   611k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   611k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   611k|        }
  326|   611k|        else {
  327|   611k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   611k|        }
  329|   611k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  230|   611k|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|   611k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|   611k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|   611k|            return std::strtof(str, str_end);
  257|   611k|        }
  258|   611k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (258:28): [Folded - Ignored]
  ------------------
  259|   611k|            return std::strtod(str, str_end);
  260|   611k|        }
  261|   611k|        else if constexpr (std::is_same_v<T, long double>) {
  262|   611k|            return std::strtold(str, str_end);
  263|   611k|        }
  264|   611k|#endif
  265|   611k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  527|  35.0k|    {
  528|  35.0k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  35.0k|            return m_input.view();
  530|  35.0k|        }
  531|  35.0k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  532|  35.0k|            return std::u16string_view{
  533|  35.0k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  35.0k|                m_input.view().size()};
  535|  35.0k|        }
  536|  35.0k|        else {
  537|  35.0k|            return std::u32string_view{
  538|  35.0k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  35.0k|                m_input.view().size()};
  540|  35.0k|        }
  541|  35.0k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.67M|{
  556|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 658, False: 1.67M]
  ------------------
  557|    658|        value = std::numeric_limits<T>::infinity();
  558|    658|        return 3;
  559|    658|    }
  560|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 149, False: 1.67M]
  ------------------
  561|    149|        value = std::numeric_limits<T>::infinity();
  562|    149|        return 8;
  563|    149|    }
  564|  1.67M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 699, False: 1.67M]
  ------------------
  565|    699|        value = std::numeric_limits<T>::quiet_NaN();
  566|    699|        return 3;
  567|    699|    }
  568|  1.67M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 1.67M]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|  1.67M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|  1.67M|        if constexpr (sizeof(double) == sizeof(long double)) {
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|  1.67M|            double tmp{};
  606|  1.67M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|  1.67M|            value = tmp;
  608|  1.67M|            return ret;
  609|  1.67M|        }
  610|  1.67M|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|  1.67M|            return fast_float_fallback(data, value);
  614|  1.67M|        }
  615|  1.67M|    }
  616|  1.67M|    else {
  617|       |        // Default to fast_float
  618|  1.67M|        return fast_float_impl<CharT, T>{data}(value);
  619|  1.67M|    }
  620|  1.67M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  495|  1.67M|    {
  496|  1.67M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  499|  1.67M|    {
  500|  1.67M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 1.61M, False: 66.9k]
  ------------------
  501|  1.67M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 3.99k, False: 62.9k]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|  1.61M|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|  1.61M|                                              value);
  505|  1.61M|        }
  506|       |
  507|  62.9k|        const auto flags = get_flags();
  508|  62.9k|        const auto view = get_view();
  509|  62.9k|        const auto result = fast_float::from_chars(
  510|  62.9k|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  62.9k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.0k, False: 13.8k]
  |  |  ------------------
  ------------------
  513|  49.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|  49.0k|                                         "fast_float: invalid_argument");
  515|  49.0k|        }
  516|  13.8k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 382, False: 13.4k]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|    382|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|    382|                                              value);
  520|    382|        }
  521|       |
  522|  13.4k|        return result.ptr - view.data();
  523|  13.8k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|  1.61M|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|  1.61M|    {
  466|  1.61M|#if !SCN_DISABLE_STRTOD
  467|  1.61M|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|  1.61M|    }
  474|  1.61M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  311|  1.61M|    {
  312|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  315|  1.61M|    {
  316|  1.61M|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|  1.61M|                           generic_strtod);
  318|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  149|  1.61M|    {
  150|  1.61M|        CharT* end{};
  151|  1.61M|        errno = 0;
  152|  1.61M|        value = strtod_cb(src, &end);
  153|  1.61M|        const auto saved_errno = errno;
  154|  1.61M|        auto chars_read = end - src;
  155|       |
  156|  1.61M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|  1.61M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 798, False: 1.61M]
  |  |  ------------------
  ------------------
  158|    798|            return unexpected(e);
  159|    798|        }
  160|       |
  161|  1.61M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 1.61M, False: 3.79k]
  ------------------
  162|  1.61M|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 11.2k, False: 1.59M]
  ------------------
  163|  11.2k|            chars_read -= 2;
  164|  11.2k|        }
  165|       |
  166|  1.61M|        return chars_read;
  167|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|  1.61M|    {
  173|  1.61M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 1.61M, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|  1.61M|            auto first_space = read_until_classic_space(input.view());
  176|  1.61M|            input.assign(
  177|  1.61M|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|  1.61M|        }
  179|       |
  180|  1.61M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 1.61M, False: 4.38k]
  ------------------
  181|  1.61M|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|  1.61M|                input.get_allocated_string().insert(0, "0x");
  183|  1.61M|            }
  184|  1.61M|            else {
  185|  1.61M|                input.get_allocated_string().insert(0, L"0x");
  186|  1.61M|            }
  187|  1.61M|        }
  188|       |
  189|  1.61M|        return input.get_allocated_string().c_str();
  190|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  322|  1.61M|    {
  323|  1.61M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|  1.61M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|  1.61M|        }
  326|  1.61M|        else {
  327|  1.61M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|  1.61M|        }
  329|  1.61M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  268|  1.61M|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|  1.61M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|  1.61M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|  1.61M|            return std::wcstof(str, str_end);
  295|  1.61M|        }
  296|  1.61M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (296:28): [Folded - Ignored]
  ------------------
  297|  1.61M|            return std::wcstod(str, str_end);
  298|  1.61M|        }
  299|  1.61M|        else if constexpr (std::is_same_v<T, long double>) {
  300|  1.61M|            return std::wcstold(str, str_end);
  301|  1.61M|        }
  302|  1.61M|#endif
  303|  1.61M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  527|  62.9k|    {
  528|  62.9k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  62.9k|            return m_input.view();
  530|  62.9k|        }
  531|  62.9k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (531:28): [Folded - Ignored]
  ------------------
  532|  62.9k|            return std::u16string_view{
  533|  62.9k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  62.9k|                m_input.view().size()};
  535|  62.9k|        }
  536|  62.9k|        else {
  537|  62.9k|            return std::u32string_view{
  538|  62.9k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  62.9k|                m_input.view().size()};
  540|  62.9k|        }
  541|  62.9k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|   667k|{
  556|   667k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 1.27k, False: 666k]
  ------------------
  557|  1.27k|        value = std::numeric_limits<T>::infinity();
  558|  1.27k|        return 3;
  559|  1.27k|    }
  560|   666k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 318, False: 665k]
  ------------------
  561|    318|        value = std::numeric_limits<T>::infinity();
  562|    318|        return 8;
  563|    318|    }
  564|   665k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 1.17k, False: 664k]
  ------------------
  565|  1.17k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  1.17k|        return 3;
  567|  1.17k|    }
  568|   664k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 664k]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|   664k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|   664k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (602:23): [Folded - Ignored]
  ------------------
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|   664k|            double tmp{};
  606|   664k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|   664k|            value = tmp;
  608|   664k|            return ret;
  609|   664k|        }
  610|   664k|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|   664k|            return fast_float_fallback(data, value);
  614|   664k|        }
  615|   664k|    }
  616|   664k|    else {
  617|       |        // Default to fast_float
  618|   664k|        return fast_float_impl<CharT, T>{data}(value);
  619|   664k|    }
  620|   664k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   664k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   664k|    {
  466|   664k|#if !SCN_DISABLE_STRTOD
  467|   664k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   664k|    }
  474|   664k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  311|   664k|    {
  312|   664k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  143|  2.34M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  315|   664k|    {
  316|   664k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   664k|                           generic_strtod);
  318|   664k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  149|   664k|    {
  150|   664k|        CharT* end{};
  151|   664k|        errno = 0;
  152|   664k|        value = strtod_cb(src, &end);
  153|   664k|        const auto saved_errno = errno;
  154|   664k|        auto chars_read = end - src;
  155|       |
  156|   664k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   664k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 648k]
  |  |  ------------------
  ------------------
  158|  15.9k|            return unexpected(e);
  159|  15.9k|        }
  160|       |
  161|   648k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 621k, False: 27.4k]
  ------------------
  162|   648k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 23.3k, False: 598k]
  ------------------
  163|  23.3k|            chars_read -= 2;
  164|  23.3k|        }
  165|       |
  166|   648k|        return chars_read;
  167|   664k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  195|  2.34M|    {
  196|  2.34M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 2.29M, False: 57.1k]
  |  Branch (196:37): [True: 64.6k, False: 2.22M]
  ------------------
  197|  64.6k|            SCN_UNLIKELY_ATTR
  198|  64.6k|            return {scan_error::invalid_scanned_value,
  199|  64.6k|                    "strtod failed: No conversion"};
  200|  64.6k|        }
  201|       |
  202|  2.28M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 12.1k, False: 2.27M]
  ------------------
  203|  2.28M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 12.1k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|  2.28M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 710, False: 2.28M]
  |  Branch (209:34): [True: 151, False: 559]
  ------------------
  210|    151|            SCN_UNLIKELY_ATTR
  211|    151|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|    151|        }
  213|       |
  214|  2.28M|        SCN_GCC_COMPAT_PUSH
  215|  2.28M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|  2.28M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 2.28M, False: 0]
  ------------------
  218|  2.28M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 2.28M, False: 0]
  ------------------
  219|  2.28M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 559, False: 2.28M]
  ------------------
  220|    559|            SCN_UNLIKELY_ATTR
  221|    559|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|    559|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|  2.28M|            return {};
  227|  2.28M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  112|  2.34M|{
  113|  2.34M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (113:12): [True: 2.29M, False: 57.7k]
  |  Branch (113:26): [True: 0, False: 57.7k]
  ------------------
  114|  2.34M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   664k|    {
  173|   664k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 664k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   664k|            auto first_space = read_until_classic_space(input.view());
  176|   664k|            input.assign(
  177|   664k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   664k|        }
  179|       |
  180|   664k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 621k, False: 43.3k]
  ------------------
  181|   621k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   621k|                input.get_allocated_string().insert(0, "0x");
  183|   621k|            }
  184|   621k|            else {
  185|   621k|                input.get_allocated_string().insert(0, L"0x");
  186|   621k|            }
  187|   621k|        }
  188|       |
  189|   664k|        return input.get_allocated_string().c_str();
  190|   664k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  322|   664k|    {
  323|   664k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   664k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   664k|        }
  326|   664k|        else {
  327|   664k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   664k|        }
  329|   664k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  230|   664k|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|   664k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|   664k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|   664k|            return std::strtof(str, str_end);
  257|   664k|        }
  258|   664k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (258:28): [Folded - Ignored]
  ------------------
  259|   664k|            return std::strtod(str, str_end);
  260|   664k|        }
  261|   664k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (261:28): [Folded - Ignored]
  ------------------
  262|   664k|            return std::strtold(str, str_end);
  263|   664k|        }
  264|   664k|#endif
  265|   664k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.68M|{
  556|  1.68M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 702, False: 1.68M]
  ------------------
  557|    702|        value = std::numeric_limits<T>::infinity();
  558|    702|        return 3;
  559|    702|    }
  560|  1.68M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 162, False: 1.68M]
  ------------------
  561|    162|        value = std::numeric_limits<T>::infinity();
  562|    162|        return 8;
  563|    162|    }
  564|  1.68M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 713, False: 1.68M]
  ------------------
  565|    713|        value = std::numeric_limits<T>::quiet_NaN();
  566|    713|        return 3;
  567|    713|    }
  568|  1.68M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 0, False: 1.68M]
  ------------------
  569|      0|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|      0|    }
  600|       |
  601|  1.68M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (601:19): [Folded - Ignored]
  ------------------
  602|  1.68M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (602:23): [Folded - Ignored]
  ------------------
  603|       |            // If double == long double (true on Windows),
  604|       |            // use fast_float with double
  605|  1.68M|            double tmp{};
  606|  1.68M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  607|  1.68M|            value = tmp;
  608|  1.68M|            return ret;
  609|  1.68M|        }
  610|  1.68M|        else {
  611|       |            // long doubles aren't supported by fast_float ->
  612|       |            // fall back to from_chars or strtod
  613|  1.68M|            return fast_float_fallback(data, value);
  614|  1.68M|        }
  615|  1.68M|    }
  616|  1.68M|    else {
  617|       |        // Default to fast_float
  618|  1.68M|        return fast_float_impl<CharT, T>{data}(value);
  619|  1.68M|    }
  620|  1.68M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|  1.68M|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|  1.68M|    {
  466|  1.68M|#if !SCN_DISABLE_STRTOD
  467|  1.68M|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|  1.68M|    }
  474|  1.68M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  311|  1.68M|    {
  312|  1.68M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  315|  1.68M|    {
  316|  1.68M|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|  1.68M|                           generic_strtod);
  318|  1.68M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  149|  1.68M|    {
  150|  1.68M|        CharT* end{};
  151|  1.68M|        errno = 0;
  152|  1.68M|        value = strtod_cb(src, &end);
  153|  1.68M|        const auto saved_errno = errno;
  154|  1.68M|        auto chars_read = end - src;
  155|       |
  156|  1.68M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|  1.68M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.4k, False: 1.63M]
  |  |  ------------------
  ------------------
  158|  49.4k|            return unexpected(e);
  159|  49.4k|        }
  160|       |
  161|  1.63M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 1.61M, False: 17.5k]
  ------------------
  162|  1.63M|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 11.7k, False: 1.60M]
  ------------------
  163|  11.7k|            chars_read -= 2;
  164|  11.7k|        }
  165|       |
  166|  1.63M|        return chars_read;
  167|  1.68M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|  1.68M|    {
  173|  1.68M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 1.68M, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|  1.68M|            auto first_space = read_until_classic_space(input.view());
  176|  1.68M|            input.assign(
  177|  1.68M|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|  1.68M|        }
  179|       |
  180|  1.68M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 1.61M, False: 67.0k]
  ------------------
  181|  1.61M|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|  1.61M|                input.get_allocated_string().insert(0, "0x");
  183|  1.61M|            }
  184|  1.61M|            else {
  185|  1.61M|                input.get_allocated_string().insert(0, L"0x");
  186|  1.61M|            }
  187|  1.61M|        }
  188|       |
  189|  1.68M|        return input.get_allocated_string().c_str();
  190|  1.68M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  322|  1.68M|    {
  323|  1.68M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|  1.68M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|  1.68M|        }
  326|  1.68M|        else {
  327|  1.68M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|  1.68M|        }
  329|  1.68M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  268|  1.68M|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|  1.68M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|  1.68M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|  1.68M|            return std::wcstof(str, str_end);
  295|  1.68M|        }
  296|  1.68M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (296:28): [Folded - Ignored]
  ------------------
  297|  1.68M|            return std::wcstod(str, str_end);
  298|  1.68M|        }
  299|  1.68M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (299:28): [Folded - Ignored]
  ------------------
  300|  1.68M|            return std::wcstold(str, str_end);
  301|  1.68M|        }
  302|  1.68M|#endif
  303|  1.68M|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  17.9k|    {
  577|  17.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  17.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  17.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  17.9k|        float_reader<CharT> rd{};
  581|  17.9k|        return read_impl<range_nocvref_t>(
  582|  17.9k|            range, rd,
  583|  17.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  17.9k|                return r.read_source(SCN_FWD(args)...);
  585|  17.9k|            },
  586|  17.9k|            value);
  587|  17.9k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|  84.8k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|   282k|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   650k|    {
  633|   650k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   650k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.5k, False: 630k]
  |  |  ------------------
  ------------------
  635|  19.5k|            return unexpected(r.error());
  636|  19.5k|        }
  637|       |
  638|   630k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   630k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.2k, False: 613k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.2k|    }                                                  \
  |  |  |  |   70|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   613k|        return ranges::next(ranges::begin(range), n);
  640|   630k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   630k|    {
   98|   630k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   630k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 8.16k, False: 622k]
  ------------------
  102|       |
  103|   630k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   630k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.2k, False: 613k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.2k|    }                                                  \
  |  |  |  |   70|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   613k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   630k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  17.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  17.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  17.9k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.96M|    {
   73|  1.96M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.96M|        return read_source_impl(range);
   79|  1.96M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.00M|    {
  112|  2.00M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.00M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.00M|        auto it = sign_result.first;
  115|  2.00M|        m_sign = sign_result.second;
  116|       |
  117|  2.00M|        auto digits_begin = it;
  118|  2.00M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.00M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.00M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.00M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  |  Branch (153:45): [True: 0, False: 2.00M]
  |  |  |  Branch (153:45): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  122|  2.00M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.00M|            else {
  133|  2.00M|                auto cb = [&](auto&& rr)
  134|  2.00M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.00M|                    auto res = read_all(rr);
  136|  2.00M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.00M|                        return unexpected_scan_error(
  138|  2.00M|                            scan_error::invalid_scanned_value,
  139|  2.00M|                            "Invalid float value");
  140|  2.00M|                    }
  141|  2.00M|                    return res;
  142|  2.00M|                };
  143|  2.00M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 59.0k, False: 1.94M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  59.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  59.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  59.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  59.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  59.0k|    }                                                  \
  |  |   70|  2.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.94M|            }
  145|  2.00M|        }
  146|  1.94M|        else {
  147|  1.94M|            SCN_TRY_ASSIGN(
  148|  1.94M|                it,
  149|  1.94M|                do_read_source_impl(
  150|  1.94M|                    r,
  151|  1.94M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.94M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.94M|        }
  154|       |
  155|  1.94M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.94M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.94M, False: 3.68k]
  |  Branch (157:48): [True: 1.94M, False: 915]
  ------------------
  158|  1.94M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.93M, False: 3.42k]
  ------------------
  159|  1.94M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.93M, False: 0]
  ------------------
  160|  1.93M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.93M|        }
  162|       |
  163|  1.94M|        handle_separators();
  164|       |
  165|  1.94M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.94M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.94M|        return it;
  178|  1.94M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.00M|    {
  226|  2.00M|        auto it = ranges::begin(range);
  227|  2.00M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.00M, False: 4.60k]
  ------------------
  228|  2.00M|            return unexpected(r.error());
  229|  2.00M|        }
  230|  4.60k|        else {
  231|  4.60k|            it = *r;
  232|  4.60k|        }
  233|       |
  234|  4.60k|        if (auto r = read_matching_string_classic_nocase(
  235|  4.60k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  4.60k|            !r) {
  ------------------
  |  Branch (236:13): [True: 3.68k, False: 915]
  ------------------
  237|  3.68k|            m_kind = float_kind::inf_short;
  238|  3.68k|            return it;
  239|  3.68k|        }
  240|    915|        else {
  241|    915|            m_kind = float_kind::inf_long;
  242|    915|            return *r;
  243|    915|        }
  244|  4.60k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.00M|    {
  249|  2.00M|        auto it = ranges::begin(range);
  250|  2.00M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.99M, False: 3.49k]
  ------------------
  251|  1.99M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.99M|                scan_error::invalid_scanned_value,
  253|  1.99M|                "Invalid floating-point NaN value"));
  254|  1.99M|        }
  255|  3.49k|        else {
  256|  3.49k|            it = *r;
  257|  3.49k|        }
  258|       |
  259|  3.49k|        if (auto r = read_matching_code_unit(
  260|  3.49k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  3.49k|            !r) {
  ------------------
  |  Branch (261:13): [True: 3.42k, False: 68]
  ------------------
  262|  3.42k|            m_kind = float_kind::nan_simple;
  263|  3.42k|            return it;
  264|  3.42k|        }
  265|     68|        else {
  266|     68|            it = *r;
  267|     68|        }
  268|       |
  269|     68|        auto payload_beg_it = it;
  270|     68|        it = read_while_code_unit(
  271|     68|            ranges::subrange{it, ranges::end(range)},
  272|     68|            [](char_type ch) SCN_NOEXCEPT {
  273|     68|                return is_ascii_char(ch) &&
  274|     68|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|     68|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|     68|            });
  277|     68|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|     68|        m_kind = float_kind::nan_with_payload;
  280|     68|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 68]
  ------------------
  281|     68|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|     68|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|     68|                                     "Invalid floating-point NaN payload");
  286|     68|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|    196|            [](char_type ch) SCN_NOEXCEPT {
  273|    196|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 170, False: 26]
  ------------------
  274|    196|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 128, False: 42]
  |  Branch (274:39): [True: 98, False: 30]
  |  Branch (274:54): [True: 30, False: 42]
  |  Branch (274:67): [True: 30, False: 0]
  ------------------
  275|    170|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 0, False: 42]
  |  Branch (275:39): [True: 0, False: 0]
  |  Branch (275:53): [True: 0, False: 42]
  ------------------
  276|    196|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.90M|    {
  220|  1.90M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.90M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|  28.8k|    {
  292|  28.8k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 1.58k, False: 27.2k]
  ------------------
  293|  1.58k|            auto beg_exp_it = ranges::begin(range);
  294|  1.58k|            auto it = *r;
  295|       |
  296|  1.58k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 1.50k, False: 84]
  ------------------
  297|  1.58k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  1.50k|                it = r_sign->first;
  299|  1.50k|            }
  300|       |
  301|  1.58k|            if (auto r_exp = read_while1_code_unit(
  302|  1.58k|                    ranges::subrange{it, ranges::end(range)},
  303|  1.58k|                    [](char_type ch)
  304|  1.58k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  1.58k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 306, False: 1.28k]
  |  |  ------------------
  ------------------
  306|    306|                it = beg_exp_it;
  307|    306|            }
  308|  1.28k|            else {
  309|  1.28k|                it = *r_exp;
  310|  1.28k|            }
  311|       |
  312|  1.58k|            return it;
  313|  1.58k|        }
  314|  27.2k|        else {
  315|  27.2k|            return ranges::begin(range);
  316|  27.2k|        }
  317|  28.8k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|  15.9k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|  89.9k|    {
  365|  89.9k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  89.9k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 55.0k, False: 34.8k]
  |  Branch (366:50): [True: 20.3k, False: 34.7k]
  ------------------
  367|       |
  368|  89.9k|        auto it = ranges::begin(range);
  369|  89.9k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  89.9k|        if (auto r =
  372|  89.9k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  89.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.8k, False: 44.1k]
  |  |  ------------------
  ------------------
  374|  45.8k|            return r.transform_error(
  375|  45.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  45.8k|                                              "Invalid floating-point value"));
  377|  45.8k|        }
  378|  44.1k|        else {
  379|  44.1k|            digits_count += ranges::distance(it, *r);
  380|  44.1k|            it = *r;
  381|  44.1k|        }
  382|       |
  383|  44.1k|        m_integral_part_length = digits_count;
  384|  44.1k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 7.35k, False: 36.7k]
  ------------------
  385|  44.1k|                ranges::subrange{it, ranges::end(range)},
  386|  44.1k|                m_locale_options.decimal_point)) {
  387|  7.35k|            it = *r;
  388|  7.35k|        }
  389|       |
  390|  44.1k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 5.16k, False: 38.9k]
  ------------------
  391|  44.1k|                                     false)) {
  392|  5.16k|            digits_count += ranges::distance(it, *r);
  393|  5.16k|            it = *r;
  394|  5.16k|        }
  395|       |
  396|  44.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 44.1k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|  44.1k|        auto beg_exp_it = it;
  402|  44.1k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 28.8k, False: 15.3k]
  ------------------
  403|  28.8k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|  28.8k|        }
  405|  44.1k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 13.1k, False: 30.9k]
  |  Branch (405:29): [True: 12.6k, False: 498]
  ------------------
  406|  12.6k|            return unexpected_scan_error(
  407|  12.6k|                scan_error::invalid_scanned_value,
  408|  12.6k|                "No exponent given to scientific float");
  409|  12.6k|        }
  410|       |
  411|  31.4k|        m_kind =
  412|  31.4k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 30.1k, False: 1.28k]
  ------------------
  413|       |
  414|  31.4k|        return it;
  415|  44.1k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|   134k|    {
  185|   134k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  |  Branch (153:45): [True: 0, False: 134k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   134k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   134k|        return read_while1_code_unit(
  195|   134k|            SCN_FWD(range),
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   134k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   134k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|   307k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.00M|    {
  423|  2.00M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.00M|        const bool allowed_nonhex =
  425|  2.00M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.00M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.00M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.00M, False: 4.60k]
  |  Branch (428:45): [True: 0, False: 2.00M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.00M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 4.60k, False: 2.00M]
  ------------------
  434|  4.60k|            return *r;
  435|  4.60k|        }
  436|       |
  437|  2.00M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.99M, False: 3.42k]
  |  Branch (437:45): [True: 68, False: 1.99M]
  ------------------
  438|     68|            return unexpected(r.error());
  439|     68|        }
  440|  2.00M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 3.42k, False: 1.99M]
  ------------------
  441|  3.42k|            return *r;
  442|  3.42k|        }
  443|       |
  444|  1.99M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.90M, False: 89.9k]
  |  Branch (444:28): [True: 1.81M, False: 88.3k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  1.81M|            auto it = ranges::begin(range);
  448|       |
  449|  1.81M|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 9.56k, False: 1.80M]
  ------------------
  450|  9.56k|                m_kind = float_kind::hex_with_prefix;
  451|  9.56k|                it = *r;
  452|  9.56k|            }
  453|  1.80M|            else {
  454|  1.80M|                m_kind = float_kind::hex_without_prefix;
  455|  1.80M|            }
  456|       |
  457|  1.81M|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  1.81M|        }
  459|   178k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 89.9k, False: 88.3k]
  |  Branch (459:34): [True: 89.9k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  89.9k|            m_kind = float_kind::generic;
  463|  89.9k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  89.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  89.9k|        }
  465|  88.3k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  88.3k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.6k, False: 73.6k]
  |  |  ------------------
  ------------------
  471|  14.6k|                m_kind = float_kind::hex_with_prefix;
  472|  14.6k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  14.6k|            }
  474|       |
  475|  73.6k|            m_kind = float_kind::generic;
  476|  73.6k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  88.3k|        }
  478|  1.99M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.83M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.83M|                    auto res = read_all(rr);
  136|  1.83M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 250, False: 1.83M]
  |  |  ------------------
  ------------------
  137|    250|                        return unexpected_scan_error(
  138|    250|                            scan_error::invalid_scanned_value,
  139|    250|                            "Invalid float value");
  140|    250|                    }
  141|  1.83M|                    return res;
  142|  1.83M|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  73.6k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  73.6k|                    auto res = read_all(rr);
  136|  73.6k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 150, False: 73.5k]
  |  |  ------------------
  ------------------
  137|    150|                        return unexpected_scan_error(
  138|    150|                            scan_error::invalid_scanned_value,
  139|    150|                            "Invalid float value");
  140|    150|                    }
  141|  73.5k|                    return res;
  142|  73.6k|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  1.94M|    {
  482|  1.94M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.94M, False: 0]
  ------------------
  483|  1.94M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.94M, False: 0]
  ------------------
  484|  1.94M|            return;
  485|  1.94M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  18.1k|    {
  577|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  18.1k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  18.1k|        float_reader<CharT> rd{};
  581|  18.1k|        return read_impl<range_nocvref_t>(
  582|  18.1k|            range, rd,
  583|  18.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.1k|                return r.read_source(SCN_FWD(args)...);
  585|  18.1k|            },
  586|  18.1k|            value);
  587|  18.1k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   668k|    {
  633|   668k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   668k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.6k, False: 648k]
  |  |  ------------------
  ------------------
  635|  19.6k|            return unexpected(r.error());
  636|  19.6k|        }
  637|       |
  638|   648k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   648k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   648k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   648k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.5k, False: 631k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.5k|    }                                                  \
  |  |  |  |   70|   648k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   631k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   631k|        return ranges::next(ranges::begin(range), n);
  640|   648k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   648k|    {
   98|   648k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   648k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   648k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   648k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 8.32k, False: 640k]
  ------------------
  102|       |
  103|   648k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   648k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   648k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   648k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.5k, False: 631k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.5k|    }                                                  \
  |  |  |  |   70|   648k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   631k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   631k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   648k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  18.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  18.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  18.3k|    {
  577|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  18.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  18.3k|        float_reader<CharT> rd{};
  581|  18.3k|        return read_impl<range_nocvref_t>(
  582|  18.3k|            range, rd,
  583|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.3k|                return r.read_source(SCN_FWD(args)...);
  585|  18.3k|            },
  586|  18.3k|            value);
  587|  18.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   687k|    {
  633|   687k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   687k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.7k, False: 667k]
  |  |  ------------------
  ------------------
  635|  19.7k|            return unexpected(r.error());
  636|  19.7k|        }
  637|       |
  638|   667k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.9k, False: 651k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.9k|    }                                                  \
  |  |  |  |   70|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   651k|        return ranges::next(ranges::begin(range), n);
  640|   667k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   667k|    {
   98|   667k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   667k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 8.76k, False: 658k]
  ------------------
  102|       |
  103|   667k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.9k, False: 651k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.9k|    }                                                  \
  |  |  |  |   70|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   651k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   667k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  18.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  10.1k|    {
  577|  10.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  10.1k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  10.1k|        float_reader<CharT> rd{};
  581|  10.1k|        return read_impl<range_nocvref_t>(
  582|  10.1k|            range, rd,
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  585|  10.1k|            },
  586|  10.1k|            value);
  587|  10.1k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  43.8k|    {
  633|  43.8k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  43.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.8k, False: 0]
  |  |  ------------------
  ------------------
  635|  43.8k|            return unexpected(r.error());
  636|  43.8k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  10.1k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   111k|    {
   73|   111k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   111k|        return read_source_impl(range);
   79|   111k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   131k|    {
  112|   131k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   131k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   131k|        auto it = sign_result.first;
  115|   131k|        m_sign = sign_result.second;
  116|       |
  117|   131k|        auto digits_begin = it;
  118|   131k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   131k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   131k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   131k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   131k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   131k|                SCN_TRY_ASSIGN(
  124|   131k|                    it,
  125|   131k|                    do_read_source_impl(
  126|   131k|                        r,
  127|   131k|                        [&](auto&& rr) {
  128|   131k|                            return read_regular_float(SCN_FWD(rr));
  129|   131k|                        },
  130|   131k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   131k|            }
  132|   131k|            else {
  133|   131k|                auto cb = [&](auto&& rr)
  134|   131k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   131k|                    auto res = read_all(rr);
  136|   131k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   131k|                        return unexpected_scan_error(
  138|   131k|                            scan_error::invalid_scanned_value,
  139|   131k|                            "Invalid float value");
  140|   131k|                    }
  141|   131k|                    return res;
  142|   131k|                };
  143|   131k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   131k|            }
  145|   131k|        }
  146|   131k|        else {
  147|   131k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 131k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   131k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   131k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   131k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   131k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   131k|    }                                                  \
  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   131k|    {
  423|   131k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   131k|        const bool allowed_nonhex =
  425|   131k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   131k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   131k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 131k, False: 0]
  |  Branch (428:45): [True: 0, False: 131k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   131k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 131k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   131k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 131k, False: 0]
  |  Branch (437:45): [True: 0, False: 131k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   131k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 131k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   131k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 70.8k, False: 60.7k]
  |  Branch (444:28): [True: 20.2k, False: 50.6k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  20.2k|            auto it = ranges::begin(range);
  448|       |
  449|  20.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 20.2k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  20.2k|            else {
  454|  20.2k|                m_kind = float_kind::hex_without_prefix;
  455|  20.2k|            }
  456|       |
  457|  20.2k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  20.2k|        }
  459|   111k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 60.7k, False: 50.6k]
  |  Branch (459:34): [True: 60.7k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  60.7k|            m_kind = float_kind::generic;
  463|  60.7k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  60.7k|        }
  465|  50.6k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  50.6k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 50.6k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  50.6k|            m_kind = float_kind::generic;
  476|  50.6k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  50.6k|        }
  478|   131k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   131k|    {
  226|   131k|        auto it = ranges::begin(range);
  227|   131k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 131k, False: 0]
  ------------------
  228|   131k|            return unexpected(r.error());
  229|   131k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   131k|    {
  249|   131k|        auto it = ranges::begin(range);
  250|   131k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 131k, False: 0]
  ------------------
  251|   131k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   131k|                scan_error::invalid_scanned_value,
  253|   131k|                "Invalid floating-point NaN value"));
  254|   131k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|  70.8k|    {
  220|  70.8k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  70.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  70.8k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  20.2k|    {
  323|  20.2k|        auto it = ranges::begin(range);
  324|       |
  325|  20.2k|        std::ptrdiff_t digits_count = 0;
  326|  20.2k|        if (auto r =
  327|  20.2k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  20.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.2k, False: 0]
  |  |  ------------------
  ------------------
  329|  20.2k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  20.2k|                scan_error::invalid_scanned_value,
  331|  20.2k|                "Invalid hexadecimal floating-point value"));
  332|  20.2k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  20.2k|    {
  203|  20.2k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  Branch (153:45): [True: 0, False: 20.2k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  20.2k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  20.2k|        return read_while1_code_unit(
  213|  20.2k|            SCN_FWD(range),
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  20.2k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  20.2k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|  20.2k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   111k|    {
  365|   111k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   111k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 91.1k, False: 20.2k]
  |  Branch (366:50): [True: 20.2k, False: 70.8k]
  ------------------
  367|       |
  368|   111k|        auto it = ranges::begin(range);
  369|   111k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   111k|        if (auto r =
  372|   111k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   111k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 111k, False: 0]
  |  |  ------------------
  ------------------
  374|   111k|            return r.transform_error(
  375|   111k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   111k|                                              "Invalid floating-point value"));
  377|   111k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   111k|    {
  185|   111k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 111k]
  |  |  |  Branch (153:45): [True: 0, False: 111k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   111k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   111k|        return read_while1_code_unit(
  195|   111k|            SCN_FWD(range),
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   111k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   111k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|   111k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  10.1k|    {
  577|  10.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  10.1k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  10.1k|        float_reader<CharT> rd{};
  581|  10.1k|        return read_impl<range_nocvref_t>(
  582|  10.1k|            range, rd,
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  585|  10.1k|            },
  586|  10.1k|            value);
  587|  10.1k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  43.8k|    {
  633|  43.8k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  43.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.8k, False: 0]
  |  |  ------------------
  ------------------
  635|  43.8k|            return unexpected(r.error());
  636|  43.8k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  10.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  10.1k|    {
  577|  10.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  10.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  10.1k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  10.1k|        float_reader<CharT> rd{};
  581|  10.1k|        return read_impl<range_nocvref_t>(
  582|  10.1k|            range, rd,
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  585|  10.1k|            },
  586|  10.1k|            value);
  587|  10.1k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  43.8k|    {
  633|  43.8k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  43.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.8k, False: 0]
  |  |  ------------------
  ------------------
  635|  43.8k|            return unexpected(r.error());
  636|  43.8k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  10.1k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  10.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  10.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  2.07M|    {
  570|  2.07M|        detail::check_float_type_specs(specs, eh);
  571|  2.07M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  2.05M|    {
  644|  2.05M|        unsigned options{};
  645|  2.05M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 56.5k, False: 1.99M]
  ------------------
  646|  56.5k|            options |= float_reader_base::allow_thsep;
  647|  56.5k|        }
  648|       |
  649|  2.05M|        SCN_GCC_COMPAT_PUSH
  650|  2.05M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  2.05M|        switch (specs.type) {
  653|  55.7k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 55.7k, False: 1.99M]
  ------------------
  654|  55.7k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  41.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 41.0k, False: 2.01M]
  ------------------
  657|  41.0k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|  1.84M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 1.84M, False: 209k]
  ------------------
  660|  1.84M|                return options | float_reader_base::allow_hex;
  661|       |
  662|  55.6k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 55.6k, False: 1.99M]
  ------------------
  663|  55.6k|                return options | float_reader_base::allow_scientific |
  664|  55.6k|                       float_reader_base::allow_fixed;
  665|       |
  666|  56.5k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 56.5k, False: 1.99M]
  ------------------
  667|  56.5k|                return options | float_reader_base::allow_scientific |
  668|  56.5k|                       float_reader_base::allow_fixed |
  669|  56.5k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 2.05M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  2.05M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  2.05M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  2.05M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  7.46M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   632k|    {
  596|   632k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   632k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   632k|#if !SCN_DISABLE_LOCALE
  600|   632k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 11.9k, False: 620k]
  ------------------
  601|  11.9k|            return read_impl<range_nocvref_t>(
  602|  11.9k|                range, rd,
  603|  11.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  11.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  11.9k|                },
  606|  11.9k|                value, loc);
  607|  11.9k|        }
  608|   620k|#endif
  609|       |
  610|   620k|        return read_impl<range_nocvref_t>(
  611|   620k|            range, rd,
  612|   620k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   620k|                return r.read_source(SCN_FWD(args)...);
  614|   620k|            },
  615|   620k|            value);
  616|   632k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  11.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  11.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  11.9k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|  36.3k|    {
   86|  36.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  36.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  36.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 36.3k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  36.3k|        return read_source_impl(range);
   92|  36.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   620k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   620k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   620k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   649k|    {
  596|   649k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   649k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   649k|#if !SCN_DISABLE_LOCALE
  600|   649k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12.1k, False: 637k]
  ------------------
  601|  12.1k|            return read_impl<range_nocvref_t>(
  602|  12.1k|                range, rd,
  603|  12.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  12.1k|                },
  606|  12.1k|                value, loc);
  607|  12.1k|        }
  608|   637k|#endif
  609|       |
  610|   637k|        return read_impl<range_nocvref_t>(
  611|   637k|            range, rd,
  612|   637k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   637k|                return r.read_source(SCN_FWD(args)...);
  614|   637k|            },
  615|   637k|            value);
  616|   649k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  12.1k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  12.1k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   637k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   637k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   637k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   637k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   668k|    {
  596|   668k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   668k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   668k|#if !SCN_DISABLE_LOCALE
  600|   668k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12.2k, False: 656k]
  ------------------
  601|  12.2k|            return read_impl<range_nocvref_t>(
  602|  12.2k|                range, rd,
  603|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  12.2k|                },
  606|  12.2k|                value, loc);
  607|  12.2k|        }
  608|   656k|#endif
  609|       |
  610|   656k|        return read_impl<range_nocvref_t>(
  611|   656k|            range, rd,
  612|   656k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   656k|                return r.read_source(SCN_FWD(args)...);
  614|   656k|            },
  615|   656k|            value);
  616|   668k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  12.2k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   656k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   656k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   656k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  33.7k|    {
  596|  33.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  33.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  33.7k|#if !SCN_DISABLE_LOCALE
  600|  33.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6.75k, False: 27.0k]
  ------------------
  601|  6.75k|            return read_impl<range_nocvref_t>(
  602|  6.75k|                range, rd,
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  6.75k|                },
  606|  6.75k|                value, loc);
  607|  6.75k|        }
  608|  27.0k|#endif
  609|       |
  610|  27.0k|        return read_impl<range_nocvref_t>(
  611|  27.0k|            range, rd,
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  614|  27.0k|            },
  615|  27.0k|            value);
  616|  33.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  6.75k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  20.2k|    {
   86|  20.2k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  20.2k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  20.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 20.2k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  20.2k|        return read_source_impl(range);
   92|  20.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  27.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  33.7k|    {
  596|  33.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  33.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  33.7k|#if !SCN_DISABLE_LOCALE
  600|  33.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6.75k, False: 27.0k]
  ------------------
  601|  6.75k|            return read_impl<range_nocvref_t>(
  602|  6.75k|                range, rd,
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  6.75k|                },
  606|  6.75k|                value, loc);
  607|  6.75k|        }
  608|  27.0k|#endif
  609|       |
  610|  27.0k|        return read_impl<range_nocvref_t>(
  611|  27.0k|            range, rd,
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  614|  27.0k|            },
  615|  27.0k|            value);
  616|  33.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  6.75k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  27.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  33.7k|    {
  596|  33.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  33.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  33.7k|#if !SCN_DISABLE_LOCALE
  600|  33.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6.75k, False: 27.0k]
  ------------------
  601|  6.75k|            return read_impl<range_nocvref_t>(
  602|  6.75k|                range, rd,
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  6.75k|                },
  606|  6.75k|                value, loc);
  607|  6.75k|        }
  608|  27.0k|#endif
  609|       |
  610|  27.0k|        return read_impl<range_nocvref_t>(
  611|  27.0k|            range, rd,
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  614|  27.0k|            },
  615|  27.0k|            value);
  616|  33.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  6.75k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  6.75k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  6.75k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  27.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  27.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  27.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  35.4k|    {
  577|  35.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  35.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  35.4k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  35.4k|        float_reader<CharT> rd{};
  581|  35.4k|        return read_impl<range_nocvref_t>(
  582|  35.4k|            range, rd,
  583|  35.4k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.4k|                return r.read_source(SCN_FWD(args)...);
  585|  35.4k|            },
  586|  35.4k|            value);
  587|  35.4k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|   197k|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.73M|    {
  633|  1.73M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.73M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.0k, False: 1.67M]
  |  |  ------------------
  ------------------
  635|  60.0k|            return unexpected(r.error());
  636|  60.0k|        }
  637|       |
  638|  1.67M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 50.4k, False: 1.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  50.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  50.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  50.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  50.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  50.4k|    }                                                  \
  |  |  |  |   70|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.62M|        return ranges::next(ranges::begin(range), n);
  640|  1.67M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|  1.67M|    {
   98|  1.67M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.67M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 4.34k, False: 1.66M]
  ------------------
  102|       |
  103|  1.67M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 50.4k, False: 1.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  50.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  50.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  50.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  50.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  50.4k|    }                                                  \
  |  |  |  |   70|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.62M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.67M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  35.4k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  35.4k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  5.14M|    {
   73|  5.14M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  5.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.14M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  5.14M|        return read_source_impl(range);
   79|  5.14M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  5.21M|    {
  112|  5.21M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  5.21M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.21M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.21M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  5.21M|        auto it = sign_result.first;
  115|  5.21M|        m_sign = sign_result.second;
  116|       |
  117|  5.21M|        auto digits_begin = it;
  118|  5.21M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  5.21M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  5.21M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  5.21M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  10.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.21M]
  |  |  |  Branch (153:45): [True: 0, False: 5.21M]
  |  |  |  Branch (153:45): [True: 0, False: 5.21M]
  |  |  ------------------
  ------------------
  122|  5.21M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  5.21M|            else {
  133|  5.21M|                auto cb = [&](auto&& rr)
  134|  5.21M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  5.21M|                    auto res = read_all(rr);
  136|  5.21M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  5.21M|                        return unexpected_scan_error(
  138|  5.21M|                            scan_error::invalid_scanned_value,
  139|  5.21M|                            "Invalid float value");
  140|  5.21M|                    }
  141|  5.21M|                    return res;
  142|  5.21M|                };
  143|  5.21M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  5.21M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  5.21M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  5.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 180k, False: 5.03M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   180k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   180k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   180k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   180k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   180k|    }                                                  \
  |  |   70|  5.21M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  5.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  5.03M|            }
  145|  5.21M|        }
  146|  5.03M|        else {
  147|  5.03M|            SCN_TRY_ASSIGN(
  148|  5.03M|                it,
  149|  5.03M|                do_read_source_impl(
  150|  5.03M|                    r,
  151|  5.03M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  5.03M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  5.03M|        }
  154|       |
  155|  5.03M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  5.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  5.03M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 5.03M, False: 1.99k]
  |  Branch (157:48): [True: 5.03M, False: 451]
  ------------------
  158|  5.03M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 5.03M, False: 2.09k]
  ------------------
  159|  5.03M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 5.03M, False: 0]
  ------------------
  160|  5.03M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  5.03M|        }
  162|       |
  163|  5.03M|        handle_separators();
  164|       |
  165|  5.03M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 5.03M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  5.03M|        return it;
  178|  5.03M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  5.21M|    {
  226|  5.21M|        auto it = ranges::begin(range);
  227|  5.21M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 5.21M, False: 2.44k]
  ------------------
  228|  5.21M|            return unexpected(r.error());
  229|  5.21M|        }
  230|  2.44k|        else {
  231|  2.44k|            it = *r;
  232|  2.44k|        }
  233|       |
  234|  2.44k|        if (auto r = read_matching_string_classic_nocase(
  235|  2.44k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  2.44k|            !r) {
  ------------------
  |  Branch (236:13): [True: 1.99k, False: 451]
  ------------------
  237|  1.99k|            m_kind = float_kind::inf_short;
  238|  1.99k|            return it;
  239|  1.99k|        }
  240|    451|        else {
  241|    451|            m_kind = float_kind::inf_long;
  242|    451|            return *r;
  243|    451|        }
  244|  2.44k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  5.21M|    {
  249|  5.21M|        auto it = ranges::begin(range);
  250|  5.21M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 5.21M, False: 2.09k]
  ------------------
  251|  5.21M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  5.21M|                scan_error::invalid_scanned_value,
  253|  5.21M|                "Invalid floating-point NaN value"));
  254|  5.21M|        }
  255|  2.09k|        else {
  256|  2.09k|            it = *r;
  257|  2.09k|        }
  258|       |
  259|  2.09k|        if (auto r = read_matching_code_unit(
  260|  2.09k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  2.09k|            !r) {
  ------------------
  |  Branch (261:13): [True: 2.09k, False: 0]
  ------------------
  262|  2.09k|            m_kind = float_kind::nan_simple;
  263|  2.09k|            return it;
  264|  2.09k|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  5.01M|    {
  220|  5.01M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  5.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  5.01M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|  18.5k|    {
  292|  18.5k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 1.25k, False: 17.3k]
  ------------------
  293|  1.25k|            auto beg_exp_it = ranges::begin(range);
  294|  1.25k|            auto it = *r;
  295|       |
  296|  1.25k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 1.16k, False: 84]
  ------------------
  297|  1.25k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  1.16k|                it = r_sign->first;
  299|  1.16k|            }
  300|       |
  301|  1.25k|            if (auto r_exp = read_while1_code_unit(
  302|  1.25k|                    ranges::subrange{it, ranges::end(range)},
  303|  1.25k|                    [](char_type ch)
  304|  1.25k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  1.25k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 270, False: 982]
  |  |  ------------------
  ------------------
  306|    270|                it = beg_exp_it;
  307|    270|            }
  308|    982|            else {
  309|    982|                it = *r_exp;
  310|    982|            }
  311|       |
  312|  1.25k|            return it;
  313|  1.25k|        }
  314|  17.3k|        else {
  315|  17.3k|            return ranges::begin(range);
  316|  17.3k|        }
  317|  18.5k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|  14.3k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   200k|    {
  365|   200k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   200k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 130k, False: 69.9k]
  |  Branch (366:50): [True: 60.7k, False: 69.8k]
  ------------------
  367|       |
  368|   200k|        auto it = ranges::begin(range);
  369|   200k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   200k|        if (auto r =
  372|   200k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   200k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 172k, False: 28.5k]
  |  |  ------------------
  ------------------
  374|   172k|            return r.transform_error(
  375|   172k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   172k|                                              "Invalid floating-point value"));
  377|   172k|        }
  378|  28.5k|        else {
  379|  28.5k|            digits_count += ranges::distance(it, *r);
  380|  28.5k|            it = *r;
  381|  28.5k|        }
  382|       |
  383|  28.5k|        m_integral_part_length = digits_count;
  384|  28.5k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 4.94k, False: 23.6k]
  ------------------
  385|  28.5k|                ranges::subrange{it, ranges::end(range)},
  386|  28.5k|                m_locale_options.decimal_point)) {
  387|  4.94k|            it = *r;
  388|  4.94k|        }
  389|       |
  390|  28.5k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 3.52k, False: 25.0k]
  ------------------
  391|  28.5k|                                     false)) {
  392|  3.52k|            digits_count += ranges::distance(it, *r);
  393|  3.52k|            it = *r;
  394|  3.52k|        }
  395|       |
  396|  28.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|  28.5k|        auto beg_exp_it = it;
  402|  28.5k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 18.5k, False: 10.0k]
  ------------------
  403|  18.5k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|  18.5k|        }
  405|  28.5k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 8.26k, False: 20.3k]
  |  Branch (405:29): [True: 7.88k, False: 372]
  ------------------
  406|  7.88k|            return unexpected_scan_error(
  407|  7.88k|                scan_error::invalid_scanned_value,
  408|  7.88k|                "No exponent given to scientific float");
  409|  7.88k|        }
  410|       |
  411|  20.6k|        m_kind =
  412|  20.6k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 19.7k, False: 982]
  ------------------
  413|       |
  414|  20.6k|        return it;
  415|  28.5k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|   229k|    {
  185|   229k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 229k]
  |  |  |  Branch (153:45): [True: 0, False: 229k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   229k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   229k|        return read_while1_code_unit(
  195|   229k|            SCN_FWD(range),
  ------------------
  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   229k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   229k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|   363k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  5.21M|    {
  423|  5.21M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  5.21M|        const bool allowed_nonhex =
  425|  5.21M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  5.21M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  5.21M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 5.21M, False: 2.44k]
  |  Branch (428:45): [True: 0, False: 5.21M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  5.21M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 2.44k, False: 5.21M]
  ------------------
  434|  2.44k|            return *r;
  435|  2.44k|        }
  436|       |
  437|  5.21M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 5.21M, False: 2.09k]
  |  Branch (437:45): [True: 0, False: 5.21M]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  5.21M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 2.09k, False: 5.21M]
  ------------------
  441|  2.09k|            return *r;
  442|  2.09k|        }
  443|       |
  444|  5.21M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 5.01M, False: 200k]
  |  Branch (444:28): [True: 4.83M, False: 176k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  4.83M|            auto it = ranges::begin(range);
  448|       |
  449|  4.83M|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 3.94k, False: 4.83M]
  ------------------
  450|  3.94k|                m_kind = float_kind::hex_with_prefix;
  451|  3.94k|                it = *r;
  452|  3.94k|            }
  453|  4.83M|            else {
  454|  4.83M|                m_kind = float_kind::hex_without_prefix;
  455|  4.83M|            }
  456|       |
  457|  4.83M|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  4.83M|        }
  459|   376k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 200k, False: 176k]
  |  Branch (459:34): [True: 200k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   200k|            m_kind = float_kind::generic;
  463|   200k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   200k|        }
  465|   176k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   176k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.07k, False: 168k]
  |  |  ------------------
  ------------------
  471|  8.07k|                m_kind = float_kind::hex_with_prefix;
  472|  8.07k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  8.07k|            }
  474|       |
  475|   168k|            m_kind = float_kind::generic;
  476|   168k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   176k|        }
  478|  5.21M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  4.84M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  4.84M|                    auto res = read_all(rr);
  136|  4.84M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  4.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 260, False: 4.84M]
  |  |  ------------------
  ------------------
  137|    260|                        return unexpected_scan_error(
  138|    260|                            scan_error::invalid_scanned_value,
  139|    260|                            "Invalid float value");
  140|    260|                    }
  141|  4.84M|                    return res;
  142|  4.84M|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   168k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   168k|                    auto res = read_all(rr);
  136|   168k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 255, False: 167k]
  |  |  ------------------
  ------------------
  137|    255|                        return unexpected_scan_error(
  138|    255|                            scan_error::invalid_scanned_value,
  139|    255|                            "Invalid float value");
  140|    255|                    }
  141|   167k|                    return res;
  142|   168k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  5.03M|    {
  482|  5.03M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 5.03M, False: 0]
  ------------------
  483|  5.03M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 5.03M, False: 0]
  ------------------
  484|  5.03M|            return;
  485|  5.03M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  35.6k|    {
  577|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  35.6k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  35.6k|        float_reader<CharT> rd{};
  581|  35.6k|        return read_impl<range_nocvref_t>(
  582|  35.6k|            range, rd,
  583|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.6k|                return r.read_source(SCN_FWD(args)...);
  585|  35.6k|            },
  586|  35.6k|            value);
  587|  35.6k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.73M|    {
  633|  1.73M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.73M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.1k, False: 1.67M]
  |  |  ------------------
  ------------------
  635|  60.1k|            return unexpected(r.error());
  636|  60.1k|        }
  637|       |
  638|  1.67M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.8k, False: 1.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.8k|    }                                                  \
  |  |  |  |   70|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.62M|        return ranges::next(ranges::begin(range), n);
  640|  1.67M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.67M|    {
   98|  1.67M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.67M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 4.42k, False: 1.67M]
  ------------------
  102|       |
  103|  1.67M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.8k, False: 1.62M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.8k|    }                                                  \
  |  |  |  |   70|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.62M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.67M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  35.6k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  35.6k|    {
  577|  35.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  35.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  35.6k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  35.6k|        float_reader<CharT> rd{};
  581|  35.6k|        return read_impl<range_nocvref_t>(
  582|  35.6k|            range, rd,
  583|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.6k|                return r.read_source(SCN_FWD(args)...);
  585|  35.6k|            },
  586|  35.6k|            value);
  587|  35.6k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.74M|    {
  633|  1.74M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.74M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.2k, False: 1.68M]
  |  |  ------------------
  ------------------
  635|  60.2k|            return unexpected(r.error());
  636|  60.2k|        }
  637|       |
  638|  1.68M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.68M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.4k, False: 1.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.4k|    }                                                  \
  |  |  |  |   70|  1.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.63M|        return ranges::next(ranges::begin(range), n);
  640|  1.68M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|  1.68M|    {
   98|  1.68M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.68M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 4.77k, False: 1.68M]
  ------------------
  102|       |
  103|  1.68M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.68M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.4k, False: 1.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.4k|    }                                                  \
  |  |  |  |   70|  1.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.63M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.68M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  35.6k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  35.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  35.6k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  5.47M|    {
  570|  5.47M|        detail::check_float_type_specs(specs, eh);
  571|  5.47M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  5.41M|    {
  644|  5.41M|        unsigned options{};
  645|  5.41M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 131k, False: 5.28M]
  ------------------
  646|   131k|            options |= float_reader_base::allow_thsep;
  647|   131k|        }
  648|       |
  649|  5.41M|        SCN_GCC_COMPAT_PUSH
  650|  5.41M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  5.41M|        switch (specs.type) {
  653|   131k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 131k, False: 5.28M]
  ------------------
  654|   131k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|   121k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 121k, False: 5.29M]
  ------------------
  657|   121k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|  4.89M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 4.89M, False: 515k]
  ------------------
  660|  4.89M|                return options | float_reader_base::allow_hex;
  661|       |
  662|   131k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 131k, False: 5.28M]
  ------------------
  663|   131k|                return options | float_reader_base::allow_scientific |
  664|   131k|                       float_reader_base::allow_fixed;
  665|       |
  666|   131k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 131k, False: 5.28M]
  ------------------
  667|   131k|                return options | float_reader_base::allow_scientific |
  668|   131k|                       float_reader_base::allow_fixed |
  669|   131k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 5.41M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  5.41M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  5.41M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  5.41M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.69M|    {
  596|  1.69M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.69M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.69M|#if !SCN_DISABLE_LOCALE
  600|  1.69M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 23.6k, False: 1.67M]
  ------------------
  601|  23.6k|            return read_impl<range_nocvref_t>(
  602|  23.6k|                range, rd,
  603|  23.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  23.6k|                },
  606|  23.6k|                value, loc);
  607|  23.6k|        }
  608|  1.67M|#endif
  609|       |
  610|  1.67M|        return read_impl<range_nocvref_t>(
  611|  1.67M|            range, rd,
  612|  1.67M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.67M|                return r.read_source(SCN_FWD(args)...);
  614|  1.67M|            },
  615|  1.67M|            value);
  616|  1.69M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  23.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  23.6k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|  71.1k|    {
   86|  71.1k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  71.1k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  71.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 71.1k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  71.1k|        return read_source_impl(range);
   92|  71.1k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|  1.67M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.67M|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  1.67M|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.70M|    {
  596|  1.70M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.70M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.70M|#if !SCN_DISABLE_LOCALE
  600|  1.70M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 23.7k, False: 1.67M]
  ------------------
  601|  23.7k|            return read_impl<range_nocvref_t>(
  602|  23.7k|                range, rd,
  603|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  23.7k|                },
  606|  23.7k|                value, loc);
  607|  23.7k|        }
  608|  1.67M|#endif
  609|       |
  610|  1.67M|        return read_impl<range_nocvref_t>(
  611|  1.67M|            range, rd,
  612|  1.67M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.67M|                return r.read_source(SCN_FWD(args)...);
  614|  1.67M|            },
  615|  1.67M|            value);
  616|  1.70M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  23.7k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|  1.67M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.67M|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  1.67M|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.70M|    {
  596|  1.70M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.70M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.70M|#if !SCN_DISABLE_LOCALE
  600|  1.70M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 23.7k, False: 1.68M]
  ------------------
  601|  23.7k|            return read_impl<range_nocvref_t>(
  602|  23.7k|                range, rd,
  603|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  23.7k|                },
  606|  23.7k|                value, loc);
  607|  23.7k|        }
  608|  1.68M|#endif
  609|       |
  610|  1.68M|        return read_impl<range_nocvref_t>(
  611|  1.68M|            range, rd,
  612|  1.68M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.68M|                return r.read_source(SCN_FWD(args)...);
  614|  1.68M|            },
  615|  1.68M|            value);
  616|  1.70M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|  23.7k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  23.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  23.7k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|  1.68M|            [](float_reader<CharT>& r, auto&&... args) {
  613|  1.68M|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  1.68M|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  30.3k|    {
  577|  30.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  30.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  30.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  30.3k|        float_reader<CharT> rd{};
  581|  30.3k|        return read_impl<range_nocvref_t>(
  582|  30.3k|            range, rd,
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  585|  30.3k|            },
  586|  30.3k|            value);
  587|  30.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   131k|    {
  633|   131k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   131k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 0]
  |  |  ------------------
  ------------------
  635|   131k|            return unexpected(r.error());
  636|   131k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  30.3k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   334k|    {
   73|   334k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   334k|        return read_source_impl(range);
   79|   334k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   394k|    {
  112|   394k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   394k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   394k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   394k|        auto it = sign_result.first;
  115|   394k|        m_sign = sign_result.second;
  116|       |
  117|   394k|        auto digits_begin = it;
  118|   394k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   394k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   394k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   394k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   394k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   394k|                SCN_TRY_ASSIGN(
  124|   394k|                    it,
  125|   394k|                    do_read_source_impl(
  126|   394k|                        r,
  127|   394k|                        [&](auto&& rr) {
  128|   394k|                            return read_regular_float(SCN_FWD(rr));
  129|   394k|                        },
  130|   394k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   394k|            }
  132|   394k|            else {
  133|   394k|                auto cb = [&](auto&& rr)
  134|   394k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   394k|                    auto res = read_all(rr);
  136|   394k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   394k|                        return unexpected_scan_error(
  138|   394k|                            scan_error::invalid_scanned_value,
  139|   394k|                            "Invalid float value");
  140|   394k|                    }
  141|   394k|                    return res;
  142|   394k|                };
  143|   394k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   394k|            }
  145|   394k|        }
  146|   394k|        else {
  147|   394k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 394k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   394k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   394k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   394k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   394k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   394k|    }                                                  \
  |  |   70|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   394k|    {
  423|   394k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   394k|        const bool allowed_nonhex =
  425|   394k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   394k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   394k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 394k, False: 0]
  |  Branch (428:45): [True: 0, False: 394k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   394k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 394k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   394k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 394k, False: 0]
  |  Branch (437:45): [True: 0, False: 394k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   394k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 394k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   394k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 212k, False: 182k]
  |  Branch (444:28): [True: 60.7k, False: 151k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  60.7k|            auto it = ranges::begin(range);
  448|       |
  449|  60.7k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 60.7k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  60.7k|            else {
  454|  60.7k|                m_kind = float_kind::hex_without_prefix;
  455|  60.7k|            }
  456|       |
  457|  60.7k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  60.7k|        }
  459|   334k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 182k, False: 151k]
  |  Branch (459:34): [True: 182k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   182k|            m_kind = float_kind::generic;
  463|   182k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   182k|        }
  465|   151k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   151k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   151k|            m_kind = float_kind::generic;
  476|   151k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   151k|        }
  478|   394k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   394k|    {
  226|   394k|        auto it = ranges::begin(range);
  227|   394k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 394k, False: 0]
  ------------------
  228|   394k|            return unexpected(r.error());
  229|   394k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   394k|    {
  249|   394k|        auto it = ranges::begin(range);
  250|   394k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 394k, False: 0]
  ------------------
  251|   394k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   394k|                scan_error::invalid_scanned_value,
  253|   394k|                "Invalid floating-point NaN value"));
  254|   394k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   212k|    {
  220|   212k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   212k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  60.7k|    {
  323|  60.7k|        auto it = ranges::begin(range);
  324|       |
  325|  60.7k|        std::ptrdiff_t digits_count = 0;
  326|  60.7k|        if (auto r =
  327|  60.7k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  60.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.7k, False: 0]
  |  |  ------------------
  ------------------
  329|  60.7k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  60.7k|                scan_error::invalid_scanned_value,
  331|  60.7k|                "Invalid hexadecimal floating-point value"));
  332|  60.7k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  60.7k|    {
  203|  60.7k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.7k]
  |  |  |  Branch (153:45): [True: 0, False: 60.7k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  60.7k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  60.7k|        return read_while1_code_unit(
  213|  60.7k|            SCN_FWD(range),
  ------------------
  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  60.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  60.7k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|  60.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   334k|    {
  365|   334k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   334k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 273k, False: 60.7k]
  |  Branch (366:50): [True: 60.7k, False: 212k]
  ------------------
  367|       |
  368|   334k|        auto it = ranges::begin(range);
  369|   334k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   334k|        if (auto r =
  372|   334k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   334k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 334k, False: 0]
  |  |  ------------------
  ------------------
  374|   334k|            return r.transform_error(
  375|   334k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   334k|                                              "Invalid floating-point value"));
  377|   334k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   334k|    {
  185|   334k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 334k]
  |  |  |  Branch (153:45): [True: 0, False: 334k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   334k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   334k|        return read_while1_code_unit(
  195|   334k|            SCN_FWD(range),
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   334k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   334k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|   333k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  30.3k|    {
  577|  30.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  30.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  30.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  30.3k|        float_reader<CharT> rd{};
  581|  30.3k|        return read_impl<range_nocvref_t>(
  582|  30.3k|            range, rd,
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  585|  30.3k|            },
  586|  30.3k|            value);
  587|  30.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   131k|    {
  633|   131k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   131k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 0]
  |  |  ------------------
  ------------------
  635|   131k|            return unexpected(r.error());
  636|   131k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  30.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  30.3k|    {
  577|  30.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  30.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  30.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  30.3k|        float_reader<CharT> rd{};
  581|  30.3k|        return read_impl<range_nocvref_t>(
  582|  30.3k|            range, rd,
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  585|  30.3k|            },
  586|  30.3k|            value);
  587|  30.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   131k|    {
  633|   131k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   131k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 0]
  |  |  ------------------
  ------------------
  635|   131k|            return unexpected(r.error());
  636|   131k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  30.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  30.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  30.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   101k|    {
  596|   101k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   101k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   101k|#if !SCN_DISABLE_LOCALE
  600|   101k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 20.2k, False: 80.9k]
  ------------------
  601|  20.2k|            return read_impl<range_nocvref_t>(
  602|  20.2k|                range, rd,
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  20.2k|                },
  606|  20.2k|                value, loc);
  607|  20.2k|        }
  608|  80.9k|#endif
  609|       |
  610|  80.9k|        return read_impl<range_nocvref_t>(
  611|  80.9k|            range, rd,
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  614|  80.9k|            },
  615|  80.9k|            value);
  616|   101k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  20.2k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  60.7k|    {
   86|  60.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  60.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  60.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  60.7k|        return read_source_impl(range);
   92|  60.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  80.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   101k|    {
  596|   101k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   101k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   101k|#if !SCN_DISABLE_LOCALE
  600|   101k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 20.2k, False: 80.9k]
  ------------------
  601|  20.2k|            return read_impl<range_nocvref_t>(
  602|  20.2k|                range, rd,
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  20.2k|                },
  606|  20.2k|                value, loc);
  607|  20.2k|        }
  608|  80.9k|#endif
  609|       |
  610|  80.9k|        return read_impl<range_nocvref_t>(
  611|  80.9k|            range, rd,
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  614|  80.9k|            },
  615|  80.9k|            value);
  616|   101k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  20.2k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  80.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   101k|    {
  596|   101k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   101k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   101k|#if !SCN_DISABLE_LOCALE
  600|   101k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 20.2k, False: 80.9k]
  ------------------
  601|  20.2k|            return read_impl<range_nocvref_t>(
  602|  20.2k|                range, rd,
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  20.2k|                },
  606|  20.2k|                value, loc);
  607|  20.2k|        }
  608|  80.9k|#endif
  609|       |
  610|  80.9k|        return read_impl<range_nocvref_t>(
  611|  80.9k|            range, rd,
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  614|  80.9k|            },
  615|  80.9k|            value);
  616|   101k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  20.2k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  20.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  20.2k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  80.9k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  80.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  80.9k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|   630k|    {
  524|   630k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   630k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 3.95k, False: 626k]
  ------------------
  526|  3.95k|            return -value;
  527|  3.95k|        }
  528|   626k|        return value;
  529|   630k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|  1.67M|    {
  524|  1.67M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.67M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 2.29k, False: 1.67M]
  ------------------
  526|  2.29k|            return -value;
  527|  2.29k|        }
  528|  1.67M|        return value;
  529|  1.67M|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|   648k|    {
  524|   648k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   648k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   648k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   648k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 4.00k, False: 644k]
  ------------------
  526|  4.00k|            return -value;
  527|  4.00k|        }
  528|   644k|        return value;
  529|   648k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|  1.67M|    {
  524|  1.67M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.67M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 2.32k, False: 1.67M]
  ------------------
  526|  2.32k|            return -value;
  527|  2.32k|        }
  528|  1.67M|        return value;
  529|  1.67M|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|   667k|    {
  524|   667k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   667k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 4.32k, False: 663k]
  ------------------
  526|  4.32k|            return -value;
  527|  4.32k|        }
  528|   663k|        return value;
  529|   667k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|  1.68M|    {
  524|  1.68M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.68M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 2.60k, False: 1.68M]
  ------------------
  526|  2.60k|            return -value;
  527|  2.60k|        }
  528|  1.68M|        return value;
  529|  1.68M|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.00M|{
   69|  2.00M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.00M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.97M, False: 27.2k]
  ------------------
   71|  1.97M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.97M, False: 0]
  ------------------
   72|  1.97M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.97M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.97M|    }
   76|       |
   77|  27.2k|    auto& it = *r;
   78|  27.2k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 13.2k, False: 13.9k]
  ------------------
   79|  13.2k|        return std::pair{it, sign_type::minus_sign};
   80|  13.2k|    }
   81|  13.9k|    return std::pair{it, sign_type::plus_sign};
   82|  27.2k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  1.08M|{
   51|  1.08M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  1.08M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  1.58k|{
   69|  1.58k|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.58k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.31k, False: 270]
  ------------------
   71|  1.31k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.23k, False: 84]
  ------------------
   72|  1.23k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.23k|        }
   74|     84|        return unexpected(eof_error::eof);
   75|  1.31k|    }
   76|       |
   77|    270|    auto& it = *r;
   78|    270|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 210, False: 60]
  ------------------
   79|    210|        return std::pair{it, sign_type::minus_sign};
   80|    210|    }
   81|     60|    return std::pair{it, sign_type::plus_sign};
   82|    270|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   131k|{
   69|   131k|    auto r = read_one_of_code_unit(range, "+-");
   70|   131k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 131k, False: 0]
  ------------------
   71|   131k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 131k, False: 0]
  ------------------
   72|   131k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   131k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   131k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.21M|{
   69|  5.21M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.21M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.20M, False: 15.1k]
  ------------------
   71|  5.20M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.20M, False: 0]
  ------------------
   72|  5.20M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.20M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.20M|    }
   76|       |
   77|  15.1k|    auto& it = *r;
   78|  15.1k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 8.18k, False: 7.00k]
  ------------------
   79|  8.18k|        return std::pair{it, sign_type::minus_sign};
   80|  8.18k|    }
   81|  7.00k|    return std::pair{it, sign_type::plus_sign};
   82|  15.1k|}
_ZN3scn2v24impl11char_to_intEw:
   54|   772k|{
   55|   772k|#if WCHAR_MIN < 0
   56|   772k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 740k, False: 32.1k]
  |  Branch (56:20): [True: 625k, False: 114k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|   625k|        return char_to_int(static_cast<char>(ch));
   61|   625k|    }
   62|   146k|    return 255;
   63|   772k|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  1.25k|{
   69|  1.25k|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.25k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.08k, False: 168]
  ------------------
   71|  1.08k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.00k, False: 84]
  ------------------
   72|  1.00k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.00k|        }
   74|     84|        return unexpected(eof_error::eof);
   75|  1.08k|    }
   76|       |
   77|    168|    auto& it = *r;
   78|    168|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 138, False: 30]
  ------------------
   79|    138|        return std::pair{it, sign_type::minus_sign};
   80|    138|    }
   81|     30|    return std::pair{it, sign_type::plus_sign};
   82|    168|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   394k|{
   69|   394k|    auto r = read_one_of_code_unit(range, "+-");
   70|   394k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 0, False: 394k]
  ------------------
   71|      0|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 0, False: 0]
  ------------------
   72|      0|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|      0|        }
   74|      0|        return unexpected(eof_error::eof);
   75|      0|    }
   76|       |
   77|   394k|    auto& it = *r;
   78|   394k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 394k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|   394k|    return std::pair{it, sign_type::plus_sign};
   82|   394k|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.02M|{
   43|  2.02M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.73k, False: 2.01M]
  |  |  ------------------
  ------------------
   44|  9.73k|        return unexpected(e);
   45|  9.73k|    }
   46|       |
   47|  2.01M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.01M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.01M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.01M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|  18.5k|    {
  122|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  18.5k|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.5k|            auto rd = make_reader<T, char_type>();
  127|  18.5k|            return impl(rd, range, value);
  128|  18.5k|        }
  129|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  18.5k|            auto rd = make_reader<T, char_type>();
  131|  18.5k|            if (!is_segment_contiguous(range)) {
  132|  18.5k|                return impl(rd, range, value);
  133|  18.5k|            }
  134|  18.5k|            auto crange = get_as_contiguous(range);
  135|  18.5k|            SCN_TRY(it, impl(rd, crange, value));
  136|  18.5k|            return ranges_polyfill::batch_next(
  137|  18.5k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  18.5k|        }
  139|  18.5k|        else {
  140|  18.5k|            SCN_EXPECT(false);
  141|  18.5k|            SCN_UNREACHABLE;
  142|  18.5k|        }
  143|  18.5k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  18.5k|    {
  112|  18.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 552, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    552|    }                                                  \
  |  |  |  |   70|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  17.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  17.9k|                    .transform_error(make_eof_scan_error));
  115|  17.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  17.9k|                               loc);
  117|  18.5k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|  18.7k|    {
  122|  18.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  18.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.7k|            auto rd = make_reader<T, char_type>();
  127|  18.7k|            return impl(rd, range, value);
  128|  18.7k|        }
  129|  18.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  18.7k|            auto rd = make_reader<T, char_type>();
  131|  18.7k|            if (!is_segment_contiguous(range)) {
  132|  18.7k|                return impl(rd, range, value);
  133|  18.7k|            }
  134|  18.7k|            auto crange = get_as_contiguous(range);
  135|  18.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  18.7k|            return ranges_polyfill::batch_next(
  137|  18.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  18.7k|        }
  139|  18.7k|        else {
  140|  18.7k|            SCN_EXPECT(false);
  141|  18.7k|            SCN_UNREACHABLE;
  142|  18.7k|        }
  143|  18.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  18.7k|    {
  112|  18.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 618, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    618|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    618|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    618|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    618|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    618|    }                                                  \
  |  |  |  |   70|  18.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  18.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  18.1k|                    .transform_error(make_eof_scan_error));
  115|  18.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  18.1k|                               loc);
  117|  18.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|  18.9k|    {
  122|  18.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  18.9k|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.9k|            auto rd = make_reader<T, char_type>();
  127|  18.9k|            return impl(rd, range, value);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  18.9k|            auto rd = make_reader<T, char_type>();
  131|  18.9k|            if (!is_segment_contiguous(range)) {
  132|  18.9k|                return impl(rd, range, value);
  133|  18.9k|            }
  134|  18.9k|            auto crange = get_as_contiguous(range);
  135|  18.9k|            SCN_TRY(it, impl(rd, crange, value));
  136|  18.9k|            return ranges_polyfill::batch_next(
  137|  18.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  18.9k|        }
  139|  18.9k|        else {
  140|  18.9k|            SCN_EXPECT(false);
  141|  18.9k|            SCN_UNREACHABLE;
  142|  18.9k|        }
  143|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  18.9k|    {
  112|  18.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 687, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    687|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    687|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    687|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    687|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    687|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  18.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  18.3k|                    .transform_error(make_eof_scan_error));
  115|  18.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  18.3k|                               loc);
  117|  18.9k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   131k|{
   43|   131k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   131k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 131k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   131k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   131k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  10.1k|    {
  122|  10.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.1k|            auto rd = make_reader<T, char_type>();
  127|  10.1k|            return impl(rd, range, value);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            auto rd = make_reader<T, char_type>();
  131|  10.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.1k, False: 0]
  ------------------
  132|  10.1k|                return impl(rd, range, value);
  133|  10.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.1k|        else {
  140|  10.1k|            SCN_EXPECT(false);
  141|  10.1k|            SCN_UNREACHABLE;
  142|  10.1k|        }
  143|  10.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.1k|    {
  112|  10.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.1k|                    .transform_error(make_eof_scan_error));
  115|  10.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.1k|                               loc);
  117|  10.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  10.1k|    {
  122|  10.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.1k|            auto rd = make_reader<T, char_type>();
  127|  10.1k|            return impl(rd, range, value);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            auto rd = make_reader<T, char_type>();
  131|  10.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.1k, False: 0]
  ------------------
  132|  10.1k|                return impl(rd, range, value);
  133|  10.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.1k|        else {
  140|  10.1k|            SCN_EXPECT(false);
  141|  10.1k|            SCN_UNREACHABLE;
  142|  10.1k|        }
  143|  10.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.1k|    {
  112|  10.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.1k|                    .transform_error(make_eof_scan_error));
  115|  10.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.1k|                               loc);
  117|  10.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  10.1k|    {
  122|  10.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  10.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  10.1k|            auto rd = make_reader<T, char_type>();
  127|  10.1k|            return impl(rd, range, value);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            auto rd = make_reader<T, char_type>();
  131|  10.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 10.1k, False: 0]
  ------------------
  132|  10.1k|                return impl(rd, range, value);
  133|  10.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  10.1k|        else {
  140|  10.1k|            SCN_EXPECT(false);
  141|  10.1k|            SCN_UNREACHABLE;
  142|  10.1k|        }
  143|  10.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  10.1k|    {
  112|  10.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  10.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  10.1k|                    .transform_error(make_eof_scan_error));
  115|  10.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  10.1k|                               loc);
  117|  10.1k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|   638k|    {
  223|   638k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   638k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   638k|                          basic_contiguous_scan_context<char_type>>) {
  227|   638k|            auto rd = make_reader<T, char_type>();
  228|   638k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 638k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   638k|            return impl(rd, range, value);
  233|   638k|        }
  234|   638k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   638k|            auto rd = make_reader<T, char_type>();
  236|   638k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   638k|                return unexpected(e);
  238|   638k|            }
  239|       |
  240|   638k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   638k|                return impl(rd, range, value);
  242|   638k|            }
  243|       |
  244|   638k|            auto crange = get_as_contiguous(range);
  245|   638k|            SCN_TRY(it, impl(rd, crange, value));
  246|   638k|            return ranges_polyfill::batch_next(
  247|   638k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   638k|        }
  249|   638k|        else {
  250|   638k|            SCN_EXPECT(false);
  251|   638k|            SCN_UNREACHABLE;
  252|   638k|        }
  253|   638k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   638k|    {
  205|   638k|        SCN_TRY(it,
  ------------------
  |  |   71|   638k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   638k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   638k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.48k, False: 632k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.48k|    }                                                  \
  |  |  |  |   70|   638k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   632k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   632k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   632k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   632k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 632k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   632k|        return rd.read_specs(subr, specs, value, loc);
  218|   632k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|   656k|    {
  223|   656k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   656k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   656k|                          basic_contiguous_scan_context<char_type>>) {
  227|   656k|            auto rd = make_reader<T, char_type>();
  228|   656k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 656k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   656k|            return impl(rd, range, value);
  233|   656k|        }
  234|   656k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   656k|            auto rd = make_reader<T, char_type>();
  236|   656k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   656k|                return unexpected(e);
  238|   656k|            }
  239|       |
  240|   656k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   656k|                return impl(rd, range, value);
  242|   656k|            }
  243|       |
  244|   656k|            auto crange = get_as_contiguous(range);
  245|   656k|            SCN_TRY(it, impl(rd, crange, value));
  246|   656k|            return ranges_polyfill::batch_next(
  247|   656k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   656k|        }
  249|   656k|        else {
  250|   656k|            SCN_EXPECT(false);
  251|   656k|            SCN_UNREACHABLE;
  252|   656k|        }
  253|   656k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   656k|    {
  205|   656k|        SCN_TRY(it,
  ------------------
  |  |   71|   656k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   656k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   656k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.03k, False: 649k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.03k|    }                                                  \
  |  |  |  |   70|   656k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   649k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   649k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   649k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   649k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 649k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   649k|        return rd.read_specs(subr, specs, value, loc);
  218|   649k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|   676k|    {
  223|   676k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   676k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   676k|                          basic_contiguous_scan_context<char_type>>) {
  227|   676k|            auto rd = make_reader<T, char_type>();
  228|   676k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 676k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   676k|            return impl(rd, range, value);
  233|   676k|        }
  234|   676k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   676k|            auto rd = make_reader<T, char_type>();
  236|   676k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   676k|                return unexpected(e);
  238|   676k|            }
  239|       |
  240|   676k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   676k|                return impl(rd, range, value);
  242|   676k|            }
  243|       |
  244|   676k|            auto crange = get_as_contiguous(range);
  245|   676k|            SCN_TRY(it, impl(rd, crange, value));
  246|   676k|            return ranges_polyfill::batch_next(
  247|   676k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   676k|        }
  249|   676k|        else {
  250|   676k|            SCN_EXPECT(false);
  251|   676k|            SCN_UNREACHABLE;
  252|   676k|        }
  253|   676k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   676k|    {
  205|   676k|        SCN_TRY(it,
  ------------------
  |  |   71|   676k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   676k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   676k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.57k, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.57k|    }                                                  \
  |  |  |  |   70|   676k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   668k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   668k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   668k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   668k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 668k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   668k|        return rd.read_specs(subr, specs, value, loc);
  218|   668k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  33.7k|    {
  223|  33.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  33.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  33.7k|            auto rd = make_reader<T, char_type>();
  228|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  33.7k|                return unexpected(e);
  230|  33.7k|            }
  231|       |
  232|  33.7k|            return impl(rd, range, value);
  233|  33.7k|        }
  234|  33.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  33.7k|            auto rd = make_reader<T, char_type>();
  236|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  33.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 33.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  33.7k|                return impl(rd, range, value);
  242|  33.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  33.7k|        else {
  250|  33.7k|            SCN_EXPECT(false);
  251|  33.7k|            SCN_UNREACHABLE;
  252|  33.7k|        }
  253|  33.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  33.7k|    {
  205|  33.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  33.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  33.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  33.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  33.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 33.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  33.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  33.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  33.7k|    {
  223|  33.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  33.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  33.7k|            auto rd = make_reader<T, char_type>();
  228|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  33.7k|                return unexpected(e);
  230|  33.7k|            }
  231|       |
  232|  33.7k|            return impl(rd, range, value);
  233|  33.7k|        }
  234|  33.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  33.7k|            auto rd = make_reader<T, char_type>();
  236|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  33.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 33.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  33.7k|                return impl(rd, range, value);
  242|  33.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  33.7k|        else {
  250|  33.7k|            SCN_EXPECT(false);
  251|  33.7k|            SCN_UNREACHABLE;
  252|  33.7k|        }
  253|  33.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  33.7k|    {
  205|  33.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  33.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  33.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  33.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  33.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 33.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  33.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  33.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  33.7k|    {
  223|  33.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  33.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  33.7k|            auto rd = make_reader<T, char_type>();
  228|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  33.7k|                return unexpected(e);
  230|  33.7k|            }
  231|       |
  232|  33.7k|            return impl(rd, range, value);
  233|  33.7k|        }
  234|  33.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  33.7k|            auto rd = make_reader<T, char_type>();
  236|  33.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  33.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 33.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  33.7k|                return impl(rd, range, value);
  242|  33.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  33.7k|        else {
  250|  33.7k|            SCN_EXPECT(false);
  251|  33.7k|            SCN_UNREACHABLE;
  252|  33.7k|        }
  253|  33.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  33.7k|    {
  205|  33.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  33.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  33.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  33.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  33.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 33.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  33.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  33.7k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.28M|{
   43|  5.28M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.4k, False: 5.22M]
  |  |  ------------------
  ------------------
   44|  56.4k|        return unexpected(e);
   45|  56.4k|    }
   46|       |
   47|  5.22M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.22M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.22M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.22M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|  36.0k|    {
  122|  36.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  36.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  36.0k|                          basic_contiguous_scan_context<char_type>>) {
  126|  36.0k|            auto rd = make_reader<T, char_type>();
  127|  36.0k|            return impl(rd, range, value);
  128|  36.0k|        }
  129|  36.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  36.0k|            auto rd = make_reader<T, char_type>();
  131|  36.0k|            if (!is_segment_contiguous(range)) {
  132|  36.0k|                return impl(rd, range, value);
  133|  36.0k|            }
  134|  36.0k|            auto crange = get_as_contiguous(range);
  135|  36.0k|            SCN_TRY(it, impl(rd, crange, value));
  136|  36.0k|            return ranges_polyfill::batch_next(
  137|  36.0k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  36.0k|        }
  139|  36.0k|        else {
  140|  36.0k|            SCN_EXPECT(false);
  141|  36.0k|            SCN_UNREACHABLE;
  142|  36.0k|        }
  143|  36.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  36.0k|    {
  112|  36.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  36.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 621, False: 35.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    621|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    621|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    621|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    621|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    621|    }                                                  \
  |  |  |  |   70|  36.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  35.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  35.4k|                    .transform_error(make_eof_scan_error));
  115|  35.4k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  35.4k|                               loc);
  117|  36.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|  36.3k|    {
  122|  36.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  36.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  36.3k|                          basic_contiguous_scan_context<char_type>>) {
  126|  36.3k|            auto rd = make_reader<T, char_type>();
  127|  36.3k|            return impl(rd, range, value);
  128|  36.3k|        }
  129|  36.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  36.3k|            auto rd = make_reader<T, char_type>();
  131|  36.3k|            if (!is_segment_contiguous(range)) {
  132|  36.3k|                return impl(rd, range, value);
  133|  36.3k|            }
  134|  36.3k|            auto crange = get_as_contiguous(range);
  135|  36.3k|            SCN_TRY(it, impl(rd, crange, value));
  136|  36.3k|            return ranges_polyfill::batch_next(
  137|  36.3k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  36.3k|        }
  139|  36.3k|        else {
  140|  36.3k|            SCN_EXPECT(false);
  141|  36.3k|            SCN_UNREACHABLE;
  142|  36.3k|        }
  143|  36.3k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  36.3k|    {
  112|  36.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 687, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    687|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    687|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    687|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    687|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    687|    }                                                  \
  |  |  |  |   70|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  35.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  35.6k|                    .transform_error(make_eof_scan_error));
  115|  35.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  35.6k|                               loc);
  117|  36.3k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|  36.4k|    {
  122|  36.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  36.4k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  36.4k|                          basic_contiguous_scan_context<char_type>>) {
  126|  36.4k|            auto rd = make_reader<T, char_type>();
  127|  36.4k|            return impl(rd, range, value);
  128|  36.4k|        }
  129|  36.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  36.4k|            auto rd = make_reader<T, char_type>();
  131|  36.4k|            if (!is_segment_contiguous(range)) {
  132|  36.4k|                return impl(rd, range, value);
  133|  36.4k|            }
  134|  36.4k|            auto crange = get_as_contiguous(range);
  135|  36.4k|            SCN_TRY(it, impl(rd, crange, value));
  136|  36.4k|            return ranges_polyfill::batch_next(
  137|  36.4k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  36.4k|        }
  139|  36.4k|        else {
  140|  36.4k|            SCN_EXPECT(false);
  141|  36.4k|            SCN_UNREACHABLE;
  142|  36.4k|        }
  143|  36.4k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  36.4k|    {
  112|  36.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  36.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 750, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    750|    }                                                  \
  |  |  |  |   70|  36.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  35.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  35.6k|                    .transform_error(make_eof_scan_error));
  115|  35.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  35.6k|                               loc);
  117|  36.4k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|  1.71M|    {
  223|  1.71M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.71M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.71M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.71M|            auto rd = make_reader<T, char_type>();
  228|  1.71M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.71M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.71M|            return impl(rd, range, value);
  233|  1.71M|        }
  234|  1.71M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.71M|            auto rd = make_reader<T, char_type>();
  236|  1.71M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.71M|                return unexpected(e);
  238|  1.71M|            }
  239|       |
  240|  1.71M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.71M|                return impl(rd, range, value);
  242|  1.71M|            }
  243|       |
  244|  1.71M|            auto crange = get_as_contiguous(range);
  245|  1.71M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.71M|            return ranges_polyfill::batch_next(
  247|  1.71M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.71M|        }
  249|  1.71M|        else {
  250|  1.71M|            SCN_EXPECT(false);
  251|  1.71M|            SCN_UNREACHABLE;
  252|  1.71M|        }
  253|  1.71M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.71M|    {
  205|  1.71M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.6k, False: 1.69M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.6k|    }                                                  \
  |  |  |  |   70|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.69M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.69M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.69M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.69M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.69M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.69M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.69M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|  1.72M|    {
  223|  1.72M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.72M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.72M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.72M|            auto rd = make_reader<T, char_type>();
  228|  1.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.72M|            return impl(rd, range, value);
  233|  1.72M|        }
  234|  1.72M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.72M|            auto rd = make_reader<T, char_type>();
  236|  1.72M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.72M|                return unexpected(e);
  238|  1.72M|            }
  239|       |
  240|  1.72M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.72M|                return impl(rd, range, value);
  242|  1.72M|            }
  243|       |
  244|  1.72M|            auto crange = get_as_contiguous(range);
  245|  1.72M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.72M|            return ranges_polyfill::batch_next(
  247|  1.72M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.72M|        }
  249|  1.72M|        else {
  250|  1.72M|            SCN_EXPECT(false);
  251|  1.72M|            SCN_UNREACHABLE;
  252|  1.72M|        }
  253|  1.72M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.72M|    {
  205|  1.72M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.72M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.72M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.72M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.9k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.9k|    }                                                  \
  |  |  |  |   70|  1.72M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.70M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.70M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.70M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.70M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.70M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.70M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.70M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|  1.73M|    {
  223|  1.73M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.73M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.73M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.73M|            auto rd = make_reader<T, char_type>();
  228|  1.73M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.73M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.73M|            return impl(rd, range, value);
  233|  1.73M|        }
  234|  1.73M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.73M|            auto rd = make_reader<T, char_type>();
  236|  1.73M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.73M|                return unexpected(e);
  238|  1.73M|            }
  239|       |
  240|  1.73M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.73M|                return impl(rd, range, value);
  242|  1.73M|            }
  243|       |
  244|  1.73M|            auto crange = get_as_contiguous(range);
  245|  1.73M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.73M|            return ranges_polyfill::batch_next(
  247|  1.73M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.73M|        }
  249|  1.73M|        else {
  250|  1.73M|            SCN_EXPECT(false);
  251|  1.73M|            SCN_UNREACHABLE;
  252|  1.73M|        }
  253|  1.73M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.73M|    {
  205|  1.73M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.3k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.3k|    }                                                  \
  |  |  |  |   70|  1.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.70M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.70M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.70M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.70M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.70M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.70M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.70M|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   395k|{
   43|   395k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   395k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 395k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   395k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   395k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  30.3k|    {
  122|  30.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  30.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  30.3k|            auto rd = make_reader<T, char_type>();
  127|  30.3k|            return impl(rd, range, value);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            auto rd = make_reader<T, char_type>();
  131|  30.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 30.3k, False: 0]
  ------------------
  132|  30.3k|                return impl(rd, range, value);
  133|  30.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  30.3k|        else {
  140|  30.3k|            SCN_EXPECT(false);
  141|  30.3k|            SCN_UNREACHABLE;
  142|  30.3k|        }
  143|  30.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  30.3k|    {
  112|  30.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  30.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  30.3k|                    .transform_error(make_eof_scan_error));
  115|  30.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  30.3k|                               loc);
  117|  30.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  30.3k|    {
  122|  30.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  30.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  30.3k|            auto rd = make_reader<T, char_type>();
  127|  30.3k|            return impl(rd, range, value);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            auto rd = make_reader<T, char_type>();
  131|  30.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 30.3k, False: 0]
  ------------------
  132|  30.3k|                return impl(rd, range, value);
  133|  30.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  30.3k|        else {
  140|  30.3k|            SCN_EXPECT(false);
  141|  30.3k|            SCN_UNREACHABLE;
  142|  30.3k|        }
  143|  30.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  30.3k|    {
  112|  30.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  30.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  30.3k|                    .transform_error(make_eof_scan_error));
  115|  30.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  30.3k|                               loc);
  117|  30.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  30.3k|    {
  122|  30.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  30.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  30.3k|            auto rd = make_reader<T, char_type>();
  127|  30.3k|            return impl(rd, range, value);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            auto rd = make_reader<T, char_type>();
  131|  30.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 30.3k, False: 0]
  ------------------
  132|  30.3k|                return impl(rd, range, value);
  133|  30.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  30.3k|        else {
  140|  30.3k|            SCN_EXPECT(false);
  141|  30.3k|            SCN_UNREACHABLE;
  142|  30.3k|        }
  143|  30.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  30.3k|    {
  112|  30.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  30.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  30.3k|                    .transform_error(make_eof_scan_error));
  115|  30.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  30.3k|                               loc);
  117|  30.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   101k|    {
  223|   101k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   101k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   101k|            auto rd = make_reader<T, char_type>();
  228|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   101k|                return unexpected(e);
  230|   101k|            }
  231|       |
  232|   101k|            return impl(rd, range, value);
  233|   101k|        }
  234|   101k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   101k|            auto rd = make_reader<T, char_type>();
  236|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   101k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 101k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   101k|                return impl(rd, range, value);
  242|   101k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   101k|        else {
  250|   101k|            SCN_EXPECT(false);
  251|   101k|            SCN_UNREACHABLE;
  252|   101k|        }
  253|   101k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   101k|    {
  205|   101k|        SCN_TRY(it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   101k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   101k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   101k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   101k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 101k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   101k|        return rd.read_specs(subr, specs, value, loc);
  218|   101k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   101k|    {
  223|   101k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   101k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   101k|            auto rd = make_reader<T, char_type>();
  228|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   101k|                return unexpected(e);
  230|   101k|            }
  231|       |
  232|   101k|            return impl(rd, range, value);
  233|   101k|        }
  234|   101k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   101k|            auto rd = make_reader<T, char_type>();
  236|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   101k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 101k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   101k|                return impl(rd, range, value);
  242|   101k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   101k|        else {
  250|   101k|            SCN_EXPECT(false);
  251|   101k|            SCN_UNREACHABLE;
  252|   101k|        }
  253|   101k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   101k|    {
  205|   101k|        SCN_TRY(it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   101k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   101k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   101k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   101k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 101k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   101k|        return rd.read_specs(subr, specs, value, loc);
  218|   101k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   101k|    {
  223|   101k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   101k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   101k|            auto rd = make_reader<T, char_type>();
  228|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   101k|                return unexpected(e);
  230|   101k|            }
  231|       |
  232|   101k|            return impl(rd, range, value);
  233|   101k|        }
  234|   101k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   101k|            auto rd = make_reader<T, char_type>();
  236|   101k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   101k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 101k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   101k|                return impl(rd, range, value);
  242|   101k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   101k|        else {
  250|   101k|            SCN_EXPECT(false);
  251|   101k|            SCN_UNREACHABLE;
  252|   101k|        }
  253|   101k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   101k|    {
  205|   101k|        SCN_TRY(it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   101k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   101k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   101k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   101k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 101k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   101k|        return rd.read_specs(subr, specs, value, loc);
  218|   101k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   136M|{
  110|   136M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   136M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   263k|{
   89|   263k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 263k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   263k|    constexpr auto enc = get_encoding<CharT>();
   94|   263k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   263k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   263k|    }
   97|   263k|    else if constexpr (enc == encoding::utf16) {
   98|   263k|        return simdutf::validate_utf16(
   99|   263k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   263k|    }
  101|   263k|    else if constexpr (enc == encoding::utf32) {
  102|   263k|        return simdutf::validate_utf32(
  103|   263k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   263k|    }
  105|   263k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   131k|{
  449|   131k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 131k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   131k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   131k|        SCN_EXPECT(output.size() >= input.size());
  455|   131k|        std::memcpy(output.data(), input.data(),
  456|   131k|                    input.size() * sizeof(SourceCharT));
  457|   131k|        return input.size();
  458|   131k|    }
  459|       |
  460|   131k|    const auto result = [&]() {
  461|   131k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   131k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   131k|        if constexpr (src_enc == encoding::utf8) {
  465|   131k|            if constexpr (dest_enc == encoding::utf16) {
  466|   131k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   131k|                    input.data(), input.size(),
  468|   131k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   131k|            }
  470|   131k|            else {
  471|   131k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   131k|                    input.data(), input.size(),
  473|   131k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   131k|            }
  475|   131k|        }
  476|   131k|        else if constexpr (src_enc == encoding::utf16) {
  477|   131k|            if constexpr (dest_enc == encoding::utf8) {
  478|   131k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   131k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   131k|                    input.size(), output.data());
  481|   131k|            }
  482|   131k|            else {
  483|   131k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   131k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   131k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   131k|            }
  487|   131k|        }
  488|   131k|        else if constexpr (src_enc == encoding::utf32) {
  489|   131k|            if constexpr (dest_enc == encoding::utf8) {
  490|   131k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   131k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   131k|                    input.size(), output.data());
  493|   131k|            }
  494|   131k|            else {
  495|   131k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   131k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   131k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   131k|            }
  499|   131k|        }
  500|   131k|    }();
  501|       |
  502|   131k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|   131k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|   131k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|   131k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|   131k|    const auto result = [&]() {
  461|   131k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   131k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   131k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|   131k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|   131k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   131k|                    input.data(), input.size(),
  468|   131k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   131k|            }
  470|   131k|            else {
  471|   131k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   131k|                    input.data(), input.size(),
  473|   131k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   131k|            }
  475|   131k|        }
  476|   131k|        else if constexpr (src_enc == encoding::utf16) {
  477|   131k|            if constexpr (dest_enc == encoding::utf8) {
  478|   131k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   131k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   131k|                    input.size(), output.data());
  481|   131k|            }
  482|   131k|            else {
  483|   131k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   131k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   131k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   131k|            }
  487|   131k|        }
  488|   131k|        else if constexpr (src_enc == encoding::utf32) {
  489|   131k|            if constexpr (dest_enc == encoding::utf8) {
  490|   131k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   131k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   131k|                    input.size(), output.data());
  493|   131k|            }
  494|   131k|            else {
  495|   131k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   131k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   131k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   131k|            }
  499|   131k|        }
  500|   131k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   394k|{
  116|   394k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   394k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 263k]
  |  |  ------------------
  ------------------
  120|   131k|        return detail::invalid_code_point;
  121|   131k|    }
  122|       |
  123|   263k|    constexpr auto enc = get_encoding<CharT>();
  124|   263k|    char32_t output{};
  125|   263k|    size_t ret{};
  126|   263k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   263k|#ifndef NDEBUG
  128|   263k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 263k, False: 0]
  ------------------
  129|   263k|            auto len =
  130|   263k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   263k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   263k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   263k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   263k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   263k|    return static_cast<char32_t>(output);
  156|   263k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  43.9M|{
  263|  43.9M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  43.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  43.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  43.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.75M, False: 40.1M]
  |  |  ------------------
  ------------------
  267|  3.75M|        return {get_start_of_next_code_point(input),
  268|  3.75M|                detail::invalid_code_point};
  269|  3.75M|    }
  270|  40.1M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  40.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.9k, False: 40.1M]
  |  |  ------------------
  ------------------
  271|  41.9k|        return {input.end(), detail::invalid_code_point};
  272|  41.9k|    }
  273|       |
  274|  40.1M|    constexpr auto enc = get_encoding<CharT>();
  275|  40.1M|    std::size_t result{1};
  276|  40.1M|    char32_t output{};
  277|  40.1M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  40.1M|        result = simdutf::convert_utf8_to_utf32(
  279|  40.1M|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  40.1M|    }
  281|  40.1M|    else if constexpr (enc == encoding::utf16) {
  282|  40.1M|        result = simdutf::convert_utf16_to_utf32(
  283|  40.1M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  40.1M|    }
  285|  40.1M|    else if constexpr (enc == encoding::utf32) {
  286|  40.1M|        SCN_EXPECT(len == 1);
  287|  40.1M|        output = static_cast<char32_t>(input[0]);
  288|  40.1M|    }
  289|       |
  290|  40.1M|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  40.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.7M, False: 17.3M]
  |  |  ------------------
  ------------------
  291|  22.7M|        return {get_start_of_next_code_point(input.substr(1)),
  292|  22.7M|                detail::invalid_code_point};
  293|  22.7M|    }
  294|       |
  295|  17.3M|    return {input.begin() + len, output};
  296|  40.1M|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  26.4M|{
  248|  26.4M|    auto it = input.begin();
  249|  91.7M|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 91.6M, False: 98.7k]
  ------------------
  250|  91.6M|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 26.3M, False: 65.2M]
  ------------------
  251|  26.3M|            break;
  252|  26.3M|        }
  253|  91.6M|    }
  254|       |
  255|  26.4M|    return it;
  256|  26.4M|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  1.16G|{
  110|  1.16G|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.16G|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  75.1M|{
  449|  75.1M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 75.1M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  75.1M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  75.1M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  75.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  75.1M|                    input.size() * sizeof(SourceCharT));
  457|  75.1M|        return input.size();
  458|  75.1M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  3.94M|{
  116|  3.94M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  3.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  3.94M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.94M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  3.94M|    constexpr auto enc = get_encoding<CharT>();
  124|  3.94M|    char32_t output{};
  125|  3.94M|    size_t ret{};
  126|  3.94M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  3.94M|#ifndef NDEBUG
  128|  3.94M|        if (validate_unicode(input)) {
  129|  3.94M|            auto len =
  130|  3.94M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  3.94M|            SCN_EXPECT(len == 1);
  132|  3.94M|        }
  133|  3.94M|#endif
  134|  3.94M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  3.94M|    }
  136|  3.94M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  3.94M|#ifndef NDEBUG
  138|  3.94M|        if (validate_unicode(input)) {
  139|  3.94M|            auto len = simdutf::utf32_length_from_utf16(
  140|  3.94M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  3.94M|            SCN_EXPECT(len == 1);
  142|  3.94M|        }
  143|  3.94M|#endif
  144|  3.94M|        ret = simdutf::convert_utf16_to_utf32(
  145|  3.94M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  3.94M|    }
  147|  3.94M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  3.94M|        output = static_cast<char32_t>(input[0]);
  149|  3.94M|        ret = output < detail::invalid_code_point;
  150|  3.94M|    }
  151|       |
  152|  3.94M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  3.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.94M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  3.94M|    return static_cast<char32_t>(output);
  156|  3.94M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  1.12G|{
   29|       |    // Pattern_White_Space property
   30|  1.12G|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 104M, False: 1.02G]
  |  Branch (30:27): [True: 2.76M, False: 101M]
  ------------------
   31|  1.12G|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 1.43M, False: 1.12G]
  ------------------
   32|  1.12G|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 1.32M, False: 1.12G]
  ------------------
   33|  1.12G|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 8.52k, False: 1.12G]
  ------------------
   34|  1.12G|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 5.70k, False: 1.12G]
  ------------------
   35|  1.12G|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 24.5k, False: 1.12G]
  ------------------
   36|  1.12G|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 1.12G]
  ------------------
   37|  1.12G|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|    196|{
   69|    196|    return static_cast<unsigned char>(ch) <= 127;
   70|    196|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|   124M|{
   58|   124M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|   124M|        static_cast<unsigned char>(ch))];
   60|   124M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  30.2M|{
   92|  30.2M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  30.2M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.97M|    {
   57|  1.97M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  5.81M|    {
   61|  5.81M|        return m_current;
   62|  5.81M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.84M|    {
   66|  3.84M|        return m_range.end();
   67|  3.84M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.87M|    {
   81|  1.87M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.87M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.87M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.87M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.87M|        }
   87|  1.87M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.87M|    static_cast<    \
  |  |  247|  1.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.87M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.97M|    {
   71|  1.97M|        return ranges::subrange{begin(), end()};
   72|  1.97M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  5.17M|    {
   57|  5.17M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  15.2M|    {
   61|  15.2M|        return m_current;
   62|  15.2M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  10.0M|    {
   66|  10.0M|        return m_range.end();
   67|  10.0M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  4.86M|    {
   81|  4.86M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.86M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.86M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.86M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.86M|        }
   87|  4.86M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.86M|    static_cast<    \
  |  |  247|  4.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.86M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  5.17M|    {
   71|  5.17M|        return ranges::subrange{begin(), end()};
   72|  5.17M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.00M|    {
  205|  2.00M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.00M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  17.9k|    {
  196|  17.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  17.9k|              cvref<T> obj = *get<T>(fn);
  187|  17.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  17.9k|              }
  190|  17.9k|              else {
  191|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  17.9k|              }
  193|  17.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  17.9k|    {
  126|  17.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  17.9k|            return static_cast<T*>(s.m_cp);
  128|  17.9k|        }
  129|  17.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  17.9k|            return static_cast<T*>(s.m_p);
  131|  17.9k|        }
  132|  17.9k|        else {
  133|  17.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  17.9k|        }
  135|  17.9k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   910k|    {
  205|   910k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   910k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   267k|    {
  196|   267k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   455k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   455k|              cvref<T> obj = *get<T>(fn);
  187|   455k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   455k|                  obj(static_cast<decltype(args)>(args)...);
  189|   455k|              }
  190|   455k|              else {
  191|   455k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   455k|              }
  193|   455k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   455k|    {
  126|   455k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   455k|            return static_cast<T*>(s.m_cp);
  128|   455k|        }
  129|   455k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   455k|            return static_cast<T*>(s.m_p);
  131|   455k|        }
  132|   455k|        else {
  133|   455k|            return reinterpret_cast<T*>(s.m_fp);
  134|   455k|        }
  135|   455k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   267k|        {
  104|   267k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|     68|    {
  196|     68|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|    196|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    196|              cvref<T> obj = *get<T>(fn);
  187|    196|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    196|                  obj(static_cast<decltype(args)>(args)...);
  189|    196|              }
  190|    196|              else {
  191|    196|                  return obj(static_cast<decltype(args)>(args)...);
  192|    196|              }
  193|    196|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|    196|    {
  126|    196|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    196|            return static_cast<T*>(s.m_cp);
  128|    196|        }
  129|    196|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    196|            return static_cast<T*>(s.m_p);
  131|    196|        }
  132|    196|        else {
  133|    196|            return reinterpret_cast<T*>(s.m_fp);
  134|    196|        }
  135|    196|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|     68|        {
  104|     68|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|  1.58k|    {
  196|  1.58k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  15.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.9k|              cvref<T> obj = *get<T>(fn);
  187|  15.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.9k|              }
  190|  15.9k|              else {
  191|  15.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.9k|              }
  193|  15.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|  15.9k|    {
  126|  15.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.9k|            return static_cast<T*>(s.m_cp);
  128|  15.9k|        }
  129|  15.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.9k|            return static_cast<T*>(s.m_p);
  131|  15.9k|        }
  132|  15.9k|        else {
  133|  15.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.9k|        }
  135|  15.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|  1.58k|        {
  104|  1.58k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|   134k|    {
  196|   134k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|   307k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   307k|              cvref<T> obj = *get<T>(fn);
  187|   307k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   307k|                  obj(static_cast<decltype(args)>(args)...);
  189|   307k|              }
  190|   307k|              else {
  191|   307k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   307k|              }
  193|   307k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|   307k|    {
  126|   307k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   307k|            return static_cast<T*>(s.m_cp);
  128|   307k|        }
  129|   307k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   307k|            return static_cast<T*>(s.m_p);
  131|   307k|        }
  132|   307k|        else {
  133|   307k|            return reinterpret_cast<T*>(s.m_fp);
  134|   307k|        }
  135|   307k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|   134k|        {
  104|   134k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|  17.9k|        {
  104|  17.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  18.1k|    {
  196|  18.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  18.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.1k|              cvref<T> obj = *get<T>(fn);
  187|  18.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.1k|              }
  190|  18.1k|              else {
  191|  18.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.1k|              }
  193|  18.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  18.1k|    {
  126|  18.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.1k|            return static_cast<T*>(s.m_cp);
  128|  18.1k|        }
  129|  18.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.1k|            return static_cast<T*>(s.m_p);
  131|  18.1k|        }
  132|  18.1k|        else {
  133|  18.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.1k|        }
  135|  18.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|  18.1k|        {
  104|  18.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  18.3k|    {
  196|  18.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.3k|              cvref<T> obj = *get<T>(fn);
  187|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.3k|              }
  190|  18.3k|              else {
  191|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.3k|              }
  193|  18.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  18.3k|    {
  126|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.3k|            return static_cast<T*>(s.m_cp);
  128|  18.3k|        }
  129|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.3k|            return static_cast<T*>(s.m_p);
  131|  18.3k|        }
  132|  18.3k|        else {
  133|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.3k|        }
  135|  18.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|  18.3k|        {
  104|  18.3k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  1.09G|    {
  205|  1.09G|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.09G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.09G|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  5.75M|    {
  196|  5.75M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  10.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.1M|              cvref<T> obj = *get<T>(fn);
  187|  10.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.1M|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.1M|              }
  190|  10.1M|              else {
  191|  10.1M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.1M|              }
  193|  10.1M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  10.1M|    {
  126|  10.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.1M|            return static_cast<T*>(s.m_cp);
  128|  10.1M|        }
  129|  10.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1M|            return static_cast<T*>(s.m_p);
  131|  10.1M|        }
  132|  10.1M|        else {
  133|  10.1M|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.1M|        }
  135|  10.1M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  5.75M|        {
  104|  5.75M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   131k|    {
  196|   131k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   526k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   526k|              cvref<T> obj = *get<T>(fn);
  187|   526k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   526k|                  obj(static_cast<decltype(args)>(args)...);
  189|   526k|              }
  190|   526k|              else {
  191|   526k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   526k|              }
  193|   526k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   526k|    {
  126|   526k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   526k|            return static_cast<T*>(s.m_cp);
  128|   526k|        }
  129|   526k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   526k|            return static_cast<T*>(s.m_p);
  131|   526k|        }
  132|   526k|        else {
  133|   526k|            return reinterpret_cast<T*>(s.m_fp);
  134|   526k|        }
  135|   526k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   131k|        {
  104|   131k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   131k|    {
  205|   131k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   131k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  10.1k|    {
  196|  10.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.1k|              cvref<T> obj = *get<T>(fn);
  187|  10.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.1k|              }
  190|  10.1k|              else {
  191|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.1k|              }
  193|  10.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  10.1k|    {
  126|  10.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.1k|            return static_cast<T*>(s.m_cp);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            return static_cast<T*>(s.m_p);
  131|  10.1k|        }
  132|  10.1k|        else {
  133|  10.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.1k|        }
  135|  10.1k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  20.2k|    {
  196|  20.2k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  20.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.2k|              cvref<T> obj = *get<T>(fn);
  187|  20.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.2k|              }
  190|  20.2k|              else {
  191|  20.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.2k|              }
  193|  20.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  20.2k|    {
  126|  20.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.2k|            return static_cast<T*>(s.m_cp);
  128|  20.2k|        }
  129|  20.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.2k|            return static_cast<T*>(s.m_p);
  131|  20.2k|        }
  132|  20.2k|        else {
  133|  20.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.2k|        }
  135|  20.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  20.2k|        {
  104|  20.2k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|   111k|    {
  196|   111k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   111k|              cvref<T> obj = *get<T>(fn);
  187|   111k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   111k|                  obj(static_cast<decltype(args)>(args)...);
  189|   111k|              }
  190|   111k|              else {
  191|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   111k|              }
  193|   111k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|   111k|    {
  126|   111k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   111k|            return static_cast<T*>(s.m_cp);
  128|   111k|        }
  129|   111k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   111k|            return static_cast<T*>(s.m_p);
  131|   111k|        }
  132|   111k|        else {
  133|   111k|            return reinterpret_cast<T*>(s.m_fp);
  134|   111k|        }
  135|   111k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|   111k|        {
  104|   111k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  10.1k|        {
  104|  10.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  10.1k|    {
  196|  10.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.1k|              cvref<T> obj = *get<T>(fn);
  187|  10.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.1k|              }
  190|  10.1k|              else {
  191|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.1k|              }
  193|  10.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  10.1k|    {
  126|  10.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.1k|            return static_cast<T*>(s.m_cp);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            return static_cast<T*>(s.m_p);
  131|  10.1k|        }
  132|  10.1k|        else {
  133|  10.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.1k|        }
  135|  10.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  10.1k|        {
  104|  10.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  10.1k|    {
  196|  10.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.1k|              cvref<T> obj = *get<T>(fn);
  187|  10.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.1k|              }
  190|  10.1k|              else {
  191|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.1k|              }
  193|  10.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  10.1k|    {
  126|  10.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.1k|            return static_cast<T*>(s.m_cp);
  128|  10.1k|        }
  129|  10.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.1k|            return static_cast<T*>(s.m_p);
  131|  10.1k|        }
  132|  10.1k|        else {
  133|  10.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.1k|        }
  135|  10.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  10.1k|        {
  104|  10.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  11.9k|    {
  196|  11.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  11.9k|              cvref<T> obj = *get<T>(fn);
  187|  11.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  11.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  11.9k|              }
  190|  11.9k|              else {
  191|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  11.9k|              }
  193|  11.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  11.9k|    {
  126|  11.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  11.9k|            return static_cast<T*>(s.m_cp);
  128|  11.9k|        }
  129|  11.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.9k|            return static_cast<T*>(s.m_p);
  131|  11.9k|        }
  132|  11.9k|        else {
  133|  11.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  11.9k|        }
  135|  11.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|  11.9k|        {
  104|  11.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   620k|    {
  196|   620k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   620k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   620k|              cvref<T> obj = *get<T>(fn);
  187|   620k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   620k|                  obj(static_cast<decltype(args)>(args)...);
  189|   620k|              }
  190|   620k|              else {
  191|   620k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   620k|              }
  193|   620k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   620k|    {
  126|   620k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   620k|            return static_cast<T*>(s.m_cp);
  128|   620k|        }
  129|   620k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   620k|            return static_cast<T*>(s.m_p);
  131|   620k|        }
  132|   620k|        else {
  133|   620k|            return reinterpret_cast<T*>(s.m_fp);
  134|   620k|        }
  135|   620k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   620k|        {
  104|   620k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  12.1k|    {
  196|  12.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  12.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.1k|              cvref<T> obj = *get<T>(fn);
  187|  12.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.1k|              }
  190|  12.1k|              else {
  191|  12.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.1k|              }
  193|  12.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  12.1k|    {
  126|  12.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.1k|            return static_cast<T*>(s.m_cp);
  128|  12.1k|        }
  129|  12.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1k|            return static_cast<T*>(s.m_p);
  131|  12.1k|        }
  132|  12.1k|        else {
  133|  12.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.1k|        }
  135|  12.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|  12.1k|        {
  104|  12.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   637k|    {
  196|   637k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   637k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   637k|              cvref<T> obj = *get<T>(fn);
  187|   637k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   637k|                  obj(static_cast<decltype(args)>(args)...);
  189|   637k|              }
  190|   637k|              else {
  191|   637k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   637k|              }
  193|   637k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   637k|    {
  126|   637k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   637k|            return static_cast<T*>(s.m_cp);
  128|   637k|        }
  129|   637k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   637k|            return static_cast<T*>(s.m_p);
  131|   637k|        }
  132|   637k|        else {
  133|   637k|            return reinterpret_cast<T*>(s.m_fp);
  134|   637k|        }
  135|   637k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   637k|        {
  104|   637k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  12.2k|    {
  196|  12.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.2k|              cvref<T> obj = *get<T>(fn);
  187|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.2k|              }
  190|  12.2k|              else {
  191|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.2k|              }
  193|  12.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  12.2k|    {
  126|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.2k|            return static_cast<T*>(s.m_cp);
  128|  12.2k|        }
  129|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.2k|            return static_cast<T*>(s.m_p);
  131|  12.2k|        }
  132|  12.2k|        else {
  133|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.2k|        }
  135|  12.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|  12.2k|        {
  104|  12.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   656k|    {
  196|   656k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   656k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   656k|              cvref<T> obj = *get<T>(fn);
  187|   656k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   656k|                  obj(static_cast<decltype(args)>(args)...);
  189|   656k|              }
  190|   656k|              else {
  191|   656k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   656k|              }
  193|   656k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   656k|    {
  126|   656k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   656k|            return static_cast<T*>(s.m_cp);
  128|   656k|        }
  129|   656k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   656k|            return static_cast<T*>(s.m_p);
  131|   656k|        }
  132|   656k|        else {
  133|   656k|            return reinterpret_cast<T*>(s.m_fp);
  134|   656k|        }
  135|   656k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   656k|        {
  104|   656k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  6.75k|    {
  196|  6.75k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  6.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.75k|              cvref<T> obj = *get<T>(fn);
  187|  6.75k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.75k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.75k|              }
  190|  6.75k|              else {
  191|  6.75k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.75k|              }
  193|  6.75k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  6.75k|    {
  126|  6.75k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.75k|            return static_cast<T*>(s.m_cp);
  128|  6.75k|        }
  129|  6.75k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.75k|            return static_cast<T*>(s.m_p);
  131|  6.75k|        }
  132|  6.75k|        else {
  133|  6.75k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.75k|        }
  135|  6.75k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  6.75k|        {
  104|  6.75k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  27.0k|    {
  196|  27.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  27.0k|              cvref<T> obj = *get<T>(fn);
  187|  27.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  27.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  27.0k|              }
  190|  27.0k|              else {
  191|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  27.0k|              }
  193|  27.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  27.0k|    {
  126|  27.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  27.0k|            return static_cast<T*>(s.m_cp);
  128|  27.0k|        }
  129|  27.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.0k|            return static_cast<T*>(s.m_p);
  131|  27.0k|        }
  132|  27.0k|        else {
  133|  27.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  27.0k|        }
  135|  27.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  27.0k|        {
  104|  27.0k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  6.75k|    {
  196|  6.75k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  6.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.75k|              cvref<T> obj = *get<T>(fn);
  187|  6.75k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.75k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.75k|              }
  190|  6.75k|              else {
  191|  6.75k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.75k|              }
  193|  6.75k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  6.75k|    {
  126|  6.75k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.75k|            return static_cast<T*>(s.m_cp);
  128|  6.75k|        }
  129|  6.75k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.75k|            return static_cast<T*>(s.m_p);
  131|  6.75k|        }
  132|  6.75k|        else {
  133|  6.75k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.75k|        }
  135|  6.75k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  6.75k|        {
  104|  6.75k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  27.0k|    {
  196|  27.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  27.0k|              cvref<T> obj = *get<T>(fn);
  187|  27.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  27.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  27.0k|              }
  190|  27.0k|              else {
  191|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  27.0k|              }
  193|  27.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  27.0k|    {
  126|  27.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  27.0k|            return static_cast<T*>(s.m_cp);
  128|  27.0k|        }
  129|  27.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.0k|            return static_cast<T*>(s.m_p);
  131|  27.0k|        }
  132|  27.0k|        else {
  133|  27.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  27.0k|        }
  135|  27.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  27.0k|        {
  104|  27.0k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  6.75k|    {
  196|  6.75k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  6.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.75k|              cvref<T> obj = *get<T>(fn);
  187|  6.75k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.75k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.75k|              }
  190|  6.75k|              else {
  191|  6.75k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.75k|              }
  193|  6.75k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  6.75k|    {
  126|  6.75k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.75k|            return static_cast<T*>(s.m_cp);
  128|  6.75k|        }
  129|  6.75k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.75k|            return static_cast<T*>(s.m_p);
  131|  6.75k|        }
  132|  6.75k|        else {
  133|  6.75k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.75k|        }
  135|  6.75k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  6.75k|        {
  104|  6.75k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  27.0k|    {
  196|  27.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  27.0k|              cvref<T> obj = *get<T>(fn);
  187|  27.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  27.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  27.0k|              }
  190|  27.0k|              else {
  191|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  27.0k|              }
  193|  27.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  27.0k|    {
  126|  27.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  27.0k|            return static_cast<T*>(s.m_cp);
  128|  27.0k|        }
  129|  27.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.0k|            return static_cast<T*>(s.m_p);
  131|  27.0k|        }
  132|  27.0k|        else {
  133|  27.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  27.0k|        }
  135|  27.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  27.0k|        {
  104|  27.0k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  5.22M|    {
  196|  5.22M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  5.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.32M|              cvref<T> obj = *get<T>(fn);
  187|  5.32M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.32M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.32M|              }
  190|  5.32M|              else {
  191|  5.32M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.32M|              }
  193|  5.32M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  5.32M|    {
  126|  5.32M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.32M|            return static_cast<T*>(s.m_cp);
  128|  5.32M|        }
  129|  5.32M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.32M|            return static_cast<T*>(s.m_p);
  131|  5.32M|        }
  132|  5.32M|        else {
  133|  5.32M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.32M|        }
  135|  5.32M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  5.22M|        {
  104|  5.22M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  5.21M|    {
  205|  5.21M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  5.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  5.21M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  35.4k|    {
  196|  35.4k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  35.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  35.4k|              cvref<T> obj = *get<T>(fn);
  187|  35.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  35.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  35.4k|              }
  190|  35.4k|              else {
  191|  35.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  35.4k|              }
  193|  35.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  35.4k|    {
  126|  35.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  35.4k|            return static_cast<T*>(s.m_cp);
  128|  35.4k|        }
  129|  35.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  35.4k|            return static_cast<T*>(s.m_p);
  131|  35.4k|        }
  132|  35.4k|        else {
  133|  35.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  35.4k|        }
  135|  35.4k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.54M|    {
  205|  1.54M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.54M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   625k|    {
  196|   625k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   772k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   772k|              cvref<T> obj = *get<T>(fn);
  187|   772k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   772k|                  obj(static_cast<decltype(args)>(args)...);
  189|   772k|              }
  190|   772k|              else {
  191|   772k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   772k|              }
  193|   772k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   772k|    {
  126|   772k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   772k|            return static_cast<T*>(s.m_cp);
  128|   772k|        }
  129|   772k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   772k|            return static_cast<T*>(s.m_p);
  131|   772k|        }
  132|   772k|        else {
  133|   772k|            return reinterpret_cast<T*>(s.m_fp);
  134|   772k|        }
  135|   772k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   625k|        {
  104|   625k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  1.25k|    {
  196|  1.25k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|  14.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  14.3k|              cvref<T> obj = *get<T>(fn);
  187|  14.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  14.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  14.3k|              }
  190|  14.3k|              else {
  191|  14.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  14.3k|              }
  193|  14.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|  14.3k|    {
  126|  14.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  14.3k|            return static_cast<T*>(s.m_cp);
  128|  14.3k|        }
  129|  14.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.3k|            return static_cast<T*>(s.m_p);
  131|  14.3k|        }
  132|  14.3k|        else {
  133|  14.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  14.3k|        }
  135|  14.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  1.25k|        {
  104|  1.25k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|   229k|    {
  196|   229k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|   363k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   363k|              cvref<T> obj = *get<T>(fn);
  187|   363k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   363k|                  obj(static_cast<decltype(args)>(args)...);
  189|   363k|              }
  190|   363k|              else {
  191|   363k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   363k|              }
  193|   363k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|   363k|    {
  126|   363k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   363k|            return static_cast<T*>(s.m_cp);
  128|   363k|        }
  129|   363k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   363k|            return static_cast<T*>(s.m_p);
  131|   363k|        }
  132|   363k|        else {
  133|   363k|            return reinterpret_cast<T*>(s.m_fp);
  134|   363k|        }
  135|   363k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|   229k|        {
  104|   229k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|  35.4k|        {
  104|  35.4k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  35.6k|    {
  196|  35.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  35.6k|              cvref<T> obj = *get<T>(fn);
  187|  35.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  35.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  35.6k|              }
  190|  35.6k|              else {
  191|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  35.6k|              }
  193|  35.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  35.6k|    {
  126|  35.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  35.6k|            return static_cast<T*>(s.m_cp);
  128|  35.6k|        }
  129|  35.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  35.6k|            return static_cast<T*>(s.m_p);
  131|  35.6k|        }
  132|  35.6k|        else {
  133|  35.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  35.6k|        }
  135|  35.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|  35.6k|        {
  104|  35.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  35.6k|    {
  196|  35.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  35.6k|              cvref<T> obj = *get<T>(fn);
  187|  35.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  35.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  35.6k|              }
  190|  35.6k|              else {
  191|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  35.6k|              }
  193|  35.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  35.6k|    {
  126|  35.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  35.6k|            return static_cast<T*>(s.m_cp);
  128|  35.6k|        }
  129|  35.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  35.6k|            return static_cast<T*>(s.m_p);
  131|  35.6k|        }
  132|  35.6k|        else {
  133|  35.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  35.6k|        }
  135|  35.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|  35.6k|        {
  104|  35.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  23.6k|    {
  196|  23.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  23.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  23.6k|              cvref<T> obj = *get<T>(fn);
  187|  23.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  23.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  23.6k|              }
  190|  23.6k|              else {
  191|  23.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  23.6k|              }
  193|  23.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  23.6k|    {
  126|  23.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  23.6k|            return static_cast<T*>(s.m_cp);
  128|  23.6k|        }
  129|  23.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.6k|            return static_cast<T*>(s.m_p);
  131|  23.6k|        }
  132|  23.6k|        else {
  133|  23.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  23.6k|        }
  135|  23.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|  23.6k|        {
  104|  23.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|  1.67M|    {
  196|  1.67M|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.67M|              cvref<T> obj = *get<T>(fn);
  187|  1.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.67M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.67M|              }
  190|  1.67M|              else {
  191|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.67M|              }
  193|  1.67M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  1.67M|    {
  126|  1.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.67M|            return static_cast<T*>(s.m_cp);
  128|  1.67M|        }
  129|  1.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.67M|            return static_cast<T*>(s.m_p);
  131|  1.67M|        }
  132|  1.67M|        else {
  133|  1.67M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.67M|        }
  135|  1.67M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|  1.67M|        {
  104|  1.67M|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  23.7k|    {
  196|  23.7k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  23.7k|              cvref<T> obj = *get<T>(fn);
  187|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  23.7k|              }
  190|  23.7k|              else {
  191|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  23.7k|              }
  193|  23.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  23.7k|    {
  126|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  23.7k|            return static_cast<T*>(s.m_cp);
  128|  23.7k|        }
  129|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.7k|            return static_cast<T*>(s.m_p);
  131|  23.7k|        }
  132|  23.7k|        else {
  133|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  23.7k|        }
  135|  23.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|  23.7k|        {
  104|  23.7k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|  1.67M|    {
  196|  1.67M|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.67M|              cvref<T> obj = *get<T>(fn);
  187|  1.67M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.67M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.67M|              }
  190|  1.67M|              else {
  191|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.67M|              }
  193|  1.67M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  1.67M|    {
  126|  1.67M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.67M|            return static_cast<T*>(s.m_cp);
  128|  1.67M|        }
  129|  1.67M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.67M|            return static_cast<T*>(s.m_p);
  131|  1.67M|        }
  132|  1.67M|        else {
  133|  1.67M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.67M|        }
  135|  1.67M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|  1.67M|        {
  104|  1.67M|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|  23.7k|    {
  196|  23.7k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  23.7k|              cvref<T> obj = *get<T>(fn);
  187|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  23.7k|              }
  190|  23.7k|              else {
  191|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  23.7k|              }
  193|  23.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  23.7k|    {
  126|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  23.7k|            return static_cast<T*>(s.m_cp);
  128|  23.7k|        }
  129|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  23.7k|            return static_cast<T*>(s.m_p);
  131|  23.7k|        }
  132|  23.7k|        else {
  133|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  23.7k|        }
  135|  23.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|  23.7k|        {
  104|  23.7k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|  1.68M|    {
  196|  1.68M|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|  1.68M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.68M|              cvref<T> obj = *get<T>(fn);
  187|  1.68M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.68M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.68M|              }
  190|  1.68M|              else {
  191|  1.68M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.68M|              }
  193|  1.68M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  1.68M|    {
  126|  1.68M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.68M|            return static_cast<T*>(s.m_cp);
  128|  1.68M|        }
  129|  1.68M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.68M|            return static_cast<T*>(s.m_p);
  131|  1.68M|        }
  132|  1.68M|        else {
  133|  1.68M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.68M|        }
  135|  1.68M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|  1.68M|        {
  104|  1.68M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   395k|    {
  196|   395k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  4.34M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.34M|              cvref<T> obj = *get<T>(fn);
  187|  4.34M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.34M|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.34M|              }
  190|  4.34M|              else {
  191|  4.34M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.34M|              }
  193|  4.34M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  4.34M|    {
  126|  4.34M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.34M|            return static_cast<T*>(s.m_cp);
  128|  4.34M|        }
  129|  4.34M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  4.34M|            return static_cast<T*>(s.m_p);
  131|  4.34M|        }
  132|  4.34M|        else {
  133|  4.34M|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.34M|        }
  135|  4.34M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   395k|        {
  104|   395k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   394k|    {
  205|   394k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   394k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  30.3k|    {
  196|  30.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  30.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  30.3k|              cvref<T> obj = *get<T>(fn);
  187|  30.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  30.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  30.3k|              }
  190|  30.3k|              else {
  191|  30.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  30.3k|              }
  193|  30.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  30.3k|    {
  126|  30.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  30.3k|            return static_cast<T*>(s.m_cp);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            return static_cast<T*>(s.m_p);
  131|  30.3k|        }
  132|  30.3k|        else {
  133|  30.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  30.3k|        }
  135|  30.3k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|  60.7k|    {
  196|  60.7k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|  60.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  60.7k|              cvref<T> obj = *get<T>(fn);
  187|  60.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  60.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  60.7k|              }
  190|  60.7k|              else {
  191|  60.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  60.7k|              }
  193|  60.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|  60.7k|    {
  126|  60.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  60.7k|            return static_cast<T*>(s.m_cp);
  128|  60.7k|        }
  129|  60.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  60.7k|            return static_cast<T*>(s.m_p);
  131|  60.7k|        }
  132|  60.7k|        else {
  133|  60.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  60.7k|        }
  135|  60.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|  60.7k|        {
  104|  60.7k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   334k|    {
  196|   334k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   333k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   333k|              cvref<T> obj = *get<T>(fn);
  187|   333k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   333k|                  obj(static_cast<decltype(args)>(args)...);
  189|   333k|              }
  190|   333k|              else {
  191|   333k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   333k|              }
  193|   333k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   333k|    {
  126|   333k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   333k|            return static_cast<T*>(s.m_cp);
  128|   333k|        }
  129|   333k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   333k|            return static_cast<T*>(s.m_p);
  131|   333k|        }
  132|   333k|        else {
  133|   333k|            return reinterpret_cast<T*>(s.m_fp);
  134|   333k|        }
  135|   333k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   334k|        {
  104|   334k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  30.3k|        {
  104|  30.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  30.3k|    {
  196|  30.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  30.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  30.3k|              cvref<T> obj = *get<T>(fn);
  187|  30.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  30.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  30.3k|              }
  190|  30.3k|              else {
  191|  30.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  30.3k|              }
  193|  30.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  30.3k|    {
  126|  30.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  30.3k|            return static_cast<T*>(s.m_cp);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            return static_cast<T*>(s.m_p);
  131|  30.3k|        }
  132|  30.3k|        else {
  133|  30.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  30.3k|        }
  135|  30.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  30.3k|        {
  104|  30.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  30.3k|    {
  196|  30.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  30.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  30.3k|              cvref<T> obj = *get<T>(fn);
  187|  30.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  30.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  30.3k|              }
  190|  30.3k|              else {
  191|  30.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  30.3k|              }
  193|  30.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  30.3k|    {
  126|  30.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  30.3k|            return static_cast<T*>(s.m_cp);
  128|  30.3k|        }
  129|  30.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  30.3k|            return static_cast<T*>(s.m_p);
  131|  30.3k|        }
  132|  30.3k|        else {
  133|  30.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  30.3k|        }
  135|  30.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  30.3k|        {
  104|  30.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  20.2k|    {
  196|  20.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.2k|              cvref<T> obj = *get<T>(fn);
  187|  20.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.2k|              }
  190|  20.2k|              else {
  191|  20.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.2k|              }
  193|  20.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  20.2k|    {
  126|  20.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.2k|            return static_cast<T*>(s.m_cp);
  128|  20.2k|        }
  129|  20.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.2k|            return static_cast<T*>(s.m_p);
  131|  20.2k|        }
  132|  20.2k|        else {
  133|  20.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.2k|        }
  135|  20.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  20.2k|        {
  104|  20.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  80.9k|    {
  196|  80.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  80.9k|              cvref<T> obj = *get<T>(fn);
  187|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  80.9k|              }
  190|  80.9k|              else {
  191|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  80.9k|              }
  193|  80.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  80.9k|    {
  126|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  80.9k|            return static_cast<T*>(s.m_cp);
  128|  80.9k|        }
  129|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  80.9k|            return static_cast<T*>(s.m_p);
  131|  80.9k|        }
  132|  80.9k|        else {
  133|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  80.9k|        }
  135|  80.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  80.9k|        {
  104|  80.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  20.2k|    {
  196|  20.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.2k|              cvref<T> obj = *get<T>(fn);
  187|  20.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.2k|              }
  190|  20.2k|              else {
  191|  20.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.2k|              }
  193|  20.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  20.2k|    {
  126|  20.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.2k|            return static_cast<T*>(s.m_cp);
  128|  20.2k|        }
  129|  20.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.2k|            return static_cast<T*>(s.m_p);
  131|  20.2k|        }
  132|  20.2k|        else {
  133|  20.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.2k|        }
  135|  20.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  20.2k|        {
  104|  20.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  80.9k|    {
  196|  80.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  80.9k|              cvref<T> obj = *get<T>(fn);
  187|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  80.9k|              }
  190|  80.9k|              else {
  191|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  80.9k|              }
  193|  80.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  80.9k|    {
  126|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  80.9k|            return static_cast<T*>(s.m_cp);
  128|  80.9k|        }
  129|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  80.9k|            return static_cast<T*>(s.m_p);
  131|  80.9k|        }
  132|  80.9k|        else {
  133|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  80.9k|        }
  135|  80.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  80.9k|        {
  104|  80.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  20.2k|    {
  196|  20.2k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.2k|              cvref<T> obj = *get<T>(fn);
  187|  20.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.2k|              }
  190|  20.2k|              else {
  191|  20.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.2k|              }
  193|  20.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  20.2k|    {
  126|  20.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.2k|            return static_cast<T*>(s.m_cp);
  128|  20.2k|        }
  129|  20.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.2k|            return static_cast<T*>(s.m_p);
  131|  20.2k|        }
  132|  20.2k|        else {
  133|  20.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.2k|        }
  135|  20.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  20.2k|        {
  104|  20.2k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  80.9k|    {
  196|  80.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  80.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  80.9k|              cvref<T> obj = *get<T>(fn);
  187|  80.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  80.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  80.9k|              }
  190|  80.9k|              else {
  191|  80.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  80.9k|              }
  193|  80.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  80.9k|    {
  126|  80.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  80.9k|            return static_cast<T*>(s.m_cp);
  128|  80.9k|        }
  129|  80.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  80.9k|            return static_cast<T*>(s.m_p);
  131|  80.9k|        }
  132|  80.9k|        else {
  133|  80.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  80.9k|        }
  135|  80.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  80.9k|        {
  104|  80.9k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|  4.90M|    {
  196|  4.90M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  1.07G|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.07G|              cvref<T> obj = *get<T>(fn);
  187|  1.07G|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.07G|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.07G|              }
  190|  1.07G|              else {
  191|  1.07G|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.07G|              }
  193|  1.07G|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  1.07G|    {
  126|  1.07G|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.07G|            return static_cast<T*>(s.m_cp);
  128|  1.07G|        }
  129|  1.07G|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.07G|            return static_cast<T*>(s.m_p);
  131|  1.07G|        }
  132|  1.07G|        else {
  133|  1.07G|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.07G|        }
  135|  1.07G|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|  4.90M|        {
  104|  4.90M|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  88.3k|{
   44|  88.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  88.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  88.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  88.3k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  23.4M|{
   30|  23.4M|    return e != eof_error::good;
   31|  23.4M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   380k|{
   91|   380k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   380k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   380k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   380k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  24.2M|    {
   69|  24.2M|        return a.m_code == b.m_code;
   70|  24.2M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  55.1M|    {
   55|  55.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  55.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  55.1M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  8.48M|    return [code, msg](parse_error err) {
  115|  8.48M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  8.48M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  8.48M|{
  100|  8.48M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 8.48M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  8.48M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 154k, False: 8.32M]
  ------------------
  105|   154k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|   154k|    }
  107|       |
  108|  8.32M|    return scan_error{code, msg};
  109|  8.48M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  8.48M|{
  114|  8.48M|    return [code, msg](parse_error err) {
  115|  8.48M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  8.48M|    };
  117|  8.48M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.00M|{
  587|  1.00M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.00M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|  60.7k|{
  595|  60.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|  60.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  60.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|  60.7k|    else {
  600|  60.7k|        source.sync_all();
  601|  60.7k|    }
  602|  60.7k|    return n;
  603|  60.7k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.62M|{
  611|  2.62M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.62M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   182k|{
  619|   182k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   182k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   182k|    else {
  624|   182k|        source.sync_all();
  625|   182k|    }
  626|   182k|    return n;
  627|   182k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.00M|{
  544|  1.00M|    return vscan_internal(source, format, args);
  545|  1.00M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|  60.7k|{
  550|  60.7k|    auto n = vscan_internal(source, format, args);
  551|  60.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  60.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 60.7k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|  60.7k|    else {
  555|  60.7k|        source.sync_all();
  556|  60.7k|    }
  557|  60.7k|    return n;
  558|  60.7k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.62M|{
  564|  2.62M|    return vscan_internal(source, format, args);
  565|  2.62M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   182k|{
  570|   182k|    auto n = vscan_internal(source, format, args);
  571|   182k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   182k|    else {
  575|   182k|        source.sync_all();
  576|   182k|    }
  577|   182k|    return n;
  578|   182k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|  18.7k|{
  654|  18.7k|    return vscan_value_internal(source, arg);
  655|  18.7k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  10.1k|{
  659|  10.1k|    auto n = vscan_value_internal(source, arg);
  660|  10.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  10.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 10.1k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  10.1k|    else {
  664|  10.1k|        source.sync_all();
  665|  10.1k|    }
  666|  10.1k|    return n;
  667|  10.1k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|  36.2k|{
  673|  36.2k|    return vscan_value_internal(source, arg);
  674|  36.2k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  30.3k|{
  679|  30.3k|    auto n = vscan_value_internal(source, arg);
  680|  30.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  30.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 30.3k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  30.3k|    else {
  684|  30.3k|        source.sync_all();
  685|  30.3k|    }
  686|  30.3k|    return n;
  687|  30.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   121k|{
  476|   121k|    const auto argcount = args.size();
  477|   121k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 20.2k, False: 101k]
  |  Branch (477:60): [True: 20.2k, False: 0]
  ------------------
  478|  20.2k|        auto arg = args.get(0);
  479|  20.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  20.2k|    static_cast<    \
  |  |  247|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  20.2k|    }
  481|       |
  482|   101k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 101k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   101k|    SCN_UNLIKELY_ATTR
  490|   101k|    {
  491|   101k|        auto handler = format_handler<false, CharT>{
  492|   101k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   101k|    static_cast<    \
  |  |  247|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   101k|    static_cast<    \
  |  |  247|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   101k|        return vscan_parse_format_string(format, handler);
  494|   101k|    }
  495|   101k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.13M|{
   36|  2.13M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.07M, False: 57.8k]
  ------------------
   37|  2.07M|        return false;
   38|  2.07M|    }
   39|  57.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 57.8k, False: 0]
  |  Branch (39:39): [True: 57.8k, False: 0]
  ------------------
   40|  2.13M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  30.3k|{
   69|  30.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 30.3k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  30.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  30.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 30.3k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  30.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  30.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  30.3k|    static_cast<    \
  |  |  247|  30.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  30.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.3k|    }                                                  \
  |  |  |  |   70|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  30.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.97M|    {
  314|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  7.55M|    {
  133|  7.55M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  7.55M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.97M|    {
  264|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.97M|{
  441|  1.97M|    const auto beg = handler.get_ctx().begin();
  442|  1.97M|    detail::parse_format_string<false>(format, handler);
  443|  1.97M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 101k, False: 1.87M]
  |  |  ------------------
  ------------------
  444|   101k|        return unexpected(handler.error);
  445|   101k|    }
  446|  1.87M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.97M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  13.6M|    {
  425|  13.6M|        return ctx.get();
  426|  13.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  13.6M|    {
  268|  13.6M|        return contiguous_ctx;
  269|  13.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.84M|    {
  318|  3.84M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.84M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.84M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.97M|{
   92|  1.97M|    auto arg = ctx.arg(id);
   93|  1.97M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.97M|    return arg;
   97|  1.97M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  7.55M|    {
  208|  7.55M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  7.55M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  7.55M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.55M, False: 0]
  |  |  ------------------
  ------------------
  218|  7.55M|            visited_args_lower64 |= (1ull << id);
  219|  7.55M|            return;
  220|  7.55M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  7.55M|    {
  193|  7.55M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  7.55M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.55M, False: 0]
  |  |  ------------------
  ------------------
  199|  7.55M|            return (visited_args_lower64 >> id) & 1ull;
  200|  7.55M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  7.55M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   810k|    {
  177|   810k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 810k, False: 0]
  |  |  ------------------
  ------------------
  178|   810k|            error = err;
  179|   810k|        }
  180|   810k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.97M|    {
  347|  1.97M|        return parse_ctx.next_arg_id();
  348|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.97M|    {
  388|  1.97M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.97M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.97M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.97M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.97M|        auto specs = detail::format_specs{};
  401|  1.97M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.97M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.97M|            arg.type()};
  404|       |
  405|  1.97M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.97M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.97M]
  |  Branch (406:29): [True: 0, False: 1.97M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.97M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.97M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.97M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.97M|        on_visit_scan_arg(
  417|  1.97M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.97M|                                           get_ctx().locale()},
  419|  1.97M|            arg);
  420|  1.97M|        return parse_ctx.begin();
  421|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.97M|    {
  112|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.97M|    {
  359|  1.97M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.97M]
  |  Branch (359:23): [True: 0, False: 1.97M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.97M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.97M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 101k, False: 1.87M]
  |  |  ------------------
  ------------------
  366|   101k|            on_error(r.error());
  367|   101k|        }
  368|  1.87M|        else {
  369|  1.87M|            get_ctx().advance_to(*r);
  370|  1.87M|        }
  371|  1.97M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  7.55M|    {
  140|  7.55M|        {
  141|  7.55M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 7.55M]
  ------------------
  142|  7.55M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 7.55M]
  ------------------
  143|  7.55M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  7.55M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  7.55M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 7.55M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  7.55M|        }
  150|       |
  151|  7.55M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 7.55M, False: 0]
  ------------------
  152|  7.55M|            return;
  153|  7.55M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  7.55M|    {
  188|  7.55M|        return error;
  189|  7.55M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  22.6M|    {
  184|  22.6M|        return static_cast<bool>(error);
  185|  22.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   101k|    {
  314|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   101k|    {
  241|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   101k|{
  441|   101k|    const auto beg = handler.get_ctx().begin();
  442|   101k|    detail::parse_format_string<false>(format, handler);
  443|   101k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 101k, False: 0]
  |  |  ------------------
  ------------------
  444|   101k|        return unexpected(handler.error);
  445|   101k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   101k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   506k|    {
  425|   506k|        return ctx.get();
  426|   506k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   506k|    {
  245|   506k|        return ctx;
  246|   506k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   101k|    {
  318|   101k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 101k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   101k|{
   92|   101k|    auto arg = ctx.arg(id);
   93|   101k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   101k|    return arg;
   97|   101k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   101k|    {
  347|   101k|        return parse_ctx.next_arg_id();
  348|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   101k|    {
  388|   101k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   101k|        set_arg_as_visited(arg_id);
  390|       |
  391|   101k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 101k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   101k|        auto specs = detail::format_specs{};
  401|   101k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   101k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   101k|            arg.type()};
  404|       |
  405|   101k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   101k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 101k]
  |  Branch (406:29): [True: 0, False: 101k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   101k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   101k|        parse_ctx.advance_to(begin);
  415|       |
  416|   101k|        on_visit_scan_arg(
  417|   101k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   101k|                                           get_ctx().locale()},
  419|   101k|            arg);
  420|   101k|        return parse_ctx.begin();
  421|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   101k|    {
  112|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   101k|    {
  359|   101k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 101k]
  |  Branch (359:23): [True: 0, False: 101k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   101k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   101k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 101k, False: 0]
  |  |  ------------------
  ------------------
  366|   101k|            on_error(r.error());
  367|   101k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   101k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.00M|{
  456|  2.00M|    const auto argcount = args.size();
  457|  2.00M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 37.5k, False: 1.97M]
  |  Branch (457:60): [True: 37.5k, False: 0]
  ------------------
  458|  37.5k|        auto arg = args.get(0);
  459|  37.5k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  37.5k|    static_cast<    \
  |  |  247|  37.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  37.5k|    }
  461|       |
  462|  1.97M|    auto handler = format_handler<true, CharT>{
  463|  1.97M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.97M|                                       source.data() + source.size()},
  465|  1.97M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.97M|    static_cast<    \
  |  |  247|  1.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.97M|    static_cast<    \
  |  |  247|  1.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.97M|    return vscan_parse_format_string(format, handler);
  467|  2.00M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  56.3k|{
   49|  56.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.3k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  56.3k|    auto reader =
   55|  56.3k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  56.3k|            ranges::subrange<const CharT*>{source.data(),
   57|  56.3k|                                           source.data() + source.size()},
   58|  56.3k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  56.3k|    static_cast<    \
  |  |  247|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  56.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  56.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30.3k, False: 25.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  30.3k|    }                                                  \
  |  |  |  |   70|  56.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  25.9k|    return ranges::distance(source.data(), it);
   61|  56.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  5.24M|{
  456|  5.24M|    const auto argcount = args.size();
  457|  5.24M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 72.5k, False: 5.17M]
  |  Branch (457:60): [True: 72.5k, False: 0]
  ------------------
  458|  72.5k|        auto arg = args.get(0);
  459|  72.5k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  72.5k|    static_cast<    \
  |  |  247|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  72.5k|    }
  461|       |
  462|  5.17M|    auto handler = format_handler<true, CharT>{
  463|  5.17M|        ranges::subrange<const CharT*>{source.data(),
  464|  5.17M|                                       source.data() + source.size()},
  465|  5.17M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  5.17M|    static_cast<    \
  |  |  247|  5.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  5.17M|    static_cast<    \
  |  |  247|  5.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  5.17M|    return vscan_parse_format_string(format, handler);
  467|  5.24M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  5.61M|{
   36|  5.61M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 5.47M, False: 133k]
  ------------------
   37|  5.47M|        return false;
   38|  5.47M|    }
   39|   133k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 133k, False: 0]
  |  Branch (39:39): [True: 133k, False: 0]
  ------------------
   40|  5.61M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   108k|{
   49|   108k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 108k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   108k|    auto reader =
   55|   108k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   108k|            ranges::subrange<const CharT*>{source.data(),
   57|   108k|                                           source.data() + source.size()},
   58|   108k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   108k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 91.1k, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  91.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  91.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  91.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  91.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  91.1k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  17.6k|    return ranges::distance(source.data(), it);
   61|   108k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  5.17M|    {
  314|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  5.17M|    {
  264|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  5.17M|{
  441|  5.17M|    const auto beg = handler.get_ctx().begin();
  442|  5.17M|    detail::parse_format_string<false>(format, handler);
  443|  5.17M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 303k, False: 4.86M]
  |  |  ------------------
  ------------------
  444|   303k|        return unexpected(handler.error);
  445|   303k|    }
  446|  4.86M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  5.17M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  35.6M|    {
  425|  35.6M|        return ctx.get();
  426|  35.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  35.6M|    {
  268|  35.6M|        return contiguous_ctx;
  269|  35.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  10.0M|    {
  318|  10.0M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 10.0M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  10.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  5.17M|{
   92|  5.17M|    auto arg = ctx.arg(id);
   93|  5.17M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  5.17M|    return arg;
   97|  5.17M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  5.17M|    {
  347|  5.17M|        return parse_ctx.next_arg_id();
  348|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  5.17M|    {
  388|  5.17M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  5.17M|        set_arg_as_visited(arg_id);
  390|       |
  391|  5.17M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 5.17M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  5.17M|        auto specs = detail::format_specs{};
  401|  5.17M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  5.17M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  5.17M|            arg.type()};
  404|       |
  405|  5.17M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  5.17M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 5.17M]
  |  Branch (406:29): [True: 0, False: 5.17M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  5.17M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.17M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  5.17M|        parse_ctx.advance_to(begin);
  415|       |
  416|  5.17M|        on_visit_scan_arg(
  417|  5.17M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  5.17M|                                           get_ctx().locale()},
  419|  5.17M|            arg);
  420|  5.17M|        return parse_ctx.begin();
  421|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  5.17M|    {
  112|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  5.17M|    {
  359|  5.17M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 5.17M]
  |  Branch (359:23): [True: 0, False: 5.17M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  5.17M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  5.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  5.17M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  5.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 303k, False: 4.86M]
  |  |  ------------------
  ------------------
  366|   303k|            on_error(r.error());
  367|   303k|        }
  368|  4.86M|        else {
  369|  4.86M|            get_ctx().advance_to(*r);
  370|  4.86M|        }
  371|  5.17M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   364k|{
  476|   364k|    const auto argcount = args.size();
  477|   364k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 60.7k, False: 303k]
  |  Branch (477:60): [True: 60.7k, False: 0]
  ------------------
  478|  60.7k|        auto arg = args.get(0);
  479|  60.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  60.7k|    static_cast<    \
  |  |  247|  60.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  60.7k|    }
  481|       |
  482|   303k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 303k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   303k|    SCN_UNLIKELY_ATTR
  490|   303k|    {
  491|   303k|        auto handler = format_handler<false, CharT>{
  492|   303k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   303k|        return vscan_parse_format_string(format, handler);
  494|   303k|    }
  495|   303k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  91.1k|{
   69|  91.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  91.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  91.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  91.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  91.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  91.1k|    static_cast<    \
  |  |  247|  91.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  91.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  91.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 91.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  91.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  91.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  91.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  91.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  91.1k|    }                                                  \
  |  |  |  |   70|  91.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  91.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   303k|    {
  314|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   303k|    {
  241|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   303k|{
  441|   303k|    const auto beg = handler.get_ctx().begin();
  442|   303k|    detail::parse_format_string<false>(format, handler);
  443|   303k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 303k, False: 0]
  |  |  ------------------
  ------------------
  444|   303k|        return unexpected(handler.error);
  445|   303k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   303k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.51M|    {
  425|  1.51M|        return ctx.get();
  426|  1.51M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.51M|    {
  245|  1.51M|        return ctx;
  246|  1.51M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   303k|    {
  318|   303k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 303k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   303k|{
   92|   303k|    auto arg = ctx.arg(id);
   93|   303k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   303k|    return arg;
   97|   303k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   303k|    {
  347|   303k|        return parse_ctx.next_arg_id();
  348|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   303k|    {
  388|   303k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   303k|        set_arg_as_visited(arg_id);
  390|       |
  391|   303k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 303k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   303k|        auto specs = detail::format_specs{};
  401|   303k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   303k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   303k|            arg.type()};
  404|       |
  405|   303k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   303k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 303k]
  |  Branch (406:29): [True: 0, False: 303k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   303k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   303k|        parse_ctx.advance_to(begin);
  415|       |
  416|   303k|        on_visit_scan_arg(
  417|   303k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   303k|                                           get_ctx().locale()},
  419|   303k|            arg);
  420|   303k|        return parse_ctx.begin();
  421|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   303k|    {
  112|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   303k|    {
  359|   303k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 303k]
  |  Branch (359:23): [True: 0, False: 303k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   303k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   303k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 303k, False: 0]
  |  |  ------------------
  ------------------
  366|   303k|            on_error(r.error());
  367|   303k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   303k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  18.7k|{
  502|  18.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  18.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  18.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  10.1k|{
  502|  10.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  10.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  36.2k|{
  502|  36.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  36.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  30.3k|{
  502|  30.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  30.3k|}

LLVMFuzzerTestOneInput:
   54|  3.37k|{
   55|  3.37k|    scn::fuzz::run({data, size});
   56|  3.37k|    return 0;
   57|  3.37k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  3.37k|{
   33|  3.37k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.37k]
  |  Branch (33:42): [True: 0, False: 3.37k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.37k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   38|  3.37k|        make_input_views(data);
   39|       |
   40|  3.37k|    auto f =
   41|  3.37k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   42|  3.37k|    do_basic_run(sv, f);
   43|       |
   44|  3.37k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   45|  3.37k|                                          L"{:g}", L"{:L}");
   46|  3.37k|    do_basic_run(wsv_direct, wf);
   47|  3.37k|    do_basic_run(wsv_reinterpret, wf);
   48|  3.37k|    do_basic_run(wsv_transcode, wf);
   49|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.37k|{
   25|  3.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.37k|{
   25|  3.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  10.1k|{
   25|  10.1k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  10.1k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  10.1k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  10.1k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  10.1k|{
   25|  10.1k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  10.1k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  10.1k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  10.1k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  3.37k|{
   54|  3.37k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  3.37k|    std::copy(data.begin(), data.end(),
   59|  3.37k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  3.37k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  3.37k|    wstring_buffer_direct.resize(data.size());
   64|  3.37k|    std::copy(data.begin(), data.end(),
   65|  3.37k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  3.37k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  3.37k|    const auto wsv_reinterpret_size =
   70|  3.37k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 78, False: 3.29k]
  ------------------
   71|  3.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  3.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  3.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  3.37k|    std::wstring_view wsv_transcoded;
   77|  3.37k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 1.78k, False: 1.58k]
  ------------------
   78|  1.78k|        wsv_transcoded = {wstring_buffer_direct};
   79|  1.78k|    }
   80|  1.58k|    else {
   81|  1.58k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  1.58k|        else {
   90|  1.58k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  1.58k|            wstring_buffer_transcoded_wide.resize(size);
   92|  1.58k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  1.58k|                sv.data(), sv.size(),
   94|  1.58k|                reinterpret_cast<char32_t*>(
   95|  1.58k|                    wstring_buffer_transcoded_wide.data()));
   96|  1.58k|        }
   97|  1.58k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  1.58k|    }
   99|       |
  100|  3.37k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  3.37k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  3.37k|{
  151|  3.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  3.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  3.37k|    buf.resize(sizeof...(Args));
  154|  3.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  3.37k|    return {buf.data(), buf.size()};
  156|  3.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  3.37k|{
  137|  3.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  3.37k|        return format_string_view_buffer;
  139|  3.37k|    }
  140|  3.37k|    else {
  141|  3.37k|        return wformat_string_view_buffer;
  142|  3.37k|    }
  143|  3.37k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  3.37k|{
  211|  3.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  3.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  3.37k|                                   format_strings);
  214|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|   325k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   325k|            auto result = scn::scan<T>(
  167|   325k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   325k|                scn::runtime_format(f));
  169|   325k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 305k]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|   305k|            it = result->begin();
  173|   305k|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|   325k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   325k|            auto result = scn::scan<T>(
  181|   325k|                global_locale,
  182|   325k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   325k|                scn::runtime_format(f));
  184|   325k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 305k]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|   305k|            it = result->begin();
  188|   305k|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  6.18k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.18k|            auto result = scn::scan_value<T>(
  196|  6.18k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.18k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 2.80k]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|  2.80k|            it = result->begin();
  201|  2.80k|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|   334k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   334k|            auto result = scn::scan<T>(
  167|   334k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   334k|                scn::runtime_format(f));
  169|   334k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 314k]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|   314k|            it = result->begin();
  173|   314k|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|   334k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   334k|            auto result = scn::scan<T>(
  181|   334k|                global_locale,
  182|   334k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   334k|                scn::runtime_format(f));
  184|   334k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 314k]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|   314k|            it = result->begin();
  188|   314k|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  6.26k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.26k|            auto result = scn::scan_value<T>(
  196|  6.26k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.26k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 2.88k]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|  2.88k|            it = result->begin();
  201|  2.88k|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|   344k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   344k|            auto result = scn::scan<T>(
  167|   344k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   344k|                scn::runtime_format(f));
  169|   344k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 324k]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|   324k|            it = result->begin();
  173|   324k|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|   344k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   344k|            auto result = scn::scan<T>(
  181|   344k|                global_locale,
  182|   344k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   344k|                scn::runtime_format(f));
  184|   344k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 324k]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|   324k|            it = result->begin();
  188|   324k|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  6.33k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.33k|            auto result = scn::scan_value<T>(
  196|  6.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.33k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 2.95k]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|  2.95k|            it = result->begin();
  201|  2.95k|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|  20.2k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  20.2k|            auto result = scn::scan<T>(
  167|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  20.2k|                scn::runtime_format(f));
  169|  20.2k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 0]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|  20.2k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  20.2k|            auto result = scn::scan<T>(
  181|  20.2k|                global_locale,
  182|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  20.2k|                scn::runtime_format(f));
  184|  20.2k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 0]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  3.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.37k|            auto result = scn::scan_value<T>(
  196|  3.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 0]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|  20.2k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  20.2k|            auto result = scn::scan<T>(
  167|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  20.2k|                scn::runtime_format(f));
  169|  20.2k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 0]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|  20.2k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  20.2k|            auto result = scn::scan<T>(
  181|  20.2k|                global_locale,
  182|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  20.2k|                scn::runtime_format(f));
  184|  20.2k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 0]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  3.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.37k|            auto result = scn::scan_value<T>(
  196|  3.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 0]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  3.37k|{
  162|       |    // Regular scan
  163|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 20.2k, False: 3.37k]
  ------------------
  164|  20.2k|        auto it = scn::ranges::begin(source);
  165|  20.2k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  20.2k|            auto result = scn::scan<T>(
  167|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  20.2k|                scn::runtime_format(f));
  169|  20.2k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 20.2k, False: 0]
  ------------------
  170|  20.2k|                break;
  171|  20.2k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  20.2k|    }
  175|       |
  176|       |    // scan localized
  177|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 20.2k, False: 3.37k]
  ------------------
  178|  20.2k|        auto it = scn::ranges::begin(source);
  179|  20.2k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  20.2k|            auto result = scn::scan<T>(
  181|  20.2k|                global_locale,
  182|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  20.2k|                scn::runtime_format(f));
  184|  20.2k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 20.2k, False: 0]
  ------------------
  185|  20.2k|                break;
  186|  20.2k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  20.2k|    }
  190|       |
  191|       |    // scan_value
  192|  3.37k|    {
  193|  3.37k|        auto it = scn::ranges::begin(source);
  194|  3.37k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  3.37k|            auto result = scn::scan_value<T>(
  196|  3.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  3.37k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 3.37k, False: 0]
  ------------------
  198|  3.37k|                break;
  199|  3.37k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  3.37k|    }
  203|  3.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  3.37k|{
  120|  3.37k|    using char_type = ranges::range_value_t<Source>;
  121|  3.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  3.37k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  3.37k|              std::back_inserter(deque));
  124|  3.37k|    return deque;
  125|  3.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  3.37k|{
  109|  3.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  3.37k|        return noncontiguous_buffer;
  111|  3.37k|    }
  112|  3.37k|    else {
  113|  3.37k|        return wnoncontiguous_buffer;
  114|  3.37k|    }
  115|  3.37k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  3.37k|{
  151|  3.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  3.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  3.37k|    buf.resize(sizeof...(Args));
  154|  3.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  3.37k|    return {buf.data(), buf.size()};
  156|  3.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  3.37k|{
  137|  3.37k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  3.37k|        return format_string_view_buffer;
  139|  3.37k|    }
  140|  3.37k|    else {
  141|  3.37k|        return wformat_string_view_buffer;
  142|  3.37k|    }
  143|  3.37k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  10.1k|{
  211|  10.1k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  10.1k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  10.1k|                                   format_strings);
  214|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|   871k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   871k|            auto result = scn::scan<T>(
  167|   871k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   871k|                scn::runtime_format(f));
  169|   871k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 810k]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|   810k|            it = result->begin();
  173|   810k|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|   871k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   871k|            auto result = scn::scan<T>(
  181|   871k|                global_locale,
  182|   871k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   871k|                scn::runtime_format(f));
  184|   871k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 810k]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|   810k|            it = result->begin();
  188|   810k|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  12.0k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  12.0k|            auto result = scn::scan_value<T>(
  196|  12.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  12.0k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 1.89k]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|  1.89k|            it = result->begin();
  201|  1.89k|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|   874k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   874k|            auto result = scn::scan<T>(
  167|   874k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   874k|                scn::runtime_format(f));
  169|   874k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 813k]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|   813k|            it = result->begin();
  173|   813k|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|   874k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   874k|            auto result = scn::scan<T>(
  181|   874k|                global_locale,
  182|   874k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   874k|                scn::runtime_format(f));
  184|   874k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 813k]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|   813k|            it = result->begin();
  188|   813k|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  12.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  12.1k|            auto result = scn::scan_value<T>(
  196|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  12.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 1.97k]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|  1.97k|            it = result->begin();
  201|  1.97k|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|   877k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   877k|            auto result = scn::scan<T>(
  167|   877k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   877k|                scn::runtime_format(f));
  169|   877k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 816k]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|   816k|            it = result->begin();
  173|   816k|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|   877k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   877k|            auto result = scn::scan<T>(
  181|   877k|                global_locale,
  182|   877k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   877k|                scn::runtime_format(f));
  184|   877k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 816k]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|   816k|            it = result->begin();
  188|   816k|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  12.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  12.1k|            auto result = scn::scan_value<T>(
  196|  12.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  12.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 2.00k]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|  2.00k|            it = result->begin();
  201|  2.00k|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|  60.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  60.7k|            auto result = scn::scan<T>(
  167|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  60.7k|                scn::runtime_format(f));
  169|  60.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 0]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|  60.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  60.7k|            auto result = scn::scan<T>(
  181|  60.7k|                global_locale,
  182|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  60.7k|                scn::runtime_format(f));
  184|  60.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 0]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  10.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  10.1k|            auto result = scn::scan_value<T>(
  196|  10.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  10.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 0]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|  60.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  60.7k|            auto result = scn::scan<T>(
  167|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  60.7k|                scn::runtime_format(f));
  169|  60.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 0]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|  60.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  60.7k|            auto result = scn::scan<T>(
  181|  60.7k|                global_locale,
  182|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  60.7k|                scn::runtime_format(f));
  184|  60.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 0]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  10.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  10.1k|            auto result = scn::scan_value<T>(
  196|  10.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  10.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 0]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  10.1k|{
  162|       |    // Regular scan
  163|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 60.7k, False: 10.1k]
  ------------------
  164|  60.7k|        auto it = scn::ranges::begin(source);
  165|  60.7k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  60.7k|            auto result = scn::scan<T>(
  167|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  60.7k|                scn::runtime_format(f));
  169|  60.7k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 60.7k, False: 0]
  ------------------
  170|  60.7k|                break;
  171|  60.7k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  60.7k|    }
  175|       |
  176|       |    // scan localized
  177|  60.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 60.7k, False: 10.1k]
  ------------------
  178|  60.7k|        auto it = scn::ranges::begin(source);
  179|  60.7k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  60.7k|            auto result = scn::scan<T>(
  181|  60.7k|                global_locale,
  182|  60.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  60.7k|                scn::runtime_format(f));
  184|  60.7k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 60.7k, False: 0]
  ------------------
  185|  60.7k|                break;
  186|  60.7k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  60.7k|    }
  190|       |
  191|       |    // scan_value
  192|  10.1k|    {
  193|  10.1k|        auto it = scn::ranges::begin(source);
  194|  10.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  10.1k|            auto result = scn::scan_value<T>(
  196|  10.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  10.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 10.1k, False: 0]
  ------------------
  198|  10.1k|                break;
  199|  10.1k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  10.1k|    }
  203|  10.1k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  10.1k|{
  120|  10.1k|    using char_type = ranges::range_value_t<Source>;
  121|  10.1k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  10.1k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  10.1k|              std::back_inserter(deque));
  124|  10.1k|    return deque;
  125|  10.1k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  10.1k|{
  109|  10.1k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  10.1k|        return noncontiguous_buffer;
  111|  10.1k|    }
  112|  10.1k|    else {
  113|  10.1k|        return wnoncontiguous_buffer;
  114|  10.1k|    }
  115|  10.1k|}

