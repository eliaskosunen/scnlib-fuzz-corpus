_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.84M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.84M|  chars_format const fmt = options.format;
  277|  2.84M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.84M|  parsed_number_string_t<UC> answer;
  280|  2.84M|  answer.valid = false;
  281|  2.84M|  answer.too_many_digits = false;
  282|  2.84M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.84M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.84M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.84M|  UC const * const start_digits = p;
  303|       |
  304|  2.84M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  16.5M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 15.1M, False: 1.39M]
  |  Branch (306:25): [True: 13.7M, False: 1.44M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  13.7M|    i = 10 * i +
  310|  13.7M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  13.7M|    ++p;
  312|  13.7M|  }
  313|  2.84M|  UC const * const end_of_integer_part = p;
  314|  2.84M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.84M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.84M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.84M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.84M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.84M|  int64_t exponent = 0;
  324|  2.84M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.44M, False: 1.39M]
  |  Branch (324:49): [True: 521k, False: 927k]
  ------------------
  325|  2.84M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 521k, False: 2.32M]
  ------------------
  326|   521k|    ++p;
  327|   521k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   521k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.10M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.78M, False: 314k]
  |  Branch (332:27): [True: 1.58M, False: 206k]
  ------------------
  333|  1.58M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.58M|      ++p;
  335|  1.58M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.58M|    }
  337|   521k|    exponent = before - p;
  338|   521k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   521k|    digit_count -= exponent;
  340|   521k|  }
  341|  2.84M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.84M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.84M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.84M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.84M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.84M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.84M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.47M, False: 364k]
  ------------------
  352|  2.84M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 1.13M, False: 1.34M]
  ------------------
  353|  2.84M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 279k, False: 854k]
  |  Branch (353:29): [True: 102k, False: 751k]
  ------------------
  354|  2.84M|       ||
  355|  2.84M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  2.45M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.45M]
  ------------------
  356|  2.45M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.45M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   382k|    UC const * location_of_e = p;
  359|   382k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 279k, False: 102k]
  |  Branch (359:28): [True: 102k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   382k|      ++p;
  361|   382k|    }
  362|   382k|    bool neg_exp = false;
  363|   382k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 382k, False: 225]
  |  Branch (363:24): [True: 26.2k, False: 355k]
  ------------------
  364|  26.2k|      neg_exp = true;
  365|  26.2k|      ++p;
  366|   356k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 355k, False: 225]
  |  Branch (366:31): [True: 64.5k, False: 291k]
  ------------------
  367|  64.5k|      ++p;
  368|  64.5k|    }
  369|   382k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 265, False: 382k]
  |  Branch (369:24): [True: 1.19k, False: 380k]
  ------------------
  370|  1.45k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.45k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.45k|      p = location_of_e;
  376|   380k|    } else {
  377|  1.23M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 977k, False: 261k]
  |  Branch (377:29): [True: 858k, False: 119k]
  ------------------
  378|   858k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   858k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 804k, False: 53.1k]
  ------------------
  380|   804k|          exp_number = 10 * exp_number + digit;
  381|   804k|        }
  382|   858k|        ++p;
  383|   858k|      }
  384|   380k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 26.0k, False: 354k]
  ------------------
  385|   380k|      exponent += exp_number;
  386|   380k|    }
  387|  2.45M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.45M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 2.09M, False: 364k]
  |  Branch (389:44): [True: 0, False: 2.09M]
  ------------------
  390|  2.45M|  }
  391|  2.84M|  answer.lastmatch = p;
  392|  2.84M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.84M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 474k, False: 2.36M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   474k|    UC const * start = start_digits;
  405|  3.72M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.70M, False: 15.5k]
  |  Branch (405:32): [True: 3.17M, False: 527k]
  |  Branch (405:53): [True: 68.7k, False: 458k]
  ------------------
  406|  3.24M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 3.17M, False: 68.7k]
  ------------------
  407|  3.24M|      start++;
  408|  3.24M|    }
  409|       |
  410|   474k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 416k, False: 57.7k]
  ------------------
  411|   416k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   416k|      i = 0;
  416|   416k|      p = answer.integer.ptr;
  417|   416k|      UC const* int_end = p + answer.integer.len();
  418|   416k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  5.32M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 5.21M, False: 118k]
  |  Branch (419:54): [True: 4.91M, False: 297k]
  ------------------
  420|  4.91M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.91M|        ++p;
  422|  4.91M|      }
  423|   416k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 118k, False: 297k]
  ------------------
  424|   118k|        exponent = end_of_integer_part - p + exp_number;
  425|   118k|      }
  426|   297k|      else { // We have a value with a fractional component.
  427|   297k|        p = answer.fraction.ptr;
  428|   297k|        UC const* frac_end = p + answer.fraction.len();
  429|  5.30M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 5.00M, False: 297k]
  |  Branch (429:56): [True: 5.00M, False: 0]
  ------------------
  430|  5.00M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  5.00M|          ++p;
  432|  5.00M|        }
  433|   297k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   297k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   416k|    }
  437|   474k|  }
  438|  2.84M|  answer.exponent = exponent;
  439|  2.84M|  answer.mantissa = i;
  440|  2.84M|  return answer;
  441|  2.84M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  18.3M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  18.3M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 431k, False: 17.8M]
  |  Branch (36:27): [True: 1.34M, False: 16.5M]
  ------------------
   37|  18.3M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   521k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  2.04M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.70M, False: 344k]
  |  Branch (249:43): [True: 1.52M, False: 177k]
  ------------------
  250|  1.52M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.52M|    p += 8;
  252|  1.52M|  }
  253|   521k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.70M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.70M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.70M|     0x8080808080808080));
  172|  1.70M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  3.83M|uint64_t read8_to_u64(const UC *chars) {
   54|  3.83M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  3.83M|  uint64_t val;
   63|  3.83M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  3.83M|  return val;
   69|  3.83M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  2.12M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  2.12M|  const uint64_t mask = 0x000000FF000000FF;
  148|  2.12M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  2.12M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  2.12M|  val -= 0x3030303030303030;
  151|  2.12M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  2.12M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  2.12M|  return uint32_t(val);
  154|  2.12M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   599k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   599k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   599k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   599k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   599k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   199k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   199k|  chars_format const fmt = options.format;
  277|   199k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   199k|  parsed_number_string_t<UC> answer;
  280|   199k|  answer.valid = false;
  281|   199k|  answer.too_many_digits = false;
  282|   199k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   199k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 199k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   199k|  UC const * const start_digits = p;
  303|       |
  304|   199k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   413k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 273k, False: 139k]
  |  Branch (306:25): [True: 213k, False: 60.0k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   213k|    i = 10 * i +
  310|   213k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   213k|    ++p;
  312|   213k|  }
  313|   199k|  UC const * const end_of_integer_part = p;
  314|   199k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   199k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   199k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   199k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 199k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   199k|  int64_t exponent = 0;
  324|   199k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 60.0k, False: 139k]
  |  Branch (324:49): [True: 468, False: 59.5k]
  ------------------
  325|   199k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 468, False: 199k]
  ------------------
  326|    468|    ++p;
  327|    468|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    468|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|    504|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 146, False: 358]
  |  Branch (332:27): [True: 36, False: 110]
  ------------------
  333|     36|      uint8_t digit = uint8_t(*p - UC('0'));
  334|     36|      ++p;
  335|     36|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|     36|    }
  337|    468|    exponent = before - p;
  338|    468|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    468|    digit_count -= exponent;
  340|    468|  }
  341|   199k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   199k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 199k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   199k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 199k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   199k|  int64_t exp_number = 0;            // explicit exponential part
  351|   199k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 155k, False: 44.1k]
  ------------------
  352|   199k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 59.6k, False: 96.0k]
  ------------------
  353|   199k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 148, False: 59.5k]
  |  Branch (353:29): [True: 7.21k, False: 52.3k]
  ------------------
  354|   199k|       ||
  355|   199k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   192k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 192k]
  ------------------
  356|   192k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   192k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  7.36k|    UC const * location_of_e = p;
  359|  7.36k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 148, False: 7.21k]
  |  Branch (359:28): [True: 7.21k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  7.36k|      ++p;
  361|  7.36k|    }
  362|  7.36k|    bool neg_exp = false;
  363|  7.36k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 7.34k, False: 20]
  |  Branch (363:24): [True: 1.11k, False: 6.23k]
  ------------------
  364|  1.11k|      neg_exp = true;
  365|  1.11k|      ++p;
  366|  6.25k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 6.23k, False: 20]
  |  Branch (366:31): [True: 262, False: 5.96k]
  ------------------
  367|    262|      ++p;
  368|    262|    }
  369|  7.36k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 20, False: 7.34k]
  |  Branch (369:24): [True: 655, False: 6.68k]
  ------------------
  370|    675|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 675]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    675|      p = location_of_e;
  376|  6.68k|    } else {
  377|  22.1k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 17.3k, False: 4.76k]
  |  Branch (377:29): [True: 15.4k, False: 1.92k]
  ------------------
  378|  15.4k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  15.4k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 15.4k, False: 0]
  ------------------
  380|  15.4k|          exp_number = 10 * exp_number + digit;
  381|  15.4k|        }
  382|  15.4k|        ++p;
  383|  15.4k|      }
  384|  6.68k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 1.09k, False: 5.59k]
  ------------------
  385|  6.68k|      exponent += exp_number;
  386|  6.68k|    }
  387|   192k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   192k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 148k, False: 44.1k]
  |  Branch (389:44): [True: 0, False: 148k]
  ------------------
  390|   192k|  }
  391|   199k|  answer.lastmatch = p;
  392|   199k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   199k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 199k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|   199k|  answer.exponent = exponent;
  439|   199k|  answer.mantissa = i;
  440|   199k|  return answer;
  441|   199k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   298k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   298k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 61.4k, False: 237k]
  |  Branch (36:27): [True: 1.25k, False: 235k]
  ------------------
   37|   298k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    468|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    468|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    468|    return;
  240|    468|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|   143k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   309k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   486k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   486k|    return small_mul(vec, y);
  565|   486k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   736k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   736k|  limb carry = 0;
  284|  3.15M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.42M, False: 736k]
  ------------------
  285|  2.42M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.42M|  }
  287|   736k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 450k, False: 286k]
  ------------------
  288|   450k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   450k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
  289|   450k|  }
  290|   736k|  return true;
  291|   736k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  5.90M|  constexpr size_t len() const noexcept {
   77|  5.90M|    return length;
   78|  5.90M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.42M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.42M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.42M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.42M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.42M|  carry = limb(z >> limb_bits);
  235|  2.42M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.42M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  6.56M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  6.56M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  6.56M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  6.56M|    return data[index];
   60|  6.56M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   631k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   631k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 631k, False: 0]
  ------------------
   93|   631k|      push_unchecked(value);
   94|   631k|      return true;
   95|   631k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   631k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   746k|  constexpr size_t capacity() const noexcept {
   83|   746k|    return size;
   84|   746k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   758k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   758k|    data[length] = value;
   88|   758k|    length++;
   89|   758k|  }
_ZN10fast_float6bigint3addEm:
  567|   486k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   486k|    return small_add(vec, y);
  569|   486k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   486k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   486k|  return small_add_from(vec, y, 0);
  277|   486k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   486k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   486k|  size_t index = start;
  259|   486k|  limb carry = y;
  260|   486k|  bool overflow;
  261|   732k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 388k, False: 343k]
  |  Branch (261:24): [True: 245k, False: 143k]
  ------------------
  262|   245k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   245k|    carry = limb(overflow);
  264|   245k|    index += 1;
  265|   245k|  }
  266|   486k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 143k, False: 343k]
  ------------------
  267|   143k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   143k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
  268|   143k|  }
  269|   486k|  return true;
  270|   486k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   674k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   674k|  limb z;
  211|       |// gcc and clang
  212|   674k|#if defined(__has_builtin)
  213|   674k|  #if __has_builtin(__builtin_add_overflow)
  214|   674k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   674k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   674k|      return z;
  217|   674k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   674k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  16.3k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  16.3k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  16.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
  611|  16.3k|    return pow2(exp);
  612|  16.3k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|   143k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|   143k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|   143k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   153k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 9.82k, False: 143k]
  ------------------
  582|  9.82k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  9.82k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
  583|  9.82k|      exp -= large_step;
  584|  9.82k|    }
  585|   143k|#ifdef FASTFLOAT_64BIT_LIMB
  586|   143k|    uint32_t small_step = 27;
  587|   143k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   224k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 80.8k, False: 143k]
  ------------------
  593|  80.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  80.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
  594|  80.8k|      exp -= small_step;
  595|  80.8k|    }
  596|   143k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 120k, False: 22.9k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|   120k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|   120k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
  601|   120k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|   120k|      );
  603|   120k|    }
  604|       |
  605|   143k|    return true;
  606|   143k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  9.82k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  9.82k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 9.82k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  9.82k|  } else {
  368|  9.82k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  9.82k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
  369|  9.82k|  }
  370|  9.82k|  return true;
  371|  9.82k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  9.82k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  9.82k|  limb_span xs = limb_span(x.data, x.len());
  337|  9.82k|  stackvec<size> z(xs);
  338|  9.82k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  9.82k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 9.82k, False: 0]
  ------------------
  341|  9.82k|    limb y0 = y[0];
  342|  9.82k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  9.82k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
  343|  49.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 39.2k, False: 9.82k]
  ------------------
  344|  39.2k|      limb yi = y[index];
  345|  39.2k|      stackvec<size> zi;
  346|  39.2k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 39.2k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  39.2k|        zi.set_len(0);
  349|  39.2k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  39.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
  350|  39.2k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  39.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
  351|  39.2k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  39.2k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  39.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
  353|  39.2k|      }
  354|  39.2k|    }
  355|  9.82k|  }
  356|       |
  357|  9.82k|  x.normalize();
  358|  9.82k|  return true;
  359|  9.82k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  9.82k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  9.82k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  9.82k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  9.82k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   154k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   154k|    length = uint16_t(len);
   75|   154k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  49.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  49.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 49.1k, False: 0]
  ------------------
  108|  49.1k|      extend_unchecked(s);
  109|  49.1k|      return true;
  110|  49.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  49.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  49.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  49.1k|    limb* ptr = data + length;
  102|  49.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  49.1k|    set_len(len() + s.len());
  104|  49.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  39.2k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  39.2k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 39.2k]
  |  Branch (300:26): [True: 38.8k, False: 444]
  ------------------
  301|  38.8k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  38.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 38.8k]
  |  |  ------------------
  ------------------
  302|  38.8k|  }
  303|       |
  304|  39.2k|  bool carry = false;
  305|   351k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 312k, False: 39.2k]
  ------------------
  306|   312k|    limb xi = x[index + start];
  307|   312k|    limb yi = y[index];
  308|   312k|    bool c1 = false;
  309|   312k|    bool c2 = false;
  310|   312k|    xi = scalar_add(xi, yi, c1);
  311|   312k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 116k, False: 196k]
  ------------------
  312|   116k|      xi = scalar_add(xi, 1, c2);
  313|   116k|    }
  314|   312k|    x[index + start] = xi;
  315|   312k|    carry = c1 | c2;
  316|   312k|  }
  317|       |
  318|       |  // handle overflow
  319|  39.2k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 39.2k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  39.2k|  return true;
  323|  39.2k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  38.8k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  38.8k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 38.8k]
  ------------------
  132|      0|      return false;
  133|  38.8k|    } else {
  134|  38.8k|      resize_unchecked(new_len, value);
  135|  38.8k|      return true;
  136|  38.8k|    }
  137|  38.8k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  38.8k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  38.8k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 38.8k, False: 0]
  ------------------
  120|  38.8k|      size_t count = new_len - len();
  121|  38.8k|      limb* first = data + len();
  122|  38.8k|      limb* last = first + count;
  123|  38.8k|      ::std::fill(first, last, value);
  124|  38.8k|      set_len(new_len);
  125|  38.8k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  38.8k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|   136k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|   136k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 136k, False: 0]
  |  Branch (152:25): [True: 0, False: 136k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|   136k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   184k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   184k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   184k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   184k|    size_t rindex = length - index - 1;
   69|   184k|    return data[rindex];
   70|   184k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|   143k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|   143k|    return shl(exp);
  574|   143k|  }
_ZN10fast_float6bigint3shlEm:
  530|   143k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|   143k|    size_t rem = n % limb_bits;
  532|   143k|    size_t div = n / limb_bits;
  533|   143k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 126k, False: 16.5k]
  ------------------
  534|   126k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|   126k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
  535|   126k|    }
  536|   143k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 27.5k, False: 115k]
  ------------------
  537|  27.5k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  27.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 27.5k]
  |  |  ------------------
  ------------------
  538|  27.5k|    }
  539|   143k|    return true;
  540|   143k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|   126k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|   126k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|   126k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|   126k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|   126k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|   126k|    size_t shl = n;
  493|   126k|    size_t shr = limb_bits - shl;
  494|   126k|    limb prev = 0;
  495|   428k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 302k, False: 126k]
  ------------------
  496|   302k|      limb xi = vec[index];
  497|   302k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   302k|      prev = xi;
  499|   302k|    }
  500|       |
  501|   126k|    limb carry = prev >> shr;
  502|   126k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 37.8k, False: 88.7k]
  ------------------
  503|  37.8k|      return vec.try_push(carry);
  504|  37.8k|    }
  505|  88.7k|    return true;
  506|   126k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  27.5k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  27.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  27.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  27.5k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 27.5k]
  ------------------
  512|      0|      return false;
  513|  27.5k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 27.5k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  27.5k|      limb* dst = vec.data + n;
  516|  27.5k|      const limb* src = vec.data;
  517|  27.5k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  27.5k|      limb* first = vec.data;
  520|  27.5k|      limb* last = first + n;
  521|  27.5k|      ::std::fill(first, last, 0);
  522|  27.5k|      vec.set_len(n + vec.len());
  523|  27.5k|      return true;
  524|  27.5k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  27.5k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  43.8k|  constexpr bool is_empty() const noexcept {
   80|  43.8k|    return length == 0;
   81|  43.8k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  16.3k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  16.3k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  16.3k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 16.3k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  16.3k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 2.36k, False: 13.9k]
  ------------------
  435|  2.36k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.9k|    } else {
  437|  13.9k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.9k|      truncated |= vec.nonzero(2);
  439|  13.9k|      return result;
  440|  13.9k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  16.3k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  2.36k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  2.36k|  truncated = false;
  167|  2.36k|  int shl = leading_zeroes(r0);
  168|  2.36k|  return r0 << shl;
  169|  2.36k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.9k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.9k|  int shl = leading_zeroes(r0);
  174|  13.9k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.9k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.9k|  } else {
  178|  13.9k|    int shr = 64 - shl;
  179|  13.9k|    truncated = (r1 << shl) != 0;
  180|  13.9k|    return (r0 << shl) | (r1 >> shr);
  181|  13.9k|  }
  182|  13.9k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.9k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  14.0k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 919, False: 13.1k]
  ------------------
  143|    919|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 865, False: 54]
  ------------------
  144|    865|        return true;
  145|    865|      }
  146|     54|      index++;
  147|     54|    }
  148|  13.1k|    return false;
  149|  13.9k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  16.3k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  16.3k|    int lz = ctlz();
  560|  16.3k|    return int(limb_bits * vec.len()) - lz;
  561|  16.3k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  16.3k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  16.3k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 16.3k]
  ------------------
  545|      0|      return 0;
  546|  16.3k|    } else {
  547|  16.3k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  16.3k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  16.3k|    }
  555|  16.3k|  }
_ZN10fast_float6bigintC2Em:
  418|   126k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|   126k|#ifdef FASTFLOAT_64BIT_LIMB
  420|   126k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|   126k|    vec.normalize();
  426|   126k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|   126k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|   126k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 126k]
  ------------------
  464|      0|      return 1;
  465|   126k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 126k]
  ------------------
  466|      0|      return -1;
  467|   126k|    } else {
  468|   248k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 236k, False: 12.4k]
  ------------------
  469|   236k|        limb xi = vec[index - 1];
  470|   236k|        limb yi = other.vec[index - 1];
  471|   236k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 17.9k, False: 218k]
  ------------------
  472|  17.9k|          return 1;
  473|   218k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 96.5k, False: 121k]
  ------------------
  474|  96.5k|          return -1;
  475|  96.5k|        }
  476|   236k|      }
  477|  12.4k|      return 0;
  478|   126k|    }
  479|   126k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   472k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   472k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   472k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   472k|    return data[index];
   64|   472k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   596k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   596k|  adjusted_mantissa answer;
   96|   596k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 14.4k, False: 582k]
  |  Branch (96:19): [True: 2.52k, False: 579k]
  ------------------
   97|  16.9k|    answer.power2 = 0;
   98|  16.9k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  16.9k|    return answer;
  101|  16.9k|  }
  102|   579k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 12.3k, False: 567k]
  ------------------
  103|       |    // we want to get infinity:
  104|  12.3k|    answer.power2 = binary::infinite_power();
  105|  12.3k|    answer.mantissa = 0;
  106|  12.3k|    return answer;
  107|  12.3k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   567k|  int lz = leading_zeroes(w);
  112|   567k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   567k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   567k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   567k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   567k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   567k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.24k, False: 566k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.24k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 106, False: 1.14k]
  ------------------
  137|    106|      answer.power2 = 0;
  138|    106|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    106|      return answer;
  141|    106|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.14k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.14k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.14k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.14k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.14k, False: 0]
  ------------------
  156|  1.14k|    return answer;
  157|  1.24k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   566k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 210k, False: 355k]
  |  Branch (162:30): [True: 208k, False: 1.99k]
  |  Branch (162:77): [True: 189k, False: 19.0k]
  ------------------
  163|   566k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 31.9k, False: 157k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  31.9k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 15.5k, False: 16.4k]
  ------------------
  168|  15.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  15.5k|    }
  170|  31.9k|  }
  171|       |
  172|   566k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   566k|  answer.mantissa >>= 1;
  174|   566k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 22.4k, False: 543k]
  ------------------
  175|  22.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  22.4k|    answer.power2++; // undo previous addition
  177|  22.4k|  }
  178|       |
  179|   566k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   566k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 3.32k, False: 562k]
  ------------------
  181|  3.32k|    answer.power2 = binary::infinite_power();
  182|  3.32k|    answer.mantissa = 0;
  183|  3.32k|  }
  184|   566k|  return answer;
  185|   567k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   640k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   640k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   640k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   640k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   640k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   640k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   640k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 118k, False: 522k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   118k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   118k|    firstproduct.low += secondproduct.high;
   35|   118k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 95.7k, False: 22.7k]
  ------------------
   36|  95.7k|      firstproduct.high++;
   37|  95.7k|    }
   38|   118k|  }
   39|   640k|  return firstproduct;
   40|   640k|}
_ZN10fast_float6detail5powerEi:
   58|  1.25M|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  1.25M|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  1.25M|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  73.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  73.0k|  int lz = leading_zeroes(w);
   82|  73.0k|  w <<= lz;
   83|  73.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  73.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  73.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  73.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  73.0k|  int hilz = int(w >> 63) ^ 1;
   69|  73.0k|  adjusted_mantissa answer;
   70|  73.0k|  answer.mantissa = w << hilz;
   71|  73.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  73.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  73.0k|  return answer;
   74|  73.0k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   560k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   560k|  adjusted_mantissa answer;
   96|   560k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.98k, False: 551k]
  |  Branch (96:19): [True: 528, False: 551k]
  ------------------
   97|  9.51k|    answer.power2 = 0;
   98|  9.51k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  9.51k|    return answer;
  101|  9.51k|  }
  102|   551k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.86k, False: 545k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.86k|    answer.power2 = binary::infinite_power();
  105|  5.86k|    answer.mantissa = 0;
  106|  5.86k|    return answer;
  107|  5.86k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   545k|  int lz = leading_zeroes(w);
  112|   545k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   545k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   545k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   545k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   545k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   545k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 16.3k, False: 529k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  16.3k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 16.2k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  16.2k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  16.2k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  16.2k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  16.2k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 16.2k, False: 0]
  ------------------
  156|  16.2k|    return answer;
  157|  16.3k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   529k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 168k, False: 360k]
  |  Branch (162:30): [True: 86.7k, False: 82.1k]
  |  Branch (162:77): [True: 76.9k, False: 9.86k]
  ------------------
  163|   529k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.7k, False: 51.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.7k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 16.2k, False: 9.45k]
  ------------------
  168|  16.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  16.2k|    }
  170|  25.7k|  }
  171|       |
  172|   529k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   529k|  answer.mantissa >>= 1;
  174|   529k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 19.5k, False: 509k]
  ------------------
  175|  19.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  19.5k|    answer.power2++; // undo previous addition
  177|  19.5k|  }
  178|       |
  179|   529k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   529k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 318, False: 528k]
  ------------------
  181|    318|    answer.power2 = binary::infinite_power();
  182|    318|    answer.mantissa = 0;
  183|    318|  }
  184|   529k|  return answer;
  185|   545k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   615k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   615k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   615k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   615k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   615k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   615k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   615k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 184k, False: 431k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   184k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   184k|    firstproduct.low += secondproduct.high;
   35|   184k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 90.3k, False: 93.7k]
  ------------------
   36|  90.3k|      firstproduct.high++;
   37|  90.3k|    }
   38|   184k|  }
   39|   615k|  return firstproduct;
   40|   615k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  70.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  70.1k|  int lz = leading_zeroes(w);
   82|  70.1k|  w <<= lz;
   83|  70.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  70.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  70.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  70.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  70.1k|  int hilz = int(w >> 63) ^ 1;
   69|  70.1k|  adjusted_mantissa answer;
   70|  70.1k|  answer.mantissa = w << hilz;
   71|  70.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  70.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  70.1k|  return answer;
   74|  70.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  73.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  73.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  73.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  73.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  73.0k|  size_t digits = 0;
  413|  73.0k|  bigint bigmant;
  414|  73.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  73.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  73.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 914, False: 72.1k]
  ------------------
  418|    914|    return positive_digit_comp<T>(bigmant, exponent);
  419|  72.1k|  } else {
  420|  72.1k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  72.1k|  }
  422|  73.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|   143k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|   143k|  uint64_t mantissa = num.mantissa;
   30|   143k|  int32_t exponent = int32_t(num.exponent);
   31|   716k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 572k, False: 143k]
  ------------------
   32|   572k|    mantissa /= 10000;
   33|   572k|    exponent += 4;
   34|   572k|  }
   35|   286k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 143k, False: 143k]
  ------------------
   36|   143k|    mantissa /= 100;
   37|   143k|    exponent += 2;
   38|   143k|  }
   39|   143k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 143k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|   143k|  return exponent;
   44|   143k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|   143k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|   143k|  size_t counter = 0;
  245|   143k|  digits = 0;
  246|   143k|  limb value = 0;
  247|   143k|#ifdef FASTFLOAT_64BIT_LIMB
  248|   143k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|   143k|  UC const * p = num.integer.ptr;
  255|   143k|  UC const * pend = p + num.integer.len();
  256|   143k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   304k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 161k, False: 142k]
  ------------------
  259|   290k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 156k, False: 133k]
  |  Branch (259:45): [True: 128k, False: 28.3k]
  |  Branch (259:70): [True: 128k, False: 438]
  ------------------
  260|   128k|      parse_eight_digits(p, value, counter, digits);
  261|   128k|    }
  262|   565k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 529k, False: 35.6k]
  |  Branch (262:30): [True: 403k, False: 125k]
  |  Branch (262:43): [True: 403k, False: 438]
  ------------------
  263|   403k|      parse_one_digit(p, value, counter, digits);
  264|   403k|    }
  265|   161k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 438, False: 161k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    438|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    438|      bool truncated = is_truncated(p, pend);
  269|    438|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 406, False: 32]
  ------------------
  270|    406|        truncated |= is_truncated(num.fraction);
  271|    406|      }
  272|    438|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 246, False: 192]
  ------------------
  273|    246|        round_up_bigint(result, digits);
  274|    246|      }
  275|    438|      return;
  276|   161k|    } else {
  277|   161k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   161k|      counter = 0;
  279|   161k|      value = 0;
  280|   161k|    }
  281|   161k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|   142k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 127k, False: 14.9k]
  ------------------
  285|   127k|    p = num.fraction.ptr;
  286|   127k|    pend = p + num.fraction.len();
  287|   127k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 16.8k, False: 110k]
  ------------------
  288|  16.8k|      skip_zeros(p, pend);
  289|  16.8k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   435k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 317k, False: 117k]
  ------------------
  292|   789k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 640k, False: 149k]
  |  Branch (292:47): [True: 475k, False: 164k]
  |  Branch (292:72): [True: 471k, False: 3.94k]
  ------------------
  293|   471k|        parse_eight_digits(p, value, counter, digits);
  294|   471k|      }
  295|  1.32M|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 1.12M, False: 195k]
  |  Branch (295:32): [True: 1.01M, False: 114k]
  |  Branch (295:45): [True: 1.00M, False: 7.30k]
  ------------------
  296|  1.00M|        parse_one_digit(p, value, counter, digits);
  297|  1.00M|      }
  298|   317k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 10.1k, False: 307k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  10.1k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  10.1k|        bool truncated = is_truncated(p, pend);
  302|  10.1k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 6.18k, False: 3.97k]
  ------------------
  303|  6.18k|          round_up_bigint(result, digits);
  304|  6.18k|        }
  305|  10.1k|        return;
  306|   307k|      } else {
  307|   307k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   307k|        counter = 0;
  309|   307k|        value = 0;
  310|   307k|      }
  311|   317k|    }
  312|   127k|  }
  313|       |
  314|   132k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 132k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|   132k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   160k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   160k|  uint64_t val;
  161|   238k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 165k, False: 72.9k]
  ------------------
  162|   165k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   165k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 87.0k, False: 78.2k]
  ------------------
  164|  87.0k|      break;
  165|  87.0k|    }
  166|  78.2k|    first += int_cmp_len<UC>();
  167|  78.2k|  }
  168|   383k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 366k, False: 16.8k]
  ------------------
  169|   366k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 143k, False: 223k]
  ------------------
  170|   143k|      break;
  171|   143k|    }
  172|   223k|    first++;
  173|   223k|  }
  174|   160k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   599k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   599k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   599k|  p += 8;
  210|   599k|  counter += 8;
  211|   599k|  count += 8;
  212|   599k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.40M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.40M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.40M|  p++;
  219|  1.40M|  counter++;
  220|  1.40M|  count++;
  221|  1.40M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   486k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   486k|  big.mul(power);
  226|   486k|  big.add(value);
  227|   486k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  11.0k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  11.0k|  uint64_t val;
  183|  22.8k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 14.6k, False: 8.18k]
  ------------------
  184|  14.6k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  14.6k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.82k, False: 11.8k]
  ------------------
  186|  2.82k|      return true;
  187|  2.82k|    }
  188|  11.8k|    first += int_cmp_len<UC>();
  189|  11.8k|  }
  190|  13.2k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 8.73k, False: 4.49k]
  ------------------
  191|  8.73k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 3.69k, False: 5.04k]
  ------------------
  192|  3.69k|      return true;
  193|  3.69k|    }
  194|  5.04k|    ++first;
  195|  5.04k|  }
  196|  4.49k|  return false;
  197|  8.18k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    406|bool is_truncated(span<const UC> s) noexcept {
  201|    406|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    406|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  6.43k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  6.43k|  add_native(big, 10, 1);
  234|  6.43k|  count++;
  235|  6.43k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    914|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    914|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    914|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    914|  adjusted_mantissa answer;
  324|    914|  bool truncated;
  325|    914|  answer.mantissa = bigmant.hi64(truncated);
  326|    914|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    914|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    914|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    914|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    914|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    914|    });
  333|    914|  });
  334|       |
  335|    914|  return answer;
  336|    914|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    914|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    914|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    914|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 914]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    914|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    914|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 914]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    914|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    914|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 914]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    914|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    914|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    914|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    914|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    914|    });
  333|    914|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    914|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    914|  const uint64_t mask
  125|    914|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 914]
  ------------------
  126|    914|    ? UINT64_MAX
  127|    914|    : (uint64_t(1) << shift) - 1;
  128|    914|  const uint64_t halfway
  129|    914|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 914]
  ------------------
  130|    914|    ? 0
  131|    914|    : uint64_t(1) << (shift - 1);
  132|    914|  uint64_t truncated_bits = am.mantissa & mask;
  133|    914|  bool is_above = truncated_bits > halfway;
  134|    914|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    914|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 914]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    914|  } else {
  140|    914|    am.mantissa >>= shift;
  141|    914|  }
  142|    914|  am.power2 += shift;
  143|       |
  144|    914|  bool is_odd = (am.mantissa & 1) == 1;
  145|    914|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    914|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    914|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    914|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 98, False: 816]
  |  Branch (331:27): [True: 656, False: 160]
  |  Branch (331:41): [True: 72, False: 584]
  |  Branch (331:56): [True: 106, False: 638]
  |  Branch (331:66): [True: 32, False: 74]
  ------------------
  332|    914|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  72.1k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  72.1k|  bigint& real_digits = bigmant;
  347|  72.1k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  72.1k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  72.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  72.1k|  T b;
  354|  72.1k|  to_float(false, am_b, b);
  355|  72.1k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  72.1k|  bigint theor_digits(theor.mantissa);
  357|  72.1k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  72.1k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  72.1k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  72.1k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 72.1k, False: 0]
  ------------------
  363|  72.1k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  72.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  72.1k|  }
  365|  72.1k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 72.1k, False: 0]
  ------------------
  366|  72.1k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  72.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  72.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  72.1k|  int ord = real_digits.compare(theor_digits);
  373|  72.1k|  adjusted_mantissa answer = am;
  374|  72.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  72.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  72.1k|      (void)_;  // not needed, since we've done our comparison
  377|  72.1k|      (void)__; // not needed, since we've done our comparison
  378|  72.1k|      if (ord > 0) {
  379|  72.1k|        return true;
  380|  72.1k|      } else if (ord < 0) {
  381|  72.1k|        return false;
  382|  72.1k|      } else {
  383|  72.1k|        return is_odd;
  384|  72.1k|      }
  385|  72.1k|    });
  386|  72.1k|  });
  387|       |
  388|  72.1k|  return answer;
  389|  72.1k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  72.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  72.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  72.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 72.1k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  72.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  72.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 72.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  72.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  72.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 72.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  72.1k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  72.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|   126k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|   126k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 126k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|   126k|  } else {
  153|   126k|    am.mantissa >>= shift;
  154|   126k|  }
  155|   126k|  am.power2 += shift;
  156|   126k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  72.1k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  72.1k|  adjusted_mantissa am = to_extended(value);
   84|  72.1k|  am.mantissa <<= 1;
   85|  72.1k|  am.mantissa += 1;
   86|  72.1k|  am.power2 -= 1;
   87|  72.1k|  return am;
   88|  72.1k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  72.1k|adjusted_mantissa to_extended(T value) noexcept {
   50|  72.1k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  72.1k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  72.1k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  72.1k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  72.1k|  adjusted_mantissa am;
   56|  72.1k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  72.1k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  72.1k|  ::memcpy(&bits, &value, sizeof(T));
   62|  72.1k|#endif
   63|  72.1k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 72.1k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  72.1k|  } else {
   68|       |    // normal
   69|  72.1k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  72.1k|    am.power2 -= bias;
   71|  72.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  72.1k|  }
   73|       |
   74|  72.1k|  return am;
   75|  72.1k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  72.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  72.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  72.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 72.1k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  72.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  72.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 72.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  72.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  72.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 72.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  72.1k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  72.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  72.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  72.1k|      (void)_;  // not needed, since we've done our comparison
  377|  72.1k|      (void)__; // not needed, since we've done our comparison
  378|  72.1k|      if (ord > 0) {
  379|  72.1k|        return true;
  380|  72.1k|      } else if (ord < 0) {
  381|  72.1k|        return false;
  382|  72.1k|      } else {
  383|  72.1k|        return is_odd;
  384|  72.1k|      }
  385|  72.1k|    });
  386|  72.1k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  72.1k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  72.1k|  const uint64_t mask
  125|  72.1k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 72.1k]
  ------------------
  126|  72.1k|    ? UINT64_MAX
  127|  72.1k|    : (uint64_t(1) << shift) - 1;
  128|  72.1k|  const uint64_t halfway
  129|  72.1k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 72.1k]
  ------------------
  130|  72.1k|    ? 0
  131|  72.1k|    : uint64_t(1) << (shift - 1);
  132|  72.1k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  72.1k|  bool is_above = truncated_bits > halfway;
  134|  72.1k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  72.1k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 72.1k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  72.1k|  } else {
  140|  72.1k|    am.mantissa >>= shift;
  141|  72.1k|  }
  142|  72.1k|  am.power2 += shift;
  143|       |
  144|  72.1k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  72.1k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  72.1k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  72.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  72.1k|      (void)_;  // not needed, since we've done our comparison
  377|  72.1k|      (void)__; // not needed, since we've done our comparison
  378|  72.1k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 552, False: 71.5k]
  ------------------
  379|    552|        return true;
  380|  71.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 60.2k, False: 11.3k]
  ------------------
  381|  60.2k|        return false;
  382|  60.2k|      } else {
  383|  11.3k|        return is_odd;
  384|  11.3k|      }
  385|  72.1k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  70.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  70.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  70.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  70.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  70.1k|  size_t digits = 0;
  413|  70.1k|  bigint bigmant;
  414|  70.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  70.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  70.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 15.4k, False: 54.7k]
  ------------------
  418|  15.4k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  54.7k|  } else {
  420|  54.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  54.7k|  }
  422|  70.1k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  15.4k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  15.4k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  15.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  15.4k|  adjusted_mantissa answer;
  324|  15.4k|  bool truncated;
  325|  15.4k|  answer.mantissa = bigmant.hi64(truncated);
  326|  15.4k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  15.4k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  15.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.4k|    });
  333|  15.4k|  });
  334|       |
  335|  15.4k|  return answer;
  336|  15.4k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  15.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  15.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  15.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 15.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  15.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  15.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.43k, False: 14.0k]
  ------------------
  109|  1.43k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.43k|    am.power2++;
  111|  1.43k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  15.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  15.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 15.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  15.4k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  15.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.4k|    });
  333|  15.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  15.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  15.4k|  const uint64_t mask
  125|  15.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 15.4k]
  ------------------
  126|  15.4k|    ? UINT64_MAX
  127|  15.4k|    : (uint64_t(1) << shift) - 1;
  128|  15.4k|  const uint64_t halfway
  129|  15.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 15.4k]
  ------------------
  130|  15.4k|    ? 0
  131|  15.4k|    : uint64_t(1) << (shift - 1);
  132|  15.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  15.4k|  bool is_above = truncated_bits > halfway;
  134|  15.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  15.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 15.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  15.4k|  } else {
  140|  15.4k|    am.mantissa >>= shift;
  141|  15.4k|  }
  142|  15.4k|  am.power2 += shift;
  143|       |
  144|  15.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  15.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  15.4k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  15.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.62k, False: 13.8k]
  |  Branch (331:27): [True: 12.7k, False: 1.08k]
  |  Branch (331:41): [True: 4.29k, False: 8.44k]
  |  Branch (331:56): [True: 423, False: 9.10k]
  |  Branch (331:66): [True: 82, False: 341]
  ------------------
  332|  15.4k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  54.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  54.7k|  bigint& real_digits = bigmant;
  347|  54.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  54.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  54.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  54.7k|  T b;
  354|  54.7k|  to_float(false, am_b, b);
  355|  54.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  54.7k|  bigint theor_digits(theor.mantissa);
  357|  54.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  54.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  54.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  54.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 54.7k, False: 0]
  ------------------
  363|  54.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  54.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  54.7k|  }
  365|  54.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 6.45k, False: 48.2k]
  ------------------
  366|  6.45k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  6.45k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  48.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 48.1k, False: 186]
  ------------------
  368|  48.1k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  48.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  48.1k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  54.7k|  int ord = real_digits.compare(theor_digits);
  373|  54.7k|  adjusted_mantissa answer = am;
  374|  54.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.7k|      (void)_;  // not needed, since we've done our comparison
  377|  54.7k|      (void)__; // not needed, since we've done our comparison
  378|  54.7k|      if (ord > 0) {
  379|  54.7k|        return true;
  380|  54.7k|      } else if (ord < 0) {
  381|  54.7k|        return false;
  382|  54.7k|      } else {
  383|  54.7k|        return is_odd;
  384|  54.7k|      }
  385|  54.7k|    });
  386|  54.7k|  });
  387|       |
  388|  54.7k|  return answer;
  389|  54.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  54.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 228, False: 54.5k]
  ------------------
   96|       |    // have a denormal float
   97|    228|    int32_t shift = -am.power2 + 1;
   98|    228|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    228|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 228, False: 0]
  ------------------
  101|    228|    return;
  102|    228|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 54.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  54.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  54.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  54.7k|  adjusted_mantissa am = to_extended(value);
   84|  54.7k|  am.mantissa <<= 1;
   85|  54.7k|  am.mantissa += 1;
   86|  54.7k|  am.power2 -= 1;
   87|  54.7k|  return am;
   88|  54.7k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  54.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  54.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  54.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  54.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  54.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  54.7k|  adjusted_mantissa am;
   56|  54.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  54.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  54.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  54.7k|#endif
   63|  54.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 228, False: 54.5k]
  ------------------
   64|       |    // denormal
   65|    228|    am.power2 = 1 - bias;
   66|    228|    am.mantissa = bits & mantissa_mask;
   67|  54.5k|  } else {
   68|       |    // normal
   69|  54.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  54.5k|    am.power2 -= bias;
   71|  54.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  54.5k|  }
   73|       |
   74|  54.7k|  return am;
   75|  54.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  54.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 228, False: 54.5k]
  ------------------
   96|       |    // have a denormal float
   97|    228|    int32_t shift = -am.power2 + 1;
   98|    228|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    228|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 228, False: 0]
  ------------------
  101|    228|    return;
  102|    228|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 128, False: 54.3k]
  ------------------
  109|    128|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    128|    am.power2++;
  111|    128|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  54.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.7k|      (void)_;  // not needed, since we've done our comparison
  377|  54.7k|      (void)__; // not needed, since we've done our comparison
  378|  54.7k|      if (ord > 0) {
  379|  54.7k|        return true;
  380|  54.7k|      } else if (ord < 0) {
  381|  54.7k|        return false;
  382|  54.7k|      } else {
  383|  54.7k|        return is_odd;
  384|  54.7k|      }
  385|  54.7k|    });
  386|  54.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  54.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  54.7k|  const uint64_t mask
  125|  54.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 54.7k]
  ------------------
  126|  54.7k|    ? UINT64_MAX
  127|  54.7k|    : (uint64_t(1) << shift) - 1;
  128|  54.7k|  const uint64_t halfway
  129|  54.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 54.7k]
  ------------------
  130|  54.7k|    ? 0
  131|  54.7k|    : uint64_t(1) << (shift - 1);
  132|  54.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  54.7k|  bool is_above = truncated_bits > halfway;
  134|  54.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  54.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 54.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  54.7k|  } else {
  140|  54.7k|    am.mantissa >>= shift;
  141|  54.7k|  }
  142|  54.7k|  am.power2 += shift;
  143|       |
  144|  54.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  54.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  54.7k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  54.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.7k|      (void)_;  // not needed, since we've done our comparison
  377|  54.7k|      (void)__; // not needed, since we've done our comparison
  378|  54.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 17.3k, False: 37.3k]
  ------------------
  379|  17.3k|        return true;
  380|  37.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 36.2k, False: 1.08k]
  ------------------
  381|  36.2k|        return false;
  382|  36.2k|      } else {
  383|  1.08k|        return is_odd;
  384|  1.08k|      }
  385|  54.7k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  5.68M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  3.36M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   985k|  constexpr size_t len() const noexcept {
  238|   985k|    return length;
  239|   985k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.46M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.46M|  return -10;
  469|  1.46M|#endif
  470|  1.46M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.37M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.37M|  return 10;
  517|  1.37M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|  1.15M|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|  1.15M|  return uint64_t(2) << mantissa_explicit_bits();
  531|  1.15M|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  4.03M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  4.03M|  return 23;
  477|  4.03M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|  1.06M|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|  1.06M|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|  1.06M|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.44M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   582k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   582k|  return -65;
  568|   582k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   579k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   579k|  return 38;
  559|   579k|}
_ZN10fast_float14leading_zeroesEm:
  268|  1.28M|int leading_zeroes(uint64_t input_num) {
  269|  1.28M|  assert(input_num > 0);
  270|  1.28M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  1.28M|  return __builtin_clzll(input_num);
  285|  1.28M|#endif
  286|  1.28M|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.55M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.55M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.55M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.55M|  answer.low = uint64_t(r);
  337|  1.55M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.55M|  return answer;
  342|  1.55M|}
_ZN10fast_float8value128C2Ev:
  251|  1.55M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   713k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   713k|  return -127;
  500|   713k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   210k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   210k|  return -17;
  493|   210k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   208k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   208k|  return 10;
  485|   208k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   416k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   416k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 143k, False: 273k]
  |  Branch (352:38): [True: 0, False: 273k]
  ------------------
  353|   416k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  73.0k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  73.0k|  return 114;
  575|  73.0k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   351k|{
  650|   351k|    return sizeof(uint64_t) / sizeof(UC);
  651|   351k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   179k|{
  644|   179k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   179k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   179k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   202k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   646k|  constexpr size_t len() const noexcept {
  238|   646k|    return length;
  239|   646k|  }
_ZNK10fast_float4spanImEixEm:
  241|   361k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   361k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   361k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   361k|    return ptr[index];
  244|   361k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   469k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   469k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   469k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   469k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   469k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   469k|  ::memcpy(&value, &word, sizeof(T));
  615|   469k|#endif
  616|   469k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   469k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|  1.12M|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|  1.12M|  return 0xFF;
  507|  1.12M|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.84M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   399k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   200k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   199k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.58M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.58M|  return -22;
  461|  1.58M|#endif
  462|  1.58M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.53M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.53M|  return 22;
  514|  1.53M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  1.26M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  1.26M|  return uint64_t(2) << mantissa_explicit_bits();
  521|  1.26M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  3.89M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  3.89M|  return 52;
  474|  3.89M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  1.23M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  1.23M|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  1.23M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   551k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   551k|  return -342;
  564|   551k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   551k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   551k|  return 308;
  555|   551k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   685k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   685k|  return -1023;
  497|   685k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   168k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   168k|  return -4;
  489|   168k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  86.7k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  86.7k|  return 23;
  481|  86.7k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  70.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  70.1k|  return 769;
  572|  70.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   398k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   398k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   398k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   398k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   398k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   398k|  ::memcpy(&value, &word, sizeof(T));
  615|   398k|#endif
  616|   398k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   398k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|  1.00M|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|  1.00M|  return 0x7FF;
  504|  1.00M|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.36M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.36M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.36M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.36M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.36M|    return from_chars_advanced(first, last, value, options);
  143|  1.36M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.36M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.36M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.36M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.36M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.36M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.36M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.36M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.36M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.36M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.36M|  answer.ec = std::errc(); // be optimistic
  221|  1.36M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.36M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.27M, False: 86.5k]
  |  Branch (227:69): [True: 1.18M, False: 85.4k]
  |  Branch (227:131): [True: 1.05M, False: 133k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  1.05M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 1.05M, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  1.05M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 965k, False: 89.8k]
  ------------------
  239|   965k|        value = T(pns.mantissa);
  240|   965k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 17.4k, False: 948k]
  ------------------
  241|   948k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   965k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 965k]
  ------------------
  243|   965k|        return answer;
  244|   965k|      }
  245|  1.05M|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  1.05M|  }
  262|   395k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   395k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 199k, False: 195k]
  |  Branch (263:29): [True: 199k, False: 0]
  ------------------
  264|   199k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 73.0k, False: 126k]
  ------------------
  265|  73.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  73.0k|    }
  267|   199k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   395k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 73.0k, False: 322k]
  ------------------
  271|   395k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   395k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 380k, False: 14.3k]
  |  Branch (273:29): [True: 27.8k, False: 352k]
  |  Branch (273:49): [True: 1.99k, False: 25.8k]
  |  Branch (273:68): [True: 10.0k, False: 383k]
  ------------------
  274|  12.0k|    answer.ec = std::errc::result_out_of_range;
  275|  12.0k|  }
  276|   395k|  return answer;
  277|  1.36M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  2.41M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  2.41M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  2.41M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  2.41M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  2.41M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  2.41M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  99.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  99.7k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  99.7k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  99.7k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  99.7k|    return from_chars_advanced(first, last, value, options);
  143|  99.7k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  99.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  99.7k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  99.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  99.7k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  99.7k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 99.7k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  99.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  99.7k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 99.7k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  99.7k|  answer.ec = std::errc(); // be optimistic
  221|  99.7k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  99.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 99.3k, False: 454]
  |  Branch (227:69): [True: 97.4k, False: 1.85k]
  |  Branch (227:131): [True: 97.4k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  97.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 97.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  97.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 97.3k, False: 54]
  ------------------
  239|  97.3k|        value = T(pns.mantissa);
  240|  97.3k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 110, False: 97.2k]
  ------------------
  241|  97.2k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  97.3k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 97.3k]
  ------------------
  243|  97.3k|        return answer;
  244|  97.3k|      }
  245|  97.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  97.4k|  }
  262|  2.36k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.36k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 2.36k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.36k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.36k]
  ------------------
  271|  2.36k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.36k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.24k, False: 122]
  |  Branch (273:29): [True: 1.94k, False: 298]
  |  Branch (273:49): [True: 302, False: 1.64k]
  |  Branch (273:68): [True: 1.64k, False: 420]
  ------------------
  274|  1.94k|    answer.ec = std::errc::result_out_of_range;
  275|  1.94k|  }
  276|  2.36k|  return answer;
  277|  99.7k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.48M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.48M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.48M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.48M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.48M|    return from_chars_advanced(first, last, value, options);
  143|  1.48M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.48M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.48M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.48M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.48M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.48M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.48M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.48M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.48M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.48M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.48M|  answer.ec = std::errc(); // be optimistic
  221|  1.48M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.48M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.44M, False: 40.5k]
  |  Branch (227:69): [True: 1.35M, False: 87.6k]
  |  Branch (227:131): [True: 1.16M, False: 188k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  1.16M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 1.16M, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  1.16M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 1.13M, False: 24.8k]
  ------------------
  239|  1.13M|        value = T(pns.mantissa);
  240|  1.13M|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 63.2k, False: 1.07M]
  ------------------
  241|  1.07M|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  1.13M|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 1.13M]
  ------------------
  243|  1.13M|        return answer;
  244|  1.13M|      }
  245|  1.16M|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  1.16M|  }
  262|   341k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   341k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 216k, False: 124k]
  |  Branch (263:29): [True: 216k, False: 0]
  ------------------
  264|   216k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 70.1k, False: 146k]
  ------------------
  265|  70.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  70.1k|    }
  267|   216k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   341k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 70.1k, False: 271k]
  ------------------
  271|   341k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   341k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 332k, False: 8.87k]
  |  Branch (273:29): [True: 15.8k, False: 316k]
  |  Branch (273:49): [True: 508, False: 15.3k]
  |  Branch (273:68): [True: 4.62k, False: 336k]
  ------------------
  274|  5.13k|    answer.ec = std::errc::result_out_of_range;
  275|  5.13k|  }
  276|   341k|  return answer;
  277|  1.48M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   100k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   100k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   100k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   100k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   100k|    return from_chars_advanced(first, last, value, options);
  143|   100k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   100k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   100k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   100k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   100k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   100k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 100k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   100k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   100k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 100k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   100k|  answer.ec = std::errc(); // be optimistic
  221|   100k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   100k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 99.7k, False: 384]
  |  Branch (227:69): [True: 97.9k, False: 1.80k]
  |  Branch (227:131): [True: 97.9k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  97.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 97.9k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  97.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 97.9k, False: 0]
  ------------------
  239|  97.9k|        value = T(pns.mantissa);
  240|  97.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 180, False: 97.7k]
  ------------------
  241|  97.7k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  97.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 97.9k]
  ------------------
  243|  97.9k|        return answer;
  244|  97.9k|      }
  245|  97.9k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  97.9k|  }
  262|  2.18k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.18k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 2.18k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.18k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.18k]
  ------------------
  271|  2.18k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.18k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.07k, False: 108]
  |  Branch (273:29): [True: 872, False: 1.20k]
  |  Branch (273:49): [True: 0, False: 872]
  |  Branch (273:68): [True: 872, False: 1.31k]
  ------------------
  274|    872|    answer.ec = std::errc::result_out_of_range;
  275|    872|  }
  276|  2.18k|  return answer;
  277|   100k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  9.37M|{
 3807|  9.37M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  9.37M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  9.37M|    }
 3810|  9.37M|    else if constexpr (sizeof(U) == 2) {
 3811|  9.37M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  9.37M|    }
 3813|  9.37M|    else {
 3814|       |        // utf-32
 3815|  9.37M|        static_assert(sizeof(U) == 4);
 3816|  9.37M|        SCN_UNUSED(ch);
 3817|  9.37M|        return 1;
 3818|  9.37M|    }
 3819|  9.37M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  9.37M|{
 3771|  9.37M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  9.37M|    SCN_GCC_COMPAT_PUSH
 3774|  9.37M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  9.37M|    constexpr char lengths[] =
 3776|  9.37M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  9.37M|        "\1\1\1\1\1\1\1\1"
 3778|  9.37M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  9.37M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  9.37M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  9.37M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  9.37M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  9.37M|    SCN_GCC_COMPAT_POP
 3785|  9.37M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  8.46M|{
 4013|  8.46M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  8.46M|        return decode_utf8_code_point_exhaustive(input);
 4015|  8.46M|    }
 4016|  8.46M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  8.46M|        return decode_utf16_code_point_exhaustive(input);
 4018|  8.46M|    }
 4019|  8.46M|    else {
 4020|  8.46M|        SCN_EXPECT(input.size() == 1);
 4021|  8.46M|        auto cp = static_cast<char32_t>(input.front());
 4022|  8.46M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  8.46M|            return invalid_code_point;
 4024|  8.46M|        }
 4025|  8.46M|        return cp;
 4026|  8.46M|    }
 4027|  8.46M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  8.46M|{
 3826|  8.46M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  8.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  8.46M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  8.46M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  8.46M|    };
 3831|       |
 3832|  8.46M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 8.09M, False: 367k]
  ------------------
 3833|  8.09M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 1.11k, False: 8.09M]
  ------------------
 3834|  1.11k|            SCN_UNLIKELY_ATTR
 3835|  1.11k|            return invalid_code_point;
 3836|  1.11k|        }
 3837|  8.09M|        return static_cast<char32_t>(input[0]);
 3838|  8.09M|    }
 3839|       |
 3840|   367k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 329k, False: 38.4k]
  ------------------
 3841|   329k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 295, False: 328k]
  ------------------
 3842|    295|            SCN_UNLIKELY_ATTR
 3843|    295|            return invalid_code_point;
 3844|    295|        }
 3845|   328k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 98.3k, False: 230k]
  ------------------
 3846|  98.3k|            SCN_UNLIKELY_ATTR
 3847|  98.3k|            return invalid_code_point;
 3848|  98.3k|        }
 3849|       |
 3850|   230k|        char32_t cp{};
 3851|   230k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   230k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   230k|        return cp;
 3854|   328k|    }
 3855|       |
 3856|  38.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 16.1k, False: 22.3k]
  ------------------
 3857|  16.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 245, False: 15.8k]
  ------------------
 3858|    245|            SCN_UNLIKELY_ATTR
 3859|    245|            return invalid_code_point;
 3860|    245|        }
 3861|  15.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.53k, False: 8.34k]
  ------------------
 3862|  15.8k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.94k, False: 6.39k]
  ------------------
 3863|  9.47k|            SCN_UNLIKELY_ATTR
 3864|  9.47k|            return invalid_code_point;
 3865|  9.47k|        }
 3866|       |
 3867|  6.39k|        char32_t cp{};
 3868|  6.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  6.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  6.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  6.39k|        return cp;
 3872|  15.8k|    }
 3873|       |
 3874|  22.3k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 22.3k, False: 0]
  ------------------
 3875|  22.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 22.3k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  22.3k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 3.57k, False: 18.7k]
  ------------------
 3880|  3.57k|            SCN_UNLIKELY_ATTR
 3881|  3.57k|            return invalid_code_point;
 3882|  3.57k|        }
 3883|  18.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 4.78k, False: 13.9k]
  ------------------
 3884|  18.7k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.87k, False: 12.0k]
  ------------------
 3885|  18.7k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.82k, False: 10.2k]
  ------------------
 3886|  8.48k|            SCN_UNLIKELY_ATTR
 3887|  8.48k|            return invalid_code_point;
 3888|  8.48k|        }
 3889|       |
 3890|  10.2k|        char32_t cp{};
 3891|  10.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  10.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  10.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  10.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  10.2k|        return cp;
 3896|  18.7k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   397k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   397k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   397k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  16.5M|{
 3699|  16.5M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  16.5M|                                          decltype(first), decltype(last)> &&
 3701|  16.5M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  16.5M|        return {first, last};
 3703|  16.5M|    }
 3704|  16.5M|    else {
 3705|  16.5M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  16.5M|                                       to_address(first), to_address(last)))};
 3707|  16.5M|    }
 3708|  16.5M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  50.4M|{
  326|  50.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  50.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  50.4M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  56.4M|{
  304|  56.4M|    return p;
  305|  56.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  24.6M|{
 3730|  24.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  24.6M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  24.6M|                      decltype(it)> &&
 3733|  24.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  24.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  24.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  24.6M|        return it;
 3736|  24.6M|    }
 3737|  24.6M|    else {
 3738|  24.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  24.6M|    }
 3740|  24.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   176k|    {
 2724|   176k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   176k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   176k|    {
 2705|   176k|        return decay_copy(t.begin());
 2706|   176k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  33.5M|{
 1949|  33.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  33.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  33.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.27M|    {
 2781|  6.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.27M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.27M|    {
 2763|  6.27M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.27M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   445k|{
 8867|   445k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   445k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   445k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|  1.84M|{
 5396|  1.84M|    detail::check_scan_arg_types<Args...>();
 5397|  1.84M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.84M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  2.38M|{
 5135|  2.38M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.38M|                  "Scan argument types must be default constructible");
 5137|  2.38M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.38M|                  "Scan argument types must be Destructible");
 5139|  2.38M|    static_assert(
 5140|  2.38M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.38M|        "Scan argument types must not be references");
 5142|  2.38M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|  1.84M|    {
 5349|  1.84M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.84M|    {
 5360|  1.84M|        return {detail::make_arg<
 5361|  1.84M|            kind, Context,
 5362|  1.84M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.84M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.84M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|  1.84M|{
 5170|  1.84M|    return make_value<Context>(value).ref_value;
 5171|  1.84M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  2.03M|{
 5120|  2.03M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.03M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.03M|                                  needs_context_tag>) {
 5124|  2.03M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.03M|    }
 5126|  2.03M|    else {
 5127|  2.03M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.03M|            value, context_tag<Context>{}));
 5129|  2.03M|    }
 5130|  2.03M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  2.03M|    {                                                                        \
 4959|  2.03M|        return val;                                                          \
 4960|  2.03M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  2.38M|{
 5089|  2.38M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.38M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.38M|    constexpr bool scannable_char =
 5093|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.38M|    static_assert(scannable_char,
 5095|  2.38M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.38M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.38M|    constexpr bool scannable_const =
 5099|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.38M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.38M|    constexpr bool scannable_disabled =
 5103|  2.38M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.38M|    static_assert(scannable_disabled,
 5105|  2.38M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.38M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.38M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.38M|    static_assert(
 5110|  2.38M|        scannable,
 5111|  2.38M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.38M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.38M|    return arg_value{arg};
 5115|  2.38M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  2.38M|    {
 4902|  2.38M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.41M|{
 8654|  1.41M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.41M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.41M|{
 8591|  1.41M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.41M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.2k, False: 1.33M]
  |  |  ------------------
  ------------------
 8595|  79.2k|        return unexpected(result.error());
 8596|  79.2k|    }
 8597|  1.33M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.41M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  3.13M|{
 4720|  3.13M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.13M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.13M|                  "\n"
 4724|  3.13M|                  "Unsupported range type given as input to a scanning "
 4725|  3.13M|                  "function.\n"
 4726|  3.13M|                  "A range needs to have a character type (value type) "
 4727|  3.13M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.13M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.13M|                  "to be included.\n"
 4730|  3.13M|                  "See the scnlib documentation for more details.");
 4731|  3.13M|    static_assert(
 4732|  3.13M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.13M|        "\n"
 4734|  3.13M|        "Unsupported range type given as input to a scanning "
 4735|  3.13M|        "function.\n"
 4736|  3.13M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.13M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.13M|        "not supported.");
 4739|  3.13M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.13M|                  "\n"
 4741|  3.13M|                  "Unsupported range type given as input to a scanning "
 4742|  3.13M|                  "function.\n"
 4743|  3.13M|                  "file_marker_found cannot be used as an "
 4744|  3.13M|                  "source range type to scn::scan.\n"
 4745|  3.13M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.13M|                  "and do not provide an explicit source range, "
 4747|  3.13M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.13M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.13M|                  "\n"
 4750|  3.13M|                  "Unsupported range type given as input to a scanning "
 4751|  3.13M|                  "function.\n"
 4752|  3.13M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.13M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.13M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.13M|                  "\n"
 4756|  3.13M|                  "Unsupported range type given as input to a scanning "
 4757|  3.13M|                  "function.\n"
 4758|  3.13M|                  "A range needs to model forward_range and have a valid "
 4759|  3.13M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.13M|                  "Examples of scannable ranges are std::string, "
 4761|  3.13M|                  "std::string_view, "
 4762|  3.13M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.13M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.13M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.13M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  3.13M|{
 4659|  3.13M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  3.13M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  3.13M|    }
 4662|  3.13M|    else {
 4663|  3.13M|        return invalid_char_type{};
 4664|  3.13M|    }
 4665|  3.13M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  3.13M|    {
 2855|  3.13M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  3.13M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  3.13M|    {
 2836|  3.13M|        return t.data();
 2837|  3.13M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  3.13M|    {
 3231|  3.13M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 23.2k, False: 3.11M]
  ------------------
 3232|  3.13M|                   ? nullptr
 3233|  3.13M|                   : std::addressof(*ranges::begin(derived()));
 3234|  3.13M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  3.13M|    {
 3005|  3.13M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  3.13M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  3.13M|    {
 2978|  3.13M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  3.13M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  17.4M|    {
 3339|  17.4M|        return m_iterator == m_sentinel;
 3340|  17.4M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  6.24M|    {
 3185|  6.24M|        return static_cast<const D&>(*this);
 3186|  6.24M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.07M|    {
 2724|  6.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.07M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.07M|    {
 2705|  6.07M|        return decay_copy(t.begin());
 2706|  6.07M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  76.2M|    {
 3330|  76.2M|        return m_iterator;
 3331|  76.2M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  3.13M|    {
 2930|  3.13M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  3.13M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  3.13M|    {
 2896|  3.13M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  3.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  3.13M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  10.1M|{
 1949|  10.1M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.1M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  17.4M|    {
 3346|  17.4M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  17.4M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  24.8M|    {
 1598|  24.8M|        return has_value();
 1599|  24.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  49.2M|    {
  485|  49.2M|        return m_has_value;
  486|  49.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.56M|    {
 1604|  1.56M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.56M|        return this->get_unexpected().error();
 1606|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.56M|    {
  468|  1.56M|        return m_unexpected;
  469|  1.56M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  12.0M|    {
  361|  12.0M|        return m_unexpected;
  362|  12.0M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  5.90M|    {
  347|  5.90M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.90M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.90M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   171k|    {
 1476|   171k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   171k|    {
  447|   171k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  14.0M|    {
  356|  14.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.0M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.13M|    {
 1177|  3.13M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.96M|{
 5923|  2.96M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.96M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.96M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.96M|    }
 5927|  2.96M|    else {
 5928|  2.96M|        auto it = ranges::begin(source);
 5929|  2.96M|        while (n > 0) {
 5930|  2.96M|            --n;
 5931|  2.96M|            ++it;
 5932|  2.96M|        }
 5933|  2.96M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.96M|    }
 5935|  2.96M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  18.0M|    {
 2724|  18.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  18.0M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  18.0M|    {
 2705|  18.0M|        return decay_copy(t.begin());
 2706|  18.0M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.96M|{
 5910|  2.96M|    return ranges::end(source);
 5911|  2.96M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.96M|    {
 2781|  2.96M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.96M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.96M|    {
 2763|  2.96M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.96M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  37.1M|    {
 3334|  37.1M|        return m_sentinel;
 3335|  37.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  9.81M|    {
 1653|  9.81M|        return value();
 1654|  9.81M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  22.7M|    {
 1627|  22.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.7M|        return this->get_value();
 1629|  22.7M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  22.7M|    {
  451|  22.7M|        return m_value;
  452|  22.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.96M|    {
 1430|  2.96M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.96M|    {
  437|  2.96M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   891k|    {
 7975|   891k|        return m_str;
 7976|   891k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.84M|    {
 5426|  1.84M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|  1.84M|    {
 5379|  1.84M|        return m_argptrs;
 5380|  1.84M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  5.83M|    {
 5478|  5.83M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   891k|{
 8820|   891k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 838k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   838k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   891k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  3.13M|    {
 1598|  3.13M|        return has_value();
 1599|  3.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.26M|    {
  485|  6.26M|        return m_has_value;
  486|  6.26M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   171k|    {
 1604|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   171k|        return this->get_unexpected().error();
 1606|   171k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   171k|    {
  468|   171k|        return m_unexpected;
  469|   171k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   988k|    {
 1177|   988k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.66M|    {
 1653|  2.66M|        return value();
 1654|  2.66M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.96M|    {
 1627|  2.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.96M|        return this->get_value();
 1629|  2.96M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.96M|    {
  451|  2.96M|        return m_value;
  452|  2.96M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   931k|    {
 5830|   931k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.96M|    {
 5681|  2.96M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|  2.04M|    {
 5616|  2.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   931k|    {
 1430|   931k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   931k|    {
  437|   931k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|  1.84M|    {
 5374|  1.84M|        return m_args;
 5375|  1.84M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  29.6M|    {
 3316|  29.6M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  5.83M|{
 7691|  5.83M|    return s;
 7692|  5.83M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  5.83M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   891k|    {
 7971|   891k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   988k|    {
 1598|   988k|        return has_value();
 1599|   988k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.91M|    {
  485|  1.91M|        return m_has_value;
  486|  1.91M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   931k|    {
 1673|   931k|        return &value();
 1674|   931k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   931k|    {
 1627|   931k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   931k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   931k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   931k|        return this->get_value();
 1629|   931k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   931k|    {
  451|   931k|        return m_value;
  452|   931k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.96M|    {
 5698|  2.96M|        return ranges::begin(m_range);
 5699|  2.96M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   445k|{
 8934|   445k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   445k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   445k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   445k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.41M|{
 8672|  1.41M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.41M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.41M|{
 8607|  1.41M|#if !SCN_DISABLE_LOCALE
 8608|  1.41M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.41M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.41M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.41M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.2k, False: 1.33M]
  |  |  ------------------
  ------------------
 8615|  79.2k|        return unexpected(result.error());
 8616|  79.2k|    }
 8617|  1.33M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.41M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  97.0k|{
 8973|  97.0k|    T value;
 8974|  97.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  97.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 92.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  92.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  92.6k|    static_cast<    \
  |  |  929|  92.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  92.6k|    static_cast<    \
  |  |  929|  92.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  97.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   193k|{
 5155|   193k|    check_scan_arg_types<T>();
 5156|       |
 5157|   193k|    basic_scan_arg<Context> arg;
 5158|   193k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   193k|    arg.m_value = make_value<Context>(value);
 5160|   193k|    return arg;
 5161|   193k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  6.45M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  7.51M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   312k|{
 8685|   312k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   312k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   312k|{
 8631|   312k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   312k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   312k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.2k, False: 299k]
  |  |  ------------------
  ------------------
 8635|  13.2k|        return unexpected(result.error());
 8636|  13.2k|    }
 8637|   299k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   312k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   299k|    {
 1663|   299k|        return std::move(value());
 1664|   299k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   479k|{
 8867|   479k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   479k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   479k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   479k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   479k|    static_cast<    \
  |  |  929|   479k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   479k|    static_cast<    \
  |  |  929|   479k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   479k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.98M|{
 5396|  1.98M|    detail::check_scan_arg_types<Args...>();
 5397|  1.98M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.98M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  2.54M|{
 5135|  2.54M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.54M|                  "Scan argument types must be default constructible");
 5137|  2.54M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.54M|                  "Scan argument types must be Destructible");
 5139|  2.54M|    static_assert(
 5140|  2.54M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.54M|        "Scan argument types must not be references");
 5142|  2.54M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  1.98M|    {
 5349|  1.98M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.98M|    {
 5360|  1.98M|        return {detail::make_arg<
 5361|  1.98M|            kind, Context,
 5362|  1.98M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.98M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.98M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.98M|{
 5170|  1.98M|    return make_value<Context>(value).ref_value;
 5171|  1.98M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  2.19M|{
 5120|  2.19M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.19M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.19M|                                  needs_context_tag>) {
 5124|  2.19M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.19M|    }
 5126|  2.19M|    else {
 5127|  2.19M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.19M|            value, context_tag<Context>{}));
 5129|  2.19M|    }
 5130|  2.19M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  2.19M|    {                                                                        \
 4959|  2.19M|        return val;                                                          \
 4960|  2.19M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  2.54M|{
 5089|  2.54M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.54M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.54M|    constexpr bool scannable_char =
 5093|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.54M|    static_assert(scannable_char,
 5095|  2.54M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.54M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.54M|    constexpr bool scannable_const =
 5099|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.54M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.54M|    constexpr bool scannable_disabled =
 5103|  2.54M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.54M|    static_assert(scannable_disabled,
 5105|  2.54M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.54M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.54M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.54M|    static_assert(
 5110|  2.54M|        scannable,
 5111|  2.54M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.54M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.54M|    return arg_value{arg};
 5115|  2.54M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  2.54M|    {
 4902|  2.54M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   959k|    {
 7975|   959k|        return m_str;
 7976|   959k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.98M|    {
 5426|  1.98M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.98M|    {
 5379|  1.98M|        return m_argptrs;
 5380|  1.98M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   959k|{
 8820|   959k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   959k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 906k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   906k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   906k|    static_cast<    \
  |  |  929|   906k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   906k|    static_cast<    \
  |  |  929|   906k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   959k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  1.00M|    {
 5830|  1.00M|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|  2.20M|    {
 5616|  2.20M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.00M|    {
 1430|  1.00M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  1.00M|    {
  437|  1.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.98M|    {
 5374|  1.98M|        return m_args;
 5375|  1.98M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   959k|    {
 7971|   959k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.07M|    {
  485|  2.07M|        return m_has_value;
  486|  2.07M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  1.00M|    {
 1673|  1.00M|        return &value();
 1674|  1.00M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.00M|    {
 1627|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.00M|        return this->get_value();
 1629|  1.00M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.00M|    {
  451|  1.00M|        return m_value;
  452|  1.00M|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   479k|{
 8934|   479k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   479k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   479k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   479k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   479k|    static_cast<    \
  |  |  929|   479k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   479k|    static_cast<    \
  |  |  929|   479k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   479k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|   107k|{
 8973|   107k|    T value;
 8974|   107k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   107k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   102k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   107k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   212k|{
 5155|   212k|    check_scan_arg_types<T>();
 5156|       |
 5157|   212k|    basic_scan_arg<Context> arg;
 5158|   212k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   212k|    arg.m_value = make_value<Context>(value);
 5160|   212k|    return arg;
 5161|   212k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   485k|{
 8867|   485k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   485k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   485k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   485k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  2.00M|{
 5396|  2.00M|    detail::check_scan_arg_types<Args...>();
 5397|  2.00M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  2.00M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  2.57M|{
 5135|  2.57M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.57M|                  "Scan argument types must be default constructible");
 5137|  2.57M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.57M|                  "Scan argument types must be Destructible");
 5139|  2.57M|    static_assert(
 5140|  2.57M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.57M|        "Scan argument types must not be references");
 5142|  2.57M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|  2.00M|    {
 5349|  2.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  2.00M|    {
 5360|  2.00M|        return {detail::make_arg<
 5361|  2.00M|            kind, Context,
 5362|  2.00M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  2.00M|                                 typename Context::char_type>::value>(args)...};
 5364|  2.00M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  2.00M|{
 5170|  2.00M|    return make_value<Context>(value).ref_value;
 5171|  2.00M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  2.22M|{
 5120|  2.22M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  2.22M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  2.22M|                                  needs_context_tag>) {
 5124|  2.22M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  2.22M|    }
 5126|  2.22M|    else {
 5127|  2.22M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  2.22M|            value, context_tag<Context>{}));
 5129|  2.22M|    }
 5130|  2.22M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  2.22M|    {                                                                        \
 4959|  2.22M|        return val;                                                          \
 4960|  2.22M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  2.57M|{
 5089|  2.57M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.57M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.57M|    constexpr bool scannable_char =
 5093|  2.57M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.57M|    static_assert(scannable_char,
 5095|  2.57M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.57M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.57M|    constexpr bool scannable_const =
 5099|  2.57M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.57M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.57M|    constexpr bool scannable_disabled =
 5103|  2.57M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.57M|    static_assert(scannable_disabled,
 5105|  2.57M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.57M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.57M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.57M|    static_assert(
 5110|  2.57M|        scannable,
 5111|  2.57M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.57M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.57M|    return arg_value{arg};
 5115|  2.57M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  2.57M|    {
 4902|  2.57M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   970k|    {
 7975|   970k|        return m_str;
 7976|   970k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  2.00M|    {
 5426|  2.00M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  2.00M|    {
 5379|  2.00M|        return m_argptrs;
 5380|  2.00M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   970k|{
 8820|   970k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   970k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 917k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   917k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   917k|    static_cast<    \
  |  |  929|   917k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   917k|    static_cast<    \
  |  |  929|   917k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   970k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.07M|    {
 1177|  1.07M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  1.02M|    {
 5830|  1.02M|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|  2.23M|    {
 5616|  2.23M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.02M|    {
 1430|  1.02M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  1.02M|    {
  437|  1.02M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  2.00M|    {
 5374|  2.00M|        return m_args;
 5375|  2.00M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   970k|    {
 7971|   970k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|  1.07M|    {
 1598|  1.07M|        return has_value();
 1599|  1.07M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.10M|    {
  485|  2.10M|        return m_has_value;
  486|  2.10M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  1.02M|    {
 1673|  1.02M|        return &value();
 1674|  1.02M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.02M|    {
 1627|  1.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.02M|        return this->get_value();
 1629|  1.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.02M|    {
  451|  1.02M|        return m_value;
  452|  1.02M|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   485k|{
 8934|   485k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   485k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   485k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   485k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|   108k|{
 8973|   108k|    T value;
 8974|   108k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   108k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   104k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   108k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   215k|{
 5155|   215k|    check_scan_arg_types<T>();
 5156|       |
 5157|   215k|    basic_scan_arg<Context> arg;
 5158|   215k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   215k|    arg.m_value = make_value<Context>(value);
 5160|   215k|    return arg;
 5161|   215k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   171k|    {
 2724|   171k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   171k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   171k|    {
 2705|   171k|        return decay_copy(t.begin());
 2706|   171k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|   149M|{
 1949|   149M|    return SCN_FWD(t);
  ------------------
  |  |  930|   149M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   149M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.64M|    {
 2781|  6.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.64M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.64M|    {
 2763|  6.64M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.64M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   476k|{
 8867|   476k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   476k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   476k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   476k|    static_cast<    \
  |  |  929|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   476k|    static_cast<    \
  |  |  929|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   476k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.50M|{
 8654|  1.50M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.50M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.50M|{
 8591|  1.50M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.50M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.50M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.2k, False: 1.42M]
  |  |  ------------------
  ------------------
 8595|  79.2k|        return unexpected(result.error());
 8596|  79.2k|    }
 8597|  1.42M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.50M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  3.32M|{
 4720|  3.32M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  3.32M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  3.32M|                  "\n"
 4724|  3.32M|                  "Unsupported range type given as input to a scanning "
 4725|  3.32M|                  "function.\n"
 4726|  3.32M|                  "A range needs to have a character type (value type) "
 4727|  3.32M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  3.32M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  3.32M|                  "to be included.\n"
 4730|  3.32M|                  "See the scnlib documentation for more details.");
 4731|  3.32M|    static_assert(
 4732|  3.32M|        !std::is_same_v<T, custom_char_traits>,
 4733|  3.32M|        "\n"
 4734|  3.32M|        "Unsupported range type given as input to a scanning "
 4735|  3.32M|        "function.\n"
 4736|  3.32M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  3.32M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  3.32M|        "not supported.");
 4739|  3.32M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  3.32M|                  "\n"
 4741|  3.32M|                  "Unsupported range type given as input to a scanning "
 4742|  3.32M|                  "function.\n"
 4743|  3.32M|                  "file_marker_found cannot be used as an "
 4744|  3.32M|                  "source range type to scn::scan.\n"
 4745|  3.32M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  3.32M|                  "and do not provide an explicit source range, "
 4747|  3.32M|                  "or use scn::scan with a FILE* directly.");
 4748|  3.32M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  3.32M|                  "\n"
 4750|  3.32M|                  "Unsupported range type given as input to a scanning "
 4751|  3.32M|                  "function.\n"
 4752|  3.32M|                  "In order to be scannable, a range needs to satisfy "
 4753|  3.32M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  3.32M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  3.32M|                  "\n"
 4756|  3.32M|                  "Unsupported range type given as input to a scanning "
 4757|  3.32M|                  "function.\n"
 4758|  3.32M|                  "A range needs to model forward_range and have a valid "
 4759|  3.32M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  3.32M|                  "Examples of scannable ranges are std::string, "
 4761|  3.32M|                  "std::string_view, "
 4762|  3.32M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  3.32M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  3.32M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  3.32M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  3.32M|{
 4690|  3.32M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  3.32M|        return file_marker_found{};
 4692|  3.32M|    }
 4693|  3.32M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  3.32M|        if constexpr (ranges::range<Range>) {
 4695|  3.32M|            return insufficient_range{};
 4696|  3.32M|        }
 4697|  3.32M|        else {
 4698|  3.32M|            return invalid_input_range{};
 4699|  3.32M|        }
 4700|  3.32M|    }
 4701|  3.32M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  3.32M|        return invalid_char_type{};
 4703|  3.32M|    }
 4704|  3.32M|    else {
 4705|  3.32M|        return make_forward_scan_buffer(r);
 4706|  3.32M|    }
 4707|  3.32M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  3.32M|{
 4524|  3.32M|    return basic_scan_forward_buffer_impl(range);
 4525|  3.32M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  3.32M|    {
 4411|  3.32M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  3.32M|    {
 4382|  3.32M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  3.32M|    {
 4151|  3.32M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  3.32M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.47M|    {
 2724|  6.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.47M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.47M|    {
 2705|  6.47M|        return decay_copy(t.begin());
 2706|  6.47M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  9.62M|    {
 3330|  9.62M|        return m_iterator;
 3331|  9.62M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  43.5M|    {
 4415|  43.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 479k, False: 43.0M]
  ------------------
 4416|   479k|            return false;
 4417|   479k|        }
 4418|  43.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  43.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  43.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  43.0M|        }
 4421|  43.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 39.7M, False: 3.29M]
  ------------------
 4422|  39.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  39.7M|                                          this->m_current_view.begin(),
 4424|  39.7M|                                          this->m_current_view.end());
 4425|  39.7M|        }
 4426|  43.0M|        m_latest = *m_cursor;
 4427|  43.0M|        ++m_cursor;
 4428|  43.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  43.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  43.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  43.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  43.0M|        }
 4432|  43.0M|        return true;
 4433|  43.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   129M|    {
 2781|   129M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   129M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   129M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   129M|    {
 2763|   129M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   129M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   129M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|   132M|    {
 3334|   132M|        return m_sentinel;
 3335|   132M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  3.32M|    {
 4071|  3.32M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  3.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  3.32M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   171k|    {
 1476|   171k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   171k|    {
  447|   171k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.32M|    {
 1177|  3.32M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  3.15M|{
 5923|  3.15M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  3.15M|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.15M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  3.15M|    }
 5927|  3.15M|    else {
 5928|  3.15M|        auto it = ranges::begin(source);
 5929|  3.15M|        while (n > 0) {
 5930|  3.15M|            --n;
 5931|  3.15M|            ++it;
 5932|  3.15M|        }
 5933|  3.15M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  3.15M|    }
 5935|  3.15M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.15M|    {
 2724|  3.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.15M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.15M|    {
 2705|  3.15M|        return decay_copy(t.begin());
 2706|  3.15M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  3.15M|{
 5910|  3.15M|    return ranges::end(source);
 5911|  3.15M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.15M|    {
 2781|  3.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.15M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.15M|    {
 2763|  3.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  3.15M|    {
 1430|  3.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  3.15M|    {
  437|  3.15M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   952k|    {
 7975|   952k|        return m_str;
 7976|   952k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   952k|{
 8820|   952k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   952k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 899k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   899k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   899k|    static_cast<    \
  |  |  929|   899k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   899k|    static_cast<    \
  |  |  929|   899k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   952k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  3.32M|    {
 1598|  3.32M|        return has_value();
 1599|  3.32M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.64M|    {
  485|  6.64M|        return m_has_value;
  486|  6.64M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   171k|    {
 1604|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   171k|        return this->get_unexpected().error();
 1606|   171k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   171k|    {
  468|   171k|        return m_unexpected;
  469|   171k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04M|    {
 1177|  1.04M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  2.85M|    {
 1653|  2.85M|        return value();
 1654|  2.85M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  3.15M|    {
 1627|  3.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.15M|        return this->get_value();
 1629|  3.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.15M|    {
  451|  3.15M|        return m_value;
  452|  3.15M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   991k|    {
 5830|   991k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  3.15M|    {
 5681|  3.15M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   991k|    {
 1430|   991k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   991k|    {
  437|   991k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  6.47M|    {
 3316|  6.47M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   952k|    {
 7971|   952k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|  1.04M|    {
 1598|  1.04M|        return has_value();
 1599|  1.04M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.04M|    {
  485|  2.04M|        return m_has_value;
  486|  2.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   991k|    {
 1673|   991k|        return &value();
 1674|   991k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   991k|    {
 1627|   991k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   991k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   991k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   991k|        return this->get_value();
 1629|   991k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   991k|    {
  451|   991k|        return m_value;
  452|   991k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  3.15M|    {
 5698|  3.15M|        return ranges::begin(m_range);
 5699|  3.15M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   476k|{
 8934|   476k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   476k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   476k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   476k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   476k|    static_cast<    \
  |  |  929|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   476k|    static_cast<    \
  |  |  929|   476k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   476k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.50M|{
 8672|  1.50M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.50M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.50M|{
 8607|  1.50M|#if !SCN_DISABLE_LOCALE
 8608|  1.50M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.50M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.50M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.50M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.50M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.2k, False: 1.42M]
  |  |  ------------------
  ------------------
 8615|  79.2k|        return unexpected(result.error());
 8616|  79.2k|    }
 8617|  1.42M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.50M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  96.1k|{
 8973|  96.1k|    T value;
 8974|  96.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  96.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  96.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 91.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|  96.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  91.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  91.7k|    static_cast<    \
  |  |  929|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  91.7k|    static_cast<    \
  |  |  929|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  96.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   308k|{
 8685|   308k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   308k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   308k|{
 8631|   308k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   308k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.2k, False: 295k]
  |  |  ------------------
  ------------------
 8635|  13.2k|        return unexpected(result.error());
 8636|  13.2k|    }
 8637|   295k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   308k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   295k|    {
 1663|   295k|        return std::move(value());
 1664|   295k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   513k|{
 8867|   513k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   513k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   513k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   513k|    static_cast<    \
  |  |  929|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   513k|    static_cast<    \
  |  |  929|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   513k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|  1.02M|    {
 7975|  1.02M|        return m_str;
 7976|  1.02M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  1.02M|{
 8820|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 973k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   973k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   973k|    static_cast<    \
  |  |  929|   973k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   973k|    static_cast<    \
  |  |  929|   973k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.02M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  1.07M|    {
 5830|  1.07M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  1.02M|    {
 7971|  1.02M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.20M|    {
  485|  2.20M|        return m_has_value;
  486|  2.20M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  1.07M|    {
 1673|  1.07M|        return &value();
 1674|  1.07M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  1.07M|    {
 1627|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.07M|        return this->get_value();
 1629|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.07M|    {
  451|  1.07M|        return m_value;
  452|  1.07M|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   513k|{
 8934|   513k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   513k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   513k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   513k|    static_cast<    \
  |  |  929|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   513k|    static_cast<    \
  |  |  929|   513k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   513k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|   105k|{
 8973|   105k|    T value;
 8974|   105k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   105k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   101k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   105k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   518k|{
 8867|   518k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   518k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   518k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   518k|    static_cast<    \
  |  |  929|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   518k|    static_cast<    \
  |  |  929|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   518k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|  1.03M|    {
 7975|  1.03M|        return m_str;
 7976|  1.03M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|  1.03M|{
 8820|  1.03M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.8k, False: 983k]
  |  |  ------------------
  ------------------
 8821|  52.8k|        return unexpected(result.error());
 8822|  52.8k|    }
 8823|   983k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   983k|    static_cast<    \
  |  |  929|   983k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   983k|    static_cast<    \
  |  |  929|   983k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.03M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  57.2k|    {
 1476|  57.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  57.2k|    {
  447|  57.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.14M|    {
 1177|  1.14M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  1.08M|    {
 5830|  1.08M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  1.08M|    {
 1430|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  1.08M|    {
  437|  1.08M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  1.03M|    {
 7971|  1.03M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|  1.14M|    {
 1598|  1.14M|        return has_value();
 1599|  1.14M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.22M|    {
  485|  2.22M|        return m_has_value;
  486|  2.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  1.08M|    {
 1673|  1.08M|        return &value();
 1674|  1.08M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   518k|{
 8934|   518k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   518k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   518k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   518k|    static_cast<    \
  |  |  929|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   518k|    static_cast<    \
  |  |  929|   518k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   518k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|   106k|{
 8973|   106k|    T value;
 8974|   106k|    auto arg = detail::make_arg<scan_context>(value);
 8975|   106k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.40k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.40k|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|   102k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|   106k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   352k|    {
 2724|   352k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   352k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   352k|    {
 2705|   352k|        return decay_copy(t.begin());
 2706|   352k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.08M|{
 1949|  3.08M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.08M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.06M|    {
 2781|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.06M|    {
 2763|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.06M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   321k|{
 5396|   321k|    detail::check_scan_arg_types<Args...>();
 5397|   321k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   321k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   321k|    {
 5349|   321k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   321k|    {
 5360|   321k|        return {detail::make_arg<
 5361|   321k|            kind, Context,
 5362|   321k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   321k|                                 typename Context::char_type>::value>(args)...};
 5364|   321k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   321k|{
 5170|   321k|    return make_value<Context>(value).ref_value;
 5171|   321k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   349k|{
 5120|   349k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   349k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   349k|                                  needs_context_tag>) {
 5124|   349k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   349k|    }
 5126|   349k|    else {
 5127|   349k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   349k|            value, context_tag<Context>{}));
 5129|   349k|    }
 5130|   349k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   349k|    {                                                                        \
 4959|   349k|        return val;                                                          \
 4960|   349k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   242k|{
 8591|   242k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   242k|    auto result = vscan_impl(buffer, format, args);
 8594|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 83.8k]
  |  |  ------------------
  ------------------
 8595|   158k|        return unexpected(result.error());
 8596|   158k|    }
 8597|  83.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   242k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   527k|{
 4720|   527k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   527k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   527k|                  "\n"
 4724|   527k|                  "Unsupported range type given as input to a scanning "
 4725|   527k|                  "function.\n"
 4726|   527k|                  "A range needs to have a character type (value type) "
 4727|   527k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   527k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   527k|                  "to be included.\n"
 4730|   527k|                  "See the scnlib documentation for more details.");
 4731|   527k|    static_assert(
 4732|   527k|        !std::is_same_v<T, custom_char_traits>,
 4733|   527k|        "\n"
 4734|   527k|        "Unsupported range type given as input to a scanning "
 4735|   527k|        "function.\n"
 4736|   527k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   527k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   527k|        "not supported.");
 4739|   527k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   527k|                  "\n"
 4741|   527k|                  "Unsupported range type given as input to a scanning "
 4742|   527k|                  "function.\n"
 4743|   527k|                  "file_marker_found cannot be used as an "
 4744|   527k|                  "source range type to scn::scan.\n"
 4745|   527k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   527k|                  "and do not provide an explicit source range, "
 4747|   527k|                  "or use scn::scan with a FILE* directly.");
 4748|   527k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   527k|                  "\n"
 4750|   527k|                  "Unsupported range type given as input to a scanning "
 4751|   527k|                  "function.\n"
 4752|   527k|                  "In order to be scannable, a range needs to satisfy "
 4753|   527k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   527k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   527k|                  "\n"
 4756|   527k|                  "Unsupported range type given as input to a scanning "
 4757|   527k|                  "function.\n"
 4758|   527k|                  "A range needs to model forward_range and have a valid "
 4759|   527k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   527k|                  "Examples of scannable ranges are std::string, "
 4761|   527k|                  "std::string_view, "
 4762|   527k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   527k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   527k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   527k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   527k|{
 4659|   527k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   527k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   527k|    }
 4662|   527k|    else {
 4663|   527k|        return invalid_char_type{};
 4664|   527k|    }
 4665|   527k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   527k|    {
 2855|   527k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   527k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   527k|    {
 2836|   527k|        return t.data();
 2837|   527k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   527k|    {
 3231|   527k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 951, False: 526k]
  ------------------
 3232|   527k|                   ? nullptr
 3233|   527k|                   : std::addressof(*ranges::begin(derived()));
 3234|   527k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   527k|    {
 3005|   527k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   527k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   527k|    {
 2978|   527k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   527k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   895k|    {
 3339|   895k|        return m_iterator == m_sentinel;
 3340|   895k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.05M|    {
 3185|  1.05M|        return static_cast<const D&>(*this);
 3186|  1.05M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   710k|    {
 2724|   710k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   710k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   710k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   710k|    {
 2705|   710k|        return decay_copy(t.begin());
 2706|   710k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  15.5M|    {
 3330|  15.5M|        return m_iterator;
 3331|  15.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   527k|    {
 2930|   527k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   527k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   527k|    {
 2896|   527k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   527k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  2.24M|    {
 3346|  2.24M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.24M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   343k|    {
 1476|   343k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   343k|    {
  447|   343k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   527k|    {
 1177|   527k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   184k|{
 5923|   184k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   184k|                      ranges::iterator_t<SourceRange>>) {
 5925|   184k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   184k|    }
 5927|   184k|    else {
 5928|   184k|        auto it = ranges::begin(source);
 5929|   184k|        while (n > 0) {
 5930|   184k|            --n;
 5931|   184k|            ++it;
 5932|   184k|        }
 5933|   184k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   184k|    }
 5935|   184k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   776k|    {
 2724|   776k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   776k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   776k|    {
 2705|   776k|        return decay_copy(t.begin());
 2706|   776k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   184k|{
 5910|   184k|    return ranges::end(source);
 5911|   184k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   184k|    {
 2781|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   184k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   184k|    {
 2763|   184k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   184k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  8.21M|    {
 3334|  8.21M|        return m_sentinel;
 3335|  8.21M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   184k|    {
 1430|   184k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   184k|    {
  437|   184k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   160k|    {
 7975|   160k|        return m_str;
 7976|   160k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   321k|    {
 5426|   321k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   321k|    {
 5379|   321k|        return m_argptrs;
 5380|   321k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   968k|    {
 5478|   968k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   160k|{
 8820|   160k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 55.1k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  55.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.1k|    static_cast<    \
  |  |  929|  55.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.1k|    static_cast<    \
  |  |  929|  55.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   160k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   527k|    {
 1598|   527k|        return has_value();
 1599|   527k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   343k|    {
 1604|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   343k|        return this->get_unexpected().error();
 1606|   343k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   343k|    {
  468|   343k|        return m_unexpected;
  469|   343k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   167k|    {
 1653|   167k|        return value();
 1654|   167k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   184k|    {
 1627|   184k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   184k|        return this->get_value();
 1629|   184k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   184k|    {
  451|   184k|        return m_value;
  452|   184k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  60.5k|    {
 5830|  60.5k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   184k|    {
 5681|   184k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  60.5k|    {
 1430|  60.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  60.5k|    {
  437|  60.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   321k|    {
 5374|   321k|        return m_args;
 5375|   321k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  5.43M|    {
 3316|  5.43M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   968k|{
 7696|   968k|    return s;
 7697|   968k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   968k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   160k|    {
 7971|   160k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   235k|    {
  485|   235k|        return m_has_value;
  486|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  60.5k|    {
 1673|  60.5k|        return &value();
 1674|  60.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  60.5k|    {
 1627|  60.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.5k|        return this->get_value();
 1629|  60.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.5k|    {
  451|  60.5k|        return m_value;
  452|  60.5k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   184k|    {
 5698|   184k|        return ranges::begin(m_range);
 5699|   184k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   242k|{
 8607|   242k|#if !SCN_DISABLE_LOCALE
 8608|   242k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   242k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   242k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   242k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 83.8k]
  |  |  ------------------
  ------------------
 8615|   158k|        return unexpected(result.error());
 8616|   158k|    }
 8617|  83.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   242k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  28.4k|{
 5155|  28.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  28.4k|    basic_scan_arg<Context> arg;
 5158|  28.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  28.4k|    arg.m_value = make_value<Context>(value);
 5160|  28.4k|    return arg;
 5161|  28.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  43.0k|{
 8631|  43.0k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  43.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  43.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.4k, False: 16.6k]
  |  |  ------------------
  ------------------
 8635|  26.4k|        return unexpected(result.error());
 8636|  26.4k|    }
 8637|  16.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  43.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  16.6k|    {
 1663|  16.6k|        return std::move(value());
 1664|  16.6k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   322k|{
 5396|   322k|    detail::check_scan_arg_types<Args...>();
 5397|   322k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   322k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   322k|    {
 5349|   322k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   322k|    {
 5360|   322k|        return {detail::make_arg<
 5361|   322k|            kind, Context,
 5362|   322k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   322k|                                 typename Context::char_type>::value>(args)...};
 5364|   322k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   322k|{
 5170|   322k|    return make_value<Context>(value).ref_value;
 5171|   322k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   351k|{
 5120|   351k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   351k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   351k|                                  needs_context_tag>) {
 5124|   351k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   351k|    }
 5126|   351k|    else {
 5127|   351k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   351k|            value, context_tag<Context>{}));
 5129|   351k|    }
 5130|   351k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   351k|    {                                                                        \
 4959|   351k|        return val;                                                          \
 4960|   351k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   161k|    {
 7975|   161k|        return m_str;
 7976|   161k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   322k|    {
 5426|   322k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   322k|    {
 5379|   322k|        return m_argptrs;
 5380|   322k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   161k|{
 8820|   161k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 55.7k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  55.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.7k|    static_cast<    \
  |  |  929|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.7k|    static_cast<    \
  |  |  929|  55.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   161k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   175k|    {
 1177|   175k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  61.3k|    {
 5830|  61.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  61.3k|    {
 1430|  61.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  61.3k|    {
  437|  61.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   322k|    {
 5374|   322k|        return m_args;
 5375|   322k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   161k|    {
 7971|   161k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   175k|    {
 1598|   175k|        return has_value();
 1599|   175k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   237k|    {
  485|   237k|        return m_has_value;
  486|   237k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  61.3k|    {
 1673|  61.3k|        return &value();
 1674|  61.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  61.3k|    {
 1627|  61.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  61.3k|        return this->get_value();
 1629|  61.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  61.3k|    {
  451|  61.3k|        return m_value;
  452|  61.3k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  28.5k|{
 5155|  28.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  28.5k|    basic_scan_arg<Context> arg;
 5158|  28.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  28.5k|    arg.m_value = make_value<Context>(value);
 5160|  28.5k|    return arg;
 5161|  28.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   324k|{
 5396|   324k|    detail::check_scan_arg_types<Args...>();
 5397|   324k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   324k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   324k|    {
 5349|   324k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   324k|    {
 5360|   324k|        return {detail::make_arg<
 5361|   324k|            kind, Context,
 5362|   324k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   324k|                                 typename Context::char_type>::value>(args)...};
 5364|   324k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   324k|{
 5170|   324k|    return make_value<Context>(value).ref_value;
 5171|   324k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   353k|{
 5120|   353k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   353k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   353k|                                  needs_context_tag>) {
 5124|   353k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   353k|    }
 5126|   353k|    else {
 5127|   353k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   353k|            value, context_tag<Context>{}));
 5129|   353k|    }
 5130|   353k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   353k|    {                                                                        \
 4959|   353k|        return val;                                                          \
 4960|   353k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   162k|    {
 7975|   162k|        return m_str;
 7976|   162k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   324k|    {
 5426|   324k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   324k|    {
 5379|   324k|        return m_argptrs;
 5380|   324k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   162k|{
 8820|   162k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 56.8k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  56.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.8k|    static_cast<    \
  |  |  929|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.8k|    static_cast<    \
  |  |  929|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   162k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   176k|    {
 1177|   176k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  62.4k|    {
 5830|  62.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  62.4k|    {
 1430|  62.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  62.4k|    {
  437|  62.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   324k|    {
 5374|   324k|        return m_args;
 5375|   324k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   162k|    {
 7971|   162k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   176k|    {
 1598|   176k|        return has_value();
 1599|   176k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   239k|    {
  485|   239k|        return m_has_value;
  486|   239k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  62.4k|    {
 1673|  62.4k|        return &value();
 1674|  62.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  62.4k|    {
 1627|  62.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  62.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  62.4k|        return this->get_value();
 1629|  62.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  62.4k|    {
  451|  62.4k|        return m_value;
  452|  62.4k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  28.9k|{
 5155|  28.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  28.9k|    basic_scan_arg<Context> arg;
 5158|  28.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  28.9k|    arg.m_value = make_value<Context>(value);
 5160|  28.9k|    return arg;
 5161|  28.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   343k|    {
 2724|   343k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   343k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   343k|    {
 2705|   343k|        return decay_copy(t.begin());
 2706|   343k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  9.30M|{
 1949|  9.30M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.30M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.05M|    {
 2781|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.05M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.05M|    {
 2763|  1.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.05M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   242k|{
 8591|   242k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   242k|    auto result = vscan_impl(buffer, format, args);
 8594|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 83.6k]
  |  |  ------------------
  ------------------
 8595|   158k|        return unexpected(result.error());
 8596|   158k|    }
 8597|  83.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   242k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   527k|{
 4720|   527k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   527k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   527k|                  "\n"
 4724|   527k|                  "Unsupported range type given as input to a scanning "
 4725|   527k|                  "function.\n"
 4726|   527k|                  "A range needs to have a character type (value type) "
 4727|   527k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   527k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   527k|                  "to be included.\n"
 4730|   527k|                  "See the scnlib documentation for more details.");
 4731|   527k|    static_assert(
 4732|   527k|        !std::is_same_v<T, custom_char_traits>,
 4733|   527k|        "\n"
 4734|   527k|        "Unsupported range type given as input to a scanning "
 4735|   527k|        "function.\n"
 4736|   527k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   527k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   527k|        "not supported.");
 4739|   527k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   527k|                  "\n"
 4741|   527k|                  "Unsupported range type given as input to a scanning "
 4742|   527k|                  "function.\n"
 4743|   527k|                  "file_marker_found cannot be used as an "
 4744|   527k|                  "source range type to scn::scan.\n"
 4745|   527k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   527k|                  "and do not provide an explicit source range, "
 4747|   527k|                  "or use scn::scan with a FILE* directly.");
 4748|   527k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   527k|                  "\n"
 4750|   527k|                  "Unsupported range type given as input to a scanning "
 4751|   527k|                  "function.\n"
 4752|   527k|                  "In order to be scannable, a range needs to satisfy "
 4753|   527k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   527k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   527k|                  "\n"
 4756|   527k|                  "Unsupported range type given as input to a scanning "
 4757|   527k|                  "function.\n"
 4758|   527k|                  "A range needs to model forward_range and have a valid "
 4759|   527k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   527k|                  "Examples of scannable ranges are std::string, "
 4761|   527k|                  "std::string_view, "
 4762|   527k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   527k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   527k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   527k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   527k|{
 4690|   527k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   527k|        return file_marker_found{};
 4692|   527k|    }
 4693|   527k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   527k|        if constexpr (ranges::range<Range>) {
 4695|   527k|            return insufficient_range{};
 4696|   527k|        }
 4697|   527k|        else {
 4698|   527k|            return invalid_input_range{};
 4699|   527k|        }
 4700|   527k|    }
 4701|   527k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   527k|        return invalid_char_type{};
 4703|   527k|    }
 4704|   527k|    else {
 4705|   527k|        return make_forward_scan_buffer(r);
 4706|   527k|    }
 4707|   527k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   527k|{
 4524|   527k|    return basic_scan_forward_buffer_impl(range);
 4525|   527k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   527k|    {
 4411|   527k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   527k|    {
 4382|   527k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   527k|    {
 4151|   527k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   527k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   710k|    {
 2724|   710k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   710k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   710k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   710k|    {
 2705|   710k|        return decay_copy(t.begin());
 2706|   710k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   894k|    {
 3330|   894k|        return m_iterator;
 3331|   894k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  2.40M|    {
 4415|  2.40M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 188k, False: 2.21M]
  ------------------
 4416|   188k|            return false;
 4417|   188k|        }
 4418|  2.21M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.21M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.21M|        }
 4421|  2.21M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.68M, False: 526k]
  ------------------
 4422|  1.68M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.68M|                                          this->m_current_view.begin(),
 4424|  1.68M|                                          this->m_current_view.end());
 4425|  1.68M|        }
 4426|  2.21M|        m_latest = *m_cursor;
 4427|  2.21M|        ++m_cursor;
 4428|  2.21M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.21M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.21M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.21M|        }
 4432|  2.21M|        return true;
 4433|  2.21M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.83M|    {
 2781|  6.83M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.83M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.83M|    {
 2763|  6.83M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.83M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  7.01M|    {
 3334|  7.01M|        return m_sentinel;
 3335|  7.01M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   527k|    {
 4071|   527k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   527k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   527k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   343k|    {
 1476|   343k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   343k|    {
  447|   343k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   527k|    {
 1177|   527k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   183k|{
 5923|   183k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   183k|                      ranges::iterator_t<SourceRange>>) {
 5925|   183k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   183k|    }
 5927|   183k|    else {
 5928|   183k|        auto it = ranges::begin(source);
 5929|   183k|        while (n > 0) {
 5930|   183k|            --n;
 5931|   183k|            ++it;
 5932|   183k|        }
 5933|   183k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   183k|    }
 5935|   183k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   183k|    {
 2724|   183k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   183k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   183k|    {
 2705|   183k|        return decay_copy(t.begin());
 2706|   183k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   183k|{
 5910|   183k|    return ranges::end(source);
 5911|   183k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   183k|    {
 2781|   183k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   183k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   183k|    {
 2763|   183k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   183k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   183k|    {
 1430|   183k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   183k|    {
  437|   183k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   160k|    {
 7975|   160k|        return m_str;
 7976|   160k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   160k|{
 8820|   160k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 55.0k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  55.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   160k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   527k|    {
 1598|   527k|        return has_value();
 1599|   527k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   343k|    {
 1604|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   343k|        return this->get_unexpected().error();
 1606|   343k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   343k|    {
  468|   343k|        return m_unexpected;
  469|   343k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   167k|    {
 1653|   167k|        return value();
 1654|   167k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   183k|    {
 1627|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   183k|        return this->get_value();
 1629|   183k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   183k|    {
  451|   183k|        return m_value;
  452|   183k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  60.4k|    {
 5830|  60.4k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   183k|    {
 5681|   183k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  60.4k|    {
 1430|  60.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  60.4k|    {
  437|  60.4k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   710k|    {
 3316|   710k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   160k|    {
 7971|   160k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   235k|    {
  485|   235k|        return m_has_value;
  486|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  60.4k|    {
 1673|  60.4k|        return &value();
 1674|  60.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  60.4k|    {
 1627|  60.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.4k|        return this->get_value();
 1629|  60.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.4k|    {
  451|  60.4k|        return m_value;
  452|  60.4k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   183k|    {
 5698|   183k|        return ranges::begin(m_range);
 5699|   183k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   242k|{
 8607|   242k|#if !SCN_DISABLE_LOCALE
 8608|   242k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   242k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   242k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   242k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 83.6k]
  |  |  ------------------
  ------------------
 8615|   158k|        return unexpected(result.error());
 8616|   158k|    }
 8617|  83.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   242k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  42.9k|{
 8631|  42.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  42.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  42.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.4k, False: 16.5k]
  |  |  ------------------
  ------------------
 8635|  26.4k|        return unexpected(result.error());
 8636|  26.4k|    }
 8637|  16.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  42.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  16.5k|    {
 1663|  16.5k|        return std::move(value());
 1664|  16.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   161k|    {
 7975|   161k|        return m_str;
 7976|   161k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   161k|{
 8820|   161k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 55.6k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  55.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.6k|    static_cast<    \
  |  |  929|  55.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.6k|    static_cast<    \
  |  |  929|  55.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   161k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   175k|    {
 1177|   175k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  61.1k|    {
 5830|  61.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  61.1k|    {
 1430|  61.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  61.1k|    {
  437|  61.1k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   161k|    {
 7971|   161k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   175k|    {
 1598|   175k|        return has_value();
 1599|   175k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   236k|    {
  485|   236k|        return m_has_value;
  486|   236k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  61.1k|    {
 1673|  61.1k|        return &value();
 1674|  61.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  61.1k|    {
 1627|  61.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  61.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  61.1k|        return this->get_value();
 1629|  61.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  61.1k|    {
  451|  61.1k|        return m_value;
  452|  61.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   162k|    {
 7975|   162k|        return m_str;
 7976|   162k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   162k|{
 8820|   162k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 56.6k]
  |  |  ------------------
  ------------------
 8821|   105k|        return unexpected(result.error());
 8822|   105k|    }
 8823|  56.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.6k|    static_cast<    \
  |  |  929|  56.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   162k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   176k|    {
 1177|   176k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  62.3k|    {
 5830|  62.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  62.3k|    {
 1430|  62.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  62.3k|    {
  437|  62.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   162k|    {
 7971|   162k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   176k|    {
 1598|   176k|        return has_value();
 1599|   176k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   239k|    {
  485|   239k|        return m_has_value;
  486|   239k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  62.3k|    {
 1673|  62.3k|        return &value();
 1674|  62.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  62.3k|    {
 1627|  62.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  62.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  62.3k|        return this->get_value();
 1629|  62.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  62.3k|    {
  451|  62.3k|        return m_value;
  452|  62.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  8.16M|    {
 3568|  8.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  8.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  8.16M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  34.7M|    {
 3574|  34.7M|        return m_code == good;
 3575|  34.7M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   792k|    {
 3585|   792k|        return m_code;
 3586|   792k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   152M|    {
 3330|   152M|        return m_iterator;
 3331|   152M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  19.2M|    {
 3330|  19.2M|        return m_iterator;
 3331|  19.2M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  5.39M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.48M|    {
 6272|  1.48M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.48M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.48M|            m_specs.localized = true;
 6274|  1.48M|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.48M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.90M|    {
 6303|  3.90M|        m_specs.type = type;
 6304|  3.90M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  5.39M|    {
 6376|  5.39M|        return static_cast<bool>(m_error);
 6377|  5.39M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   792k|{
 3609|   792k|    return a.code() == b;
 3610|   792k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   792k|{
 3613|   792k|    return !(a == b);
 3614|   792k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.48M|{
 7063|  1.48M|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.48M]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.48M]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.48M]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 1.48M]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.48M]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.48M]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.48M]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.48M]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 1.48M]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.48M]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.48M]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.48M]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.48M]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.48M]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.48M]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.48M]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   464k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 464k, False: 1.02M]
  ------------------
 7091|   970k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 506k, False: 978k]
  ------------------
 7092|  1.48M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 514k, False: 970k]
  ------------------
 7093|  1.48M|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.48M]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.48M]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.48M]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.48M]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.48M]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.48M]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.48M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.48M|            SCN_CLANG_POP
 7110|  1.48M|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.48M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  6.48M|    {
 2896|  6.48M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  6.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  6.48M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  6.48M|    {
 2930|  6.48M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  6.48M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  6.48M|    {
 2953|  6.48M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  6.48M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  6.48M|    {
 2962|  6.48M|        return fn::impl(std::forward<T>(t));
 2963|  6.48M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.44k|{
 3654|  1.44k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.44k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.65k|{
 3654|  2.65k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.65k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  52.7k|{
 3654|  52.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  52.7k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  5.39M|{
 7193|  5.39M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 3.90M, False: 1.48M]
  ------------------
 7194|  5.39M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 3.90M]
  ------------------
 7195|  3.90M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 3.90M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  5.39M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   980M|    {
 4195|   980M|        return m_end == nullptr;
 4196|   980M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  2.62M|{
 3715|  2.62M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  2.62M|                                          const CharT*, const CharT*>) {
 3717|  2.62M|        return {first, last};
 3718|  2.62M|    }
 3719|  2.62M|    else {
 3720|  2.62M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  2.62M|    }
 3722|  2.62M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  12.6M|    {
 4211|  12.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 12.6M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  12.6M|        return parent()->get_segment_starting_at(position());
 4217|  12.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   546M|    {
 4205|   546M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   546M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   546M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   546M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   546M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  12.6M|    {
 4101|  12.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  12.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.62M, False: 7.04M]
  |  |  ------------------
  ------------------
 4102|  12.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  5.62M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  5.62M|        }
 4105|  7.04M|        const auto start = pos - m_putback_buffer.size();
 4106|  7.04M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  7.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  7.04M|        return m_current_view.substr(start);
 4108|  7.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  8.81M|    {
 4200|  8.81M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  8.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  8.81M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  8.81M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  23.1M|    {
 4190|  23.1M|        return m_position;
 4191|  23.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  9.97M|    {
 4123|  9.97M|        return m_is_contiguous;
 4124|  9.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  56.6M|    {
 4195|  56.6M|        return m_end == nullptr;
 4196|  56.6M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   178k|{
 3715|   178k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   178k|                                          const CharT*, const CharT*>) {
 3717|   178k|        return {first, last};
 3718|   178k|    }
 3719|   178k|    else {
 3720|   178k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   178k|    }
 3722|   178k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   897k|    {
 4211|   897k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 897k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   897k|        return parent()->get_segment_starting_at(position());
 4217|   897k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  30.5M|    {
 4205|  30.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  30.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  30.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  30.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   897k|    {
 4101|   897k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   897k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362k, False: 535k]
  |  |  ------------------
  ------------------
 4102|   897k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   362k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   362k|        }
 4105|   535k|        const auto start = pos - m_putback_buffer.size();
 4106|   535k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   535k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   535k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   535k|        return m_current_view.substr(start);
 4108|   535k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.34M|    {
 4200|  1.34M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.34M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.34M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  2.31M|    {
 4190|  2.31M|        return m_position;
 4191|  2.31M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.58M|    {
 4123|  1.58M|        return m_is_contiguous;
 4124|  1.58M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  28.5M|    {
 3180|  28.5M|        return static_cast<D&>(*this);
 3181|  28.5M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  14.2M|    {
 2978|  14.2M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  14.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  14.2M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  14.2M|    {
 3005|  14.2M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  14.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  14.2M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  14.2M|    {
 3221|  14.2M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 19.6k, False: 14.2M]
  ------------------
 3222|  14.2M|                   ? nullptr
 3223|  14.2M|                   : std::addressof(*ranges::begin(derived()));
 3224|  14.2M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   735k|    {
 3180|   735k|        return static_cast<D&>(*this);
 3181|   735k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   367k|    {
 2978|   367k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   367k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   367k|    {
 3005|   367k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   367k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   367k|    {
 3221|   367k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 367k]
  ------------------
 3222|   367k|                   ? nullptr
 3223|   367k|                   : std::addressof(*ranges::begin(derived()));
 3224|   367k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  2.39M|    {
 8169|  2.39M|        return ranges::subrange{begin(), end()};
 8170|  2.39M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  7.06M|    {
 8153|  7.06M|        return m_current;
 8154|  7.06M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  2.39M|    {
 8161|  2.39M|        return ranges::default_sentinel;
 8162|  2.39M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  37.1M|    {
 3316|  37.1M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  11.5M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.32M|    {
 1837|  3.32M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.32M|                                            std::forward<F>(f));
 1839|  3.32M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.32M|{
 1323|  3.32M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.32M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.32M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.32M|            return result(*std::forward<Exp>(exp));
 1327|  3.32M|        }
 1328|       |
 1329|  3.32M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.32M|        return result(unexpect, monostate{});
 1331|  3.32M|    }
 1332|  3.32M|    else {
 1333|  3.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.29M, False: 32.7k]
  |  |  ------------------
  ------------------
 1335|  3.32M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.32M|                   : result(unexpect,
 1337|  32.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  32.7k|                                           std::forward<Exp>(exp).error()));
 1339|  3.32M|    }
 1340|  3.32M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  35.5M|    {
  485|  35.5M|        return m_has_value;
  486|  35.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  12.0M|    {
 1663|  12.0M|        return std::move(value());
 1664|  12.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  13.8M|    {
 1627|  13.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  13.8M|        return this->get_value();
 1629|  13.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  13.8M|    {
  451|  13.8M|        return m_value;
  452|  13.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  14.9M|    {
 1430|  14.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  14.9M|    {
  437|  14.9M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.8M|    {
 1177|  18.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  66.6k|{
 1211|  66.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  66.6k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  91.9k|    {
 1614|  91.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  91.9k|        return std::move(this->get_unexpected().error());
 1616|  91.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|   125k|    {
  468|   125k|        return m_unexpected;
  469|   125k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   574k|    {
  361|   574k|        return m_unexpected;
  362|   574k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.27M|    {
 1486|  3.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.70M|    {
  447|  3.70M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   398k|    {
 8169|   398k|        return ranges::subrange{begin(), end()};
 8170|   398k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   930k|    {
 8153|   930k|        return m_current;
 8154|   930k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   398k|    {
 8161|   398k|        return ranges::default_sentinel;
 8162|   398k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  4.49M|    {
 3316|  4.49M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   527k|    {
 1837|   527k|        return detail::transform_error_impl(std::move(*this),
 1838|   527k|                                            std::forward<F>(f));
 1839|   527k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   527k|{
 1323|   527k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   527k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   527k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   527k|            return result(*std::forward<Exp>(exp));
 1327|   527k|        }
 1328|       |
 1329|   527k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   527k|        return result(unexpect, monostate{});
 1331|   527k|    }
 1332|   527k|    else {
 1333|   527k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   527k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   527k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524k, False: 3.00k]
  |  |  ------------------
  ------------------
 1335|   527k|                   ? result(*std::forward<Exp>(exp))
 1336|   527k|                   : result(unexpect,
 1337|  3.00k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.00k|                                           std::forward<Exp>(exp).error()));
 1339|   527k|    }
 1340|   527k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.63M|    {
  485|  4.63M|        return m_has_value;
  486|  4.63M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.81M|    {
 1663|  1.81M|        return std::move(value());
 1664|  1.81M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.82M|    {
 1627|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.82M|        return this->get_value();
 1629|  1.82M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.82M|    {
  451|  1.82M|        return m_value;
  452|  1.82M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.21M|    {
 1430|  1.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.21M|    {
  437|  1.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02M|    {
 1177|  3.02M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  62.1k|    {
 1614|  62.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  62.1k|        return std::move(this->get_unexpected().error());
 1616|  62.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  63.5k|    {
  468|  63.5k|        return m_unexpected;
  469|  63.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   862k|    {
 1486|   862k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.80M|    {
  447|  1.80M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   301k|    {
  347|   301k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   301k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   301k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   380k|    {
 1476|   380k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  3.40M|    {
  447|  3.40M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.7M|    {
 1177|  17.7M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  14.1M|    {
 1430|  14.1M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  14.1M|    {
  437|  14.1M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  20.7M|    {
 1598|  20.7M|        return has_value();
 1599|  20.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  32.5M|    {
  485|  32.5M|        return m_has_value;
  486|  32.5M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   453k|    {
 1604|   453k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   453k|        return this->get_unexpected().error();
 1606|   453k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   453k|    {
  468|   453k|        return m_unexpected;
  469|   453k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  9.10M|    {
 1663|  9.10M|        return std::move(value());
 1664|  9.10M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  11.2M|    {
 1627|  11.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.2M|        return this->get_value();
 1629|  11.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  11.2M|    {
  451|  11.2M|        return m_value;
  452|  11.2M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   765k|    {
 1476|   765k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.44M|    {
  447|  1.44M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02M|    {
 1177|  3.02M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.57M|    {
 1430|  1.57M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.57M|    {
  437|  1.57M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.54M|    {
 1598|  3.54M|        return has_value();
 1599|  3.54M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.68M|    {
  485|  5.68M|        return m_has_value;
  486|  5.68M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   921k|    {
 1604|   921k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   921k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   921k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   921k|        return this->get_unexpected().error();
 1606|   921k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   921k|    {
  468|   921k|        return m_unexpected;
  469|   921k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.21M|    {
 1627|  1.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.21M|        return this->get_value();
 1629|  1.21M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.21M|    {
  451|  1.21M|        return m_value;
  452|  1.21M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  3.13M|    {
 1837|  3.13M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.13M|                                            std::forward<F>(f));
 1839|  3.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  3.13M|{
 1323|  3.13M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.13M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.13M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.13M|            return result(*std::forward<Exp>(exp));
 1327|  3.13M|        }
 1328|       |
 1329|  3.13M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.13M|        return result(unexpect, monostate{});
 1331|  3.13M|    }
 1332|  3.13M|    else {
 1333|  3.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.10M, False: 27.8k]
  |  |  ------------------
  ------------------
 1335|  3.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.13M|                   : result(unexpect,
 1337|  27.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  27.8k|                                           std::forward<Exp>(exp).error()));
 1339|  3.13M|    }
 1340|  3.13M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.9M|    {
  485|  11.9M|        return m_has_value;
  486|  11.9M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.10M|    {
 1663|  3.10M|        return std::move(value());
 1664|  3.10M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  4.19M|    {
 1627|  4.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.19M|        return this->get_value();
 1629|  4.19M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.19M|    {
  451|  4.19M|        return m_value;
  452|  4.19M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  27.8k|    {
 1614|  27.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  27.8k|        return std::move(this->get_unexpected().error());
 1616|  27.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  35.3k|    {
  468|  35.3k|        return m_unexpected;
  469|  35.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.02M|    {
 1486|  3.02M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  23.9M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   431k|    {
 1476|   431k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  29.6M|    {
 4280|  29.6M|        return x.is_at_end();
 4281|  29.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  74.4M|    {
 4324|  74.4M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 74.4M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  74.4M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 74.4M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  74.4M|        return !read_at_position();
 4331|  74.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   321M|    {
 4304|   321M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   321M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   321M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   321M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 321M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   321M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   321M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 278M, False: 43.5M]
  |  |  ------------------
  ------------------
 4311|   278M|            return true;
 4312|   278M|        }
 4313|       |
 4314|  86.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 43.5M, False: 43.0M]
  ------------------
 4315|  43.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 479k, False: 43.0M]
  ------------------
 4316|   479k|                return false;
 4317|   479k|            }
 4318|  43.5M|        }
 4319|  43.0M|        return true;
 4320|  43.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   416M|    {
 4081|   416M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   416M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  82.2M|    {
 4239|  82.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  82.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  82.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 82.2M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  82.2M|        auto res = read_at_position();
 4248|  82.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  82.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  82.2M|        return parent()->get_character_at(m_position);
 4250|  82.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  82.2M|    {
 4112|  82.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  82.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.8M, False: 31.3M]
  |  |  ------------------
  ------------------
 4113|  82.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  50.8M|            return m_putback_buffer[pos];
 4115|  50.8M|        }
 4116|  31.3M|        const auto start = pos - m_putback_buffer.size();
 4117|  31.3M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  31.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  31.3M|        return m_current_view[start];
 4119|  31.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  21.5M|    {
 1430|  21.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  21.5M|    {
  437|  21.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.6M|    {
 1177|  21.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   178k|    {
  347|   178k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   178k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   178k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   125k|    {
 1476|   125k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   125k|    {
  447|   125k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   287k|    {
  356|   287k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   287k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  9.49M|    {
 1598|  9.49M|        return has_value();
 1599|  9.49M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.76M|    {
 1653|  1.76M|        return value();
 1654|  1.76M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  78.6M|    {
 4274|  78.6M|        return !(lhs == rhs);
 4275|  78.6M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  87.4M|    {
 4269|  87.4M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 87.4M, False: 0]
  |  Branch (4269:46): [True: 11.2M, False: 76.2M]
  ------------------
 4270|  87.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|   164M|    {
 4225|   164M|        ++m_position;
 4226|   164M|        (void)read_at_position();
 4227|   164M|        return *this;
 4228|   164M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|   109k|    {
  347|   109k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   109k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  24.8k|    {
 1476|  24.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  24.8k|    {
  447|  24.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.64M|    {
 1177|  4.64M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  4.62M|    {
 1430|  4.62M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  4.62M|    {
  437|  4.62M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  4.64M|    {
 1598|  4.64M|        return has_value();
 1599|  4.64M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.29M|    {
  485|  9.29M|        return m_has_value;
  486|  9.29M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  24.8k|    {
 1604|  24.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  24.8k|        return this->get_unexpected().error();
 1606|  24.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  24.8k|    {
  468|  24.8k|        return m_unexpected;
  469|  24.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.62M|    {
 1663|  4.62M|        return std::move(value());
 1664|  4.62M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.62M|    {
 1627|  4.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.62M|        return this->get_value();
 1629|  4.62M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.62M|    {
  451|  4.62M|        return m_value;
  452|  4.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   105M|    {
 3334|   105M|        return m_sentinel;
 3335|   105M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|   103k|    {
  347|   103k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   103k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  29.0M|    {
  361|  29.0M|        return m_unexpected;
  362|  29.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  7.81M|    {
  356|  7.81M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.81M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  7.81M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  35.8M|    {
  347|  35.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  35.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  35.8M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  35.8M|    {
  361|  35.8M|        return m_unexpected;
  362|  35.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  35.8M|    {
  356|  35.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  35.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  35.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   177k|{
 1211|   177k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   177k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  7.53M|    {
  347|  7.53M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  7.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  7.53M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  33.4k|    {
 1604|  33.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.4k|        return this->get_unexpected().error();
 1606|  33.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.33M|    {
 1476|  3.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  3.39M|    {
  447|  3.39M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  36.9M|    {
 1177|  36.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  1.78M|    {
 1430|  1.78M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.78M|    {
  437|  1.78M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  18.8M|    {
 1476|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  18.8M|    {
  447|  18.8M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  40.2M|    {
 1598|  40.2M|        return has_value();
 1599|  40.2M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  70.8M|    {
  485|  70.8M|        return m_has_value;
  486|  70.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  9.24M|    {
 1604|  9.24M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.24M|        return this->get_unexpected().error();
 1606|  9.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  9.24M|    {
  468|  9.24M|        return m_unexpected;
  469|  9.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  3.60M|    {
 1430|  3.60M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.60M|    {
  437|  3.60M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.60M|    {
 1177|  3.60M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    535|    {
 1476|    535|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    535|    {
  447|    535|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  9.40M|    {
 1653|  9.40M|        return value();
 1654|  9.40M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  18.1M|    {
 1627|  18.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.1M|        return this->get_value();
 1629|  18.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  18.1M|    {
  451|  18.1M|        return m_value;
  452|  18.1M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   313k|    {
 1598|   313k|        return has_value();
 1599|   313k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  7.20M|    {
  485|  7.20M|        return m_has_value;
  486|  7.20M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.29M|    {
 1663|  3.29M|        return std::move(value());
 1664|  3.29M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.60M|    {
 1627|  3.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.60M|        return this->get_value();
 1629|  3.60M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  3.60M|    {
  451|  3.60M|        return m_value;
  452|  3.60M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  8.81M|    {
 1837|  8.81M|        return detail::transform_error_impl(std::move(*this),
 1838|  8.81M|                                            std::forward<F>(f));
 1839|  8.81M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  8.81M|{
 1323|  8.81M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  8.81M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  8.81M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  8.81M|            return result(*std::forward<Exp>(exp));
 1327|  8.81M|        }
 1328|       |
 1329|  8.81M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  8.81M|        return result(unexpect, monostate{});
 1331|  8.81M|    }
 1332|  8.81M|    else {
 1333|  8.81M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.81M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.81M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.75M, False: 59.2k]
  |  |  ------------------
  ------------------
 1335|  8.81M|                   ? result(*std::forward<Exp>(exp))
 1336|  8.81M|                   : result(unexpect,
 1337|  59.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  59.2k|                                           std::forward<Exp>(exp).error()));
 1339|  8.81M|    }
 1340|  8.81M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  12.8M|    {
 1430|  12.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  12.8M|    {
  437|  12.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  59.2k|    {
 1486|  59.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  8.75M|    {
 1663|  8.75M|        return std::move(value());
 1664|  8.75M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.80M|    {
 3330|  3.80M|        return m_iterator;
 3331|  3.80M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.80M|    {
 3334|  3.80M|        return m_sentinel;
 3335|  3.80M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  22.0M|    {
 1598|  22.0M|        return has_value();
 1599|  22.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.6M|    {
  485|  34.6M|        return m_has_value;
  486|  34.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   566k|    {
 1604|   566k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   566k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   566k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   566k|        return this->get_unexpected().error();
 1606|   566k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   566k|    {
  468|   566k|        return m_unexpected;
  469|   566k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  9.60M|    {
 1663|  9.60M|        return std::move(value());
 1664|  9.60M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  11.9M|    {
 1627|  11.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.9M|        return this->get_value();
 1629|  11.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  11.9M|    {
  451|  11.9M|        return m_value;
  452|  11.9M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  6.02M|{
  326|  6.02M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  6.02M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  3.01M|    {
 3316|  3.01M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  44.8M|    {
 4291|  44.8M|        return !x.is_at_end();
 4292|  44.8M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  35.3k|    {
 1476|  35.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  35.3k|    {
  447|  35.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.75M|    {
 1177|  7.75M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  7.71M|    {
 1430|  7.71M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  7.71M|    {
  437|  7.71M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  4.61M|    {
 1598|  4.61M|        return has_value();
 1599|  4.61M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.09M|    {
 1653|  1.09M|        return value();
 1654|  1.09M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  19.9k|    {
  447|  19.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.24M|    {
 1177|  4.24M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  4.22M|    {
 1430|  4.22M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  4.22M|    {
  437|  4.22M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  4.24M|    {
 1598|  4.24M|        return has_value();
 1599|  4.24M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.48M|    {
  485|  8.48M|        return m_has_value;
  486|  8.48M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  19.9k|    {
 1604|  19.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.9k|        return this->get_unexpected().error();
 1606|  19.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.9k|    {
  468|  19.9k|        return m_unexpected;
  469|  19.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  4.22M|    {
 1663|  4.22M|        return std::move(value());
 1664|  4.22M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  4.22M|    {
 1627|  4.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.22M|        return this->get_value();
 1629|  4.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.22M|    {
  451|  4.22M|        return m_value;
  452|  4.22M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  7.43k|    {
 1604|  7.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.43k|        return this->get_unexpected().error();
 1606|  7.43k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.13M|    {
 1476|  3.13M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.13M|    {
  447|  3.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.7M|    {
 1177|  17.7M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  1.10M|    {
 1430|  1.10M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.10M|    {
  437|  1.10M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.2M|    {
 1476|  12.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.2M|    {
  447|  12.2M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  20.8M|    {
 1598|  20.8M|        return has_value();
 1599|  20.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  35.6M|    {
  485|  35.6M|        return m_has_value;
  486|  35.6M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  8.42M|    {
 1604|  8.42M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.42M|        return this->get_unexpected().error();
 1606|  8.42M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  8.42M|    {
  468|  8.42M|        return m_unexpected;
  469|  8.42M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.19M|    {
 1430|  3.19M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.19M|    {
  437|  3.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.19M|    {
 1177|  3.19M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    168|    {
 1476|    168|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    168|    {
  447|    168|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.34M|    {
 1653|  3.34M|        return value();
 1654|  3.34M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.34M|    {
 1627|  3.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.34M|        return this->get_value();
 1629|  3.34M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.34M|    {
  451|  3.34M|        return m_value;
  452|  3.34M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  93.1k|    {
 1598|  93.1k|        return has_value();
 1599|  93.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  6.39M|    {
  485|  6.39M|        return m_has_value;
  486|  6.39M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.10M|    {
 1663|  3.10M|        return std::move(value());
 1664|  3.10M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.19M|    {
 1627|  3.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.19M|        return this->get_value();
 1629|  3.19M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.19M|    {
  451|  3.19M|        return m_value;
  452|  3.19M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.31M|    {
 1430|  1.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.31M|    {
  437|  1.31M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  6.01M|    {
 2855|  6.01M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  6.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  6.01M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  6.01M|    {
 2836|  6.01M|        return t.data();
 2837|  6.01M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.56M|    {
 1476|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.56M|    {
  447|  1.56M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.0M|    {
 1177|  21.0M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  19.1M|    {
 1430|  19.1M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  19.1M|    {
  437|  19.1M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  12.9M|    {
 1663|  12.9M|        return std::move(value());
 1664|  12.9M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  7.77M|{
 1211|  7.77M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  7.77M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  3.29M|    {
 1837|  3.29M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.29M|                                            std::forward<F>(f));
 1839|  3.29M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  3.29M|{
 1323|  3.29M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.29M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.29M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.29M|            return result(*std::forward<Exp>(exp));
 1327|  3.29M|        }
 1328|       |
 1329|  3.29M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.29M|        return result(unexpect, monostate{});
 1331|  3.29M|    }
 1332|  3.29M|    else {
 1333|  3.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.29M, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.29M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.29M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.29M|    }
 1340|  3.29M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  3.29M|    {
 1430|  3.29M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.29M|    {
  437|  3.29M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.29M|    {
 1177|  3.29M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  3.29M|    {
 1598|  3.29M|        return has_value();
 1599|  3.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.58M|    {
  485|  6.58M|        return m_has_value;
  486|  6.58M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  3.29M|    {
 1663|  3.29M|        return std::move(value());
 1664|  3.29M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.29M|    {
 1627|  3.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.29M|        return this->get_value();
 1629|  3.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.29M|    {
  451|  3.29M|        return m_value;
  452|  3.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  3.23M|    {
 1823|  3.23M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  3.23M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  3.23M|{
 1323|  3.23M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.23M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.23M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.23M|            return result(*std::forward<Exp>(exp));
 1327|  3.23M|        }
 1328|       |
 1329|  3.23M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.23M|        return result(unexpect, monostate{});
 1331|  3.23M|    }
 1332|  3.23M|    else {
 1333|  3.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 3.23M]
  |  |  ------------------
  ------------------
 1335|  3.23M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.23M|                   : result(unexpect,
 1337|  3.23M|                            trivial_invoke(std::forward<F>(f),
 1338|  3.23M|                                           std::forward<Exp>(exp).error()));
 1339|  3.23M|    }
 1340|  3.23M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|   156k|    {
 1430|   156k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   156k|    {
  437|   156k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  2.37M|    {
 1653|  2.37M|        return value();
 1654|  2.37M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   794k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   312k|    {
 1673|   312k|        return &value();
 1674|   312k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  2.34M|    {
 2724|  2.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.34M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  2.34M|    {
 2705|  2.34M|        return decay_copy(t.begin());
 2706|  2.34M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  2.34M|{
 1949|  2.34M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.34M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  3.10M|    {
 1837|  3.10M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.10M|                                            std::forward<F>(f));
 1839|  3.10M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  3.10M|{
 1323|  3.10M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.10M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.10M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.10M|            return result(*std::forward<Exp>(exp));
 1327|  3.10M|        }
 1328|       |
 1329|  3.10M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.10M|        return result(unexpect, monostate{});
 1331|  3.10M|    }
 1332|  3.10M|    else {
 1333|  3.10M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.10M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.10M, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.10M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.10M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.10M|    }
 1340|  3.10M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.10M|    {
 1430|  3.10M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.10M|    {
  437|  3.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.10M|    {
 1177|  3.10M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  3.10M|    {
 1598|  3.10M|        return has_value();
 1599|  3.10M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.21M|    {
  485|  6.21M|        return m_has_value;
  486|  6.21M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.10M|    {
 1663|  3.10M|        return std::move(value());
 1664|  3.10M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.10M|    {
 1627|  3.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.10M|        return this->get_value();
 1629|  3.10M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.10M|    {
  451|  3.10M|        return m_value;
  452|  3.10M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  2.99M|    {
 1823|  2.99M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.99M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  2.99M|{
 1323|  2.99M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.99M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.99M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.99M|            return result(*std::forward<Exp>(exp));
 1327|  2.99M|        }
 1328|       |
 1329|  2.99M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.99M|        return result(unexpect, monostate{});
 1331|  2.99M|    }
 1332|  2.99M|    else {
 1333|  2.99M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.99M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.99M]
  |  |  ------------------
  ------------------
 1335|  2.99M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.99M|                   : result(unexpect,
 1337|  2.99M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.99M|                                           std::forward<Exp>(exp).error()));
 1339|  2.99M|    }
 1340|  2.99M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|   154k|    {
 1430|   154k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   154k|    {
  437|   154k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  2.99M|    {
 3648|  2.99M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.17M|    {
 1653|  2.17M|        return value();
 1654|  2.17M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  92.9k|    {
 1673|  92.9k|        return &value();
 1674|  92.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  3.23M|    {
 3648|  3.23M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   946k|    {
 1476|   946k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.86M|    {
 4280|  3.86M|        return x.is_at_end();
 4281|  3.86M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  5.64M|    {
 4324|  5.64M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 5.64M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  5.64M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 5.64M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  5.64M|        return !read_at_position();
 4331|  5.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  17.2M|    {
 4304|  17.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  17.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  17.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 17.2M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  17.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  17.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.8M, False: 2.40M]
  |  |  ------------------
  ------------------
 4311|  14.8M|            return true;
 4312|  14.8M|        }
 4313|       |
 4314|  4.61M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.40M, False: 2.21M]
  ------------------
 4315|  2.40M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 188k, False: 2.21M]
  ------------------
 4316|   188k|                return false;
 4317|   188k|            }
 4318|  2.40M|        }
 4319|  2.21M|        return true;
 4320|  2.40M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  23.2M|    {
 4081|  23.2M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  23.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  5.32M|    {
 4239|  5.32M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  5.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 5.32M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  5.32M|        auto res = read_at_position();
 4248|  5.32M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  5.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  5.32M|        return parent()->get_character_at(m_position);
 4250|  5.32M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  5.32M|    {
 4112|  5.32M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.53M, False: 792k]
  |  |  ------------------
  ------------------
 4113|  5.32M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.53M|            return m_putback_buffer[pos];
 4115|  4.53M|        }
 4116|   792k|        const auto start = pos - m_putback_buffer.size();
 4117|   792k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   792k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   792k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   792k|        return m_current_view[start];
 4119|   792k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.75M|{
 3807|  1.75M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.75M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.75M|    }
 3810|  1.75M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.75M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.75M|    }
 3813|  1.75M|    else {
 3814|       |        // utf-32
 3815|  1.75M|        static_assert(sizeof(U) == 4);
 3816|  1.75M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.75M|        return 1;
 3818|  1.75M|    }
 3819|  1.75M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.68M|    {
 1430|  2.68M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.68M|    {
  437|  2.68M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.75M|    {
 1177|  2.75M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  63.5k|    {
 1476|  63.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  63.5k|    {
  447|  63.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   875k|    {
 1598|   875k|        return has_value();
 1599|   875k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  9.29k|    {
 1653|  9.29k|        return value();
 1654|  9.29k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.24M|    {
 4274|  2.24M|        return !(lhs == rhs);
 4275|  2.24M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  3.11M|    {
 4269|  3.11M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.11M, False: 0]
  |  Branch (4269:46): [True: 1.00M, False: 2.11M]
  ------------------
 4270|  3.11M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  6.28M|    {
 4225|  6.28M|        ++m_position;
 4226|  6.28M|        (void)read_at_position();
 4227|  6.28M|        return *this;
 4228|  6.28M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.75M|{
 4013|  1.75M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.75M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.75M|    }
 4016|  1.75M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.75M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.75M|    }
 4019|  1.75M|    else {
 4020|  1.75M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.75M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.75M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 364k, False: 1.39M]
  |  |  ------------------
  ------------------
 4023|   364k|            return invalid_code_point;
 4024|   364k|        }
 4025|  1.39M|        return cp;
 4026|  1.75M|    }
 4027|  1.75M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.25k|    {
 1476|  2.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.25k|    {
  447|  2.25k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   531k|    {
 1177|   531k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   529k|    {
 1430|   529k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   529k|    {
  437|   529k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   531k|    {
 1598|   531k|        return has_value();
 1599|   531k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.25k|    {
 1604|  2.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.25k|        return this->get_unexpected().error();
 1606|  2.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.25k|    {
  468|  2.25k|        return m_unexpected;
  469|  2.25k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   529k|    {
 1663|   529k|        return std::move(value());
 1664|   529k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   529k|    {
 1627|   529k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   529k|        return this->get_value();
 1629|   529k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   529k|    {
  451|   529k|        return m_value;
  452|   529k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  9.21M|    {
 3334|  9.21M|        return m_sentinel;
 3335|  9.21M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.33k|    {
 1604|  1.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.33k|        return this->get_unexpected().error();
 1606|  1.33k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   584k|    {
 1476|   584k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   643k|    {
  447|   643k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.81M|    {
 1177|  4.81M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  9.29k|    {
 1430|  9.29k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  9.29k|    {
  437|  9.29k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.67M|    {
 1476|  2.67M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.67M|    {
  447|  2.67M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  5.33M|    {
 1598|  5.33M|        return has_value();
 1599|  5.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.85M|    {
  485|  9.85M|        return m_has_value;
  486|  9.85M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.97M|    {
 1604|  1.97M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.97M|        return this->get_unexpected().error();
 1606|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.97M|    {
  468|  1.97M|        return m_unexpected;
  469|  1.97M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   531k|    {
 1430|   531k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   531k|    {
  437|   531k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   531k|    {
 1177|   531k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     66|    {
 1476|     66|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     66|    {
  447|     66|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   393k|    {
 1653|   393k|        return value();
 1654|   393k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.68M|    {
 1627|  1.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.68M|        return this->get_value();
 1629|  1.68M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.68M|    {
  451|  1.68M|        return m_value;
  452|  1.68M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  7.05k|    {
 1598|  7.05k|        return has_value();
 1599|  7.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   524k|    {
 1663|   524k|        return std::move(value());
 1664|   524k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   531k|    {
 1627|   531k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   531k|        return this->get_value();
 1629|   531k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   531k|    {
  451|   531k|        return m_value;
  452|   531k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.34M|    {
 1837|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.34M|                                            std::forward<F>(f));
 1839|  1.34M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.34M|{
 1323|  1.34M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.34M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.34M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.34M|            return result(*std::forward<Exp>(exp));
 1327|  1.34M|        }
 1328|       |
 1329|  1.34M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.34M|        return result(unexpect, monostate{});
 1331|  1.34M|    }
 1332|  1.34M|    else {
 1333|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.28M, False: 59.1k]
  |  |  ------------------
  ------------------
 1335|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.34M|                   : result(unexpect,
 1337|  59.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  59.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.34M|    }
 1340|  1.34M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.48M|    {
 1430|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48M|    {
  437|  1.48M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  59.1k|    {
 1486|  59.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.28M|    {
 1663|  1.28M|        return std::move(value());
 1664|  1.28M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   200k|    {
 3330|   200k|        return m_iterator;
 3331|   200k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   200k|    {
 3334|   200k|        return m_sentinel;
 3335|   200k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.54M|    {
 1598|  3.54M|        return has_value();
 1599|  3.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.85M|    {
  485|  5.85M|        return m_has_value;
  486|  5.85M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  1.28M|    {
 1604|  1.28M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.28M|        return this->get_unexpected().error();
 1606|  1.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.28M|    {
  468|  1.28M|        return m_unexpected;
  469|  1.28M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   893k|    {
 1663|   893k|        return std::move(value());
 1664|   893k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.02M|    {
 1627|  1.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.02M|        return this->get_value();
 1629|  1.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.02M|    {
  451|  1.02M|        return m_value;
  452|  1.02M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   370k|{
  304|   370k|    return p;
  305|   370k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   370k|{
  326|   370k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   370k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   185k|    {
 3316|   185k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.77M|    {
 4291|  1.77M|        return !x.is_at_end();
 4292|  1.77M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  62.6k|    {
 1476|  62.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  62.6k|    {
  447|  62.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.51M|    {
 1177|  2.51M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.44M|    {
 1430|  2.44M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.44M|    {
  437|  2.44M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   635k|    {
 1598|   635k|        return has_value();
 1599|   635k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.39M|    {
  485|  4.39M|        return m_has_value;
  486|  4.39M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.90k|    {
 1653|  3.90k|        return value();
 1654|  3.90k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.81M|    {
 1627|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.81M|        return this->get_value();
 1629|  1.81M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.81M|    {
  451|  1.81M|        return m_value;
  452|  1.81M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.25k|    {
 1476|  2.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.25k|    {
  447|  2.25k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   532k|    {
 1177|   532k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   530k|    {
 1430|   530k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   530k|    {
  437|   530k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   527k|    {
 1837|   527k|        return detail::transform_error_impl(std::move(*this),
 1838|   527k|                                            std::forward<F>(f));
 1839|   527k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   527k|{
 1323|   527k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   527k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   527k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   527k|            return result(*std::forward<Exp>(exp));
 1327|   527k|        }
 1328|       |
 1329|   527k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   527k|        return result(unexpect, monostate{});
 1331|   527k|    }
 1332|   527k|    else {
 1333|   527k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   527k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   527k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524k, False: 3.00k]
  |  |  ------------------
  ------------------
 1335|   527k|                   ? result(*std::forward<Exp>(exp))
 1336|   527k|                   : result(unexpect,
 1337|  3.00k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.00k|                                           std::forward<Exp>(exp).error()));
 1339|   527k|    }
 1340|   527k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.81M|    {
 1663|  1.81M|        return std::move(value());
 1664|  1.81M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  62.3k|    {
 1614|  62.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  62.3k|        return std::move(this->get_unexpected().error());
 1616|  62.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  62.6k|    {
  468|  62.6k|        return m_unexpected;
  469|  62.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   681k|    {
 1486|   681k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   532k|    {
 1598|   532k|        return has_value();
 1599|   532k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.06M|    {
  485|  1.06M|        return m_has_value;
  486|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.25k|    {
 1604|  2.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.25k|        return this->get_unexpected().error();
 1606|  2.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.25k|    {
  468|  2.25k|        return m_unexpected;
  469|  2.25k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   530k|    {
 1663|   530k|        return std::move(value());
 1664|   530k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   530k|    {
 1627|   530k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   530k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   530k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   530k|        return this->get_value();
 1629|   530k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   530k|    {
  451|   530k|        return m_value;
  452|   530k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    336|    {
 1604|    336|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    336|        return this->get_unexpected().error();
 1606|    336|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   584k|    {
 1476|   584k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   643k|    {
  447|   643k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.15M|    {
 1177|  4.15M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  3.90k|    {
 1430|  3.90k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.90k|    {
  437|  3.90k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  2.14M|    {
 1476|  2.14M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.14M|    {
  447|  2.14M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  4.68M|    {
 1598|  4.68M|        return has_value();
 1599|  4.68M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  8.58M|    {
  485|  8.58M|        return m_has_value;
  486|  8.58M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.78M|    {
 1604|  1.78M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.78M|        return this->get_unexpected().error();
 1606|  1.78M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.78M|    {
  468|  1.78M|        return m_unexpected;
  469|  1.78M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   527k|    {
 1430|   527k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   527k|    {
  437|   527k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   527k|    {
 1177|   527k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     18|    {
 1476|     18|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     18|    {
  447|     18|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   147k|    {
 1653|   147k|        return value();
 1654|   147k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.43M|    {
 1627|  1.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43M|        return this->get_value();
 1629|  1.43M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.43M|    {
  451|  1.43M|        return m_value;
  452|  1.43M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.66k|    {
 1598|  2.66k|        return has_value();
 1599|  2.66k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   524k|    {
 1663|   524k|        return std::move(value());
 1664|   524k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   527k|    {
 1627|   527k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   527k|        return this->get_value();
 1629|   527k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   527k|    {
  451|   527k|        return m_value;
  452|   527k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.34M|    {
 1837|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.34M|                                            std::forward<F>(f));
 1839|  1.34M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.34M|{
 1323|  1.34M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.34M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.34M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.34M|            return result(*std::forward<Exp>(exp));
 1327|  1.34M|        }
 1328|       |
 1329|  1.34M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.34M|        return result(unexpect, monostate{});
 1331|  1.34M|    }
 1332|  1.34M|    else {
 1333|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29M, False: 59.2k]
  |  |  ------------------
  ------------------
 1335|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.34M|                   : result(unexpect,
 1337|  59.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  59.2k|                                           std::forward<Exp>(exp).error()));
 1339|  1.34M|    }
 1340|  1.34M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.36M|    {
 1430|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.36M|    {
  437|  1.36M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  59.2k|    {
 1486|  59.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.29M|    {
 1663|  1.29M|        return std::move(value());
 1664|  1.29M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   367k|    {
 2855|   367k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   367k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   367k|    {
 2836|   367k|        return t.data();
 2837|   367k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   524k|    {
 1837|   524k|        return detail::transform_error_impl(std::move(*this),
 1838|   524k|                                            std::forward<F>(f));
 1839|   524k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   524k|{
 1323|   524k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   524k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   524k|            return result(*std::forward<Exp>(exp));
 1327|   524k|        }
 1328|       |
 1329|   524k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   524k|        return result(unexpect, monostate{});
 1331|   524k|    }
 1332|   524k|    else {
 1333|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524k, False: 0]
  |  |  ------------------
  ------------------
 1335|   524k|                   ? result(*std::forward<Exp>(exp))
 1336|   524k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   524k|    }
 1340|   524k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   524k|    {
 1430|   524k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   524k|    {
  437|   524k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   524k|    {
 1177|   524k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   524k|    {
 1598|   524k|        return has_value();
 1599|   524k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.04M|    {
  485|  1.04M|        return m_has_value;
  486|  1.04M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   524k|    {
 1663|   524k|        return std::move(value());
 1664|   524k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   524k|    {
 1627|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   524k|        return this->get_value();
 1629|   524k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   524k|    {
  451|   524k|        return m_value;
  452|   524k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   859k|    {
 1823|   859k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   859k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   859k|{
 1323|   859k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   859k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   859k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   859k|            return result(*std::forward<Exp>(exp));
 1327|   859k|        }
 1328|       |
 1329|   859k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   859k|        return result(unexpect, monostate{});
 1331|   859k|    }
 1332|   859k|    else {
 1333|   859k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   859k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   859k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 859k]
  |  |  ------------------
  ------------------
 1335|   859k|                   ? result(*std::forward<Exp>(exp))
 1336|   859k|                   : result(unexpect,
 1337|   859k|                            trivial_invoke(std::forward<F>(f),
 1338|   859k|                                           std::forward<Exp>(exp).error()));
 1339|   859k|    }
 1340|   859k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   134k|    {
 1653|   134k|        return value();
 1654|   134k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  86.9k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  6.99k|    {
 1673|  6.99k|        return &value();
 1674|  6.99k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   437k|    {
 2724|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   437k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   437k|    {
 2705|   437k|        return decay_copy(t.begin());
 2706|   437k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   437k|{
 1949|   437k|    return SCN_FWD(t);
  ------------------
  |  |  930|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   437k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   212k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   524k|    {
 1837|   524k|        return detail::transform_error_impl(std::move(*this),
 1838|   524k|                                            std::forward<F>(f));
 1839|   524k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   524k|{
 1323|   524k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   524k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   524k|            return result(*std::forward<Exp>(exp));
 1327|   524k|        }
 1328|       |
 1329|   524k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   524k|        return result(unexpect, monostate{});
 1331|   524k|    }
 1332|   524k|    else {
 1333|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524k, False: 0]
  |  |  ------------------
  ------------------
 1335|   524k|                   ? result(*std::forward<Exp>(exp))
 1336|   524k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   524k|    }
 1340|   524k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   524k|    {
 1430|   524k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   524k|    {
  437|   524k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   524k|    {
 1177|   524k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   524k|    {
 1598|   524k|        return has_value();
 1599|   524k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.04M|    {
  485|  1.04M|        return m_has_value;
  486|  1.04M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   524k|    {
 1663|   524k|        return std::move(value());
 1664|   524k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   524k|    {
 1627|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   524k|        return this->get_value();
 1629|   524k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   524k|    {
  451|   524k|        return m_value;
  452|   524k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   678k|    {
 1823|   678k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   678k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   678k|{
 1323|   678k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   678k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   678k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   678k|            return result(*std::forward<Exp>(exp));
 1327|   678k|        }
 1328|       |
 1329|   678k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   678k|        return result(unexpect, monostate{});
 1331|   678k|    }
 1332|   678k|    else {
 1333|   678k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   678k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   678k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 1335|   678k|                   ? result(*std::forward<Exp>(exp))
 1336|   678k|                   : result(unexpect,
 1337|   678k|                            trivial_invoke(std::forward<F>(f),
 1338|   678k|                                           std::forward<Exp>(exp).error()));
 1339|   678k|    }
 1340|   678k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   678k|    {
 3648|   678k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   134k|    {
 1653|   134k|        return value();
 1654|   134k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.64k|    {
 1673|  2.64k|        return &value();
 1674|  2.64k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   859k|    {
 3648|   859k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   300k|    {
 1430|   300k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   300k|    {
  437|   300k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   245k|{
 3654|   245k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   245k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.85M|    {
 2855|  2.85M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.85M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.85M|    {
 2836|  2.85M|        return t.data();
 2837|  2.85M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  5.83M|    {
 5466|  5.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  5.83M|        return static_cast<std::size_t>(m_desc &
 5471|  5.83M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  5.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  11.6M|    {
 5491|  11.6M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  11.6M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  5.83M|    {
 5434|  5.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  5.83M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  5.83M|        const auto t = type(id);
 5446|  5.83M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  5.83M|        basic_scan_arg<Context> arg;
 5451|  5.83M|        arg.m_type = t;
 5452|  5.83M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 5.83M, False: 0]
  ------------------
 5453|  5.83M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  5.83M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  5.83M|        return arg;
 5459|  5.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  5.83M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  5.83M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  5.83M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  5.83M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  5.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  5.83M|    {
 5495|  5.83M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  5.83M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  11.0M|    {
 5247|  11.0M|        return m_type != detail::arg_type::none_type;
 5248|  11.0M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   938k|{
 8417|   938k|#define SCN_VISIT(Type)                                         \
 8418|   938k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   938k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   938k|    }                                                           \
 8421|   938k|    else {                                                      \
 8422|   938k|        return vis(monostate_val);                              \
 8423|   938k|    }
 8424|       |
 8425|   938k|    monostate monostate_val{};
 8426|       |
 8427|   938k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 938k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 938k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 938k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 938k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 938k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 938k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 938k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 938k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 938k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 938k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 938k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 938k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 938k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 938k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 938k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   291k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 291k, False: 647k]
  ------------------
 8459|   291k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   291k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   291k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   291k|    }                                                           \
  |  | 8421|   291k|    else {                                                      \
  |  | 8422|   291k|        return vis(monostate_val);                              \
  |  | 8423|   291k|    }
  ------------------
 8460|   321k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 321k, False: 617k]
  ------------------
 8461|   321k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   321k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   321k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   321k|    }                                                           \
  |  | 8421|   321k|    else {                                                      \
  |  | 8422|   321k|        return vis(monostate_val);                              \
  |  | 8423|   321k|    }
  ------------------
 8462|   326k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 326k, False: 612k]
  ------------------
 8463|   326k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   326k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   326k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   326k|    }                                                           \
  |  | 8421|   326k|    else {                                                      \
  |  | 8422|   326k|        return vis(monostate_val);                              \
  |  | 8423|   326k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 938k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 938k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 938k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 938k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 938k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 938k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 938k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 938k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 938k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   938k|            SCN_CLANG_POP
 8495|   938k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  4.59M|    {
 5545|  4.59M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  2.39M|    {
 8138|  2.39M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  4.59M|    {
 8056|  4.59M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  3.32M|{
 4344|  3.32M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 3.32M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  3.32M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  3.32M|                            ranges::default_sentinel};
 4350|  3.32M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  3.32M|    {
 4177|  3.32M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  3.32M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  3.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  3.32M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   925k|{
 8417|   925k|#define SCN_VISIT(Type)                                         \
 8418|   925k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   925k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   925k|    }                                                           \
 8421|   925k|    else {                                                      \
 8422|   925k|        return vis(monostate_val);                              \
 8423|   925k|    }
 8424|       |
 8425|   925k|    monostate monostate_val{};
 8426|       |
 8427|   925k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 925k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 925k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 925k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 925k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 925k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 925k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 925k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 925k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 925k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 925k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 925k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 925k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 925k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 925k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 925k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   288k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 288k, False: 637k]
  ------------------
 8459|   288k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   288k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   288k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   288k|    }                                                           \
  |  | 8421|   288k|    else {                                                      \
  |  | 8422|   288k|        return vis(monostate_val);                              \
  |  | 8423|   288k|    }
  ------------------
 8460|   316k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 316k, False: 608k]
  ------------------
 8461|   316k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   316k|    }                                                           \
  |  | 8421|   316k|    else {                                                      \
  |  | 8422|   316k|        return vis(monostate_val);                              \
  |  | 8423|   316k|    }
  ------------------
 8462|   320k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 320k, False: 605k]
  ------------------
 8463|   320k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   320k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   320k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   320k|    }                                                           \
  |  | 8421|   320k|    else {                                                      \
  |  | 8422|   320k|        return vis(monostate_val);                              \
  |  | 8423|   320k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 925k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 925k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 925k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 925k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 925k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 925k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 925k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 925k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 925k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   925k|            SCN_CLANG_POP
 8495|   925k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.19M|{
 7044|  2.19M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.19M|    handler.check_args_exhausted();
 7046|  2.19M|    return handler.get_error();
 7047|  2.19M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.19M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.19M|    auto begin = format.data();
 7013|  2.19M|    auto it = begin;
 7014|  2.19M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  4.26M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.19M, False: 2.06M]
  ------------------
 7017|  2.19M|        const auto ch = *it++;
 7018|  2.19M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.19M, False: 0]
  ------------------
 7019|  2.19M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.19M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.19M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 132k, False: 2.06M]
  ------------------
 7023|   132k|                return;
 7024|   132k|            }
 7025|  2.19M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.19M|    }
 7036|       |
 7037|  2.06M|    handler.on_literal_text(begin, end);
 7038|  2.06M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  2.19M|{
 6942|  2.19M|    struct id_adapter {
 6943|  2.19M|        constexpr void operator()()
 6944|  2.19M|        {
 6945|  2.19M|            arg_id = handler.on_arg_id();
 6946|  2.19M|        }
 6947|  2.19M|        constexpr void operator()(std::size_t id)
 6948|  2.19M|        {
 6949|  2.19M|            arg_id = handler.on_arg_id(id);
 6950|  2.19M|        }
 6951|       |
 6952|  2.19M|        constexpr void on_error(const char* msg)
 6953|  2.19M|        {
 6954|  2.19M|            SCN_UNLIKELY_ATTR
 6955|  2.19M|            handler.on_error(msg);
 6956|  2.19M|        }
 6957|       |
 6958|  2.19M|        Handler& handler;
 6959|  2.19M|        std::size_t arg_id;
 6960|  2.19M|    };
 6961|       |
 6962|  2.19M|    ++begin;
 6963|  2.19M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.19M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.19M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.19M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.19M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.19M|    else {
 6975|  2.19M|        auto adapter = id_adapter{handler, 0};
 6976|  2.19M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.19M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.19M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.19M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.19M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.19M, False: 0]
  ------------------
 6987|  2.19M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.19M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.19M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  |  Branch (859:45): [True: 0, False: 2.19M]
  |  |  |  Branch (859:45): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.19M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.19M|    }
 7003|  2.19M|    return begin + 1;
 7004|  2.19M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  4.59M|    {
 8039|  4.59M|        return m_args.get(id);
 8040|  4.59M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  4.59M|    {
 8049|  4.59M|        return m_locale;
 8050|  4.59M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  4.59M|    {
 5566|  4.59M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.59M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  4.59M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  4.59M|        do_check_arg_id(id);
 5574|  4.59M|        return id;
 5575|  4.59M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  4.59M|{
 6054|  4.59M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  4.59M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  4.59M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.19M|{
 6443|  2.19M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.19M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.19M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.19M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.19M|    handler();
 6449|  2.19M|    return begin;
 6450|  2.19M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.19M|        {
 6945|  2.19M|            arg_id = handler.on_arg_id();
 6946|  2.19M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  9.18M|    {
 5252|  9.18M|        return m_type;
 5253|  9.18M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  4.59M|    {
 5561|  4.59M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  4.59M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  9.18M|    {
 5550|  9.18M|        return m_format.data();
 5551|  9.18M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  2.19M|    {
 7122|  2.19M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.19M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  2.19M|{
 6858|  2.19M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.19M|        if (*begin == CharT{'['}) {
 6860|  2.19M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.19M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.19M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.19M|                return begin;
 6866|  2.19M|            }
 6867|  2.19M|            handler.on_character_set_string(set);
 6868|  2.19M|            return begin;
 6869|  2.19M|        }
 6870|  2.19M|        if (*begin == CharT{'/'}) {
 6871|  2.19M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.19M|        }
 6873|  2.19M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.19M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.19M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.19M|            return begin;
 6877|  2.19M|        }
 6878|  2.19M|        handler.on_type(type);
 6879|  2.19M|        return begin;
 6880|  2.19M|    };
 6881|       |
 6882|  2.19M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.19M, False: 0]
  |  Branch (6882:28): [True: 2.19M, False: 0]
  ------------------
 6883|  2.19M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.19M, False: 0]
  |  Branch (6883:36): [True: 1.57M, False: 625k]
  ------------------
 6884|  1.57M|        return do_presentation();
 6885|  1.57M|    }
 6886|       |
 6887|   625k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   625k|    begin = parse_align(begin, end, handler);
 6893|   625k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   625k|    begin = parse_width(begin, end, handler);
 6899|   625k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   625k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 625k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   625k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 625k, False: 0]
  ------------------
 6918|   625k|        handler.on_localized();
 6919|   625k|        ++begin;
 6920|   625k|    }
 6921|   625k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   625k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 625k, False: 0]
  |  Branch (6926:25): [True: 0, False: 625k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   625k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   625k|    return begin;
 6935|   625k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  4.59M|{
 6507|  4.59M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 3.28M, False: 1.31M]
  |  Branch (6507:33): [True: 3.28M, False: 0]
  ------------------
 6508|  4.59M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 1.31M, False: 0]
  |  Branch (6508:33): [True: 1.31M, False: 0]
  ------------------
 6509|  4.59M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.57M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.57M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.57M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.57M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.57M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.57M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.57M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.57M|        handler.on_type(type);
 6879|  1.57M|        return begin;
 6880|  1.57M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  3.28M|{
 6455|  3.28M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 3.28M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 3.28M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 3.28M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 3.28M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 3.28M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 3.28M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 3.28M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 3.28M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 3.28M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 3.28M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|  1.45M|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 1.45M, False: 1.82M]
  ------------------
 6474|  1.45M|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 3.28M]
  ------------------
 6475|  1.45M|            return presentation_type::float_hex;
 6476|  92.4k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 92.4k, False: 3.18M]
  ------------------
 6477|  92.4k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 3.28M]
  ------------------
 6478|  92.4k|            return presentation_type::float_scientific;
 6479|   618k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 618k, False: 2.66M]
  ------------------
 6480|   618k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 3.28M]
  ------------------
 6481|   618k|            return presentation_type::float_fixed;
 6482|  1.11M|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 1.11M, False: 2.16M]
  ------------------
 6483|  1.11M|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 3.28M]
  ------------------
 6484|  1.11M|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 3.28M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 3.28M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 3.28M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 3.28M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.28M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.28M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 3.28M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  3.28M|    }
 6502|  3.28M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   625k|{
 6532|   625k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   625k|    auto check_align = [](wchar_t ch) {
 6535|   625k|        switch (ch) {
 6536|   625k|            case L'<':
 6537|   625k|                return align_type::left;
 6538|   625k|            case L'>':
 6539|   625k|                return align_type::right;
 6540|   625k|            case L'^':
 6541|   625k|                return align_type::center;
 6542|   625k|            default:
 6543|   625k|                return align_type::none;
 6544|   625k|        }
 6545|   625k|    };
 6546|       |
 6547|   625k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   625k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  |  Branch (859:45): [True: 0, False: 625k]
  |  |  |  Branch (859:45): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6549|   625k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   625k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   625k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   625k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   625k|    const auto begin_before_fill = begin;
 6559|   625k|    begin += potential_fill_len;
 6560|       |
 6561|   625k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 625k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   625k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   625k|    const auto begin_after_fill = begin;
 6567|   625k|    ++begin;
 6568|       |
 6569|   625k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 625k, False: 0]
  ------------------
 6570|   625k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   625k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 625k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   625k|    }
 6578|       |
 6579|   625k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 625k, False: 0]
  ------------------
 6580|   625k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 625k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   625k|        return begin_before_fill;
 6585|   625k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   625k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  1.31M|{
 6514|  1.31M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  1.31M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  1.31M|        return 1;
 6517|  1.31M|    }
 6518|  1.31M|    else {
 6519|  1.31M|        const auto lengths =
 6520|  1.31M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  1.31M|            "\3\4";
 6522|  1.31M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  1.31M|        return len;
 6524|  1.31M|    }
 6525|  1.31M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  1.25M|    auto check_align = [](wchar_t ch) {
 6535|  1.25M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.25M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.25M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.25M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.25M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.25M, False: 0]
  ------------------
 6543|  1.25M|                return align_type::none;
 6544|  1.25M|        }
 6545|  1.25M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   625k|{
 6597|   625k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   625k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 625k, False: 0]
  |  Branch (6599:33): [True: 0, False: 625k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   625k|    return begin;
 6610|   625k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   625k|    {
 7127|   625k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   625k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 625k, False: 0]
  ------------------
 7129|   625k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 625k, False: 0]
  ------------------
 7130|   625k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 625k]
  ------------------
 7131|   625k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   625k|        Handler::on_localized();
 7139|   625k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.19M|{
 8417|  2.19M|#define SCN_VISIT(Type)                                         \
 8418|  2.19M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.19M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.19M|    }                                                           \
 8421|  2.19M|    else {                                                      \
 8422|  2.19M|        return vis(monostate_val);                              \
 8423|  2.19M|    }
 8424|       |
 8425|  2.19M|    monostate monostate_val{};
 8426|       |
 8427|  2.19M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.19M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.19M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.19M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.19M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.19M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.19M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.19M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.19M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.19M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.19M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.19M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.19M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.19M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.19M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.19M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   697k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 697k, False: 1.49M]
  ------------------
 8459|   697k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   697k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   697k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   697k|    }                                                           \
  |  | 8421|   697k|    else {                                                      \
  |  | 8422|   697k|        return vis(monostate_val);                              \
  |  | 8423|   697k|    }
  ------------------
 8460|   745k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 745k, False: 1.45M]
  ------------------
 8461|   745k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   745k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   745k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   745k|    }                                                           \
  |  | 8421|   745k|    else {                                                      \
  |  | 8422|   745k|        return vis(monostate_val);                              \
  |  | 8423|   745k|    }
  ------------------
 8462|   753k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 753k, False: 1.44M]
  ------------------
 8463|   753k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   753k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   753k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   753k|    }                                                           \
  |  | 8421|   753k|    else {                                                      \
  |  | 8422|   753k|        return vis(monostate_val);                              \
  |  | 8423|   753k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.19M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.19M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.19M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.19M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.19M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.19M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.19M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.19M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.19M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.19M|            SCN_CLANG_POP
 8495|  2.19M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.39M|{
 7044|  2.39M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.39M|    handler.check_args_exhausted();
 7046|  2.39M|    return handler.get_error();
 7047|  2.39M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.39M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.39M|    auto begin = format.data();
 7013|  2.39M|    auto it = begin;
 7014|  2.39M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  4.66M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.39M, False: 2.26M]
  ------------------
 7017|  2.39M|        const auto ch = *it++;
 7018|  2.39M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.39M, False: 0]
  ------------------
 7019|  2.39M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.39M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.39M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 132k, False: 2.26M]
  ------------------
 7023|   132k|                return;
 7024|   132k|            }
 7025|  2.39M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.39M|    }
 7036|       |
 7037|  2.26M|    handler.on_literal_text(begin, end);
 7038|  2.26M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  2.26M|    {
 8175|  2.26M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.26M|    static_cast<    \
  |  |  929|  2.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  2.26M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  2.39M|{
 6942|  2.39M|    struct id_adapter {
 6943|  2.39M|        constexpr void operator()()
 6944|  2.39M|        {
 6945|  2.39M|            arg_id = handler.on_arg_id();
 6946|  2.39M|        }
 6947|  2.39M|        constexpr void operator()(std::size_t id)
 6948|  2.39M|        {
 6949|  2.39M|            arg_id = handler.on_arg_id(id);
 6950|  2.39M|        }
 6951|       |
 6952|  2.39M|        constexpr void on_error(const char* msg)
 6953|  2.39M|        {
 6954|  2.39M|            SCN_UNLIKELY_ATTR
 6955|  2.39M|            handler.on_error(msg);
 6956|  2.39M|        }
 6957|       |
 6958|  2.39M|        Handler& handler;
 6959|  2.39M|        std::size_t arg_id;
 6960|  2.39M|    };
 6961|       |
 6962|  2.39M|    ++begin;
 6963|  2.39M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.39M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.39M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.39M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.39M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.39M|    else {
 6975|  2.39M|        auto adapter = id_adapter{handler, 0};
 6976|  2.39M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.39M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.39M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.39M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.39M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.39M, False: 0]
  ------------------
 6987|  2.39M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.39M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.39M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  |  Branch (859:45): [True: 0, False: 2.39M]
  |  |  |  Branch (859:45): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.39M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.39M|    }
 7003|  2.39M|    return begin + 1;
 7004|  2.39M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.39M|{
 6443|  2.39M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.39M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.39M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.39M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.39M|    handler();
 6449|  2.39M|    return begin;
 6450|  2.39M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.39M|        {
 6945|  2.39M|            arg_id = handler.on_arg_id();
 6946|  2.39M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  2.39M|    {
 7122|  2.39M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.39M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  2.39M|{
 6858|  2.39M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.39M|        if (*begin == CharT{'['}) {
 6860|  2.39M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.39M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.39M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.39M|                return begin;
 6866|  2.39M|            }
 6867|  2.39M|            handler.on_character_set_string(set);
 6868|  2.39M|            return begin;
 6869|  2.39M|        }
 6870|  2.39M|        if (*begin == CharT{'/'}) {
 6871|  2.39M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.39M|        }
 6873|  2.39M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.39M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.39M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.39M|            return begin;
 6877|  2.39M|        }
 6878|  2.39M|        handler.on_type(type);
 6879|  2.39M|        return begin;
 6880|  2.39M|    };
 6881|       |
 6882|  2.39M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.39M, False: 0]
  |  Branch (6882:28): [True: 2.39M, False: 0]
  ------------------
 6883|  2.39M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.39M, False: 0]
  |  Branch (6883:36): [True: 1.71M, False: 686k]
  ------------------
 6884|  1.71M|        return do_presentation();
 6885|  1.71M|    }
 6886|       |
 6887|   686k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   686k|    begin = parse_align(begin, end, handler);
 6893|   686k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   686k|    begin = parse_width(begin, end, handler);
 6899|   686k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   686k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 686k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   686k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 686k, False: 0]
  ------------------
 6918|   686k|        handler.on_localized();
 6919|   686k|        ++begin;
 6920|   686k|    }
 6921|   686k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   686k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 686k, False: 0]
  |  Branch (6926:25): [True: 0, False: 686k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   686k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   686k|    return begin;
 6935|   686k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.71M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.71M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.71M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.71M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.71M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.71M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.71M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.71M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.71M|        handler.on_type(type);
 6879|  1.71M|        return begin;
 6880|  1.71M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   686k|{
 6532|   686k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   686k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   686k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   686k|    auto check_align = [](wchar_t ch) {
 6535|   686k|        switch (ch) {
 6536|   686k|            case L'<':
 6537|   686k|                return align_type::left;
 6538|   686k|            case L'>':
 6539|   686k|                return align_type::right;
 6540|   686k|            case L'^':
 6541|   686k|                return align_type::center;
 6542|   686k|            default:
 6543|   686k|                return align_type::none;
 6544|   686k|        }
 6545|   686k|    };
 6546|       |
 6547|   686k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   686k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  |  Branch (859:45): [True: 0, False: 686k]
  |  |  |  Branch (859:45): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6549|   686k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   686k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   686k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   686k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   686k|    const auto begin_before_fill = begin;
 6559|   686k|    begin += potential_fill_len;
 6560|       |
 6561|   686k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 686k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   686k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   686k|    const auto begin_after_fill = begin;
 6567|   686k|    ++begin;
 6568|       |
 6569|   686k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 686k, False: 0]
  ------------------
 6570|   686k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 686k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   686k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 686k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   686k|    }
 6578|       |
 6579|   686k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 686k, False: 0]
  ------------------
 6580|   686k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 686k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   686k|        return begin_before_fill;
 6585|   686k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   686k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  1.37M|    auto check_align = [](wchar_t ch) {
 6535|  1.37M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.37M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.37M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.37M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.37M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.37M, False: 0]
  ------------------
 6543|  1.37M|                return align_type::none;
 6544|  1.37M|        }
 6545|  1.37M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   686k|{
 6597|   686k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   686k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   686k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   686k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 686k, False: 0]
  |  Branch (6599:33): [True: 0, False: 686k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   686k|    return begin;
 6610|   686k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   686k|    {
 7127|   686k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   686k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 686k, False: 0]
  ------------------
 7129|   686k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 686k, False: 0]
  ------------------
 7130|   686k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 686k]
  ------------------
 7131|   686k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   686k|        Handler::on_localized();
 7139|   686k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.39M|{
 8417|  2.39M|#define SCN_VISIT(Type)                                         \
 8418|  2.39M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.39M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.39M|    }                                                           \
 8421|  2.39M|    else {                                                      \
 8422|  2.39M|        return vis(monostate_val);                              \
 8423|  2.39M|    }
 8424|       |
 8425|  2.39M|    monostate monostate_val{};
 8426|       |
 8427|  2.39M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.39M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.39M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.39M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.39M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.39M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.39M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.39M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.39M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.39M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.39M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.39M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.39M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.39M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.39M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.39M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   760k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 760k, False: 1.63M]
  ------------------
 8459|   760k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   760k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   760k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   760k|    }                                                           \
  |  | 8421|   760k|    else {                                                      \
  |  | 8422|   760k|        return vis(monostate_val);                              \
  |  | 8423|   760k|    }
  ------------------
 8460|   814k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 814k, False: 1.58M]
  ------------------
 8461|   814k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   814k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   814k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   814k|    }                                                           \
  |  | 8421|   814k|    else {                                                      \
  |  | 8422|   814k|        return vis(monostate_val);                              \
  |  | 8423|   814k|    }
  ------------------
 8462|   823k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 823k, False: 1.57M]
  ------------------
 8463|   823k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   823k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   823k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   823k|    }                                                           \
  |  | 8421|   823k|    else {                                                      \
  |  | 8422|   823k|        return vis(monostate_val);                              \
  |  | 8423|   823k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.39M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.39M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.39M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.39M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.39M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.39M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.39M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.39M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.39M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.39M|            SCN_CLANG_POP
 8495|  2.39M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   171k|    {
 4076|   171k|        sync(0);
 4077|   171k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   968k|    {
 5466|   968k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   968k|        return static_cast<std::size_t>(m_desc &
 5471|   968k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   968k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.93M|    {
 5491|  1.93M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.93M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   968k|    {
 5434|   968k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   968k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   968k|        const auto t = type(id);
 5446|   968k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   968k|        basic_scan_arg<Context> arg;
 5451|   968k|        arg.m_type = t;
 5452|   968k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 968k, False: 0]
  ------------------
 5453|   968k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   968k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   968k|        return arg;
 5459|   968k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   968k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   968k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   968k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   968k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   968k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   968k|    {
 5495|   968k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   968k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.85M|    {
 5247|  1.85M|        return m_type != detail::arg_type::none_type;
 5248|  1.85M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   129k|{
 8417|   129k|#define SCN_VISIT(Type)                                         \
 8418|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   129k|    }                                                           \
 8421|   129k|    else {                                                      \
 8422|   129k|        return vis(monostate_val);                              \
 8423|   129k|    }
 8424|       |
 8425|   129k|    monostate monostate_val{};
 8426|       |
 8427|   129k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 129k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 129k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 129k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 129k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 129k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 129k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 129k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 129k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 129k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 129k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 129k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 129k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 129k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 129k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 129k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  42.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 42.6k, False: 86.3k]
  ------------------
 8459|  42.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  42.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  42.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  42.6k|    }                                                           \
  |  | 8421|  42.6k|    else {                                                      \
  |  | 8422|  42.6k|        return vis(monostate_val);                              \
  |  | 8423|  42.6k|    }
  ------------------
 8460|  42.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 42.9k, False: 86.0k]
  ------------------
 8461|  42.9k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  42.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  42.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  42.9k|    }                                                           \
  |  | 8421|  42.9k|    else {                                                      \
  |  | 8422|  42.9k|        return vis(monostate_val);                              \
  |  | 8423|  42.9k|    }
  ------------------
 8462|  43.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 43.4k, False: 85.5k]
  ------------------
 8463|  43.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  43.4k|    }                                                           \
  |  | 8421|  43.4k|    else {                                                      \
  |  | 8422|  43.4k|        return vis(monostate_val);                              \
  |  | 8423|  43.4k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 129k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 129k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 129k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 129k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 129k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 129k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 129k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 129k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 129k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   129k|            SCN_CLANG_POP
 8495|   129k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   796k|    {
 5545|   796k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   398k|    {
 8138|   398k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   796k|    {
 8056|   796k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   398k|{
 7044|   398k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   398k|    handler.check_args_exhausted();
 7046|   398k|    return handler.get_error();
 7047|   398k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   398k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   398k|    auto begin = format.data();
 7013|   398k|    auto it = begin;
 7014|   398k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   533k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 398k, False: 134k]
  ------------------
 7017|   398k|        const auto ch = *it++;
 7018|   398k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 398k, False: 0]
  ------------------
 7019|   398k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   398k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   398k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 264k, False: 134k]
  ------------------
 7023|   264k|                return;
 7024|   264k|            }
 7025|   398k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   398k|    }
 7036|       |
 7037|   134k|    handler.on_literal_text(begin, end);
 7038|   134k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   398k|{
 6942|   398k|    struct id_adapter {
 6943|   398k|        constexpr void operator()()
 6944|   398k|        {
 6945|   398k|            arg_id = handler.on_arg_id();
 6946|   398k|        }
 6947|   398k|        constexpr void operator()(std::size_t id)
 6948|   398k|        {
 6949|   398k|            arg_id = handler.on_arg_id(id);
 6950|   398k|        }
 6951|       |
 6952|   398k|        constexpr void on_error(const char* msg)
 6953|   398k|        {
 6954|   398k|            SCN_UNLIKELY_ATTR
 6955|   398k|            handler.on_error(msg);
 6956|   398k|        }
 6957|       |
 6958|   398k|        Handler& handler;
 6959|   398k|        std::size_t arg_id;
 6960|   398k|    };
 6961|       |
 6962|   398k|    ++begin;
 6963|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   398k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 398k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   398k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 398k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   398k|    else {
 6975|   398k|        auto adapter = id_adapter{handler, 0};
 6976|   398k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   398k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   398k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 398k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   398k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 398k, False: 0]
  ------------------
 6987|   398k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   398k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   398k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   797k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   398k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   398k|    }
 7003|   398k|    return begin + 1;
 7004|   398k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   796k|    {
 8039|   796k|        return m_args.get(id);
 8040|   796k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   796k|    {
 8049|   796k|        return m_locale;
 8050|   796k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   796k|    {
 5566|   796k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   796k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   796k|        do_check_arg_id(id);
 5574|   796k|        return id;
 5575|   796k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   796k|{
 6054|   796k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   796k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   796k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   398k|{
 6443|   398k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   398k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 398k, False: 0]
  |  Branch (6444:26): [True: 0, False: 398k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   398k|    handler();
 6449|   398k|    return begin;
 6450|   398k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   398k|        {
 6945|   398k|            arg_id = handler.on_arg_id();
 6946|   398k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.59M|    {
 5252|  1.59M|        return m_type;
 5253|  1.59M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   796k|    {
 5561|   796k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   796k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   527k|{
 4344|   527k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 527k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   527k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   527k|                            ranges::default_sentinel};
 4350|   527k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   527k|    {
 4177|   527k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   527k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   527k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.59M|    {
 5550|  1.59M|        return m_format.data();
 5551|  1.59M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   398k|    {
 7122|   398k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   398k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   398k|{
 6858|   398k|    auto do_presentation = [&]() -> const CharT* {
 6859|   398k|        if (*begin == CharT{'['}) {
 6860|   398k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   398k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   398k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   398k|                return begin;
 6866|   398k|            }
 6867|   398k|            handler.on_character_set_string(set);
 6868|   398k|            return begin;
 6869|   398k|        }
 6870|   398k|        if (*begin == CharT{'/'}) {
 6871|   398k|            return parse_presentation_regex(begin, end, handler);
 6872|   398k|        }
 6873|   398k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   398k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   398k|            handler.on_error("Invalid type specifier in format string");
 6876|   398k|            return begin;
 6877|   398k|        }
 6878|   398k|        handler.on_type(type);
 6879|   398k|        return begin;
 6880|   398k|    };
 6881|       |
 6882|   398k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 398k, False: 0]
  |  Branch (6882:28): [True: 398k, False: 0]
  ------------------
 6883|   398k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 398k, False: 0]
  |  Branch (6883:36): [True: 312k, False: 86.0k]
  ------------------
 6884|   312k|        return do_presentation();
 6885|   312k|    }
 6886|       |
 6887|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  86.0k|    begin = parse_align(begin, end, handler);
 6893|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  86.0k|    begin = parse_width(begin, end, handler);
 6899|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  86.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 86.0k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  86.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 86.0k, False: 0]
  ------------------
 6918|  86.0k|        handler.on_localized();
 6919|  86.0k|        ++begin;
 6920|  86.0k|    }
 6921|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  86.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 86.0k, False: 0]
  |  Branch (6926:25): [True: 0, False: 86.0k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  86.0k|    return begin;
 6935|  86.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   796k|{
 6507|   796k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 624k, False: 171k]
  |  Branch (6507:33): [True: 624k, False: 0]
  ------------------
 6508|   796k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 171k, False: 0]
  |  Branch (6508:33): [True: 171k, False: 0]
  ------------------
 6509|   796k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   312k|    auto do_presentation = [&]() -> const CharT* {
 6859|   312k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 312k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   312k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 312k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   312k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   312k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   312k|        handler.on_type(type);
 6879|   312k|        return begin;
 6880|   312k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   624k|{
 6455|   624k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 624k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 624k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 624k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 624k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 624k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 624k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 624k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 624k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 624k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 624k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   174k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 174k, False: 450k]
  ------------------
 6474|   174k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 624k]
  ------------------
 6475|   174k|            return presentation_type::float_hex;
 6476|   106k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 106k, False: 518k]
  ------------------
 6477|   106k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 624k]
  ------------------
 6478|   106k|            return presentation_type::float_scientific;
 6479|   171k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 171k, False: 453k]
  ------------------
 6480|   171k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 624k]
  ------------------
 6481|   171k|            return presentation_type::float_fixed;
 6482|   172k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 172k, False: 452k]
  ------------------
 6483|   172k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 624k]
  ------------------
 6484|   172k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 624k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 624k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 624k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 624k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 624k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 624k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 624k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   624k|    }
 6502|   624k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  86.0k|{
 6532|  86.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  86.0k|    auto check_align = [](wchar_t ch) {
 6535|  86.0k|        switch (ch) {
 6536|  86.0k|            case L'<':
 6537|  86.0k|                return align_type::left;
 6538|  86.0k|            case L'>':
 6539|  86.0k|                return align_type::right;
 6540|  86.0k|            case L'^':
 6541|  86.0k|                return align_type::center;
 6542|  86.0k|            default:
 6543|  86.0k|                return align_type::none;
 6544|  86.0k|        }
 6545|  86.0k|    };
 6546|       |
 6547|  86.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  86.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  |  Branch (859:45): [True: 0, False: 86.0k]
  |  |  |  Branch (859:45): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6549|  86.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  86.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  86.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  86.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  86.0k|    const auto begin_before_fill = begin;
 6559|  86.0k|    begin += potential_fill_len;
 6560|       |
 6561|  86.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 86.0k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  86.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  86.0k|    const auto begin_after_fill = begin;
 6567|  86.0k|    ++begin;
 6568|       |
 6569|  86.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 86.0k, False: 0]
  ------------------
 6570|  86.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.0k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  86.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 86.0k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  86.0k|    }
 6578|       |
 6579|  86.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 86.0k, False: 0]
  ------------------
 6580|  86.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 86.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  86.0k|        return begin_before_fill;
 6585|  86.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  86.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   171k|{
 6514|   171k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   171k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   171k|        return 1;
 6517|   171k|    }
 6518|   171k|    else {
 6519|   171k|        const auto lengths =
 6520|   171k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   171k|            "\3\4";
 6522|   171k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   171k|        return len;
 6524|   171k|    }
 6525|   171k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   172k|    auto check_align = [](wchar_t ch) {
 6535|   172k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 172k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 172k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 172k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   172k|            default:
  ------------------
  |  Branch (6542:13): [True: 172k, False: 0]
  ------------------
 6543|   172k|                return align_type::none;
 6544|   172k|        }
 6545|   172k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  86.0k|{
 6597|  86.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  86.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 86.0k, False: 0]
  |  Branch (6599:33): [True: 0, False: 86.0k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  86.0k|    return begin;
 6610|  86.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  86.0k|    {
 7127|  86.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  86.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 86.0k, False: 0]
  ------------------
 7129|  86.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 86.0k, False: 0]
  ------------------
 7130|  86.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 86.0k]
  ------------------
 7131|  86.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  86.0k|        Handler::on_localized();
 7139|  86.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   398k|{
 8417|   398k|#define SCN_VISIT(Type)                                         \
 8418|   398k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   398k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   398k|    }                                                           \
 8421|   398k|    else {                                                      \
 8422|   398k|        return vis(monostate_val);                              \
 8423|   398k|    }
 8424|       |
 8425|   398k|    monostate monostate_val{};
 8426|       |
 8427|   398k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 398k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 398k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 398k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 398k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 398k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 398k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 398k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 398k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 398k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 398k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 398k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 398k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 398k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 398k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 398k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   132k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 132k, False: 266k]
  ------------------
 8459|   132k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   132k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   132k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   132k|    }                                                           \
  |  | 8421|   132k|    else {                                                      \
  |  | 8422|   132k|        return vis(monostate_val);                              \
  |  | 8423|   132k|    }
  ------------------
 8460|   132k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 132k, False: 265k]
  ------------------
 8461|   132k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   132k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   132k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   132k|    }                                                           \
  |  | 8421|   132k|    else {                                                      \
  |  | 8422|   132k|        return vis(monostate_val);                              \
  |  | 8423|   132k|    }
  ------------------
 8462|   133k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 133k, False: 265k]
  ------------------
 8463|   133k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   133k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   133k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   133k|    }                                                           \
  |  | 8421|   133k|    else {                                                      \
  |  | 8422|   133k|        return vis(monostate_val);                              \
  |  | 8423|   133k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 398k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 398k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 398k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 398k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 398k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 398k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 398k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 398k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 398k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   398k|            SCN_CLANG_POP
 8495|   398k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   128k|{
 8417|   128k|#define SCN_VISIT(Type)                                         \
 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   128k|    }                                                           \
 8421|   128k|    else {                                                      \
 8422|   128k|        return vis(monostate_val);                              \
 8423|   128k|    }
 8424|       |
 8425|   128k|    monostate monostate_val{};
 8426|       |
 8427|   128k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 128k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 128k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 128k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 128k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 128k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 128k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 128k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 128k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 128k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 128k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 128k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 128k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 128k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 128k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 128k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  42.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 42.5k, False: 86.1k]
  ------------------
 8459|  42.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  42.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  42.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  42.5k|    }                                                           \
  |  | 8421|  42.5k|    else {                                                      \
  |  | 8422|  42.5k|        return vis(monostate_val);                              \
  |  | 8423|  42.5k|    }
  ------------------
 8460|  42.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 42.8k, False: 85.9k]
  ------------------
 8461|  42.8k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  42.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  42.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  42.8k|    }                                                           \
  |  | 8421|  42.8k|    else {                                                      \
  |  | 8422|  42.8k|        return vis(monostate_val);                              \
  |  | 8423|  42.8k|    }
  ------------------
 8462|  43.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 43.3k, False: 85.4k]
  ------------------
 8463|  43.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  43.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  43.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  43.3k|    }                                                           \
  |  | 8421|  43.3k|    else {                                                      \
  |  | 8422|  43.3k|        return vis(monostate_val);                              \
  |  | 8423|  43.3k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 128k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 128k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 128k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 128k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 128k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 128k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 128k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 128k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 128k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   128k|            SCN_CLANG_POP
 8495|   128k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   398k|{
 7044|   398k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   398k|    handler.check_args_exhausted();
 7046|   398k|    return handler.get_error();
 7047|   398k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   398k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   398k|    auto begin = format.data();
 7013|   398k|    auto it = begin;
 7014|   398k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   532k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 398k, False: 134k]
  ------------------
 7017|   398k|        const auto ch = *it++;
 7018|   398k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 398k, False: 0]
  ------------------
 7019|   398k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   398k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   398k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 264k, False: 134k]
  ------------------
 7023|   264k|                return;
 7024|   264k|            }
 7025|   398k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   398k|    }
 7036|       |
 7037|   134k|    handler.on_literal_text(begin, end);
 7038|   134k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   134k|    {
 8175|   134k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   134k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   398k|{
 6942|   398k|    struct id_adapter {
 6943|   398k|        constexpr void operator()()
 6944|   398k|        {
 6945|   398k|            arg_id = handler.on_arg_id();
 6946|   398k|        }
 6947|   398k|        constexpr void operator()(std::size_t id)
 6948|   398k|        {
 6949|   398k|            arg_id = handler.on_arg_id(id);
 6950|   398k|        }
 6951|       |
 6952|   398k|        constexpr void on_error(const char* msg)
 6953|   398k|        {
 6954|   398k|            SCN_UNLIKELY_ATTR
 6955|   398k|            handler.on_error(msg);
 6956|   398k|        }
 6957|       |
 6958|   398k|        Handler& handler;
 6959|   398k|        std::size_t arg_id;
 6960|   398k|    };
 6961|       |
 6962|   398k|    ++begin;
 6963|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   398k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 398k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   398k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 398k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   398k|    else {
 6975|   398k|        auto adapter = id_adapter{handler, 0};
 6976|   398k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   398k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   398k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 398k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   398k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 398k, False: 0]
  ------------------
 6987|   398k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   398k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   398k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  |  Branch (859:45): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   398k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   398k|    }
 7003|   398k|    return begin + 1;
 7004|   398k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   398k|{
 6443|   398k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   398k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 398k, False: 0]
  |  Branch (6444:26): [True: 0, False: 398k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   398k|    handler();
 6449|   398k|    return begin;
 6450|   398k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   398k|        {
 6945|   398k|            arg_id = handler.on_arg_id();
 6946|   398k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   398k|    {
 7122|   398k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   398k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   398k|{
 6858|   398k|    auto do_presentation = [&]() -> const CharT* {
 6859|   398k|        if (*begin == CharT{'['}) {
 6860|   398k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   398k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   398k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   398k|                return begin;
 6866|   398k|            }
 6867|   398k|            handler.on_character_set_string(set);
 6868|   398k|            return begin;
 6869|   398k|        }
 6870|   398k|        if (*begin == CharT{'/'}) {
 6871|   398k|            return parse_presentation_regex(begin, end, handler);
 6872|   398k|        }
 6873|   398k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   398k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   398k|            handler.on_error("Invalid type specifier in format string");
 6876|   398k|            return begin;
 6877|   398k|        }
 6878|   398k|        handler.on_type(type);
 6879|   398k|        return begin;
 6880|   398k|    };
 6881|       |
 6882|   398k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 398k, False: 0]
  |  Branch (6882:28): [True: 398k, False: 0]
  ------------------
 6883|   398k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 398k, False: 0]
  |  Branch (6883:36): [True: 312k, False: 85.8k]
  ------------------
 6884|   312k|        return do_presentation();
 6885|   312k|    }
 6886|       |
 6887|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  85.8k|    begin = parse_align(begin, end, handler);
 6893|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  85.8k|    begin = parse_width(begin, end, handler);
 6899|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  85.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 85.8k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  85.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 85.8k, False: 0]
  ------------------
 6918|  85.8k|        handler.on_localized();
 6919|  85.8k|        ++begin;
 6920|  85.8k|    }
 6921|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  85.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 85.8k, False: 0]
  |  Branch (6926:25): [True: 0, False: 85.8k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  85.8k|    return begin;
 6935|  85.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   312k|    auto do_presentation = [&]() -> const CharT* {
 6859|   312k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 312k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   312k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 312k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   312k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   312k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   312k|        handler.on_type(type);
 6879|   312k|        return begin;
 6880|   312k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  85.8k|{
 6532|  85.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  85.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  85.8k|    auto check_align = [](wchar_t ch) {
 6535|  85.8k|        switch (ch) {
 6536|  85.8k|            case L'<':
 6537|  85.8k|                return align_type::left;
 6538|  85.8k|            case L'>':
 6539|  85.8k|                return align_type::right;
 6540|  85.8k|            case L'^':
 6541|  85.8k|                return align_type::center;
 6542|  85.8k|            default:
 6543|  85.8k|                return align_type::none;
 6544|  85.8k|        }
 6545|  85.8k|    };
 6546|       |
 6547|  85.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  85.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  |  Branch (859:45): [True: 0, False: 85.8k]
  |  |  |  Branch (859:45): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6549|  85.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  85.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  85.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  85.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  85.8k|    const auto begin_before_fill = begin;
 6559|  85.8k|    begin += potential_fill_len;
 6560|       |
 6561|  85.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 85.8k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  85.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  85.8k|    const auto begin_after_fill = begin;
 6567|  85.8k|    ++begin;
 6568|       |
 6569|  85.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 85.8k, False: 0]
  ------------------
 6570|  85.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.8k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  85.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 85.8k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  85.8k|    }
 6578|       |
 6579|  85.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 85.8k, False: 0]
  ------------------
 6580|  85.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 85.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  85.8k|        return begin_before_fill;
 6585|  85.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  85.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   171k|    auto check_align = [](wchar_t ch) {
 6535|   171k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 171k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 171k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 171k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   171k|            default:
  ------------------
  |  Branch (6542:13): [True: 171k, False: 0]
  ------------------
 6543|   171k|                return align_type::none;
 6544|   171k|        }
 6545|   171k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  85.8k|{
 6597|  85.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  85.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  85.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 85.8k, False: 0]
  |  Branch (6599:33): [True: 0, False: 85.8k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  85.8k|    return begin;
 6610|  85.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  85.8k|    {
 7127|  85.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  85.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 85.8k, False: 0]
  ------------------
 7129|  85.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 85.8k, False: 0]
  ------------------
 7130|  85.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 85.8k]
  ------------------
 7131|  85.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  85.8k|        Handler::on_localized();
 7139|  85.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   398k|{
 8417|   398k|#define SCN_VISIT(Type)                                         \
 8418|   398k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   398k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   398k|    }                                                           \
 8421|   398k|    else {                                                      \
 8422|   398k|        return vis(monostate_val);                              \
 8423|   398k|    }
 8424|       |
 8425|   398k|    monostate monostate_val{};
 8426|       |
 8427|   398k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 398k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 398k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 398k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 398k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 398k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 398k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 398k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 398k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 398k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 398k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 398k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 398k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 398k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 398k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 398k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   132k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 132k, False: 266k]
  ------------------
 8459|   132k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   132k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   132k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   132k|    }                                                           \
  |  | 8421|   132k|    else {                                                      \
  |  | 8422|   132k|        return vis(monostate_val);                              \
  |  | 8423|   132k|    }
  ------------------
 8460|   132k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 132k, False: 265k]
  ------------------
 8461|   132k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   132k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   132k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   132k|    }                                                           \
  |  | 8421|   132k|    else {                                                      \
  |  | 8422|   132k|        return vis(monostate_val);                              \
  |  | 8423|   132k|    }
  ------------------
 8462|   133k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 133k, False: 264k]
  ------------------
 8463|   133k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   133k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   133k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   133k|    }                                                           \
  |  | 8421|   133k|    else {                                                      \
  |  | 8422|   133k|        return vis(monostate_val);                              \
  |  | 8423|   133k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 398k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 398k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 398k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 398k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 398k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 398k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 398k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 398k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 398k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   398k|            SCN_CLANG_POP
 8495|   398k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   343k|    {
 4076|   343k|        sync(0);
 4077|   343k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   621k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  85.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  80.3k|{
   89|  80.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  80.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  80.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  80.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   242k|{
   44|   242k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   242k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  80.3k|{
  127|  80.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  80.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  80.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  80.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   242k|{
   60|   242k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   242k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  14.2k|{
  163|  14.2k|    T value;
  164|  14.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.42k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.42k|    static_cast<    \
  |  |  929|  5.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.42k|    static_cast<    \
  |  |  929|  5.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  43.0k|{
   72|  43.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  43.0k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  80.6k|{
   89|  80.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  80.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  80.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  80.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  80.6k|{
  127|  80.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  80.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  80.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  80.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  14.3k|{
  163|  14.3k|    T value;
  164|  14.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.51k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.51k|    static_cast<    \
  |  |  929|  5.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.51k|    static_cast<    \
  |  |  929|  5.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  81.2k|{
   89|  81.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  81.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  81.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.2k|    static_cast<    \
  |  |  929|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.2k|    static_cast<    \
  |  |  929|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  81.2k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  81.2k|{
  127|  81.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  81.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  81.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.2k|    static_cast<    \
  |  |  929|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.2k|    static_cast<    \
  |  |  929|  81.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  81.2k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  14.4k|{
  163|  14.4k|    T value;
  164|  14.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.67k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.67k|    static_cast<    \
  |  |  929|  5.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.67k|    static_cast<    \
  |  |  929|  5.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.4k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  80.3k|{
   89|  80.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  80.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  80.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  80.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   242k|{
   44|   242k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   242k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  80.3k|{
  127|  80.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  80.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  80.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.3k|    static_cast<    \
  |  |  929|  80.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  80.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   242k|{
   60|   242k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   242k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  14.1k|{
  163|  14.1k|    T value;
  164|  14.1k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.39k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.39k|    static_cast<    \
  |  |  929|  5.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.39k|    static_cast<    \
  |  |  929|  5.39k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  42.9k|{
   72|  42.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  42.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  80.6k|{
   89|  80.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  80.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  80.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  80.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  80.6k|{
  127|  80.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  80.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  80.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  80.6k|    static_cast<    \
  |  |  929|  80.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  80.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  14.2k|{
  163|  14.2k|    T value;
  164|  14.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.48k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.48k|    static_cast<    \
  |  |  929|  5.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.48k|    static_cast<    \
  |  |  929|  5.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  81.1k|{
   89|  81.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  81.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  81.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  81.1k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  81.1k|{
  127|  81.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  81.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  81.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  81.1k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  14.4k|{
  163|  14.4k|    T value;
  164|  14.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.80k, False: 5.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.80k|    }                                                  \
  |  |  |  | 3671|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  5.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.64k|    static_cast<    \
  |  |  929|  5.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.64k|    static_cast<    \
  |  |  929|  5.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.4k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  3.40M|{
  653|  3.40M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  3.40M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.47M|{
  659|  1.47M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.47M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 735k, False: 735k]
  ------------------
  661|  1.47M|                    : std::locale{};
  662|  1.47M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.95M|{
 1221|  1.95M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.95M|                                  m_nan_payload_buffer, value);
 1223|  1.95M|    value = this->setsign(value);
 1224|  1.95M|    return n;
 1225|  1.95M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   183k|{
 1221|   183k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   183k|                                  m_nan_payload_buffer, value);
 1223|   183k|    value = this->setsign(value);
 1224|   183k|    return n;
 1225|   183k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  2.11M|{
 1221|  2.11M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  2.11M|                                  m_nan_payload_buffer, value);
 1223|  2.11M|    value = this->setsign(value);
 1224|  2.11M|    return n;
 1225|  2.11M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   183k|{
 1221|   183k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   183k|                                  m_nan_payload_buffer, value);
 1223|   183k|    value = this->setsign(value);
 1224|   183k|    return n;
 1225|   183k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  2.13M|{
 1221|  2.13M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  2.13M|                                  m_nan_payload_buffer, value);
 1223|  2.13M|    value = this->setsign(value);
 1224|  2.13M|    return n;
 1225|  2.13M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   185k|{
 1221|   185k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   185k|                                  m_nan_payload_buffer, value);
 1223|   185k|    value = this->setsign(value);
 1224|   185k|    return n;
 1225|   185k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.41M|{
 2184|  1.41M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.41M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.50M|{
 2192|  1.50M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.50M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.42M, False: 79.2k]
  |  |  ------------------
  ------------------
 2194|  1.42M|        source.sync(*n);
 2195|  1.42M|    }
 2196|  79.2k|    else {
 2197|  79.2k|        source.sync_all();
 2198|  79.2k|    }
 2199|  1.50M|    return n;
 2200|  1.50M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   242k|{
 2208|   242k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   242k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   242k|{
 2216|   242k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   242k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   242k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 83.6k, False: 158k]
  |  |  ------------------
  ------------------
 2218|  83.6k|        source.sync(*n);
 2219|  83.6k|    }
 2220|   158k|    else {
 2221|   158k|        source.sync_all();
 2222|   158k|    }
 2223|   242k|    return n;
 2224|   242k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.85M|{
  194|  2.85M|    return find_classic_impl(
  195|  2.85M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.85M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.85M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  6.44M|{
  202|  6.44M|    return find_classic_impl(
  203|  6.44M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  6.44M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  6.44M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.41M|{
 2141|  1.41M|    return vscan_internal(source, format, args);
 2142|  1.41M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.50M|{
 2147|  1.50M|    auto n = vscan_internal(source, format, args);
 2148|  1.50M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.42M, False: 79.2k]
  |  |  ------------------
  ------------------
 2149|  1.42M|        source.sync(*n);
 2150|  1.42M|    }
 2151|  79.2k|    else {
 2152|  79.2k|        source.sync_all();
 2153|  79.2k|    }
 2154|  1.50M|    return n;
 2155|  1.50M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   242k|{
 2161|   242k|    return vscan_internal(source, format, args);
 2162|   242k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   242k|{
 2167|   242k|    auto n = vscan_internal(source, format, args);
 2168|   242k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   242k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 83.6k, False: 158k]
  |  |  ------------------
  ------------------
 2169|  83.6k|        source.sync(*n);
 2170|  83.6k|    }
 2171|   158k|    else {
 2172|   158k|        source.sync_all();
 2173|   158k|    }
 2174|   242k|    return n;
 2175|   242k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   312k|{
 2251|   312k|    return vscan_value_internal(source, arg);
 2252|   312k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   308k|{
 2256|   308k|    auto n = vscan_value_internal(source, arg);
 2257|   308k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   308k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 295k, False: 13.2k]
  |  |  ------------------
  ------------------
 2258|   295k|        source.sync(*n);
 2259|   295k|    }
 2260|  13.2k|    else {
 2261|  13.2k|        source.sync_all();
 2262|  13.2k|    }
 2263|   308k|    return n;
 2264|   308k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  43.0k|{
 2270|  43.0k|    return vscan_value_internal(source, arg);
 2271|  43.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  42.9k|{
 2276|  42.9k|    auto n = vscan_value_internal(source, arg);
 2277|  42.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  42.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.5k, False: 26.4k]
  |  |  ------------------
  ------------------
 2278|  16.5k|        source.sync(*n);
 2279|  16.5k|    }
 2280|  26.4k|    else {
 2281|  26.4k|        source.sync_all();
 2282|  26.4k|    }
 2283|  42.9k|    return n;
 2284|  42.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.85M|{
  118|  2.85M|    auto it = source.begin();
  119|       |
  120|  11.3M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 9.63M, False: 1.75M]
  ------------------
  121|  9.63M|        auto sv =
  122|  9.63M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  9.63M|                .substr(0, 8);
  124|       |
  125|  9.63M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 9.40M, False: 238k]
  ------------------
  126|  9.40M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  9.40M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  9.40M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.00M, False: 8.39M]
  ------------------
  129|  1.00M|                break;
  130|  1.00M|            }
  131|  8.39M|            continue;
  132|  9.40M|        }
  133|       |
  134|   838k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 695k, False: 143k]
  ------------------
  135|   695k|            auto tmp =
  136|   695k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   695k|            auto res = get_next_code_point(tmp);
  138|   695k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 95.4k, False: 599k]
  ------------------
  139|  95.4k|                return it;
  140|  95.4k|            }
  141|   599k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   599k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   599k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   599k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   599k|        }
  145|   238k|    }
  146|       |
  147|  2.76M|    return detail::make_string_view_iterator(source, it);
  148|  2.85M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  13.7M|{
  105|  13.7M|    static_assert(sizeof(*source.data()) == 1);
  106|  13.7M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  13.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  13.7M|    uint64_t word{};
  108|  13.7M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  13.7M|    return has_byte_greater(word, 127) != 0;
  111|  13.7M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  61.5M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   695k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  6.44M|{
  118|  6.44M|    auto it = source.begin();
  119|       |
  120|  7.03M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 4.06M, False: 2.97M]
  ------------------
  121|  4.06M|        auto sv =
  122|  4.06M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  4.06M|                .substr(0, 8);
  124|       |
  125|  4.06M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.80M, False: 262k]
  ------------------
  126|  3.80M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.80M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.80M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 3.23M, False: 573k]
  ------------------
  129|  3.23M|                break;
  130|  3.23M|            }
  131|   573k|            continue;
  132|  3.80M|        }
  133|       |
  134|   494k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 474k, False: 19.6k]
  ------------------
  135|   474k|            auto tmp =
  136|   474k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   474k|            auto res = get_next_code_point(tmp);
  138|   474k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 243k, False: 231k]
  ------------------
  139|   243k|                return it;
  140|   243k|            }
  141|   231k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   231k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   231k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   231k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   231k|        }
  145|   262k|    }
  146|       |
  147|  6.20M|    return detail::make_string_view_iterator(source, it);
  148|  6.44M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  6.11M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   474k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.95M|{
 1138|  1.95M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.5k, False: 1.94M]
  ------------------
 1139|  16.5k|        value = std::numeric_limits<T>::infinity();
 1140|  16.5k|        return 3;
 1141|  16.5k|    }
 1142|  1.94M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.6k, False: 1.92M]
  ------------------
 1143|  11.6k|        value = std::numeric_limits<T>::infinity();
 1144|  11.6k|        return 8;
 1145|  11.6k|    }
 1146|  1.92M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 68.0k, False: 1.86M]
  ------------------
 1147|  68.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  68.0k|        return 3;
 1149|  68.0k|    }
 1150|  1.86M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.85M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.85M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.85M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 416k, False: 1.44M]
  ------------------
 1185|   416k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.36k, False: 411k]
  |  |  ------------------
  ------------------
 1186|  5.36k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.36k|                                         "Invalid floating-point digit");
 1188|  5.36k|        }
 1189|   416k|    }
 1190|  1.85M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.9k, False: 1.83M]
  |  |  ------------------
  ------------------
 1191|  13.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  13.9k|                                     "Invalid floating-point digit");
 1193|  13.9k|    }
 1194|       |
 1195|  1.83M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.83M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.83M|            double tmp{};
 1200|  1.83M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.83M|            value = tmp;
 1202|  1.83M|            return ret;
 1203|  1.83M|        }
 1204|  1.83M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.83M|            return fast_float_fallback(data, value);
 1208|  1.83M|        }
 1209|  1.83M|    }
 1210|  1.83M|    else {
 1211|       |        // Default to fast_float
 1212|  1.83M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.83M|    }
 1214|  1.83M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.83M|    {
 1078|  1.83M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  6.83M|    {
  712|  6.83M|        return {kind, options};
  713|  6.83M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.83M|    {
 1082|  1.83M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 411k, False: 1.42M]
  ------------------
 1083|  1.83M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 67.1k, False: 1.36M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   478k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   478k|                                              value);
 1087|   478k|        }
 1088|       |
 1089|  1.36M|        const auto flags = get_flags();
 1090|  1.36M|        const auto view = get_view();
 1091|  1.36M|        const auto result = fast_float::from_chars(
 1092|  1.36M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.36M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.36M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 1.34M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  12.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  12.0k|                                              value);
 1102|  12.0k|        }
 1103|       |
 1104|  1.34M|        return result.ptr - view.data();
 1105|  1.36M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   490k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   490k|    {
 1048|   490k|#if !SCN_DISABLE_STRTOD
 1049|   490k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   490k|    }
 1056|   490k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   490k|    {
  894|   490k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   515k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   490k|    {
  898|   490k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   490k|                           generic_strtod);
  900|   490k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   490k|    {
  732|   490k|        CharT* end{};
  733|   490k|        errno = 0;
  734|   490k|        value = strtod_cb(src, &end);
  735|   490k|        const auto saved_errno = errno;
  736|   490k|        auto chars_read = end - src;
  737|       |
  738|   490k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   490k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 476k]
  |  |  ------------------
  ------------------
  740|  14.4k|            return unexpected(e);
  741|  14.4k|        }
  742|       |
  743|   476k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 409k, False: 66.6k]
  ------------------
  744|   476k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 409k, False: 0]
  ------------------
  745|   409k|            chars_read -= 2;
  746|   409k|        }
  747|       |
  748|   476k|        return chars_read;
  749|   490k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   515k|    {
  778|   515k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 140k, False: 375k]
  |  Branch (778:37): [True: 0, False: 140k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   515k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 67.4k, False: 448k]
  ------------------
  785|   515k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 67.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   515k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 17.0k, False: 498k]
  |  Branch (791:34): [True: 2.54k, False: 14.5k]
  ------------------
  792|  2.54k|            SCN_UNLIKELY_ATTR
  793|  2.54k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.54k|        }
  795|       |
  796|   513k|        SCN_GCC_COMPAT_PUSH
  797|   513k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   513k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 513k, False: 0]
  ------------------
  800|   513k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 513k, False: 0]
  ------------------
  801|   513k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 13.8k, False: 499k]
  ------------------
  802|  13.8k|            SCN_UNLIKELY_ATTR
  803|  13.8k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  13.8k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   499k|            return {};
  809|   513k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   532k|{
  687|   532k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 142k, False: 390k]
  |  Branch (687:25): [True: 0, False: 390k]
  ------------------
  688|   532k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   490k|    {
  755|   490k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 482k, False: 8.12k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   482k|            auto first_space = read_until_classic_space(input.view());
  758|   482k|            input.assign(
  759|   482k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   482k|        }
  761|       |
  762|   490k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 411k, False: 79.2k]
  ------------------
  763|   411k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   411k|                input.get_allocated_string().insert(0, "0x");
  765|   411k|            }
  766|   411k|            else {
  767|   411k|                input.get_allocated_string().insert(0, L"0x");
  768|   411k|            }
  769|   411k|        }
  770|       |
  771|   490k|        return input.get_allocated_string().c_str();
  772|   490k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   490k|    {
  905|   490k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   490k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   490k|        }
  908|   490k|        else {
  909|   490k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   490k|        }
  911|   490k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   490k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   490k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   490k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   490k|            return std::strtof(str, str_end);
  839|   490k|        }
  840|   490k|        else if constexpr (std::is_same_v<T, double>) {
  841|   490k|            return std::strtod(str, str_end);
  842|   490k|        }
  843|   490k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   490k|            return std::strtold(str, str_end);
  845|   490k|        }
  846|   490k|#endif
  847|   490k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  3.04M|    {
 1061|  3.04M|        unsigned format_flags{};
 1062|  3.04M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 3.01M, False: 25.7k]
  ------------------
 1063|  3.01M|            format_flags |= fast_float::fixed;
 1064|  3.01M|        }
 1065|  3.04M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.63M, False: 408k]
  ------------------
 1066|  2.63M|            format_flags |= fast_float::scientific;
 1067|  2.63M|        }
 1068|       |
 1069|  3.04M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  3.04M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.36M|    {
 1110|  1.36M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.36M|            return m_input.view();
 1112|  1.36M|        }
 1113|  1.36M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.36M|            return std::u16string_view{
 1115|  1.36M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.36M|                m_input.view().size()};
 1117|  1.36M|        }
 1118|  1.36M|        else {
 1119|  1.36M|            return std::u32string_view{
 1120|  1.36M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.36M|                m_input.view().size()};
 1122|  1.36M|        }
 1123|  1.36M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   183k|{
 1138|   183k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 183k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   183k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 183k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   183k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 183k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   183k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 183k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   183k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   183k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 40.3k, False: 143k]
  ------------------
 1185|  40.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 23.0k]
  |  |  ------------------
  ------------------
 1186|  17.2k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  17.2k|                                         "Invalid floating-point digit");
 1188|  17.2k|        }
 1189|  40.3k|    }
 1190|   166k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.0k, False: 122k]
  |  |  ------------------
  ------------------
 1191|  43.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  43.0k|                                     "Invalid floating-point digit");
 1193|  43.0k|    }
 1194|       |
 1195|   122k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   122k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   122k|            double tmp{};
 1200|   122k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   122k|            value = tmp;
 1202|   122k|            return ret;
 1203|   122k|        }
 1204|   122k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   122k|            return fast_float_fallback(data, value);
 1208|   122k|        }
 1209|   122k|    }
 1210|   122k|    else {
 1211|       |        // Default to fast_float
 1212|   122k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   122k|    }
 1214|   122k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   122k|    {
 1078|   122k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   420k|    {
  712|   420k|        return {kind, options};
  713|   420k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   122k|    {
 1082|   122k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 22.9k, False: 100k]
  ------------------
 1083|   122k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 287, False: 99.7k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  23.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  23.2k|                                              value);
 1087|  23.2k|        }
 1088|       |
 1089|  99.7k|        const auto flags = get_flags();
 1090|  99.7k|        const auto view = get_view();
 1091|  99.7k|        const auto result = fast_float::from_chars(
 1092|  99.7k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  99.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.7k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  99.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 97.8k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.94k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.94k|                                              value);
 1102|  1.94k|        }
 1103|       |
 1104|  97.8k|        return result.ptr - view.data();
 1105|  99.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  25.1k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  25.1k|    {
 1048|  25.1k|#if !SCN_DISABLE_STRTOD
 1049|  25.1k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  25.1k|    }
 1056|  25.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  25.1k|    {
  894|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  25.1k|    {
  898|  25.1k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  25.1k|                           generic_strtod);
  900|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  25.1k|    {
  732|  25.1k|        CharT* end{};
  733|  25.1k|        errno = 0;
  734|  25.1k|        value = strtod_cb(src, &end);
  735|  25.1k|        const auto saved_errno = errno;
  736|  25.1k|        auto chars_read = end - src;
  737|       |
  738|  25.1k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  25.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 23.1k]
  |  |  ------------------
  ------------------
  740|  1.99k|            return unexpected(e);
  741|  1.99k|        }
  742|       |
  743|  23.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 22.8k, False: 287]
  ------------------
  744|  23.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 22.8k, False: 0]
  ------------------
  745|  22.8k|            chars_read -= 2;
  746|  22.8k|        }
  747|       |
  748|  23.1k|        return chars_read;
  749|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  25.1k|    {
  755|  25.1k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 23.8k, False: 1.27k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  23.8k|            auto first_space = read_until_classic_space(input.view());
  758|  23.8k|            input.assign(
  759|  23.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  23.8k|        }
  761|       |
  762|  25.1k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 22.9k, False: 2.23k]
  ------------------
  763|  22.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  22.9k|                input.get_allocated_string().insert(0, "0x");
  765|  22.9k|            }
  766|  22.9k|            else {
  767|  22.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  22.9k|            }
  769|  22.9k|        }
  770|       |
  771|  25.1k|        return input.get_allocated_string().c_str();
  772|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  25.1k|    {
  905|  25.1k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  25.1k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  25.1k|        }
  908|  25.1k|        else {
  909|  25.1k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  25.1k|        }
  911|  25.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  25.1k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  25.1k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  25.1k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  25.1k|            return std::wcstof(str, str_end);
  877|  25.1k|        }
  878|  25.1k|        else if constexpr (std::is_same_v<T, double>) {
  879|  25.1k|            return std::wcstod(str, str_end);
  880|  25.1k|        }
  881|  25.1k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  25.1k|            return std::wcstold(str, str_end);
  883|  25.1k|        }
  884|  25.1k|#endif
  885|  25.1k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  99.7k|    {
 1110|  99.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  99.7k|            return m_input.view();
 1112|  99.7k|        }
 1113|  99.7k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  99.7k|            return std::u16string_view{
 1115|  99.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  99.7k|                m_input.view().size()};
 1117|  99.7k|        }
 1118|  99.7k|        else {
 1119|  99.7k|            return std::u32string_view{
 1120|  99.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  99.7k|                m_input.view().size()};
 1122|  99.7k|        }
 1123|  99.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  2.11M|{
 1138|  2.11M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 18.0k, False: 2.09M]
  ------------------
 1139|  18.0k|        value = std::numeric_limits<T>::infinity();
 1140|  18.0k|        return 3;
 1141|  18.0k|    }
 1142|  2.09M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 12.7k, False: 2.08M]
  ------------------
 1143|  12.7k|        value = std::numeric_limits<T>::infinity();
 1144|  12.7k|        return 8;
 1145|  12.7k|    }
 1146|  2.08M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 70.7k, False: 2.00M]
  ------------------
 1147|  70.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  70.7k|        return 3;
 1149|  70.7k|    }
 1150|  2.00M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 2.00M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  2.00M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  2.00M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 435k, False: 1.57M]
  ------------------
 1185|   435k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.74k, False: 429k]
  |  |  ------------------
  ------------------
 1186|  5.74k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.74k|                                         "Invalid floating-point digit");
 1188|  5.74k|        }
 1189|   435k|    }
 1190|  2.00M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.6k, False: 1.98M]
  |  |  ------------------
  ------------------
 1191|  15.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  15.6k|                                     "Invalid floating-point digit");
 1193|  15.6k|    }
 1194|       |
 1195|  1.98M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.98M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.98M|            double tmp{};
 1200|  1.98M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.98M|            value = tmp;
 1202|  1.98M|            return ret;
 1203|  1.98M|        }
 1204|  1.98M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.98M|            return fast_float_fallback(data, value);
 1208|  1.98M|        }
 1209|  1.98M|    }
 1210|  1.98M|    else {
 1211|       |        // Default to fast_float
 1212|  1.98M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.98M|    }
 1214|  1.98M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.98M|    {
 1078|  1.98M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.98M|    {
 1082|  1.98M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 429k, False: 1.55M]
  ------------------
 1083|  1.98M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 76.4k, False: 1.48M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   505k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   505k|                                              value);
 1087|   505k|        }
 1088|       |
 1089|  1.48M|        const auto flags = get_flags();
 1090|  1.48M|        const auto view = get_view();
 1091|  1.48M|        const auto result = fast_float::from_chars(
 1092|  1.48M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.48M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.48M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.13k, False: 1.47M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.13k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.13k|                                              value);
 1102|  5.13k|        }
 1103|       |
 1104|  1.47M|        return result.ptr - view.data();
 1105|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   510k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   510k|    {
 1048|   510k|#if !SCN_DISABLE_STRTOD
 1049|   510k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   510k|    }
 1056|   510k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   510k|    {
  894|   510k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   535k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   510k|    {
  898|   510k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   510k|                           generic_strtod);
  900|   510k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   510k|    {
  732|   510k|        CharT* end{};
  733|   510k|        errno = 0;
  734|   510k|        value = strtod_cb(src, &end);
  735|   510k|        const auto saved_errno = errno;
  736|   510k|        auto chars_read = end - src;
  737|       |
  738|   510k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   510k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.90k, False: 505k]
  |  |  ------------------
  ------------------
  740|  5.90k|            return unexpected(e);
  741|  5.90k|        }
  742|       |
  743|   505k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 428k, False: 76.3k]
  ------------------
  744|   505k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 428k, False: 0]
  ------------------
  745|   428k|            chars_read -= 2;
  746|   428k|        }
  747|       |
  748|   505k|        return chars_read;
  749|   510k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   535k|    {
  778|   535k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 142k, False: 392k]
  |  Branch (778:37): [True: 0, False: 142k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   535k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 76.7k, False: 458k]
  ------------------
  785|   535k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 76.7k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   535k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.82k, False: 528k]
  |  Branch (791:34): [True: 652, False: 6.16k]
  ------------------
  792|    652|            SCN_UNLIKELY_ATTR
  793|    652|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    652|        }
  795|       |
  796|   534k|        SCN_GCC_COMPAT_PUSH
  797|   534k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   534k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 534k, False: 0]
  ------------------
  800|   534k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 534k, False: 0]
  ------------------
  801|   534k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.16k, False: 528k]
  ------------------
  802|  6.16k|            SCN_UNLIKELY_ATTR
  803|  6.16k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.16k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   528k|            return {};
  809|   534k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   541k|{
  691|   541k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 142k, False: 399k]
  |  Branch (691:24): [True: 0, False: 399k]
  ------------------
  692|   541k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   510k|    {
  755|   510k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 505k, False: 5.79k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   505k|            auto first_space = read_until_classic_space(input.view());
  758|   505k|            input.assign(
  759|   505k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   505k|        }
  761|       |
  762|   510k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 429k, False: 81.6k]
  ------------------
  763|   429k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   429k|                input.get_allocated_string().insert(0, "0x");
  765|   429k|            }
  766|   429k|            else {
  767|   429k|                input.get_allocated_string().insert(0, L"0x");
  768|   429k|            }
  769|   429k|        }
  770|       |
  771|   510k|        return input.get_allocated_string().c_str();
  772|   510k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   510k|    {
  905|   510k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   510k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   510k|        }
  908|   510k|        else {
  909|   510k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   510k|        }
  911|   510k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   510k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   510k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   510k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   510k|            return std::strtof(str, str_end);
  839|   510k|        }
  840|   510k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   510k|            return std::strtod(str, str_end);
  842|   510k|        }
  843|   510k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   510k|            return std::strtold(str, str_end);
  845|   510k|        }
  846|   510k|#endif
  847|   510k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.48M|    {
 1110|  1.48M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.48M|            return m_input.view();
 1112|  1.48M|        }
 1113|  1.48M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.48M|            return std::u16string_view{
 1115|  1.48M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.48M|                m_input.view().size()};
 1117|  1.48M|        }
 1118|  1.48M|        else {
 1119|  1.48M|            return std::u32string_view{
 1120|  1.48M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.48M|                m_input.view().size()};
 1122|  1.48M|        }
 1123|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   183k|{
 1138|   183k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 183k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   183k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 183k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   183k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 183k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   183k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 183k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   183k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   183k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 40.3k, False: 143k]
  ------------------
 1185|  40.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 23.0k]
  |  |  ------------------
  ------------------
 1186|  17.2k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  17.2k|                                         "Invalid floating-point digit");
 1188|  17.2k|        }
 1189|  40.3k|    }
 1190|   166k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.3k, False: 123k]
  |  |  ------------------
  ------------------
 1191|  43.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  43.3k|                                     "Invalid floating-point digit");
 1193|  43.3k|    }
 1194|       |
 1195|   123k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   123k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   123k|            double tmp{};
 1200|   123k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   123k|            value = tmp;
 1202|   123k|            return ret;
 1203|   123k|        }
 1204|   123k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   123k|            return fast_float_fallback(data, value);
 1208|   123k|        }
 1209|   123k|    }
 1210|   123k|    else {
 1211|       |        // Default to fast_float
 1212|   123k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   123k|    }
 1214|   123k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   123k|    {
 1078|   123k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   123k|    {
 1082|   123k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 22.9k, False: 100k]
  ------------------
 1083|   123k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 287, False: 100k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  23.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  23.2k|                                              value);
 1087|  23.2k|        }
 1088|       |
 1089|   100k|        const auto flags = get_flags();
 1090|   100k|        const auto view = get_view();
 1091|   100k|        const auto result = fast_float::from_chars(
 1092|   100k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   100k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   100k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 872, False: 99.2k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    872|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    872|                                              value);
 1102|    872|        }
 1103|       |
 1104|  99.2k|        return result.ptr - view.data();
 1105|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  24.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  24.0k|    {
 1048|  24.0k|#if !SCN_DISABLE_STRTOD
 1049|  24.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  24.0k|    }
 1056|  24.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  24.0k|    {
  894|  24.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  24.0k|    {
  898|  24.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  24.0k|                           generic_strtod);
  900|  24.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  24.0k|    {
  732|  24.0k|        CharT* end{};
  733|  24.0k|        errno = 0;
  734|  24.0k|        value = strtod_cb(src, &end);
  735|  24.0k|        const auto saved_errno = errno;
  736|  24.0k|        auto chars_read = end - src;
  737|       |
  738|  24.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  24.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 916, False: 23.1k]
  |  |  ------------------
  ------------------
  740|    916|            return unexpected(e);
  741|    916|        }
  742|       |
  743|  23.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 22.8k, False: 287]
  ------------------
  744|  23.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 22.8k, False: 0]
  ------------------
  745|  22.8k|            chars_read -= 2;
  746|  22.8k|        }
  747|       |
  748|  23.1k|        return chars_read;
  749|  24.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  24.0k|    {
  755|  24.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 23.3k, False: 739]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  23.3k|            auto first_space = read_until_classic_space(input.view());
  758|  23.3k|            input.assign(
  759|  23.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  23.3k|        }
  761|       |
  762|  24.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 22.9k, False: 1.15k]
  ------------------
  763|  22.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  22.9k|                input.get_allocated_string().insert(0, "0x");
  765|  22.9k|            }
  766|  22.9k|            else {
  767|  22.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  22.9k|            }
  769|  22.9k|        }
  770|       |
  771|  24.0k|        return input.get_allocated_string().c_str();
  772|  24.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  24.0k|    {
  905|  24.0k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  24.0k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  24.0k|        }
  908|  24.0k|        else {
  909|  24.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  24.0k|        }
  911|  24.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  24.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  24.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  24.0k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  24.0k|            return std::wcstof(str, str_end);
  877|  24.0k|        }
  878|  24.0k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  24.0k|            return std::wcstod(str, str_end);
  880|  24.0k|        }
  881|  24.0k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  24.0k|            return std::wcstold(str, str_end);
  883|  24.0k|        }
  884|  24.0k|#endif
  885|  24.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   100k|    {
 1110|   100k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   100k|            return m_input.view();
 1112|   100k|        }
 1113|   100k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   100k|            return std::u16string_view{
 1115|   100k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   100k|                m_input.view().size()};
 1117|   100k|        }
 1118|   100k|        else {
 1119|   100k|            return std::u32string_view{
 1120|   100k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   100k|                m_input.view().size()};
 1122|   100k|        }
 1123|   100k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  2.13M|{
 1138|  2.13M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 18.5k, False: 2.11M]
  ------------------
 1139|  18.5k|        value = std::numeric_limits<T>::infinity();
 1140|  18.5k|        return 3;
 1141|  18.5k|    }
 1142|  2.11M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 13.0k, False: 2.10M]
  ------------------
 1143|  13.0k|        value = std::numeric_limits<T>::infinity();
 1144|  13.0k|        return 8;
 1145|  13.0k|    }
 1146|  2.10M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 71.1k, False: 2.02M]
  ------------------
 1147|  71.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  71.1k|        return 3;
 1149|  71.1k|    }
 1150|  2.02M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 2.02M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  2.02M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  2.02M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 436k, False: 1.59M]
  ------------------
 1185|   436k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 430k]
  |  |  ------------------
  ------------------
 1186|  5.92k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  5.92k|                                         "Invalid floating-point digit");
 1188|  5.92k|        }
 1189|   436k|    }
 1190|  2.02M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 2.00M]
  |  |  ------------------
  ------------------
 1191|  16.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  16.5k|                                     "Invalid floating-point digit");
 1193|  16.5k|    }
 1194|       |
 1195|  2.00M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  2.00M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  2.00M|            double tmp{};
 1200|  2.00M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  2.00M|            value = tmp;
 1202|  2.00M|            return ret;
 1203|  2.00M|        }
 1204|  2.00M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  2.00M|            return fast_float_fallback(data, value);
 1208|  2.00M|        }
 1209|  2.00M|    }
 1210|  2.00M|    else {
 1211|       |        // Default to fast_float
 1212|  2.00M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  2.00M|    }
 1214|  2.00M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  2.00M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  2.00M|    {
 1048|  2.00M|#if !SCN_DISABLE_STRTOD
 1049|  2.00M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  2.00M|    }
 1056|  2.00M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  2.00M|    {
  894|  2.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  2.13M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  2.00M|    {
  898|  2.00M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  2.00M|                           generic_strtod);
  900|  2.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  2.00M|    {
  732|  2.00M|        CharT* end{};
  733|  2.00M|        errno = 0;
  734|  2.00M|        value = strtod_cb(src, &end);
  735|  2.00M|        const auto saved_errno = errno;
  736|  2.00M|        auto chars_read = end - src;
  737|       |
  738|  2.00M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  2.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 2.00M]
  |  |  ------------------
  ------------------
  740|  1.60k|            return unexpected(e);
  741|  1.60k|        }
  742|       |
  743|  2.00M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 429k, False: 1.57M]
  ------------------
  744|  2.00M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 429k, False: 0]
  ------------------
  745|   429k|            chars_read -= 2;
  746|   429k|        }
  747|       |
  748|  2.00M|        return chars_read;
  749|  2.00M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  2.13M|    {
  778|  2.13M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 632k, False: 1.49M]
  |  Branch (778:37): [True: 0, False: 632k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  2.13M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 76.7k, False: 2.05M]
  ------------------
  785|  2.13M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 76.7k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  2.13M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.71k, False: 2.12M]
  |  Branch (791:34): [True: 166, False: 1.55k]
  ------------------
  792|    166|            SCN_UNLIKELY_ATTR
  793|    166|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    166|        }
  795|       |
  796|  2.13M|        SCN_GCC_COMPAT_PUSH
  797|  2.13M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  2.13M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 2.13M, False: 0]
  ------------------
  800|  2.13M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 2.13M, False: 0]
  ------------------
  801|  2.13M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.55k, False: 2.12M]
  ------------------
  802|  1.55k|            SCN_UNLIKELY_ATTR
  803|  1.55k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.55k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  2.12M|            return {};
  809|  2.13M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  2.13M|{
  695|  2.13M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 632k, False: 1.49M]
  |  Branch (695:26): [True: 0, False: 1.49M]
  ------------------
  696|  2.13M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  2.00M|    {
  755|  2.00M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.86M, False: 137k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.86M|            auto first_space = read_until_classic_space(input.view());
  758|  1.86M|            input.assign(
  759|  1.86M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.86M|        }
  761|       |
  762|  2.00M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 430k, False: 1.57M]
  ------------------
  763|   430k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   430k|                input.get_allocated_string().insert(0, "0x");
  765|   430k|            }
  766|   430k|            else {
  767|   430k|                input.get_allocated_string().insert(0, L"0x");
  768|   430k|            }
  769|   430k|        }
  770|       |
  771|  2.00M|        return input.get_allocated_string().c_str();
  772|  2.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  2.00M|    {
  905|  2.00M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  2.00M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  2.00M|        }
  908|  2.00M|        else {
  909|  2.00M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  2.00M|        }
  911|  2.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  2.00M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  2.00M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  2.00M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  2.00M|            return std::strtof(str, str_end);
  839|  2.00M|        }
  840|  2.00M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  2.00M|            return std::strtod(str, str_end);
  842|  2.00M|        }
  843|  2.00M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  2.00M|            return std::strtold(str, str_end);
  845|  2.00M|        }
  846|  2.00M|#endif
  847|  2.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   185k|{
 1138|   185k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 185k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   185k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 185k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   185k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 185k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   185k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 185k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   185k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   185k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 40.3k, False: 145k]
  ------------------
 1185|  40.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.3k, False: 23.0k]
  |  |  ------------------
  ------------------
 1186|  17.3k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  17.3k|                                         "Invalid floating-point digit");
 1188|  17.3k|        }
 1189|  40.3k|    }
 1190|   168k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.5k, False: 124k]
  |  |  ------------------
  ------------------
 1191|  43.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  43.5k|                                     "Invalid floating-point digit");
 1193|  43.5k|    }
 1194|       |
 1195|   124k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   124k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   124k|            double tmp{};
 1200|   124k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   124k|            value = tmp;
 1202|   124k|            return ret;
 1203|   124k|        }
 1204|   124k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   124k|            return fast_float_fallback(data, value);
 1208|   124k|        }
 1209|   124k|    }
 1210|   124k|    else {
 1211|       |        // Default to fast_float
 1212|   124k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   124k|    }
 1214|   124k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   124k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   124k|    {
 1048|   124k|#if !SCN_DISABLE_STRTOD
 1049|   124k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   124k|    }
 1056|   124k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   124k|    {
  894|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   124k|    {
  898|   124k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   124k|                           generic_strtod);
  900|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   124k|    {
  732|   124k|        CharT* end{};
  733|   124k|        errno = 0;
  734|   124k|        value = strtod_cb(src, &end);
  735|   124k|        const auto saved_errno = errno;
  736|   124k|        auto chars_read = end - src;
  737|       |
  738|   124k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   124k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 124k]
  |  |  ------------------
  ------------------
  740|    114|            return unexpected(e);
  741|    114|        }
  742|       |
  743|   124k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 22.9k, False: 101k]
  ------------------
  744|   124k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 22.9k, False: 0]
  ------------------
  745|  22.9k|            chars_read -= 2;
  746|  22.9k|        }
  747|       |
  748|   124k|        return chars_read;
  749|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   124k|    {
  755|   124k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 122k, False: 2.50k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   122k|            auto first_space = read_until_classic_space(input.view());
  758|   122k|            input.assign(
  759|   122k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   122k|        }
  761|       |
  762|   124k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 22.9k, False: 101k]
  ------------------
  763|  22.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  22.9k|                input.get_allocated_string().insert(0, "0x");
  765|  22.9k|            }
  766|  22.9k|            else {
  767|  22.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  22.9k|            }
  769|  22.9k|        }
  770|       |
  771|   124k|        return input.get_allocated_string().c_str();
  772|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   124k|    {
  905|   124k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   124k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   124k|        }
  908|   124k|        else {
  909|   124k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   124k|        }
  911|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   124k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   124k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   124k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   124k|            return std::wcstof(str, str_end);
  877|   124k|        }
  878|   124k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   124k|            return std::wcstod(str, str_end);
  880|   124k|        }
  881|   124k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   124k|            return std::wcstold(str, str_end);
  883|   124k|        }
  884|   124k|#endif
  885|   124k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  3.01M|{
 2073|  3.01M|    const auto argcount = args.size();
 2074|  3.01M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 617k, False: 2.39M]
  |  Branch (2074:60): [True: 617k, False: 0]
  ------------------
 2075|   617k|        auto arg = args.get(0);
 2076|   617k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   617k|    static_cast<    \
  |  |  929|   617k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   617k|    }
 2078|       |
 2079|  2.39M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 2.39M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  2.39M|    SCN_UNLIKELY_ATTR
 2087|  2.39M|    {
 2088|  2.39M|        auto handler = format_handler<false, CharT>{
 2089|  2.39M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.39M|    static_cast<    \
  |  |  929|  2.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.39M|    static_cast<    \
  |  |  929|  2.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  2.39M|        return vscan_parse_format_string(format, handler);
 2091|  2.39M|    }
 2092|  2.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  5.83M|{
 1625|  5.83M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 4.59M, False: 1.24M]
  ------------------
 1626|  4.59M|        return false;
 1627|  4.59M|    }
 1628|  1.24M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.24M, False: 0]
  |  Branch (1628:39): [True: 1.24M, False: 0]
  ------------------
 1629|  5.83M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   925k|{
 1658|   925k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   925k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 925k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   925k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   925k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 925k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   925k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   925k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   925k|    static_cast<    \
  |  |  929|   925k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   925k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   925k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   925k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   925k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   925k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.6k, False: 886k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  39.6k|    }                                                  \
  |  |  |  | 3671|   925k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   886k|    return it.position();
 1675|   925k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  2.19M|    {
 1903|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  5.39M|    {
 1722|  5.39M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  5.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.39M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  5.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  2.19M|    {
 1853|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.19M|{
 2038|  2.19M|    const auto beg = handler.get_ctx().begin();
 2039|  2.19M|    detail::parse_format_string<false>(format, handler);
 2040|  2.19M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 2.06M]
  |  |  ------------------
  ------------------
 2041|   132k|        return unexpected(handler.error);
 2042|   132k|    }
 2043|  2.06M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.19M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  15.1M|    {
 2022|  15.1M|        return ctx.get();
 2023|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  15.1M|    {
 1857|  15.1M|        return contiguous_ctx;
 1858|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  4.26M|    {
 1907|  4.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.26M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.19M|{
 1681|  2.19M|    auto arg = ctx.arg(id);
 1682|  2.19M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.19M|    return arg;
 1686|  2.19M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  5.39M|    {
 1797|  5.39M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.39M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  5.39M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  5.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.39M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  5.39M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.39M, False: 0]
  |  |  ------------------
  ------------------
 1807|  5.39M|            visited_args_lower64 |= (1ull << id);
 1808|  5.39M|            return;
 1809|  5.39M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  5.39M|    {
 1782|  5.39M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  5.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.39M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  5.39M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  5.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.39M, False: 0]
  |  |  ------------------
  ------------------
 1788|  5.39M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  5.39M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  5.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   792k|    {
 1766|   792k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   792k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 792k, False: 0]
  |  |  ------------------
  ------------------
 1767|   792k|            error = err;
 1768|   792k|        }
 1769|   792k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  2.19M|    {
 1944|  2.19M|        return parse_ctx.next_arg_id();
 1945|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  2.19M|    {
 1985|  2.19M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.19M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.19M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.19M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.19M|        auto specs = detail::format_specs{};
 1998|  2.19M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.19M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.19M|            arg.type()};
 2001|       |
 2002|  2.19M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.19M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.19M]
  |  Branch (2003:29): [True: 0, False: 2.19M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.19M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.19M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.19M|        on_visit_scan_arg(
 2014|  2.19M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.19M|                                           get_ctx().locale()},
 2016|  2.19M|            arg);
 2017|  2.19M|        return parse_ctx.begin();
 2018|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  2.19M|    {
 1701|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  2.19M|    {
 1956|  2.19M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.19M]
  |  Branch (1956:23): [True: 0, False: 2.19M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.19M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.19M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 2.06M]
  |  |  ------------------
  ------------------
 1963|   132k|            on_error(r.error());
 1964|   132k|        }
 1965|  2.06M|        else {
 1966|  2.06M|            get_ctx().advance_to(*r);
 1967|  2.06M|        }
 1968|  2.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  5.39M|    {
 1729|  5.39M|        {
 1730|  5.39M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 5.39M]
  ------------------
 1731|  5.39M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 5.39M]
  ------------------
 1732|  5.39M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  5.39M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  5.39M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 5.39M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  5.39M|        }
 1739|       |
 1740|  5.39M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 5.39M, False: 0]
  ------------------
 1741|  5.39M|            return;
 1742|  5.39M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  5.39M|    {
 1777|  5.39M|        return error;
 1778|  5.39M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  16.1M|    {
 1773|  16.1M|        return static_cast<bool>(error);
 1774|  16.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  2.39M|    {
 1903|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  2.39M|    {
 1830|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.39M|{
 2038|  2.39M|    const auto beg = handler.get_ctx().begin();
 2039|  2.39M|    detail::parse_format_string<false>(format, handler);
 2040|  2.39M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 2.26M]
  |  |  ------------------
  ------------------
 2041|   132k|        return unexpected(handler.error);
 2042|   132k|    }
 2043|  2.26M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  16.5M|    {
 2022|  16.5M|        return ctx.get();
 2023|  16.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  16.5M|    {
 1834|  16.5M|        return ctx;
 1835|  16.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  4.66M|    {
 1907|  4.66M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.66M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  2.39M|{
 1681|  2.39M|    auto arg = ctx.arg(id);
 1682|  2.39M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.39M|    return arg;
 1686|  2.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  2.39M|    {
 1944|  2.39M|        return parse_ctx.next_arg_id();
 1945|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  2.39M|    {
 1985|  2.39M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.39M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.39M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.39M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.39M|        auto specs = detail::format_specs{};
 1998|  2.39M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.39M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.39M|            arg.type()};
 2001|       |
 2002|  2.39M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.39M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.39M]
  |  Branch (2003:29): [True: 0, False: 2.39M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.39M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.39M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.39M|        on_visit_scan_arg(
 2014|  2.39M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.39M|                                           get_ctx().locale()},
 2016|  2.39M|            arg);
 2017|  2.39M|        return parse_ctx.begin();
 2018|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  2.39M|    {
 1701|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  2.39M|    {
 1956|  2.39M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.39M]
  |  Branch (1956:23): [True: 0, False: 2.39M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.39M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.39M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132k, False: 2.26M]
  |  |  ------------------
  ------------------
 1963|   132k|            on_error(r.error());
 1964|   132k|        }
 1965|  2.26M|        else {
 1966|  2.26M|            get_ctx().advance_to(*r);
 1967|  2.26M|        }
 1968|  2.39M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.82M|{
 2053|  2.82M|    const auto argcount = args.size();
 2054|  2.82M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 625k, False: 2.19M]
  |  Branch (2054:60): [True: 625k, False: 0]
  ------------------
 2055|   625k|        auto arg = args.get(0);
 2056|   625k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   625k|    static_cast<    \
  |  |  929|   625k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   625k|    }
 2058|       |
 2059|  2.19M|    auto handler = format_handler<true, CharT>{
 2060|  2.19M|        ranges::subrange<const CharT*>{source.data(),
 2061|  2.19M|                                       source.data() + source.size()},
 2062|  2.19M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.19M|    static_cast<    \
  |  |  929|  2.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.19M|    static_cast<    \
  |  |  929|  2.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  2.19M|    return vscan_parse_format_string(format, handler);
 2064|  2.82M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   938k|{
 1638|   938k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 938k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   938k|    auto reader =
 1644|   938k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   938k|            ranges::subrange<const CharT*>{source.data(),
 1646|   938k|                                           source.data() + source.size()},
 1647|   938k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   938k|    static_cast<    \
  |  |  929|   938k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   938k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   938k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   938k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   938k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.6k, False: 898k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  39.6k|    }                                                  \
  |  |  |  | 3671|   938k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   898k|    return ranges::distance(source.data(), it);
 1650|   938k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   484k|{
 2053|   484k|    const auto argcount = args.size();
 2054|   484k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 86.0k, False: 398k]
  |  Branch (2054:60): [True: 86.0k, False: 0]
  ------------------
 2055|  86.0k|        auto arg = args.get(0);
 2056|  86.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  86.0k|    static_cast<    \
  |  |  929|  86.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  86.0k|    }
 2058|       |
 2059|   398k|    auto handler = format_handler<true, CharT>{
 2060|   398k|        ranges::subrange<const CharT*>{source.data(),
 2061|   398k|                                       source.data() + source.size()},
 2062|   398k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   398k|    static_cast<    \
  |  |  929|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   398k|    static_cast<    \
  |  |  929|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   398k|    return vscan_parse_format_string(format, handler);
 2064|   484k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   968k|{
 1625|   968k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 796k, False: 171k]
  ------------------
 1626|   796k|        return false;
 1627|   796k|    }
 1628|   171k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 171k, False: 0]
  |  Branch (1628:39): [True: 171k, False: 0]
  ------------------
 1629|   968k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   129k|{
 1638|   129k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   129k|    auto reader =
 1644|   129k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   129k|            ranges::subrange<const CharT*>{source.data(),
 1646|   129k|                                           source.data() + source.size()},
 1647|   129k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   129k|    static_cast<    \
  |  |  929|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   129k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 79.2k, False: 49.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  79.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  79.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  79.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  79.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  79.2k|    }                                                  \
  |  |  |  | 3671|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  49.8k|    return ranges::distance(source.data(), it);
 1650|   129k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   398k|    {
 1903|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   398k|    {
 1853|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   398k|{
 2038|   398k|    const auto beg = handler.get_ctx().begin();
 2039|   398k|    detail::parse_format_string<false>(format, handler);
 2040|   398k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264k, False: 134k]
  |  |  ------------------
  ------------------
 2041|   264k|        return unexpected(handler.error);
 2042|   264k|    }
 2043|   134k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   398k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.26M|    {
 2022|  2.26M|        return ctx.get();
 2023|  2.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.26M|    {
 1857|  2.26M|        return contiguous_ctx;
 1858|  2.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   533k|    {
 1907|   533k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 533k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   533k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   398k|{
 1681|   398k|    auto arg = ctx.arg(id);
 1682|   398k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   398k|    return arg;
 1686|   398k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   398k|    {
 1944|   398k|        return parse_ctx.next_arg_id();
 1945|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   398k|    {
 1985|   398k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   398k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   398k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 398k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   398k|        auto specs = detail::format_specs{};
 1998|   398k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   398k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   398k|            arg.type()};
 2001|       |
 2002|   398k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   398k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 398k]
  |  Branch (2003:29): [True: 0, False: 398k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   398k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   398k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   398k|        on_visit_scan_arg(
 2014|   398k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   398k|                                           get_ctx().locale()},
 2016|   398k|            arg);
 2017|   398k|        return parse_ctx.begin();
 2018|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   398k|    {
 1701|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   398k|    {
 1956|   398k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 398k]
  |  Branch (1956:23): [True: 0, False: 398k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   398k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   398k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264k, False: 134k]
  |  |  ------------------
  ------------------
 1963|   264k|            on_error(r.error());
 1964|   264k|        }
 1965|   134k|        else {
 1966|   134k|            get_ctx().advance_to(*r);
 1967|   134k|        }
 1968|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   484k|{
 2073|   484k|    const auto argcount = args.size();
 2074|   484k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 85.8k, False: 398k]
  |  Branch (2074:60): [True: 85.8k, False: 0]
  ------------------
 2075|  85.8k|        auto arg = args.get(0);
 2076|  85.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  85.8k|    static_cast<    \
  |  |  929|  85.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  85.8k|    }
 2078|       |
 2079|   398k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 398k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   398k|    SCN_UNLIKELY_ATTR
 2087|   398k|    {
 2088|   398k|        auto handler = format_handler<false, CharT>{
 2089|   398k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   398k|    static_cast<    \
  |  |  929|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   398k|    static_cast<    \
  |  |  929|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   398k|        return vscan_parse_format_string(format, handler);
 2091|   398k|    }
 2092|   398k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   128k|{
 1658|   128k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   128k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   128k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   128k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   128k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 79.2k, False: 49.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  79.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  79.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  79.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  79.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  79.2k|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  49.5k|    return it.position();
 1675|   128k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   398k|    {
 1903|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   398k|    {
 1830|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   398k|{
 2038|   398k|    const auto beg = handler.get_ctx().begin();
 2039|   398k|    detail::parse_format_string<false>(format, handler);
 2040|   398k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264k, False: 134k]
  |  |  ------------------
  ------------------
 2041|   264k|        return unexpected(handler.error);
 2042|   264k|    }
 2043|   134k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   398k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.25M|    {
 2022|  2.25M|        return ctx.get();
 2023|  2.25M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.25M|    {
 1834|  2.25M|        return ctx;
 1835|  2.25M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   532k|    {
 1907|   532k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 532k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   532k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   398k|{
 1681|   398k|    auto arg = ctx.arg(id);
 1682|   398k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   398k|    return arg;
 1686|   398k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   398k|    {
 1944|   398k|        return parse_ctx.next_arg_id();
 1945|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   398k|    {
 1985|   398k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   398k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   398k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 398k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   398k|        auto specs = detail::format_specs{};
 1998|   398k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   398k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   398k|            arg.type()};
 2001|       |
 2002|   398k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   398k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 398k]
  |  Branch (2003:29): [True: 0, False: 398k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   398k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   398k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   398k|        on_visit_scan_arg(
 2014|   398k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   398k|                                           get_ctx().locale()},
 2016|   398k|            arg);
 2017|   398k|        return parse_ctx.begin();
 2018|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   398k|    {
 1701|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   398k|    {
 1956|   398k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 398k]
  |  Branch (1956:23): [True: 0, False: 398k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   398k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   398k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264k, False: 134k]
  |  |  ------------------
  ------------------
 1963|   264k|            on_error(r.error());
 1964|   264k|        }
 1965|   134k|        else {
 1966|   134k|            get_ctx().advance_to(*r);
 1967|   134k|        }
 1968|   398k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   312k|{
 2099|   312k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   312k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   308k|{
 2099|   308k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   308k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  43.0k|{
 2099|  43.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  43.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  42.9k|{
 2099|  42.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  42.9k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.40k|{
 1363|  4.40k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.40k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.40k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.40k|            std::u32string tmp;
 1368|  4.40k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.40k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.40k|                std::u32string_view{tmp}, dest);
 1371|  4.40k|        }
 1372|  4.40k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.40k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.40k|        }
 1375|  4.40k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.40k|{
 1256|  4.40k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.40k|    auto it = src.begin();
 1259|  1.66M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.66M, False: 4.40k]
  ------------------
 1260|  1.66M|        auto res = get_next_code_point(
 1261|  1.66M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.66M|                                                                 src.end()));
 1263|  1.66M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.87k, False: 1.65M]
  |  |  ------------------
  ------------------
 1264|  5.87k|            dest.push_back(DestCharT{0xfffd});
 1265|  5.87k|        }
 1266|  1.65M|        else {
 1267|  1.65M|            dest.push_back(res.value);
 1268|  1.65M|        }
 1269|  1.66M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.66M|    }
 1271|  4.40k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.83M|{
 1169|  2.83M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.83M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.83M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.5k, False: 2.77M]
  |  |  ------------------
  ------------------
 1173|  55.5k|        return {get_start_for_next_code_point(input),
 1174|  55.5k|                detail::invalid_code_point};
 1175|  55.5k|    }
 1176|  2.77M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.91k, False: 2.77M]
  |  |  ------------------
  ------------------
 1177|  7.91k|        return {input.end(), detail::invalid_code_point};
 1178|  7.91k|    }
 1179|       |
 1180|  2.77M|    return {input.begin() + len,
 1181|  2.77M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.77M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  55.5k|{
 1155|  55.5k|    auto it = input.begin();
 1156|   568k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 556k, False: 12.0k]
  ------------------
 1157|   556k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 43.4k, False: 513k]
  ------------------
 1158|  43.4k|            break;
 1159|  43.4k|        }
 1160|   556k|    }
 1161|  55.5k|    return it;
 1162|  55.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  57.8M|    {
  809|  57.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  57.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  57.8M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  21.6M|    {
  823|  21.6M|        return a.m_code == b.m_code;
  824|  21.6M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  3.18M|    {
 1728|  3.18M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  3.18M|        std::strcpy(m_locbuf, loc);
 1730|  3.18M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  3.18M|    {
 1733|       |        // Restore locale to what it was before
 1734|  3.18M|        std::setlocale(m_category, m_locbuf);
 1735|  3.18M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  3.18M|    {
 1757|  3.18M|        std::setlocale(cat, "C");
 1758|  3.18M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  5.39M|    {
 2936|  5.39M|        return m_msg == nullptr;
 2937|  5.39M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  5.34M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  67.6M|{
  458|  67.6M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  67.6M|        static_cast<unsigned char>(ch))];
  460|  67.6M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  52.5k|{
  469|  52.5k|    return static_cast<unsigned char>(ch) <= 127;
  470|  52.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  13.7M|{
  539|  13.7M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  13.7M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  25.2M|{
  784|  25.2M|    return e != eof_error::good;
  785|  25.2M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  66.6k|{
  798|  66.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  66.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  66.6k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  66.6k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   281k|{
  845|   281k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   281k|    return parse_error::eof;
  847|   281k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  7.77M|{
  854|  7.77M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 7.77M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  7.77M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 101k, False: 7.67M]
  ------------------
  859|   101k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|   101k|    }
  861|       |
  862|  7.67M|    return scan_error{code, msg};
  863|  7.77M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  7.77M|{
  868|  7.77M|    return [code, msg](parse_error err) {
  869|  7.77M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  7.77M|    };
  871|  7.77M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  8.61M|{
 1200|       |    // Pattern_White_Space property
 1201|  8.61M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 8.22M, False: 394k]
  |  Branch (1201:27): [True: 2.70M, False: 5.51M]
  ------------------
 1202|  8.61M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 174k, False: 5.73M]
  ------------------
 1203|  8.61M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 219k, False: 5.51M]
  ------------------
 1204|  8.61M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.97k, False: 5.51M]
  ------------------
 1205|  8.61M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 26.0k, False: 5.48M]
  ------------------
 1206|  8.61M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 381k, False: 5.10M]
  ------------------
 1207|  8.61M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 5.10M]
  ------------------
 1208|  8.61M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  8.27M|{
 2220|  8.27M|    unsigned char running_diff{0};
 2221|  31.0M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 22.8M, False: 8.27M]
  ------------------
 2222|  22.8M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  22.8M|    }
 2224|  8.27M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 246k, False: 8.03M]
  |  Branch (2224:33): [True: 36.4k, False: 7.99M]
  ------------------
 2225|  8.27M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  54.5M|{
 3123|  54.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  54.5M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.93M|{
 3127|  1.93M|#if WCHAR_MIN < 0
 3128|  1.93M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.91M, False: 22.6k]
  |  Branch (3128:20): [True: 1.14M, False: 771k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.14M|        return char_to_int(static_cast<char>(ch));
 3133|  1.14M|    }
 3134|   793k|    return 255;
 3135|  1.93M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  4.59M|{
 6008|  4.59M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 4.59M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  4.59M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 4.59M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  4.59M|    return {};
 6023|  4.59M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  9.22M|    {
  304|  9.22M|        ranges::advance(x, n);
  305|  9.22M|        return x;
  306|  9.22M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  9.22M|    {
  268|  9.22M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.22M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  9.22M|    {
  151|  9.22M|        i += n;
  152|  9.22M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  11.0M|    {
  108|  11.0M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  11.0M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  11.0M|    {
   87|  11.0M|        return s - i;
   88|  11.0M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.47M|    {
  304|  1.47M|        ranges::advance(x, n);
  305|  1.47M|        return x;
  306|  1.47M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.47M|    {
  268|  1.47M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.47M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.47M|    {
  151|  1.47M|        i += n;
  152|  1.47M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   255k|    {
  108|   255k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   255k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   255k|    {
   87|   255k|        return s - i;
   88|   255k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  3.32M|{
  981|  3.32M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  3.32M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  3.32M|        return true;
  984|  3.32M|    }
  985|  3.32M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  3.32M|                           ranges::const_iterator_t<Range>,
  987|  3.32M|                           typename detail::basic_scan_buffer<
  988|  3.32M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  3.32M|        auto beg = r.begin();
  990|  3.32M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 3.32M, False: 0]
  ------------------
  991|  3.32M|            return false;
  992|  3.32M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  3.32M|    else {
 1006|  3.32M|        return false;
 1007|  3.32M|    }
 1008|  3.32M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  92.5M|    {
  763|  92.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  92.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  92.5M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  8.81M|{
 1857|  8.81M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  8.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  8.81M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  8.81M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  8.81M|        if (sz < count) {
 1862|  8.81M|            return unexpected(eof_error::eof);
 1863|  8.81M|        }
 1864|       |
 1865|  8.81M|        return ranges::next(range.begin(), count);
 1866|  8.81M|    }
 1867|  8.81M|    else {
 1868|  8.81M|        auto it = range.begin();
 1869|  8.81M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 5.45M, False: 3.36M]
  ------------------
 1870|  5.45M|            return ranges::next(it, count);
 1871|  5.45M|        }
 1872|       |
 1873|  13.4M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 10.1M, False: 3.30M]
  ------------------
 1874|  10.1M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 59.2k, False: 10.0M]
  ------------------
 1875|  59.2k|                return unexpected(eof_error::eof);
 1876|  59.2k|            }
 1877|  10.1M|        }
 1878|       |
 1879|  3.30M|        return it;
 1880|  3.36M|    }
 1881|  8.81M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  8.81M|{
 1095|  8.81M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  8.81M|        return r.size();
 1097|  8.81M|    }
 1098|  8.81M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  8.81M|                           ranges::const_iterator_t<Range>,
 1100|  8.81M|                           typename detail::basic_scan_buffer<
 1101|  8.81M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  8.81M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  8.81M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  8.81M|        }
 1105|  8.81M|        else {
 1106|  8.81M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 8.81M, False: 0]
  ------------------
 1107|  8.81M|                return static_cast<size_t>(
 1108|  8.81M|                    r.begin().parent()->chars_available() -
 1109|  8.81M|                    r.begin().position());
 1110|  8.81M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  8.81M|        }
 1113|  8.81M|    }
 1114|  8.81M|    else {
 1115|  8.81M|        return 0;
 1116|  8.81M|    }
 1117|  8.81M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.19M|    {
  754|  8.19M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  46.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.2M|              cvref<T> obj = *get<T>(fn);
  745|  46.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  46.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.2M|              }
  748|  46.2M|              else {
  749|  46.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.2M|              }
  751|  46.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  46.2M|    {
  684|  46.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  46.2M|            return static_cast<T*>(s.m_cp);
  686|  46.2M|        }
  687|  46.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  46.2M|            return static_cast<T*>(s.m_p);
  689|  46.2M|        }
  690|  46.2M|        else {
  691|  46.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  46.2M|        }
  693|  46.2M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  8.19M|        {
  662|  8.19M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  14.5M|    {
  763|  14.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  14.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  14.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.00M|    {
  754|  4.00M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  7.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.09M|              cvref<T> obj = *get<T>(fn);
  745|  7.09M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.09M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.09M|              }
  748|  7.09M|              else {
  749|  7.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.09M|              }
  751|  7.09M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  7.09M|    {
  684|  7.09M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.09M|            return static_cast<T*>(s.m_cp);
  686|  7.09M|        }
  687|  7.09M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.09M|            return static_cast<T*>(s.m_p);
  689|  7.09M|        }
  690|  7.09M|        else {
  691|  7.09M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.09M|        }
  693|  7.09M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  4.00M|        {
  662|  4.00M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  2.39M|    {
 6037|  2.39M|        const bool need_skipped_width =
 6038|  2.39M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.39M]
  |  Branch (6038:33): [True: 0, False: 2.39M]
  ------------------
 6039|  2.39M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.39M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.39M]
  ------------------
 6043|  2.39M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.39M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.39M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.39M, False: 0]
  |  Branch (6047:56): [True: 2.39M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.39M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.39M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.77M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.39M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.39M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.39M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.8k, False: 2.37M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.8k|    }                                                  \
  |  |  |  | 3671|  2.39M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.77M|                            make_eof_scan_error));
 6058|       |
 6059|  4.77M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.37M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.37M|            return result_type{it, 0};
 6067|  4.77M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.39M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  6.48M|{
 1976|  6.48M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.48M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  6.48M|{
 1957|  6.48M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.48M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.48M|    }
 1960|  6.48M|    else {
 1961|  6.48M|        auto first = range.begin();
 1962|  36.3M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 36.3M, False: 43.8k]
  ------------------
 1963|  36.3M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 6.44M, False: 29.8M]
  ------------------
 1964|  6.44M|                return first;
 1965|  6.44M|            }
 1966|  36.3M|        }
 1967|  43.8k|        return first;
 1968|  6.48M|    }
 1969|  6.48M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  5.76M|    {
  108|  5.76M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.76M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  5.76M|    {
   94|  5.76M|        iter_difference_t<I> counter{0};
   95|  59.3M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 53.5M, False: 5.76M]
  ------------------
   96|  53.5M|            ++i;
   97|  53.5M|            ++counter;
   98|  53.5M|        }
   99|  5.76M|        return counter;
  100|  5.76M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  7.77M|    return [code, msg](parse_error err) {
  869|  7.77M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  7.77M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.30M|    {
 1780|  1.30M|        auto stdloc = loc.get<std::locale>();
 1781|  1.30M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.30M|        grouping = numpunct.grouping();
 1783|  1.30M|        thousands_sep =
 1784|  1.30M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.30M]
  ------------------
 1785|  1.30M|        decimal_point = numpunct.decimal_point();
 1786|  1.30M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.30M|{
 1717|  1.30M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.30M, False: 0]
  ------------------
 1718|  1.30M|        return std::use_facet<Facet>(stdloc);
 1719|  1.30M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.30M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  9.49M|{
 1846|  9.49M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.4k, False: 9.46M]
  |  |  ------------------
  ------------------
 1847|  33.4k|        return unexpected(e);
 1848|  33.4k|    }
 1849|       |
 1850|  9.46M|    return ranges::next(range.begin());
 1851|  9.49M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  13.7M|{
  950|  13.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  13.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.2k, False: 13.6M]
  |  |  ------------------
  ------------------
  951|  66.2k|        return eof_error::eof;
  952|  66.2k|    }
  953|  13.6M|    return eof_error::good;
  954|  13.7M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  19.4M|{
  944|  19.4M|    return is_range_eof(r.begin(), r.end());
  945|  19.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  19.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  19.4M|    {
  937|  19.4M|        return begin == end;
  938|  19.4M|    }
  939|  19.4M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  9.46M|    {
  296|  9.46M|        ++x;
  297|  9.46M|        return x;
  298|  9.46M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  3.60M|{
 3141|  3.60M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.60M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.69M, False: 907k]
  ------------------
 3143|  2.69M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.69M, False: 535]
  ------------------
 3144|  2.69M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.69M|        }
 3146|    535|        return unexpected(eof_error::eof);
 3147|  2.69M|    }
 3148|       |
 3149|   907k|    auto& it = *r;
 3150|   907k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 356k, False: 550k]
  ------------------
 3151|   356k|        return std::pair{it, sign_type::minus_sign};
 3152|   356k|    }
 3153|   550k|    return std::pair{it, sign_type::plus_sign};
 3154|   907k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  6.35M|{
 2272|  6.35M|    auto it = read_code_unit(range);
 2273|  6.35M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 6.33M]
  |  |  ------------------
  ------------------
 2274|  19.7k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  19.7k|    }
 2276|       |
 2277|  11.8M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 11.8M, False: 5.11M]
  ------------------
 2278|  11.8M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.22M, False: 10.6M]
  ------------------
 2279|  1.22M|            return *it;
 2280|  1.22M|        }
 2281|  11.8M|    }
 2282|       |
 2283|  5.11M|    return unexpected(parse_error::error);
 2284|  6.33M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  8.81M|{
 2231|  8.81M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  8.81M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  8.81M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  8.81M|        if (range.size() < str.size()) {
 2236|  8.81M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  8.81M|        }
 2238|  8.81M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  8.81M|            return unexpected(parse_error::error);
 2240|  8.81M|        }
 2241|  8.81M|        return ranges::next(range.begin(), str.size());
 2242|  8.81M|    }
 2243|  8.81M|    else {
 2244|  8.81M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.81M|            if (ch < 'A' || ch > 'Z') {
 2246|  8.81M|                return ch;
 2247|  8.81M|            }
 2248|  8.81M|            return static_cast<char_type>(ch +
 2249|  8.81M|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.81M|        };
 2251|       |
 2252|  8.81M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  8.81M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.2k, False: 8.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.2k|    }                                                  \
  |  |  |  | 3671|  8.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  8.75M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  8.75M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  8.75M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  8.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.47M, False: 284k]
  |  |  ------------------
  ------------------
 2257|  8.75M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  8.75M|                    return ascii_tolower(a) ==
 2259|  8.75M|                           static_cast<detail::char_t<Range>>(b);
 2260|  8.75M|                }))) {
 2261|  8.47M|            return unexpected(parse_error::error);
 2262|  8.47M|        }
 2263|       |
 2264|   284k|        return it;
 2265|  8.75M|    }
 2266|  8.81M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  10.1M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  10.1M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 9.28M, False: 905k]
  |  Branch (2245:29): [True: 773k, False: 132k]
  ------------------
 2246|  10.0M|                return ch;
 2247|  10.0M|            }
 2248|   132k|            return static_cast<char_type>(ch +
 2249|   132k|                                          static_cast<char_type>('a' - 'A'));
 2250|  10.1M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  3.14M|{
 2146|  3.14M|    auto it = read_code_unit(range);
 2147|  3.14M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 3.13M]
  |  |  ------------------
  ------------------
 2148|  13.7k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  13.7k|    }
 2150|       |
 2151|  3.13M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  3.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59M, False: 542k]
  |  |  ------------------
  ------------------
 2152|  3.13M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.59M|        return unexpected(parse_error::error);
 2154|  2.59M|    }
 2155|       |
 2156|   542k|    return *it;
 2157|  3.13M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  6.48M|{
 1996|  6.48M|    auto it = read_while_code_unit(range, pred);
 1997|  6.48M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.67M, False: 3.81M]
  ------------------
 1998|  2.67M|        return unexpected(parse_error::error);
 1999|  2.67M|    }
 2000|  3.81M|    return it;
 2001|  6.48M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  3.01M|    {
 1621|  3.01M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.01M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.01M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.01M|            m_storage.reset();
 1627|  3.01M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.01M|        }
 1629|  3.01M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.01M|                                          std::basic_string<CharT>>) {
 1631|  3.01M|            m_storage.emplace(SCN_FWD(range));
 1632|  3.01M|            m_view = string_view_type{*m_storage};
 1633|  3.01M|        }
 1634|  3.01M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.01M|                                          typename detail::basic_scan_buffer<
 1636|  3.01M|                                              value_t>::forward_iterator> &&
 1637|  3.01M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.01M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.01M|            auto end_seg = range.end().contiguous_segment();
 1640|  3.01M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 393k, False: 2.62M]
  |  |  ------------------
  ------------------
 1641|  3.01M|                             detail::to_address(end_seg.end()))) {
 1642|   393k|                auto& str = m_storage.emplace();
 1643|   393k|                str.reserve(range.end().position() - range.begin().position());
 1644|   393k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   393k|                m_view = string_view_type{str};
 1646|   393k|                return;
 1647|   393k|            }
 1648|       |
 1649|  2.62M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.62M|                                                            end_seg.data());
 1651|  2.62M|            m_storage.reset();
 1652|  2.62M|        }
 1653|  3.01M|        else {
 1654|  3.01M|            auto& str = m_storage.emplace();
 1655|  3.01M|            if constexpr (ranges::sized_range<Range>) {
 1656|  3.01M|                str.reserve(range.size());
 1657|  3.01M|            }
 1658|  3.01M|            if constexpr (ranges::common_range<Range>) {
 1659|  3.01M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.01M|                          std::back_inserter(str));
 1661|  3.01M|            }
 1662|  3.01M|            else {
 1663|  3.01M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.01M|                     ++it) {
 1665|  3.01M|                    str.push_back(*it);
 1666|  3.01M|                }
 1667|  3.01M|            }
 1668|  3.01M|            m_view = string_view_type{str};
 1669|  3.01M|        }
 1670|  3.01M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  21.6M|    {
 1582|  21.6M|        return m_view;
 1583|  21.6M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  12.7M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  2.24M|    {
 6079|  2.24M|        const bool need_skipped_width =
 6080|  2.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.24M]
  |  Branch (6080:33): [True: 0, False: 2.24M]
  ------------------
 6081|  2.24M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.24M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.24M]
  ------------------
 6084|  2.24M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.24M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.24M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.24M, False: 0]
  ------------------
 6093|  2.24M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.24M]
  ------------------
 6094|  2.24M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.24M|        return result_type{rng.begin(), 0};
 6118|  2.24M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  4.61M|{
 1846|  4.61M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.43k, False: 4.60M]
  |  |  ------------------
  ------------------
 1847|  7.43k|        return unexpected(e);
 1848|  7.43k|    }
 1849|       |
 1850|  4.60M|    return ranges::next(range.begin());
 1851|  4.61M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  8.68M|{
  950|  8.68M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  8.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.3k, False: 8.64M]
  |  |  ------------------
  ------------------
  951|  35.3k|        return eof_error::eof;
  952|  35.3k|    }
  953|  8.64M|    return eof_error::good;
  954|  8.68M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  8.68M|{
  944|  8.68M|    return is_range_eof(r.begin(), r.end());
  945|  8.68M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  8.68M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.68M|    {
  937|  8.68M|        return begin == end;
  938|  8.68M|    }
  939|  8.68M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  4.60M|    {
  296|  4.60M|        ++x;
  297|  4.60M|        return x;
  298|  4.60M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.19M|{
 3141|  3.19M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.19M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.36M, False: 839k]
  ------------------
 3143|  2.36M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.36M, False: 168]
  ------------------
 3144|  2.36M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.36M|        }
 3146|    168|        return unexpected(eof_error::eof);
 3147|  2.36M|    }
 3148|       |
 3149|   839k|    auto& it = *r;
 3150|   839k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 335k, False: 503k]
  ------------------
 3151|   335k|        return std::pair{it, sign_type::minus_sign};
 3152|   335k|    }
 3153|   503k|    return std::pair{it, sign_type::plus_sign};
 3154|   839k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.72M|{
 2272|  3.72M|    auto it = read_code_unit(range);
 2273|  3.72M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.50k, False: 3.71M]
  |  |  ------------------
  ------------------
 2274|  3.50k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.50k|    }
 2276|       |
 2277|  6.86M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.86M, False: 2.78M]
  ------------------
 2278|  6.86M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 932k, False: 5.92M]
  ------------------
 2279|   932k|            return *it;
 2280|   932k|        }
 2281|  6.86M|    }
 2282|       |
 2283|  2.78M|    return unexpected(parse_error::error);
 2284|  3.71M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  8.33M|{
 2231|  8.33M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  8.33M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  8.33M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  8.33M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 61.0k, False: 8.27M]
  ------------------
 2236|  61.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  61.0k|        }
 2238|  8.27M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 7.99M, False: 282k]
  ------------------
 2239|  7.99M|            return unexpected(parse_error::error);
 2240|  7.99M|        }
 2241|   282k|        return ranges::next(range.begin(), str.size());
 2242|  8.27M|    }
 2243|  8.33M|    else {
 2244|  8.33M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.33M|            if (ch < 'A' || ch > 'Z') {
 2246|  8.33M|                return ch;
 2247|  8.33M|            }
 2248|  8.33M|            return static_cast<char_type>(ch +
 2249|  8.33M|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.33M|        };
 2251|       |
 2252|  8.33M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  8.33M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  8.33M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  8.33M|        if (SCN_UNLIKELY(!std::equal(
 2257|  8.33M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  8.33M|                    return ascii_tolower(a) ==
 2259|  8.33M|                           static_cast<detail::char_t<Range>>(b);
 2260|  8.33M|                }))) {
 2261|  8.33M|            return unexpected(parse_error::error);
 2262|  8.33M|        }
 2263|       |
 2264|  8.33M|        return it;
 2265|  8.33M|    }
 2266|  8.33M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   895k|{
 2146|   895k|    auto it = read_code_unit(range);
 2147|   895k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.92k, False: 892k]
  |  |  ------------------
  ------------------
 2148|  3.92k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.92k|    }
 2150|       |
 2151|   892k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   892k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 733k, False: 158k]
  |  |  ------------------
  ------------------
 2152|   892k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   733k|        return unexpected(parse_error::error);
 2154|   733k|    }
 2155|       |
 2156|   158k|    return *it;
 2157|   892k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  11.9M|    {
 1503|  11.9M|        return sv;
 1504|  11.9M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.70M|{
 1976|  1.70M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.70M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.70M|{
 1957|  1.70M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.70M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.70M|    }
 1960|  1.70M|    else {
 1961|  1.70M|        auto first = range.begin();
 1962|  1.70M|        for (; first != range.end(); ++first) {
 1963|  1.70M|            if (pred(*first)) {
 1964|  1.70M|                return first;
 1965|  1.70M|            }
 1966|  1.70M|        }
 1967|  1.70M|        return first;
 1968|  1.70M|    }
 1969|  1.70M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  3.12M|{
 2951|  3.12M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.12M, False: 0]
  ------------------
 2952|  3.12M|        auto it = read_while_classic_space(range);
 2953|  3.12M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.12M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.2k, False: 3.10M]
  |  |  ------------------
  ------------------
 2955|  21.2k|            return unexpected(e);
 2956|  21.2k|        }
 2957|       |
 2958|  3.10M|        return it;
 2959|  3.12M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.12M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  3.12M|{
 2117|  3.12M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.12M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.12M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.12M|        auto buf = make_contiguous_buffer(range);
 2121|  3.12M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.12M|        return ranges::next(range.begin(),
 2123|  3.12M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.12M|    }
 2125|  3.12M|    else {
 2126|  3.12M|        auto it = range.begin();
 2127|       |
 2128|  3.12M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  3.12M|            auto seg = get_contiguous_beginning(range);
 2130|  3.12M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.12M|                seg_it != seg.end()) {
 2132|  3.12M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.12M|            }
 2134|  3.12M|            ranges::advance(it, seg.size());
 2135|  3.12M|        }
 2136|       |
 2137|  3.12M|        return read_while_code_point(
 2138|  3.12M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.12M|    }
 2140|  3.12M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  3.12M|{
 1683|  3.12M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.12M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.12M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.12M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  3.12M|    }
 1688|  3.12M|    else {
 1689|  3.12M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  3.12M|    }
 1691|  3.12M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  3.12M|    {
 1490|  3.12M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  8.97M|    {
  304|  8.97M|        ranges::advance(x, n);
  305|  8.97M|        return x;
  306|  8.97M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  11.9M|    {
  268|  11.9M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  11.9M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  11.9M|    {
  181|  57.7M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 45.7M, False: 11.9M]
  ------------------
  182|  45.7M|            ++i;
  183|  45.7M|        }
  184|  11.9M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   760k|    {
 6193|   760k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   760k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   760k|            auto rd = make_reader<T, char_type>();
 6198|   760k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   760k|                return unexpected(e);
 6200|   760k|            }
 6201|       |
 6202|   760k|            return impl(rd, range, value);
 6203|   760k|        }
 6204|   760k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   760k|            auto rd = make_reader<T, char_type>();
 6206|   760k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   760k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 760k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   760k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 760k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   760k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   760k|                return impl(rd, range, value);
 6213|   760k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   760k|        else {
 6221|   760k|            SCN_EXPECT(false);
 6222|   760k|            SCN_UNREACHABLE;
 6223|   760k|        }
 6224|   760k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  4.59M|    {
 3040|  4.59M|        reader_error_handler eh{};
 3041|  4.59M|        get_derived().check_specs_impl(specs, eh);
 3042|  4.59M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.59M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  4.59M|        return {};
 3046|  4.59M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  4.59M|    {
 3051|  4.59M|        return static_cast<Derived&>(*this);
 3052|  4.59M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  4.59M|    {
 4145|  4.59M|        detail::check_float_type_specs(specs, eh);
 4146|  4.59M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   760k|    {
 6124|   760k|        const bool need_skipped_width =
 6125|   760k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 760k]
  |  Branch (6125:33): [True: 0, False: 760k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   760k|        auto it = rng.begin();
 6129|   760k|        std::ptrdiff_t prefix_width = 0;
 6130|   760k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 760k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   760k|        else {
 6138|   760k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   760k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   760k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   760k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   760k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.41k, False: 753k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.41k|    }                                                  \
  |  |  |  | 3671|   760k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   753k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   753k|            std::tie(it, prefix_width) = prefix_result;
 6140|   753k|        }
 6141|   753k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   753k|        std::ptrdiff_t value_width = 0;
 6145|   753k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 753k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   753k|        else {
 6161|   753k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   753k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   753k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 36.5k, False: 716k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  36.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  36.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  36.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  36.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  36.5k|    }                                                  \
  |  | 3671|   753k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   753k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   716k|                                             specs, value, loc));
 6163|       |
 6164|   716k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 716k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   716k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   716k|        std::ptrdiff_t postfix_width = 0;
 6173|   716k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 710k, False: 5.68k]
  ------------------
 6174|   710k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   710k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   710k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   710k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 710k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   710k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   710k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   710k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   710k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   710k|                                 value_width));
 6178|   710k|            std::tie(it, postfix_width) = postfix_result;
 6179|   710k|        }
 6180|       |
 6181|   716k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   716k|                                                 value_width, postfix_width);
 6183|   716k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 716k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   716k|        return it;
 6188|   716k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  10.7M|    {
 3035|  10.7M|        return true;
 3036|  10.7M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  4.54M|    {
 4217|  4.54M|        unsigned options{};
 4218|  4.54M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.30M, False: 3.24M]
  ------------------
 4219|  1.30M|            options |= float_reader_base::allow_thsep;
 4220|  1.30M|        }
 4221|       |
 4222|  4.54M|        SCN_GCC_COMPAT_PUSH
 4223|  4.54M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  4.54M|        switch (specs.type) {
 4226|   613k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 613k, False: 3.93M]
  ------------------
 4227|   613k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  90.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 90.2k, False: 4.45M]
  ------------------
 4230|  90.2k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.43M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.43M, False: 3.11M]
  ------------------
 4233|  1.43M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|  1.10M|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 1.10M, False: 3.44M]
  ------------------
 4236|  1.10M|                return options | float_reader_base::allow_scientific |
 4237|  1.10M|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.30M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.30M, False: 3.24M]
  ------------------
 4240|  1.30M|                return options | float_reader_base::allow_scientific |
 4241|  1.30M|                       float_reader_base::allow_fixed |
 4242|  1.30M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 4.54M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  4.54M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  4.54M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  4.54M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  4.54M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  6.39M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  12.7M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.95M|    {
 3691|  1.95M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.95M|        const std::ptrdiff_t sign_len =
 3694|  1.95M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 515k, False: 1.44M]
  ------------------
 3695|       |
 3696|  1.95M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.95M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.95M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.95M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 33.7k, False: 1.92M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  33.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  33.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  33.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  33.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  33.7k|    }                                                  \
  |  |  |  | 3671|  1.95M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.92M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.95M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  6.20M|    {
 4057|  6.20M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 6.20M, False: 0]
  ------------------
 4058|  6.20M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 6.20M, False: 0]
  ------------------
 4059|  6.20M|            return;
 4060|  6.20M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  7.28M|    {
 1587|  7.28M|        return m_storage.has_value();
 1588|  7.28M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  4.27M|    {
 1592|  4.27M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  4.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  4.27M|        return *m_storage;
 1594|  4.27M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   753k|    {
 4170|   753k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   753k|#if !SCN_DISABLE_LOCALE
 4173|   753k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 211k, False: 541k]
  ------------------
 4174|   211k|            return read_impl<Range>(
 4175|   211k|                range, rd,
 4176|   211k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   211k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   211k|                },
 4179|   211k|                value, loc);
 4180|   211k|        }
 4181|   541k|#endif
 4182|       |
 4183|   541k|        return read_impl<Range>(
 4184|   541k|            range, rd,
 4185|   541k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   541k|                return r.read_source(SCN_FWD(args)...);
 4187|   541k|            },
 4188|   541k|            value);
 4189|   753k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.03M|    {
 4206|  1.03M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.03M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.7k, False: 999k]
  |  |  ------------------
  ------------------
 4208|  39.7k|            return unexpected(r.error());
 4209|  39.7k|        }
 4210|       |
 4211|   999k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   999k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   999k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   999k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   999k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.66k, False: 991k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.66k|    }                                                  \
  |  |  |  | 3671|   999k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   991k|        return ranges::next(range.begin(), n);
 4213|   999k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  3.29M|    {
  763|  3.29M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.29M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   211k|    {
  754|   211k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   211k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   211k|              cvref<T> obj = *get<T>(fn);
  745|   211k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   211k|                  obj(static_cast<decltype(args)>(args)...);
  747|   211k|              }
  748|   211k|              else {
  749|   211k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   211k|              }
  751|   211k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   211k|    {
  684|   211k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   211k|            return static_cast<T*>(s.m_cp);
  686|   211k|        }
  687|   211k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   211k|            return static_cast<T*>(s.m_p);
  689|   211k|        }
  690|   211k|        else {
  691|   211k|            return reinterpret_cast<T*>(s.m_fp);
  692|   211k|        }
  693|   211k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   211k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   211k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   211k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   680k|    {
 3679|   680k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   680k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   680k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 680k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   680k|        return read_source_impl(range);
 3685|   680k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  3.29M|    {
 3705|  3.29M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  3.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  3.29M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  3.29M|        auto it = sign_result.first;
 3708|  3.29M|        m_sign = sign_result.second;
 3709|       |
 3710|  3.29M|        auto digits_begin = it;
 3711|  3.29M|        auto r = ranges::subrange{it, range.end()};
 3712|  3.29M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  3.29M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  3.29M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  3.29M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  3.29M|                SCN_TRY_ASSIGN(
 3717|  3.29M|                    it,
 3718|  3.29M|                    do_read_source_impl(
 3719|  3.29M|                        r,
 3720|  3.29M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  3.29M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  3.29M|            }
 3723|  3.29M|            else {
 3724|  3.29M|                auto cb = [&](const auto& rr)
 3725|  3.29M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  3.29M|                    auto res = read_all(rr);
 3727|  3.29M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  3.29M|                        return unexpected_scan_error(
 3729|  3.29M|                            scan_error::invalid_scanned_value,
 3730|  3.29M|                            "Invalid float value");
 3731|  3.29M|                    }
 3732|  3.29M|                    return res;
 3733|  3.29M|                };
 3734|  3.29M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  3.29M|            }
 3736|  3.29M|        }
 3737|  3.29M|        else {
 3738|  3.29M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  3.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 126k, False: 3.16M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   126k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   126k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   126k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   126k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   126k|    }                                                  \
  |  | 3671|  3.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  3.16M|                it,
 3740|  3.16M|                do_read_source_impl(
 3741|  3.16M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  3.16M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  3.16M|        }
 3744|       |
 3745|  3.16M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  3.16M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 3.13M, False: 27.0k]
  |  Branch (3747:48): [True: 3.11M, False: 18.9k]
  ------------------
 3748|  3.16M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 3.01M, False: 105k]
  ------------------
 3749|  3.16M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 3.01M, False: 2.66k]
  ------------------
 3750|  3.01M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  3.01M|        }
 3752|       |
 3753|  3.16M|        handle_separators();
 3754|       |
 3755|  3.16M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 3.16M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  3.16M|        return it;
 3768|  3.16M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  3.29M|    {
 4000|  3.29M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  3.29M|        const bool allowed_nonhex =
 4002|  3.29M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  3.29M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  3.29M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 3.24M, False: 45.9k]
  |  Branch (4005:45): [True: 0, False: 3.24M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  3.29M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 45.9k, False: 3.24M]
  ------------------
 4011|  45.9k|            return *r;
 4012|  45.9k|        }
 4013|       |
 4014|  3.24M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 3.13M, False: 108k]
  |  Branch (4014:45): [True: 1.42k, False: 3.13M]
  ------------------
 4015|  1.42k|            return unexpected(r.error());
 4016|  1.42k|        }
 4017|  3.24M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 108k, False: 3.13M]
  ------------------
 4018|   108k|            return *r;
 4019|   108k|        }
 4020|       |
 4021|  3.13M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 2.23M, False: 899k]
  |  Branch (4021:28): [True: 717k, False: 1.51M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   717k|            auto it = range.begin();
 4025|       |
 4026|   717k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 34.1k, False: 683k]
  ------------------
 4027|  34.1k|                m_kind = float_kind::hex_with_prefix;
 4028|  34.1k|                it = *r;
 4029|  34.1k|            }
 4030|   683k|            else {
 4031|   683k|                m_kind = float_kind::hex_without_prefix;
 4032|   683k|            }
 4033|       |
 4034|   717k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   717k|        }
 4036|  2.41M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 899k, False: 1.51M]
  |  Branch (4036:29): [True: 899k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   899k|            m_kind = float_kind::generic;
 4040|   899k|            return read_regular_float(range);
 4041|   899k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.51M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.4k, False: 1.44M]
  |  |  ------------------
  ------------------
 4047|  76.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  76.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  76.4k|        }
 4050|       |
 4051|  1.44M|        m_kind = float_kind::generic;
 4052|  1.44M|        return read_regular(range);
 4053|  1.51M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  3.29M|    {
 3811|  3.29M|        auto it = range.begin();
 3812|  3.29M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 3.24M, False: 45.9k]
  ------------------
 3813|  3.24M|            return unexpected(r.error());
 3814|  3.24M|        }
 3815|  45.9k|        else {
 3816|  45.9k|            it = *r;
 3817|  45.9k|        }
 3818|       |
 3819|  45.9k|        if (auto r = read_matching_string_classic_nocase(
 3820|  45.9k|                ranges::subrange{it, range.end()}, "inity");
 3821|  45.9k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 27.0k, False: 18.9k]
  ------------------
 3822|  27.0k|            m_kind = float_kind::inf_short;
 3823|  27.0k|            return it;
 3824|  27.0k|        }
 3825|  18.9k|        else {
 3826|  18.9k|            m_kind = float_kind::inf_long;
 3827|  18.9k|            return *r;
 3828|  18.9k|        }
 3829|  45.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  3.24M|    {
 3834|  3.24M|        auto it = range.begin();
 3835|  3.24M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 3.13M, False: 109k]
  ------------------
 3836|  3.13M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  3.13M|                scan_error::invalid_scanned_value,
 3838|  3.13M|                "Invalid floating-point NaN value"));
 3839|  3.13M|        }
 3840|   109k|        else {
 3841|   109k|            it = *r;
 3842|   109k|        }
 3843|       |
 3844|   109k|        if (auto r =
 3845|   109k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   109k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 105k, False: 4.09k]
  ------------------
 3847|   105k|            m_kind = float_kind::nan_simple;
 3848|   105k|            return it;
 3849|   105k|        }
 3850|  4.09k|        else {
 3851|  4.09k|            it = *r;
 3852|  4.09k|        }
 3853|       |
 3854|  4.09k|        auto payload_beg_it = it;
 3855|  4.09k|        it = read_while_code_unit(
 3856|  4.09k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  4.09k|                return is_ascii_char(ch) &&
 3858|  4.09k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  4.09k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  4.09k|            });
 3861|  4.09k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  4.09k|        m_kind = float_kind::nan_with_payload;
 3864|  4.09k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.42k]
  ------------------
 3865|  4.09k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.42k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.42k|                                     "Invalid floating-point NaN payload");
 3870|  4.09k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  4.09k|    {
  754|  4.09k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  27.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.7k|              cvref<T> obj = *get<T>(fn);
  745|  27.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  27.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.7k|              }
  748|  27.7k|              else {
  749|  27.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.7k|              }
  751|  27.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  27.7k|    {
  684|  27.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  27.7k|            return static_cast<T*>(s.m_cp);
  686|  27.7k|        }
  687|  27.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  27.7k|            return static_cast<T*>(s.m_p);
  689|  27.7k|        }
  690|  27.7k|        else {
  691|  27.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  27.7k|        }
  693|  27.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  27.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  27.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 27.3k, False: 413]
  ------------------
 3858|  27.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 24.4k, False: 2.80k]
  |  Branch (3858:39): [True: 16.3k, False: 8.14k]
  |  Branch (3858:54): [True: 2.69k, False: 8.26k]
  |  Branch (3858:67): [True: 2.60k, False: 83]
  ------------------
 3859|  27.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.80k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.91k]
  ------------------
 3860|  27.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  4.09k|        {
  662|  4.09k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  2.23M|    {
 3804|  2.23M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  2.23M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   794k|    {
 3904|   794k|        auto it = range.begin();
 3905|       |
 3906|   794k|        std::ptrdiff_t digits_count = 0;
 3907|   794k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   794k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   794k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 778k]
  |  |  ------------------
  ------------------
 3909|  16.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  16.0k|                scan_error::invalid_scanned_value,
 3911|  16.0k|                "Invalid hexadecimal floating-point value"));
 3912|  16.0k|        }
 3913|   778k|        else {
 3914|   778k|            digits_count += ranges::distance(it, *r);
 3915|   778k|            it = *r;
 3916|   778k|        }
 3917|       |
 3918|   778k|        m_integral_part_length = digits_count;
 3919|   778k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 114k, False: 663k]
  ------------------
 3920|   778k|                                             m_locale_options.decimal_point)) {
 3921|   114k|            it = *r;
 3922|   114k|        }
 3923|       |
 3924|   778k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 95.6k, False: 682k]
  ------------------
 3925|   778k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  95.6k|            digits_count += ranges::distance(it, *r);
 3927|  95.6k|            it = *r;
 3928|  95.6k|        }
 3929|       |
 3930|   778k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   778k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 778k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   778k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   778k|        return it;
 3938|   778k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.57M|    {
 3789|  1.57M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57M]
  |  |  |  Branch (859:45): [True: 0, False: 1.57M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.57M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.57M|        return read_while1_code_unit(
 3798|  1.57M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.57M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.57M|    {
  754|  1.57M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  8.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.39M|              cvref<T> obj = *get<T>(fn);
  745|  8.39M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.39M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.39M|              }
  748|  8.39M|              else {
  749|  8.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.39M|              }
  751|  8.39M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.39M|    {
  684|  8.39M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.39M|            return static_cast<T*>(s.m_cp);
  686|  8.39M|        }
  687|  8.39M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.39M|            return static_cast<T*>(s.m_p);
  689|  8.39M|        }
  690|  8.39M|        else {
  691|  8.39M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.39M|        }
  693|  8.39M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  8.39M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.57M|        {
  662|  1.57M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.74M|    {
 3876|  2.74M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 313k, False: 2.43M]
  ------------------
 3877|   313k|            auto beg_exp_it = range.begin();
 3878|   313k|            auto it = *r;
 3879|       |
 3880|   313k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 312k, False: 535]
  ------------------
 3881|   313k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   312k|                it = r_sign->first;
 3883|   312k|            }
 3884|       |
 3885|   313k|            if (auto r_exp = read_while1_code_unit(
 3886|   313k|                    ranges::subrange{it, range.end()},
 3887|   313k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   313k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.67k, False: 309k]
  |  |  ------------------
  ------------------
 3889|  3.67k|                it = beg_exp_it;
 3890|  3.67k|            }
 3891|   309k|            else {
 3892|   309k|                it = *r_exp;
 3893|   309k|            }
 3894|       |
 3895|   313k|            return it;
 3896|   313k|        }
 3897|  2.43M|        return range.begin();
 3898|  2.74M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   313k|    {
  754|   313k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.02M|              cvref<T> obj = *get<T>(fn);
  745|  1.02M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.02M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.02M|              }
  748|  1.02M|              else {
  749|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.02M|              }
  751|  1.02M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  1.02M|    {
  684|  1.02M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.02M|            return static_cast<T*>(s.m_cp);
  686|  1.02M|        }
  687|  1.02M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.02M|            return static_cast<T*>(s.m_p);
  689|  1.02M|        }
  690|  1.02M|        else {
  691|  1.02M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.02M|        }
  693|  1.02M|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  1.02M|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   313k|        {
  662|   313k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  2.34M|    {
 3944|  2.34M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  2.34M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2.03M, False: 309k]
  |  Branch (3945:50): [True: 44.2k, False: 1.98M]
  ------------------
 3946|       |
 3947|  2.34M|        auto it = ranges::begin(range);
 3948|  2.34M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  2.34M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  2.34M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.4k, False: 2.25M]
  |  |  ------------------
  ------------------
 3952|  86.4k|            return r.transform_error(
 3953|  86.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  86.4k|                                              "Invalid floating-point value"));
 3955|  86.4k|        }
 3956|  2.25M|        else {
 3957|  2.25M|            digits_count += ranges::distance(it, *r);
 3958|  2.25M|            it = *r;
 3959|  2.25M|        }
 3960|       |
 3961|  2.25M|        m_integral_part_length = digits_count;
 3962|  2.25M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 421k, False: 1.83M]
  ------------------
 3963|  2.25M|                                             m_locale_options.decimal_point)) {
 3964|   421k|            it = *r;
 3965|   421k|        }
 3966|       |
 3967|  2.25M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 372k, False: 1.88M]
  ------------------
 3968|  2.25M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   372k|            digits_count += ranges::distance(it, *r);
 3970|   372k|            it = *r;
 3971|   372k|        }
 3972|       |
 3973|  2.25M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  2.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.25M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  2.25M|        auto beg_exp_it = it;
 3979|  2.25M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.96M, False: 286k]
  ------------------
 3980|  1.96M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.96M|        }
 3982|  2.25M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 42.7k, False: 2.21M]
  |  Branch (3982:29): [True: 23.0k, False: 19.7k]
  ------------------
 3983|  23.0k|            return unexpected_scan_error(
 3984|  23.0k|                scan_error::invalid_scanned_value,
 3985|  23.0k|                "No exponent given to scientific float");
 3986|  23.0k|        }
 3987|       |
 3988|  2.23M|        m_kind =
 3989|  2.23M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.92M, False: 308k]
  ------------------
 3990|       |
 3991|  2.23M|        return it;
 3992|  2.25M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  4.59M|    {
 3774|  4.59M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.59M]
  |  |  |  Branch (859:45): [True: 0, False: 4.59M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  4.59M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  4.59M|        return read_while1_code_unit(
 3783|  4.59M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  4.59M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  4.59M|    {
  754|  4.59M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  26.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.8M|              cvref<T> obj = *get<T>(fn);
  745|  26.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.8M|              }
  748|  26.8M|              else {
  749|  26.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.8M|              }
  751|  26.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  26.8M|    {
  684|  26.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.8M|            return static_cast<T*>(s.m_cp);
  686|  26.8M|        }
  687|  26.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.8M|            return static_cast<T*>(s.m_p);
  689|  26.8M|        }
  690|  26.8M|        else {
  691|  26.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.8M|        }
  693|  26.8M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  26.8M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  4.59M|        {
  662|  4.59M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  3.01M|    {
 1577|  3.01M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  3.01M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   211k|        {
  662|   211k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   541k|    {
  754|   541k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   541k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   541k|              cvref<T> obj = *get<T>(fn);
  745|   541k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   541k|                  obj(static_cast<decltype(args)>(args)...);
  747|   541k|              }
  748|   541k|              else {
  749|   541k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   541k|              }
  751|   541k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   541k|    {
  684|   541k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   541k|            return static_cast<T*>(s.m_cp);
  686|   541k|        }
  687|   541k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   541k|            return static_cast<T*>(s.m_p);
  689|   541k|        }
  690|   541k|        else {
  691|   541k|            return reinterpret_cast<T*>(s.m_fp);
  692|   541k|        }
  693|   541k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   541k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   541k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   541k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.61M|    {
 3665|  2.61M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.61M|        return read_source_impl(range);
 3671|  2.61M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   541k|        {
  662|   541k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   691k|    {
 4170|   691k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   691k|#if !SCN_DISABLE_LOCALE
 4173|   691k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 192k, False: 498k]
  ------------------
 4174|   192k|            return read_impl<Range>(
 4175|   192k|                range, rd,
 4176|   192k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   192k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   192k|                },
 4179|   192k|                value, loc);
 4180|   192k|        }
 4181|   498k|#endif
 4182|       |
 4183|   498k|        return read_impl<Range>(
 4184|   498k|            range, rd,
 4185|   498k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   498k|                return r.read_source(SCN_FWD(args)...);
 4187|   498k|            },
 4188|   498k|            value);
 4189|   691k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   980k|    {
 4206|   980k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   980k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   980k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.7k, False: 957k]
  |  |  ------------------
  ------------------
 4208|  22.7k|            return unexpected(r.error());
 4209|  22.7k|        }
 4210|       |
 4211|   957k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   957k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   957k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   957k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   957k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.0k, False: 931k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  26.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  26.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  26.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  26.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  26.0k|    }                                                  \
  |  |  |  | 3671|   957k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   931k|        return ranges::next(range.begin(), n);
 4213|   957k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  3.10M|    {
  763|  3.10M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.10M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   192k|    {
  754|   192k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   192k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   192k|              cvref<T> obj = *get<T>(fn);
  745|   192k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   192k|                  obj(static_cast<decltype(args)>(args)...);
  747|   192k|              }
  748|   192k|              else {
  749|   192k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   192k|              }
  751|   192k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   192k|    {
  684|   192k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   192k|            return static_cast<T*>(s.m_cp);
  686|   192k|        }
  687|   192k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   192k|            return static_cast<T*>(s.m_p);
  689|   192k|        }
  690|   192k|        else {
  691|   192k|            return reinterpret_cast<T*>(s.m_fp);
  692|   192k|        }
  693|   192k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   192k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   192k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   192k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   620k|    {
 3679|   620k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   620k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   620k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   620k|        return read_source_impl(range);
 3685|   620k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  3.10M|    {
 3705|  3.10M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  3.10M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  3.10M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  3.10M|        auto it = sign_result.first;
 3708|  3.10M|        m_sign = sign_result.second;
 3709|       |
 3710|  3.10M|        auto digits_begin = it;
 3711|  3.10M|        auto r = ranges::subrange{it, range.end()};
 3712|  3.10M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  3.10M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  3.10M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  6.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.10M]
  |  |  |  Branch (859:45): [True: 0, False: 3.10M]
  |  |  |  Branch (859:45): [True: 0, False: 3.10M]
  |  |  ------------------
  ------------------
 3715|  3.10M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  3.10M|            else {
 3724|  3.10M|                auto cb = [&](const auto& rr)
 3725|  3.10M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  3.10M|                    auto res = read_all(rr);
 3727|  3.10M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  3.10M|                        return unexpected_scan_error(
 3729|  3.10M|                            scan_error::invalid_scanned_value,
 3730|  3.10M|                            "Invalid float value");
 3731|  3.10M|                    }
 3732|  3.10M|                    return res;
 3733|  3.10M|                };
 3734|  3.10M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  3.10M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  3.10M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  3.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.5k, False: 3.03M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  70.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  70.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  70.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  70.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  70.5k|    }                                                  \
  |  | 3671|  3.10M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  3.03M|            }
 3736|  3.10M|        }
 3737|  3.03M|        else {
 3738|  3.03M|            SCN_TRY_ASSIGN(
 3739|  3.03M|                it,
 3740|  3.03M|                do_read_source_impl(
 3741|  3.03M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  3.03M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  3.03M|        }
 3744|       |
 3745|  3.03M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  3.03M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 3.00M, False: 26.1k]
  |  Branch (3747:48): [True: 2.99M, False: 18.5k]
  ------------------
 3748|  3.03M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.88M, False: 104k]
  ------------------
 3749|  3.03M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.88M, False: 2.65k]
  ------------------
 3750|  2.88M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.88M|        }
 3752|       |
 3753|  3.03M|        handle_separators();
 3754|       |
 3755|  3.03M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 3.03M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  3.03M|        return it;
 3768|  3.03M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  3.10M|    {
 3811|  3.10M|        auto it = range.begin();
 3812|  3.10M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 3.06M, False: 44.7k]
  ------------------
 3813|  3.06M|            return unexpected(r.error());
 3814|  3.06M|        }
 3815|  44.7k|        else {
 3816|  44.7k|            it = *r;
 3817|  44.7k|        }
 3818|       |
 3819|  44.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  44.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  44.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 26.1k, False: 18.5k]
  ------------------
 3822|  26.1k|            m_kind = float_kind::inf_short;
 3823|  26.1k|            return it;
 3824|  26.1k|        }
 3825|  18.5k|        else {
 3826|  18.5k|            m_kind = float_kind::inf_long;
 3827|  18.5k|            return *r;
 3828|  18.5k|        }
 3829|  44.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  3.06M|    {
 3834|  3.06M|        auto it = range.begin();
 3835|  3.06M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.95M, False: 108k]
  ------------------
 3836|  2.95M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.95M|                scan_error::invalid_scanned_value,
 3838|  2.95M|                "Invalid floating-point NaN value"));
 3839|  2.95M|        }
 3840|   108k|        else {
 3841|   108k|            it = *r;
 3842|   108k|        }
 3843|       |
 3844|   108k|        if (auto r =
 3845|   108k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|   108k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 104k, False: 3.88k]
  ------------------
 3847|   104k|            m_kind = float_kind::nan_simple;
 3848|   104k|            return it;
 3849|   104k|        }
 3850|  3.88k|        else {
 3851|  3.88k|            it = *r;
 3852|  3.88k|        }
 3853|       |
 3854|  3.88k|        auto payload_beg_it = it;
 3855|  3.88k|        it = read_while_code_unit(
 3856|  3.88k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.88k|                return is_ascii_char(ch) &&
 3858|  3.88k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.88k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.88k|            });
 3861|  3.88k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.88k|        m_kind = float_kind::nan_with_payload;
 3864|  3.88k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.22k]
  ------------------
 3865|  3.88k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.22k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.22k|                                     "Invalid floating-point NaN payload");
 3870|  3.88k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.88k|    {
  754|  3.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  24.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.8k|              cvref<T> obj = *get<T>(fn);
  745|  24.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.8k|              }
  748|  24.8k|              else {
  749|  24.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.8k|              }
  751|  24.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  24.8k|    {
  684|  24.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.8k|            return static_cast<T*>(s.m_cp);
  686|  24.8k|        }
  687|  24.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.8k|            return static_cast<T*>(s.m_p);
  689|  24.8k|        }
  690|  24.8k|        else {
  691|  24.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.8k|        }
  693|  24.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  24.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.6k, False: 215]
  ------------------
 3858|  24.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.8k, False: 2.79k]
  |  Branch (3858:39): [True: 13.8k, False: 7.97k]
  |  Branch (3858:54): [True: 2.52k, False: 8.25k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  24.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.53k, False: 2.79k]
  |  Branch (3859:39): [True: 2.54k, False: 2.99k]
  |  Branch (3859:53): [True: 2.88k, False: 2.90k]
  ------------------
 3860|  24.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.88k|        {
  662|  3.88k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  2.12M|    {
 3804|  2.12M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  2.12M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.70M|{
 1996|  1.70M|    auto it = read_while_code_unit(range, pred);
 1997|  1.70M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 695k, False: 1.00M]
  ------------------
 1998|   695k|        return unexpected(parse_error::error);
 1999|   695k|    }
 2000|  1.00M|    return it;
 2001|  1.70M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   520k|    {
 3876|   520k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 93.1k, False: 427k]
  ------------------
 3877|  93.1k|            auto beg_exp_it = range.begin();
 3878|  93.1k|            auto it = *r;
 3879|       |
 3880|  93.1k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 92.9k, False: 168]
  ------------------
 3881|  93.1k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  92.9k|                it = r_sign->first;
 3883|  92.9k|            }
 3884|       |
 3885|  93.1k|            if (auto r_exp = read_while1_code_unit(
 3886|  93.1k|                    ranges::subrange{it, range.end()},
 3887|  93.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  93.1k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.27k, False: 91.8k]
  |  |  ------------------
  ------------------
 3889|  1.27k|                it = beg_exp_it;
 3890|  1.27k|            }
 3891|  91.8k|            else {
 3892|  91.8k|                it = *r_exp;
 3893|  91.8k|            }
 3894|       |
 3895|  93.1k|            return it;
 3896|  93.1k|        }
 3897|   427k|        return range.begin();
 3898|   520k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  93.1k|    {
  754|  93.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   291k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   291k|              cvref<T> obj = *get<T>(fn);
  745|   291k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   291k|                  obj(static_cast<decltype(args)>(args)...);
  747|   291k|              }
  748|   291k|              else {
  749|   291k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   291k|              }
  751|   291k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   291k|    {
  684|   291k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   291k|            return static_cast<T*>(s.m_cp);
  686|   291k|        }
  687|   291k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   291k|            return static_cast<T*>(s.m_p);
  689|   291k|        }
  690|   291k|        else {
  691|   291k|            return reinterpret_cast<T*>(s.m_fp);
  692|   291k|        }
  693|   291k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   291k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  93.1k|        {
  662|  93.1k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   828k|    {
 3944|   828k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   828k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 541k, False: 286k]
  |  Branch (3945:50): [True: 42.5k, False: 499k]
  ------------------
 3946|       |
 3947|   828k|        auto it = ranges::begin(range);
 3948|   828k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   828k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   828k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   828k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.9k, False: 783k]
  |  |  ------------------
  ------------------
 3952|  44.9k|            return r.transform_error(
 3953|  44.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  44.9k|                                              "Invalid floating-point value"));
 3955|  44.9k|        }
 3956|   783k|        else {
 3957|   783k|            digits_count += ranges::distance(it, *r);
 3958|   783k|            it = *r;
 3959|   783k|        }
 3960|       |
 3961|   783k|        m_integral_part_length = digits_count;
 3962|   783k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 151k, False: 631k]
  ------------------
 3963|   783k|                                             m_locale_options.decimal_point)) {
 3964|   151k|            it = *r;
 3965|   151k|        }
 3966|       |
 3967|   783k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 134k, False: 649k]
  ------------------
 3968|   783k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   134k|            digits_count += ranges::distance(it, *r);
 3970|   134k|            it = *r;
 3971|   134k|        }
 3972|       |
 3973|   783k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 783k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   783k|        auto beg_exp_it = it;
 3979|   783k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 520k, False: 263k]
  ------------------
 3980|   520k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   520k|        }
 3982|   783k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 40.7k, False: 742k]
  |  Branch (3982:29): [True: 22.9k, False: 17.8k]
  ------------------
 3983|  22.9k|            return unexpected_scan_error(
 3984|  22.9k|                scan_error::invalid_scanned_value,
 3985|  22.9k|                "No exponent given to scientific float");
 3986|  22.9k|        }
 3987|       |
 3988|   760k|        m_kind =
 3989|   760k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 668k, False: 91.8k]
  ------------------
 3990|       |
 3991|   760k|        return it;
 3992|   783k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.61M|    {
 3774|  1.61M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 1.61M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.61M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.61M|        return read_while1_code_unit(
 3783|  1.61M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.61M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.61M|    {
  754|  1.61M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  9.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.62M|              cvref<T> obj = *get<T>(fn);
  745|  9.62M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.62M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.62M|              }
  748|  9.62M|              else {
  749|  9.62M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.62M|              }
  751|  9.62M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  9.62M|    {
  684|  9.62M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.62M|            return static_cast<T*>(s.m_cp);
  686|  9.62M|        }
  687|  9.62M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.62M|            return static_cast<T*>(s.m_p);
  689|  9.62M|        }
  690|  9.62M|        else {
  691|  9.62M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.62M|        }
  693|  9.62M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  9.62M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.61M|        {
  662|  1.61M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  3.10M|    {
 4000|  3.10M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  3.10M|        const bool allowed_nonhex =
 4002|  3.10M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  3.10M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  3.10M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 3.06M, False: 44.7k]
  |  Branch (4005:45): [True: 0, False: 3.06M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  3.10M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 44.7k, False: 3.06M]
  ------------------
 4011|  44.7k|            return *r;
 4012|  44.7k|        }
 4013|       |
 4014|  3.06M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.95M, False: 107k]
  |  Branch (4014:45): [True: 1.22k, False: 2.95M]
  ------------------
 4015|  1.22k|            return unexpected(r.error());
 4016|  1.22k|        }
 4017|  3.06M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 107k, False: 2.95M]
  ------------------
 4018|   107k|            return *r;
 4019|   107k|        }
 4020|       |
 4021|  2.95M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 2.12M, False: 828k]
  |  Branch (4021:28): [True: 652k, False: 1.47M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   652k|            auto it = range.begin();
 4025|       |
 4026|   652k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 32.0k, False: 620k]
  ------------------
 4027|  32.0k|                m_kind = float_kind::hex_with_prefix;
 4028|  32.0k|                it = *r;
 4029|  32.0k|            }
 4030|   620k|            else {
 4031|   620k|                m_kind = float_kind::hex_without_prefix;
 4032|   620k|            }
 4033|       |
 4034|   652k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   652k|        }
 4036|  2.30M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 828k, False: 1.47M]
  |  Branch (4036:29): [True: 828k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   828k|            m_kind = float_kind::generic;
 4040|   828k|            return read_regular_float(range);
 4041|   828k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.47M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.9k, False: 1.39M]
  |  |  ------------------
  ------------------
 4047|  78.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  78.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  78.9k|        }
 4050|       |
 4051|  1.39M|        m_kind = float_kind::generic;
 4052|  1.39M|        return read_regular(range);
 4053|  1.47M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  2.12M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.12M|                    auto res = read_all(rr);
 3727|  2.12M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 2.12M]
  |  |  ------------------
  ------------------
 3728|  1.36k|                        return unexpected_scan_error(
 3729|  1.36k|                            scan_error::invalid_scanned_value,
 3730|  1.36k|                            "Invalid float value");
 3731|  1.36k|                    }
 3732|  2.12M|                    return res;
 3733|  2.12M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  2.12M|{
 1839|  2.12M|    return ranges::next(range.begin(), range.end());
 1840|  2.12M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  2.12M|    {
  313|  2.12M|        ranges::advance(x, bound);
  314|  2.12M|        return x;
  315|  2.12M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  2.12M|    {
  275|  2.12M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  2.12M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  2.12M|    {
  190|  2.12M|        i = std::move(bound);
  191|  2.12M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.88M|    {
 1577|  2.88M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.88M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.88M|    {
 1621|  2.88M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.88M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.88M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.88M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.88M|            m_storage.reset();
 1627|  2.88M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.88M|        }
 1629|  2.88M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.88M|                                          std::basic_string<CharT>>) {
 1631|  2.88M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.88M|            m_view = string_view_type{*m_storage};
 1633|  2.88M|        }
 1634|  2.88M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.88M|                                          typename detail::basic_scan_buffer<
 1636|  2.88M|                                              value_t>::forward_iterator> &&
 1637|  2.88M|                           ranges::common_range<Range>) {
 1638|  2.88M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.88M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.88M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.88M|                             detail::to_address(end_seg.end()))) {
 1642|  2.88M|                auto& str = m_storage.emplace();
 1643|  2.88M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.88M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.88M|                m_view = string_view_type{str};
 1646|  2.88M|                return;
 1647|  2.88M|            }
 1648|       |
 1649|  2.88M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.88M|                                                            end_seg.data());
 1651|  2.88M|            m_storage.reset();
 1652|  2.88M|        }
 1653|  2.88M|        else {
 1654|  2.88M|            auto& str = m_storage.emplace();
 1655|  2.88M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.88M|                str.reserve(range.size());
 1657|  2.88M|            }
 1658|  2.88M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.88M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.88M|                          std::back_inserter(str));
 1661|  2.88M|            }
 1662|  2.88M|            else {
 1663|  2.88M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.88M|                     ++it) {
 1665|  2.88M|                    str.push_back(*it);
 1666|  2.88M|                }
 1667|  2.88M|            }
 1668|  2.88M|            m_view = string_view_type{str};
 1669|  2.88M|        }
 1670|  2.88M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   192k|        {
  662|   192k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   498k|    {
  754|   498k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   498k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   498k|              cvref<T> obj = *get<T>(fn);
  745|   498k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   498k|                  obj(static_cast<decltype(args)>(args)...);
  747|   498k|              }
  748|   498k|              else {
  749|   498k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   498k|              }
  751|   498k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   498k|    {
  684|   498k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   498k|            return static_cast<T*>(s.m_cp);
  686|   498k|        }
  687|   498k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   498k|            return static_cast<T*>(s.m_p);
  689|   498k|        }
  690|   498k|        else {
  691|   498k|            return reinterpret_cast<T*>(s.m_fp);
  692|   498k|        }
  693|   498k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   498k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   498k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   498k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.48M|    {
 3665|  2.48M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.48M|        return read_source_impl(range);
 3671|  2.48M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   498k|        {
  662|   498k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   814k|    {
 6193|   814k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   814k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   814k|            auto rd = make_reader<T, char_type>();
 6198|   814k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   814k|                return unexpected(e);
 6200|   814k|            }
 6201|       |
 6202|   814k|            return impl(rd, range, value);
 6203|   814k|        }
 6204|   814k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   814k|            auto rd = make_reader<T, char_type>();
 6206|   814k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   814k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 814k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   814k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   814k|                return impl(rd, range, value);
 6213|   814k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   814k|        else {
 6221|   814k|            SCN_EXPECT(false);
 6222|   814k|            SCN_UNREACHABLE;
 6223|   814k|        }
 6224|   814k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   814k|    {
 6124|   814k|        const bool need_skipped_width =
 6125|   814k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 814k]
  |  Branch (6125:33): [True: 0, False: 814k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   814k|        auto it = rng.begin();
 6129|   814k|        std::ptrdiff_t prefix_width = 0;
 6130|   814k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 814k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   814k|        else {
 6138|   814k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   814k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   814k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   814k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.45k, False: 806k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.45k|    }                                                  \
  |  |  |  | 3671|   814k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   806k|            std::tie(it, prefix_width) = prefix_result;
 6140|   806k|        }
 6141|   806k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   806k|        std::ptrdiff_t value_width = 0;
 6145|   806k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 806k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   806k|        else {
 6161|   806k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   806k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   806k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.5k, False: 770k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  35.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  35.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  35.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  35.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  35.5k|    }                                                  \
  |  | 3671|   806k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   770k|                                             specs, value, loc));
 6163|       |
 6164|   770k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 770k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   770k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   770k|        std::ptrdiff_t postfix_width = 0;
 6173|   770k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 764k, False: 6.52k]
  ------------------
 6174|   764k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   764k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   764k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   764k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 764k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   764k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   764k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   764k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   764k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   764k|                                 value_width));
 6178|   764k|            std::tie(it, postfix_width) = postfix_result;
 6179|   764k|        }
 6180|       |
 6181|   770k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   770k|                                                 value_width, postfix_width);
 6183|   770k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 770k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   770k|        return it;
 6188|   770k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  2.11M|    {
 3691|  2.11M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  2.11M|        const std::ptrdiff_t sign_len =
 3694|  2.11M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 555k, False: 1.55M]
  ------------------
 3695|       |
 3696|  2.11M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  2.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.3k, False: 2.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  27.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  27.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  27.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  27.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  27.3k|    }                                                  \
  |  |  |  | 3671|  2.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  2.08M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  2.11M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   806k|    {
 4170|   806k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   806k|#if !SCN_DISABLE_LOCALE
 4173|   806k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 232k, False: 573k]
  ------------------
 4174|   232k|            return read_impl<Range>(
 4175|   232k|                range, rd,
 4176|   232k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   232k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   232k|                },
 4179|   232k|                value, loc);
 4180|   232k|        }
 4181|   573k|#endif
 4182|       |
 4183|   573k|        return read_impl<Range>(
 4184|   573k|            range, rd,
 4185|   573k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   573k|                return r.read_source(SCN_FWD(args)...);
 4187|   573k|            },
 4188|   573k|            value);
 4189|   806k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.12M|    {
 4206|  1.12M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.12M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.8k, False: 1.07M]
  |  |  ------------------
  ------------------
 4208|  42.8k|            return unexpected(r.error());
 4209|  42.8k|        }
 4210|       |
 4211|  1.07M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.22k, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.22k|    }                                                  \
  |  |  |  | 3671|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.07M|        return ranges::next(range.begin(), n);
 4213|  1.07M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   232k|    {
  754|   232k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   232k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   232k|              cvref<T> obj = *get<T>(fn);
  745|   232k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   232k|                  obj(static_cast<decltype(args)>(args)...);
  747|   232k|              }
  748|   232k|              else {
  749|   232k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   232k|              }
  751|   232k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   232k|    {
  684|   232k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   232k|            return static_cast<T*>(s.m_cp);
  686|   232k|        }
  687|   232k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   232k|            return static_cast<T*>(s.m_p);
  689|   232k|        }
  690|   232k|        else {
  691|   232k|            return reinterpret_cast<T*>(s.m_fp);
  692|   232k|        }
  693|   232k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   232k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   232k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   232k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   232k|        {
  662|   232k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   573k|    {
  754|   573k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   573k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   573k|              cvref<T> obj = *get<T>(fn);
  745|   573k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   573k|                  obj(static_cast<decltype(args)>(args)...);
  747|   573k|              }
  748|   573k|              else {
  749|   573k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   573k|              }
  751|   573k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   573k|    {
  684|   573k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   573k|            return static_cast<T*>(s.m_cp);
  686|   573k|        }
  687|   573k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   573k|            return static_cast<T*>(s.m_p);
  689|   573k|        }
  690|   573k|        else {
  691|   573k|            return reinterpret_cast<T*>(s.m_fp);
  692|   573k|        }
  693|   573k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   573k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   573k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   573k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   573k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   573k|        {
  662|   573k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   738k|    {
 4170|   738k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   738k|#if !SCN_DISABLE_LOCALE
 4173|   738k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 212k, False: 526k]
  ------------------
 4174|   212k|            return read_impl<Range>(
 4175|   212k|                range, rd,
 4176|   212k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   212k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   212k|                },
 4179|   212k|                value, loc);
 4180|   212k|        }
 4181|   526k|#endif
 4182|       |
 4183|   526k|        return read_impl<Range>(
 4184|   526k|            range, rd,
 4185|   526k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   526k|                return r.read_source(SCN_FWD(args)...);
 4187|   526k|            },
 4188|   526k|            value);
 4189|   738k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.05M|    {
 4206|  1.05M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.05M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.6k, False: 1.03M]
  |  |  ------------------
  ------------------
 4208|  23.6k|            return unexpected(r.error());
 4209|  23.6k|        }
 4210|       |
 4211|  1.03M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.1k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.1k|    }                                                  \
  |  |  |  | 3671|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.00M|        return ranges::next(range.begin(), n);
 4213|  1.03M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   212k|    {
  754|   212k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   212k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   212k|              cvref<T> obj = *get<T>(fn);
  745|   212k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   212k|                  obj(static_cast<decltype(args)>(args)...);
  747|   212k|              }
  748|   212k|              else {
  749|   212k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   212k|              }
  751|   212k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   212k|    {
  684|   212k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   212k|            return static_cast<T*>(s.m_cp);
  686|   212k|        }
  687|   212k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   212k|            return static_cast<T*>(s.m_p);
  689|   212k|        }
  690|   212k|        else {
  691|   212k|            return reinterpret_cast<T*>(s.m_fp);
  692|   212k|        }
  693|   212k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   212k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   212k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   212k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   212k|        {
  662|   212k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   526k|    {
  754|   526k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   526k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   526k|              cvref<T> obj = *get<T>(fn);
  745|   526k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   526k|                  obj(static_cast<decltype(args)>(args)...);
  747|   526k|              }
  748|   526k|              else {
  749|   526k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   526k|              }
  751|   526k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   526k|    {
  684|   526k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   526k|            return static_cast<T*>(s.m_cp);
  686|   526k|        }
  687|   526k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   526k|            return static_cast<T*>(s.m_p);
  689|   526k|        }
  690|   526k|        else {
  691|   526k|            return reinterpret_cast<T*>(s.m_fp);
  692|   526k|        }
  693|   526k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   526k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   526k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   526k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   526k|        {
  662|   526k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   823k|    {
 6193|   823k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   823k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   823k|            auto rd = make_reader<T, char_type>();
 6198|   823k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   823k|                return unexpected(e);
 6200|   823k|            }
 6201|       |
 6202|   823k|            return impl(rd, range, value);
 6203|   823k|        }
 6204|   823k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   823k|            auto rd = make_reader<T, char_type>();
 6206|   823k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   823k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 823k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   823k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 823k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   823k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   823k|                return impl(rd, range, value);
 6213|   823k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   823k|        else {
 6221|   823k|            SCN_EXPECT(false);
 6222|   823k|            SCN_UNREACHABLE;
 6223|   823k|        }
 6224|   823k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   823k|    {
 6124|   823k|        const bool need_skipped_width =
 6125|   823k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 823k]
  |  Branch (6125:33): [True: 0, False: 823k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   823k|        auto it = rng.begin();
 6129|   823k|        std::ptrdiff_t prefix_width = 0;
 6130|   823k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 823k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   823k|        else {
 6138|   823k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   823k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   823k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   823k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   823k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.99k, False: 814k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.99k|    }                                                  \
  |  |  |  | 3671|   823k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   814k|            std::tie(it, prefix_width) = prefix_result;
 6140|   814k|        }
 6141|   814k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   814k|        std::ptrdiff_t value_width = 0;
 6145|   814k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 814k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   814k|        else {
 6161|   814k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   814k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   814k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.0k, False: 779k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  35.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  35.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  35.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  35.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  35.0k|    }                                                  \
  |  | 3671|   814k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   779k|                                             specs, value, loc));
 6163|       |
 6164|   779k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 779k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   779k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   779k|        std::ptrdiff_t postfix_width = 0;
 6173|   779k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 772k, False: 6.98k]
  ------------------
 6174|   772k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   772k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   772k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   772k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 772k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   772k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   772k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   772k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   772k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   772k|                                 value_width));
 6178|   772k|            std::tie(it, postfix_width) = postfix_result;
 6179|   772k|        }
 6180|       |
 6181|   779k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   779k|                                                 value_width, postfix_width);
 6183|   779k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 779k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   779k|        return it;
 6188|   779k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  2.13M|    {
 3691|  2.13M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  2.13M|        const std::ptrdiff_t sign_len =
 3694|  2.13M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 569k, False: 1.56M]
  ------------------
 3695|       |
 3696|  2.13M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  2.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.0k, False: 2.10M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.0k|    }                                                  \
  |  |  |  | 3671|  2.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  2.10M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  2.13M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   814k|    {
 4170|   814k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   814k|#if !SCN_DISABLE_LOCALE
 4173|   814k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 236k, False: 577k]
  ------------------
 4174|   236k|            return read_impl<Range>(
 4175|   236k|                range, rd,
 4176|   236k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   236k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   236k|                },
 4179|   236k|                value, loc);
 4180|   236k|        }
 4181|   577k|#endif
 4182|       |
 4183|   577k|        return read_impl<Range>(
 4184|   577k|            range, rd,
 4185|   577k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   577k|                return r.read_source(SCN_FWD(args)...);
 4187|   577k|            },
 4188|   577k|            value);
 4189|   814k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  1.13M|    {
 4206|  1.13M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.13M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.3k, False: 1.08M]
  |  |  ------------------
  ------------------
 4208|  44.3k|            return unexpected(r.error());
 4209|  44.3k|        }
 4210|       |
 4211|  1.08M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.08M|        return ranges::next(range.begin(), n);
 4213|  1.08M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   236k|    {
  754|   236k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   236k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   236k|              cvref<T> obj = *get<T>(fn);
  745|   236k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   236k|                  obj(static_cast<decltype(args)>(args)...);
  747|   236k|              }
  748|   236k|              else {
  749|   236k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   236k|              }
  751|   236k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   236k|    {
  684|   236k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   236k|            return static_cast<T*>(s.m_cp);
  686|   236k|        }
  687|   236k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   236k|            return static_cast<T*>(s.m_p);
  689|   236k|        }
  690|   236k|        else {
  691|   236k|            return reinterpret_cast<T*>(s.m_fp);
  692|   236k|        }
  693|   236k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   236k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   236k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   236k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   236k|        {
  662|   236k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   577k|    {
  754|   577k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   577k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   577k|              cvref<T> obj = *get<T>(fn);
  745|   577k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   577k|                  obj(static_cast<decltype(args)>(args)...);
  747|   577k|              }
  748|   577k|              else {
  749|   577k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   577k|              }
  751|   577k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   577k|    {
  684|   577k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   577k|            return static_cast<T*>(s.m_cp);
  686|   577k|        }
  687|   577k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   577k|            return static_cast<T*>(s.m_p);
  689|   577k|        }
  690|   577k|        else {
  691|   577k|            return reinterpret_cast<T*>(s.m_fp);
  692|   577k|        }
  693|   577k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   577k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   577k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   577k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   577k|        {
  662|   577k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   745k|    {
 4170|   745k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   745k|#if !SCN_DISABLE_LOCALE
 4173|   745k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 215k, False: 530k]
  ------------------
 4174|   215k|            return read_impl<Range>(
 4175|   215k|                range, rd,
 4176|   215k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   215k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   215k|                },
 4179|   215k|                value, loc);
 4180|   215k|        }
 4181|   530k|#endif
 4182|       |
 4183|   530k|        return read_impl<Range>(
 4184|   530k|            range, rd,
 4185|   530k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   530k|                return r.read_source(SCN_FWD(args)...);
 4187|   530k|            },
 4188|   530k|            value);
 4189|   745k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.06M|    {
 4206|  1.06M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.06M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.1k, False: 1.04M]
  |  |  ------------------
  ------------------
 4208|  24.1k|            return unexpected(r.error());
 4209|  24.1k|        }
 4210|       |
 4211|  1.04M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.04M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.0k, False: 1.02M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.0k|    }                                                  \
  |  |  |  | 3671|  1.04M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  1.02M|        return ranges::next(range.begin(), n);
 4213|  1.04M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   215k|    {
  754|   215k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   215k|    {
  684|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   215k|            return static_cast<T*>(s.m_cp);
  686|   215k|        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   215k|            return static_cast<T*>(s.m_p);
  689|   215k|        }
  690|   215k|        else {
  691|   215k|            return reinterpret_cast<T*>(s.m_fp);
  692|   215k|        }
  693|   215k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   215k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   215k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   215k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   215k|        {
  662|   215k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   530k|    {
  754|   530k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   530k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   530k|              cvref<T> obj = *get<T>(fn);
  745|   530k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   530k|                  obj(static_cast<decltype(args)>(args)...);
  747|   530k|              }
  748|   530k|              else {
  749|   530k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   530k|              }
  751|   530k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   530k|    {
  684|   530k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   530k|            return static_cast<T*>(s.m_cp);
  686|   530k|        }
  687|   530k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   530k|            return static_cast<T*>(s.m_p);
  689|   530k|        }
  690|   530k|        else {
  691|   530k|            return reinterpret_cast<T*>(s.m_fp);
  692|   530k|        }
  693|   530k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   530k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   530k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   530k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   530k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   530k|        {
  662|   530k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  3.31M|{
 1039|  3.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.31M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.31M|        return r;
 1042|  3.31M|    }
 1043|  3.31M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.31M|                           ranges::const_iterator_t<Range>,
 1045|  3.31M|                           typename detail::basic_scan_buffer<
 1046|  3.31M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.31M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  3.31M|            auto seg = r.begin().contiguous_segment();
 1049|  3.31M|            auto dist =
 1050|  3.31M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.31M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.31M|        }
 1053|  3.31M|        else {
 1054|  3.31M|            return r.begin().contiguous_segment();
 1055|  3.31M|        }
 1056|  3.31M|    }
 1057|  3.31M|    else {
 1058|  3.31M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.31M|    }
 1060|  3.31M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.95M|{
 2061|  2.95M|    auto it = range.begin();
 2062|  5.74M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.71M, False: 26.0k]
  ------------------
 2063|  5.71M|        const auto val =
 2064|  5.71M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.71M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.69M, False: 20.8k]
  |  |  ------------------
  ------------------
 2066|  5.69M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.69M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.69M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.92M, False: 2.76M]
  ------------------
 2069|  2.92M|                return it;
 2070|  2.92M|            }
 2071|  5.69M|        }
 2072|  2.79M|        it = val.iterator;
 2073|  2.79M|    }
 2074|       |
 2075|  26.0k|    return it;
 2076|  2.95M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  5.71M|{
 1899|  5.71M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  5.71M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  5.71M|    auto it = range.begin();
 1903|  5.71M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  5.71M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.8k, False: 5.69M]
  |  |  ------------------
  ------------------
 1906|  20.8k|        ++it;
 1907|  20.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  20.8k|        return {it, {}};
 1909|  20.8k|    }
 1910|       |
 1911|  5.69M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 5.61M, False: 75.5k]
  ------------------
 1912|  5.61M|        ++it;
 1913|  5.61M|        return {it, string_type(1, *range.begin())};
 1914|  5.61M|    }
 1915|       |
 1916|  75.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  75.5k|    return {it, string_type{range.begin(), it}};
 1918|  5.69M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  20.8k|{
 1155|  20.8k|    auto it = input.begin();
 1156|   270k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 268k, False: 1.91k]
  ------------------
 1157|   268k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18.8k, False: 249k]
  ------------------
 1158|  18.8k|            break;
 1159|  18.8k|        }
 1160|   268k|    }
 1161|  20.8k|    return it;
 1162|  20.8k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  75.5k|    {
  283|  75.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  75.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  75.5k|    {
  252|  75.5k|        constexpr iter_difference_t<I> zero{0};
  253|  75.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|   231k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 157k, False: 73.9k]
  |  Branch (255:30): [True: 155k, False: 1.65k]
  ------------------
  256|   155k|            ++i;
  257|   155k|            ++counter;
  258|   155k|        }
  259|       |
  260|  75.5k|        return counter;
  261|  75.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  5.71M|    {
 1890|  5.71M|        return !codepoint.empty();
 1891|  5.71M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.95M|{
 2082|  2.95M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.95M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.31M|{
 2951|  3.31M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.31M, False: 0]
  ------------------
 2952|  3.31M|        auto it = read_while_classic_space(range);
 2953|  3.31M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.31M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 3.29M]
  |  |  ------------------
  ------------------
 2955|  26.0k|            return unexpected(e);
 2956|  26.0k|        }
 2957|       |
 2958|  3.29M|        return it;
 2959|  3.31M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.31M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.31M|{
 2117|  3.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.31M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.31M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.31M|        auto buf = make_contiguous_buffer(range);
 2121|  3.31M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.31M|        return ranges::next(range.begin(),
 2123|  3.31M|                            ranges::distance(buf.view().begin(), it));
 2124|  3.31M|    }
 2125|  3.31M|    else {
 2126|  3.31M|        auto it = range.begin();
 2127|       |
 2128|  3.31M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.31M|            auto seg = get_contiguous_beginning(range);
 2130|  3.31M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.31M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 366k, False: 2.95M]
  ------------------
 2132|   366k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   366k|            }
 2134|  2.95M|            ranges::advance(it, seg.size());
 2135|  2.95M|        }
 2136|       |
 2137|  2.95M|        return read_while_code_point(
 2138|  2.95M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.31M|    }
 2140|  3.31M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.95M|    {
  754|  2.95M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  5.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.69M|              cvref<T> obj = *get<T>(fn);
  745|  5.69M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.69M|              }
  748|  5.69M|              else {
  749|  5.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.69M|              }
  751|  5.69M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  5.69M|    {
  684|  5.69M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.69M|            return static_cast<T*>(s.m_cp);
  686|  5.69M|        }
  687|  5.69M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.69M|            return static_cast<T*>(s.m_p);
  689|  5.69M|        }
  690|  5.69M|        else {
  691|  5.69M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.69M|        }
  693|  5.69M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  5.69M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.95M|        {
  662|  2.95M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   527k|{
  981|   527k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   527k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   527k|        return true;
  984|   527k|    }
  985|   527k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   527k|                           ranges::const_iterator_t<Range>,
  987|   527k|                           typename detail::basic_scan_buffer<
  988|   527k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   527k|        auto beg = r.begin();
  990|   527k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 527k, False: 0]
  ------------------
  991|   527k|            return false;
  992|   527k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   527k|    else {
 1006|   527k|        return false;
 1007|   527k|    }
 1008|   527k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.62M|    {
  763|  2.62M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.62M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.34M|{
 1857|  1.34M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.34M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.34M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.34M|        if (sz < count) {
 1862|  1.34M|            return unexpected(eof_error::eof);
 1863|  1.34M|        }
 1864|       |
 1865|  1.34M|        return ranges::next(range.begin(), count);
 1866|  1.34M|    }
 1867|  1.34M|    else {
 1868|  1.34M|        auto it = range.begin();
 1869|  1.34M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 790k, False: 557k]
  ------------------
 1870|   790k|            return ranges::next(it, count);
 1871|   790k|        }
 1872|       |
 1873|  2.13M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.63M, False: 498k]
  ------------------
 1874|  1.63M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 59.1k, False: 1.57M]
  ------------------
 1875|  59.1k|                return unexpected(eof_error::eof);
 1876|  59.1k|            }
 1877|  1.63M|        }
 1878|       |
 1879|   498k|        return it;
 1880|   557k|    }
 1881|  1.34M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.34M|{
 1095|  1.34M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.34M|        return r.size();
 1097|  1.34M|    }
 1098|  1.34M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.34M|                           ranges::const_iterator_t<Range>,
 1100|  1.34M|                           typename detail::basic_scan_buffer<
 1101|  1.34M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.34M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.34M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.34M|        }
 1105|  1.34M|        else {
 1106|  1.34M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.34M, False: 0]
  ------------------
 1107|  1.34M|                return static_cast<size_t>(
 1108|  1.34M|                    r.begin().parent()->chars_available() -
 1109|  1.34M|                    r.begin().position());
 1110|  1.34M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.34M|        }
 1113|  1.34M|    }
 1114|  1.34M|    else {
 1115|  1.34M|        return 0;
 1116|  1.34M|    }
 1117|  1.34M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.01M|    {
  754|  1.01M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.31M|              cvref<T> obj = *get<T>(fn);
  745|  1.31M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.31M|              }
  748|  1.31M|              else {
  749|  1.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.31M|              }
  751|  1.31M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.31M|    {
  684|  1.31M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.31M|            return static_cast<T*>(s.m_cp);
  686|  1.31M|        }
  687|  1.31M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.31M|            return static_cast<T*>(s.m_p);
  689|  1.31M|        }
  690|  1.31M|        else {
  691|  1.31M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.31M|        }
  693|  1.31M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.01M|        {
  662|  1.01M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   398k|    {
 6037|   398k|        const bool need_skipped_width =
 6038|   398k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 398k]
  |  Branch (6038:33): [True: 0, False: 398k]
  ------------------
 6039|   398k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   398k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 398k]
  ------------------
 6043|   398k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 398k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   398k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 398k, False: 0]
  |  Branch (6047:56): [True: 398k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   398k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 398k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   794k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   398k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   398k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   398k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.25k, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.25k|    }                                                  \
  |  |  |  | 3671|   398k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   794k|                            make_eof_scan_error));
 6058|       |
 6059|   794k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 396k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   396k|            return result_type{it, 0};
 6067|   794k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   398k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   719k|{
 1976|   719k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   719k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   719k|{
 1957|   719k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   719k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   719k|    }
 1960|   719k|    else {
 1961|   719k|        auto first = range.begin();
 1962|   939k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 937k, False: 2.01k]
  ------------------
 1963|   937k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 717k, False: 219k]
  ------------------
 1964|   717k|                return first;
 1965|   717k|            }
 1966|   937k|        }
 1967|  2.01k|        return first;
 1968|   719k|    }
 1969|   719k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   323k|    {
  108|   323k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   323k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   323k|    {
   94|   323k|        iter_difference_t<I> counter{0};
   95|   811k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 488k, False: 323k]
  ------------------
   96|   488k|            ++i;
   97|   488k|            ++counter;
   98|   488k|        }
   99|   323k|        return counter;
  100|   323k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   170k|    {
 1780|   170k|        auto stdloc = loc.get<std::locale>();
 1781|   170k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   170k|        grouping = numpunct.grouping();
 1783|   170k|        thousands_sep =
 1784|   170k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 170k]
  ------------------
 1785|   170k|        decimal_point = numpunct.decimal_point();
 1786|   170k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   170k|{
 1717|   170k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 170k, False: 0]
  ------------------
 1718|   170k|        return std::use_facet<Facet>(stdloc);
 1719|   170k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   170k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   875k|{
 1846|   875k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.33k, False: 874k]
  |  |  ------------------
  ------------------
 1847|  1.33k|        return unexpected(e);
 1848|  1.33k|    }
 1849|       |
 1850|   874k|    return ranges::next(range.begin());
 1851|   875k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.53M|{
  950|  1.53M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.34k, False: 1.52M]
  |  |  ------------------
  ------------------
  951|  4.34k|        return eof_error::eof;
  952|  4.34k|    }
  953|  1.52M|    return eof_error::good;
  954|  1.53M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.23M|{
  944|  2.23M|    return is_range_eof(r.begin(), r.end());
  945|  2.23M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.23M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.23M|    {
  937|  2.23M|        return begin == end;
  938|  2.23M|    }
  939|  2.23M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   874k|    {
  296|   874k|        ++x;
  297|   874k|        return x;
  298|   874k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   531k|{
 3141|   531k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   531k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 529k, False: 1.69k]
  ------------------
 3143|   529k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 529k, False: 66]
  ------------------
 3144|   529k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   529k|        }
 3146|     66|        return unexpected(eof_error::eof);
 3147|   529k|    }
 3148|       |
 3149|  1.69k|    auto& it = *r;
 3150|  1.69k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.29k, False: 402]
  ------------------
 3151|  1.29k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.29k|    }
 3153|    402|    return std::pair{it, sign_type::plus_sign};
 3154|  1.69k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   686k|{
 2272|   686k|    auto it = read_code_unit(range);
 2273|   686k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 702, False: 686k]
  |  |  ------------------
  ------------------
 2274|    702|        return unexpected(make_eof_parse_error(it.error()));
 2275|    702|    }
 2276|       |
 2277|  1.37M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.37M, False: 677k]
  ------------------
 2278|  1.37M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 8.75k, False: 1.36M]
  ------------------
 2279|  8.75k|            return *it;
 2280|  8.75k|        }
 2281|  1.37M|    }
 2282|       |
 2283|   677k|    return unexpected(parse_error::error);
 2284|   686k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.34M|{
 2231|  1.34M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.34M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.34M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.34M|        if (range.size() < str.size()) {
 2236|  1.34M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.34M|        }
 2238|  1.34M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.34M|            return unexpected(parse_error::error);
 2240|  1.34M|        }
 2241|  1.34M|        return ranges::next(range.begin(), str.size());
 2242|  1.34M|    }
 2243|  1.34M|    else {
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.34M|                return ch;
 2247|  1.34M|            }
 2248|  1.34M|            return static_cast<char_type>(ch +
 2249|  1.34M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
 2251|       |
 2252|  1.34M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.1k, False: 1.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.1k|    }                                                  \
  |  |  |  | 3671|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.28M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.28M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.28M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28M, False: 693]
  |  |  ------------------
  ------------------
 2257|  1.28M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.28M|                    return ascii_tolower(a) ==
 2259|  1.28M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.28M|                }))) {
 2261|  1.28M|            return unexpected(parse_error::error);
 2262|  1.28M|        }
 2263|       |
 2264|    693|        return it;
 2265|  1.28M|    }
 2266|  1.34M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.39M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.39M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 956k, False: 438k]
  |  Branch (2245:29): [True: 426k, False: 11.8k]
  ------------------
 2246|  1.38M|                return ch;
 2247|  1.38M|            }
 2248|  11.8k|            return static_cast<char_type>(ch +
 2249|  11.8k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.39M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   188k|{
 2146|   188k|    auto it = read_code_unit(range);
 2147|   188k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 630, False: 188k]
  |  |  ------------------
  ------------------
 2148|    630|        return unexpected(make_eof_parse_error(it.error()));
 2149|    630|    }
 2150|       |
 2151|   188k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 187k, False: 543]
  |  |  ------------------
  ------------------
 2152|   188k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   187k|        return unexpected(parse_error::error);
 2154|   187k|    }
 2155|       |
 2156|    543|    return *it;
 2157|   188k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   719k|{
 1996|   719k|    auto it = read_while_code_unit(range, pred);
 1997|   719k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 525k, False: 194k]
  ------------------
 1998|   525k|        return unexpected(parse_error::error);
 1999|   525k|    }
 2000|   194k|    return it;
 2001|   719k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   185k|    {
 1621|   185k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   185k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   185k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   185k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   185k|            m_storage.reset();
 1627|   185k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   185k|        }
 1629|   185k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   185k|                                          std::basic_string<CharT>>) {
 1631|   185k|            m_storage.emplace(SCN_FWD(range));
 1632|   185k|            m_view = string_view_type{*m_storage};
 1633|   185k|        }
 1634|   185k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   185k|                                          typename detail::basic_scan_buffer<
 1636|   185k|                                              value_t>::forward_iterator> &&
 1637|   185k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   185k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   185k|            auto end_seg = range.end().contiguous_segment();
 1640|   185k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.44k, False: 178k]
  |  |  ------------------
  ------------------
 1641|   185k|                             detail::to_address(end_seg.end()))) {
 1642|  7.44k|                auto& str = m_storage.emplace();
 1643|  7.44k|                str.reserve(range.end().position() - range.begin().position());
 1644|  7.44k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  7.44k|                m_view = string_view_type{str};
 1646|  7.44k|                return;
 1647|  7.44k|            }
 1648|       |
 1649|   178k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   178k|                                                            end_seg.data());
 1651|   178k|            m_storage.reset();
 1652|   178k|        }
 1653|   185k|        else {
 1654|   185k|            auto& str = m_storage.emplace();
 1655|   185k|            if constexpr (ranges::sized_range<Range>) {
 1656|   185k|                str.reserve(range.size());
 1657|   185k|            }
 1658|   185k|            if constexpr (ranges::common_range<Range>) {
 1659|   185k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   185k|                          std::back_inserter(str));
 1661|   185k|            }
 1662|   185k|            else {
 1663|   185k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   185k|                     ++it) {
 1665|   185k|                    str.push_back(*it);
 1666|   185k|                }
 1667|   185k|            }
 1668|   185k|            m_view = string_view_type{str};
 1669|   185k|        }
 1670|   185k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.91M|    {
 1582|  1.91M|        return m_view;
 1583|  1.91M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.09M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   133k|    {
 6079|   133k|        const bool need_skipped_width =
 6080|   133k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 133k]
  |  Branch (6080:33): [True: 0, False: 133k]
  ------------------
 6081|   133k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   133k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 133k]
  ------------------
 6084|   133k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 133k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   133k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 133k, False: 0]
  ------------------
 6093|   133k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 133k]
  ------------------
 6094|   133k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   133k|        return result_type{rng.begin(), 0};
 6118|   133k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.34M|{
 1857|  1.34M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.34M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.34M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.34M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 59.2k, False: 1.29M]
  ------------------
 1862|  59.2k|            return unexpected(eof_error::eof);
 1863|  59.2k|        }
 1864|       |
 1865|  1.29M|        return ranges::next(range.begin(), count);
 1866|  1.34M|    }
 1867|  1.34M|    else {
 1868|  1.34M|        auto it = range.begin();
 1869|  1.34M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.34M|            return ranges::next(it, count);
 1871|  1.34M|        }
 1872|       |
 1873|  1.34M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.34M|            if (it == range.end()) {
 1875|  1.34M|                return unexpected(eof_error::eof);
 1876|  1.34M|            }
 1877|  1.34M|        }
 1878|       |
 1879|  1.34M|        return it;
 1880|  1.34M|    }
 1881|  1.34M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.05M|{
 1899|  1.05M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.05M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.05M|    auto it = range.begin();
 1903|  1.05M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.05M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.05M, False: 0]
  ------------------
 1912|  1.05M|        ++it;
 1913|  1.05M|        return {it, string_type(1, *range.begin())};
 1914|  1.05M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.05M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.34M|{
  944|  2.34M|    return is_range_eof(r.begin(), r.end());
  945|  2.34M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.34M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.34M|    {
  937|  2.34M|        return begin == end;
  938|  2.34M|    }
  939|  2.34M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   300k|    {
  190|   300k|        i = std::move(bound);
  191|   300k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.05M|    {
 1890|  1.05M|        return !codepoint.empty();
 1891|  1.05M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.29M|{
  950|  1.29M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.34k, False: 1.28M]
  |  |  ------------------
  ------------------
  951|  3.34k|        return eof_error::eof;
  952|  3.34k|    }
  953|  1.28M|    return eof_error::good;
  954|  1.29M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   635k|{
 1846|   635k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 635k]
  |  |  ------------------
  ------------------
 1847|    336|        return unexpected(e);
 1848|    336|    }
 1849|       |
 1850|   635k|    return ranges::next(range.begin());
 1851|   635k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   635k|    {
  296|   635k|        ++x;
  297|   635k|        return x;
  298|   635k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   527k|{
 3141|   527k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   527k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 526k, False: 1.01k]
  ------------------
 3143|   526k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 526k, False: 18]
  ------------------
 3144|   526k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   526k|        }
 3146|     18|        return unexpected(eof_error::eof);
 3147|   526k|    }
 3148|       |
 3149|  1.01k|    auto& it = *r;
 3150|  1.01k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 763, False: 252]
  ------------------
 3151|    763|        return std::pair{it, sign_type::minus_sign};
 3152|    763|    }
 3153|    252|    return std::pair{it, sign_type::plus_sign};
 3154|  1.01k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   564k|{
 2272|   564k|    auto it = read_code_unit(range);
 2273|   564k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 564k]
  |  |  ------------------
  ------------------
 2274|    156|        return unexpected(make_eof_parse_error(it.error()));
 2275|    156|    }
 2276|       |
 2277|  1.12M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.12M, False: 561k]
  ------------------
 2278|  1.12M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.67k, False: 1.12M]
  ------------------
 2279|  3.67k|            return *it;
 2280|  3.67k|        }
 2281|  1.12M|    }
 2282|       |
 2283|   561k|    return unexpected(parse_error::error);
 2284|   564k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.34M|{
 2231|  1.34M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.34M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.34M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.34M|        if (range.size() < str.size()) {
 2236|  1.34M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.34M|        }
 2238|  1.34M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.34M|            return unexpected(parse_error::error);
 2240|  1.34M|        }
 2241|  1.34M|        return ranges::next(range.begin(), str.size());
 2242|  1.34M|    }
 2243|  1.34M|    else {
 2244|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.34M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.34M|                return ch;
 2247|  1.34M|            }
 2248|  1.34M|            return static_cast<char_type>(ch +
 2249|  1.34M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.34M|        };
 2251|       |
 2252|  1.34M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.2k, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.2k|    }                                                  \
  |  |  |  | 3671|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.29M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.29M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.29M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28M, False: 693]
  |  |  ------------------
  ------------------
 2257|  1.29M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.29M|                    return ascii_tolower(a) ==
 2259|  1.29M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.29M|                }))) {
 2261|  1.28M|            return unexpected(parse_error::error);
 2262|  1.28M|        }
 2263|       |
 2264|    693|        return it;
 2265|  1.29M|    }
 2266|  1.34M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.39M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.39M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 956k, False: 439k]
  |  Branch (2245:29): [True: 427k, False: 11.8k]
  ------------------
 2246|  1.38M|                return ch;
 2247|  1.38M|            }
 2248|  11.8k|            return static_cast<char_type>(ch +
 2249|  11.8k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.39M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  70.7k|{
 2146|  70.7k|    auto it = read_code_unit(range);
 2147|  70.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 70.5k]
  |  |  ------------------
  ------------------
 2148|    180|        return unexpected(make_eof_parse_error(it.error()));
 2149|    180|    }
 2150|       |
 2151|  70.5k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.3k, False: 222]
  |  |  ------------------
  ------------------
 2152|  70.5k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  70.3k|        return unexpected(parse_error::error);
 2154|  70.3k|    }
 2155|       |
 2156|    222|    return *it;
 2157|  70.5k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   297k|{
 1976|   297k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   297k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   297k|{
 1957|   297k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   297k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   297k|    }
 1960|   297k|    else {
 1961|   297k|        auto first = range.begin();
 1962|   297k|        for (; first != range.end(); ++first) {
 1963|   297k|            if (pred(*first)) {
 1964|   297k|                return first;
 1965|   297k|            }
 1966|   297k|        }
 1967|   297k|        return first;
 1968|   297k|    }
 1969|   297k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   527k|{
 2951|   527k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 527k, False: 0]
  ------------------
 2952|   527k|        auto it = read_while_classic_space(range);
 2953|   527k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   527k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 524k]
  |  |  ------------------
  ------------------
 2955|  2.75k|            return unexpected(e);
 2956|  2.75k|        }
 2957|       |
 2958|   524k|        return it;
 2959|   527k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   527k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   527k|{
 2117|   527k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   527k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   527k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   527k|        auto buf = make_contiguous_buffer(range);
 2121|   527k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   527k|        return ranges::next(range.begin(),
 2123|   527k|                            ranges::distance(buf.view().begin(), it));
 2124|   527k|    }
 2125|   527k|    else {
 2126|   527k|        auto it = range.begin();
 2127|       |
 2128|   527k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   527k|            auto seg = get_contiguous_beginning(range);
 2130|   527k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   527k|                seg_it != seg.end()) {
 2132|   527k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   527k|            }
 2134|   527k|            ranges::advance(it, seg.size());
 2135|   527k|        }
 2136|       |
 2137|   527k|        return read_while_code_point(
 2138|   527k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   527k|    }
 2140|   527k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   527k|{
 2082|   527k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   527k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   696k|{
 2061|   696k|    auto it = range.begin();
 2062|  1.16M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.05M, False: 112k]
  ------------------
 2063|  1.05M|        const auto val =
 2064|  1.05M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.05M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.05M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.05M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.05M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 584k, False: 467k]
  ------------------
 2069|   584k|                return it;
 2070|   584k|            }
 2071|  1.05M|        }
 2072|   467k|        it = val.iterator;
 2073|   467k|    }
 2074|       |
 2075|   112k|    return it;
 2076|   696k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   527k|    {
  754|   527k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   702k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   702k|              cvref<T> obj = *get<T>(fn);
  745|   702k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   702k|                  obj(static_cast<decltype(args)>(args)...);
  747|   702k|              }
  748|   702k|              else {
  749|   702k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   702k|              }
  751|   702k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   702k|    {
  684|   702k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   702k|            return static_cast<T*>(s.m_cp);
  686|   702k|        }
  687|   702k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   702k|            return static_cast<T*>(s.m_p);
  689|   702k|        }
  690|   702k|        else {
  691|   702k|            return reinterpret_cast<T*>(s.m_fp);
  692|   702k|        }
  693|   702k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   702k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   527k|        {
  662|   527k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   974k|    {
  304|   974k|        ranges::advance(x, n);
  305|   974k|        return x;
  306|   974k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   974k|    {
  268|   974k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   974k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   974k|    {
  181|  3.26M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.29M, False: 974k]
  ------------------
  182|  2.29M|            ++i;
  183|  2.29M|        }
  184|   974k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   132k|    {
 6193|   132k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   132k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   132k|            auto rd = make_reader<T, char_type>();
 6198|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   132k|                return unexpected(e);
 6200|   132k|            }
 6201|       |
 6202|   132k|            return impl(rd, range, value);
 6203|   132k|        }
 6204|   132k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   132k|            auto rd = make_reader<T, char_type>();
 6206|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   132k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 132k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   132k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   132k|                return impl(rd, range, value);
 6213|   132k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   132k|        else {
 6221|   132k|            SCN_EXPECT(false);
 6222|   132k|            SCN_UNREACHABLE;
 6223|   132k|        }
 6224|   132k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   796k|    {
 3040|   796k|        reader_error_handler eh{};
 3041|   796k|        get_derived().check_specs_impl(specs, eh);
 3042|   796k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 796k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   796k|        return {};
 3046|   796k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   796k|    {
 3051|   796k|        return static_cast<Derived&>(*this);
 3052|   796k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   796k|    {
 4145|   796k|        detail::check_float_type_specs(specs, eh);
 4146|   796k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   132k|    {
 6124|   132k|        const bool need_skipped_width =
 6125|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 132k]
  |  Branch (6125:33): [True: 0, False: 132k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   132k|        auto it = rng.begin();
 6129|   132k|        std::ptrdiff_t prefix_width = 0;
 6130|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 132k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   132k|        else {
 6138|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 712, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    712|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   131k|            std::tie(it, prefix_width) = prefix_result;
 6140|   131k|        }
 6141|   131k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   131k|        std::ptrdiff_t value_width = 0;
 6145|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 131k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   131k|        else {
 6161|   131k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 44.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  44.2k|                                             specs, value, loc));
 6163|       |
 6164|  44.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 44.2k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  44.2k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  44.2k|        std::ptrdiff_t postfix_width = 0;
 6173|  44.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 44.0k, False: 214]
  ------------------
 6174|  44.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  44.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  44.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  44.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  44.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  44.0k|                                 value_width));
 6178|  44.0k|            std::tie(it, postfix_width) = postfix_result;
 6179|  44.0k|        }
 6180|       |
 6181|  44.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  44.2k|                                                 value_width, postfix_width);
 6183|  44.2k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.2k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  44.2k|        return it;
 6188|  44.2k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.32M|    {
 3035|  1.32M|        return true;
 3036|  1.32M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   792k|    {
 4217|   792k|        unsigned options{};
 4218|   792k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 170k, False: 621k]
  ------------------
 4219|   170k|            options |= float_reader_base::allow_thsep;
 4220|   170k|        }
 4221|       |
 4222|   792k|        SCN_GCC_COMPAT_PUSH
 4223|   792k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   792k|        switch (specs.type) {
 4226|   171k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 171k, False: 621k]
  ------------------
 4227|   171k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|   106k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 106k, False: 686k]
  ------------------
 4230|   106k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   173k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 173k, False: 619k]
  ------------------
 4233|   173k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   171k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 171k, False: 621k]
  ------------------
 4236|   171k|                return options | float_reader_base::allow_scientific |
 4237|   171k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   170k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 170k, False: 621k]
  ------------------
 4240|   170k|                return options | float_reader_base::allow_scientific |
 4241|   170k|                       float_reader_base::allow_fixed |
 4242|   170k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 792k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   792k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   792k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   792k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   792k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.04M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.09M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   183k|    {
 3691|   183k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   183k|        const std::ptrdiff_t sign_len =
 3694|   183k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 232, False: 183k]
  ------------------
 3695|       |
 3696|   183k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 62.3k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  62.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  62.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  62.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  62.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  62.3k|    }                                                  \
  |  |  |  | 3671|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   120k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   183k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   553k|    {
 4057|   553k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 553k, False: 0]
  ------------------
 4058|   553k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 553k, False: 0]
  ------------------
 4059|   553k|            return;
 4060|   553k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   417k|    {
 1587|   417k|        return m_storage.has_value();
 1588|   417k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   242k|    {
 1592|   242k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   242k|        return *m_storage;
 1594|   242k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   131k|    {
 4170|   131k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   131k|#if !SCN_DISABLE_LOCALE
 4173|   131k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.2k, False: 103k]
  ------------------
 4174|  28.2k|            return read_impl<Range>(
 4175|  28.2k|                range, rd,
 4176|  28.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.2k|                },
 4179|  28.2k|                value, loc);
 4180|  28.2k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   131k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   173k|    {
 4206|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112k, False: 61.4k]
  |  |  ------------------
  ------------------
 4208|   112k|            return unexpected(r.error());
 4209|   112k|        }
 4210|       |
 4211|  61.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  61.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  61.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  61.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  61.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  60.4k|        return ranges::next(range.begin(), n);
 4213|  61.4k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   524k|    {
  763|   524k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   524k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  28.2k|    {
  754|  28.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  28.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.2k|              cvref<T> obj = *get<T>(fn);
  745|  28.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.2k|              }
  748|  28.2k|              else {
  749|  28.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.2k|              }
  751|  28.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.2k|    {
  684|  28.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.2k|            return static_cast<T*>(s.m_cp);
  686|  28.2k|        }
  687|  28.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.2k|            return static_cast<T*>(s.m_p);
  689|  28.2k|        }
  690|  28.2k|        else {
  691|  28.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.2k|        }
  693|  28.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  28.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  85.3k|    {
 3679|  85.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  85.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  85.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  85.3k|        return read_source_impl(range);
 3685|  85.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   524k|    {
 3705|   524k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   524k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   524k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   524k|        auto it = sign_result.first;
 3708|   524k|        m_sign = sign_result.second;
 3709|       |
 3710|   524k|        auto digits_begin = it;
 3711|   524k|        auto r = ranges::subrange{it, range.end()};
 3712|   524k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   524k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   524k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   524k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   524k|                SCN_TRY_ASSIGN(
 3717|   524k|                    it,
 3718|   524k|                    do_read_source_impl(
 3719|   524k|                        r,
 3720|   524k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   524k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   524k|            }
 3723|   524k|            else {
 3724|   524k|                auto cb = [&](const auto& rr)
 3725|   524k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   524k|                    auto res = read_all(rr);
 3727|   524k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   524k|                        return unexpected_scan_error(
 3729|   524k|                            scan_error::invalid_scanned_value,
 3730|   524k|                            "Invalid float value");
 3731|   524k|                    }
 3732|   524k|                    return res;
 3733|   524k|                };
 3734|   524k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   524k|            }
 3736|   524k|        }
 3737|   524k|        else {
 3738|   524k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 338k, False: 185k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   338k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   338k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   338k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   338k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   338k|    }                                                  \
  |  | 3671|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   185k|                it,
 3740|   185k|                do_read_source_impl(
 3741|   185k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   185k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   185k|        }
 3744|       |
 3745|   185k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   185k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 185k, False: 0]
  |  Branch (3747:48): [True: 185k, False: 0]
  ------------------
 3748|   185k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 185k, False: 0]
  ------------------
 3749|   185k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 185k, False: 0]
  ------------------
 3750|   185k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   185k|        }
 3752|       |
 3753|   185k|        handle_separators();
 3754|       |
 3755|   185k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 185k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   185k|        return it;
 3768|   185k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   524k|    {
 4000|   524k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   524k|        const bool allowed_nonhex =
 4002|   524k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   524k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   524k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 524k, False: 0]
  |  Branch (4005:45): [True: 0, False: 524k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   524k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 524k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   524k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 524k, False: 0]
  |  Branch (4014:45): [True: 0, False: 524k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   524k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 524k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   524k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 299k, False: 224k]
  |  Branch (4021:28): [True: 86.4k, False: 213k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  86.4k|            auto it = range.begin();
 4025|       |
 4026|  86.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 198, False: 86.2k]
  ------------------
 4027|    198|                m_kind = float_kind::hex_with_prefix;
 4028|    198|                it = *r;
 4029|    198|            }
 4030|  86.2k|            else {
 4031|  86.2k|                m_kind = float_kind::hex_without_prefix;
 4032|  86.2k|            }
 4033|       |
 4034|  86.4k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  86.4k|        }
 4036|   437k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 224k, False: 213k]
  |  Branch (4036:29): [True: 224k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   224k|            m_kind = float_kind::generic;
 4040|   224k|            return read_regular_float(range);
 4041|   224k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   213k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 495, False: 212k]
  |  |  ------------------
  ------------------
 4047|    495|            m_kind = float_kind::hex_with_prefix;
 4048|    495|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    495|        }
 4050|       |
 4051|   212k|        m_kind = float_kind::generic;
 4052|   212k|        return read_regular(range);
 4053|   213k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   524k|    {
 3811|   524k|        auto it = range.begin();
 3812|   524k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 524k, False: 0]
  ------------------
 3813|   524k|            return unexpected(r.error());
 3814|   524k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   524k|    {
 3834|   524k|        auto it = range.begin();
 3835|   524k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 524k, False: 0]
  ------------------
 3836|   524k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   524k|                scan_error::invalid_scanned_value,
 3838|   524k|                "Invalid floating-point NaN value"));
 3839|   524k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   299k|    {
 3804|   299k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   299k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  86.9k|    {
 3904|  86.9k|        auto it = range.begin();
 3905|       |
 3906|  86.9k|        std::ptrdiff_t digits_count = 0;
 3907|  86.9k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  86.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.2k, False: 34.6k]
  |  |  ------------------
  ------------------
 3909|  52.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  52.2k|                scan_error::invalid_scanned_value,
 3911|  52.2k|                "Invalid hexadecimal floating-point value"));
 3912|  52.2k|        }
 3913|  34.6k|        else {
 3914|  34.6k|            digits_count += ranges::distance(it, *r);
 3915|  34.6k|            it = *r;
 3916|  34.6k|        }
 3917|       |
 3918|  34.6k|        m_integral_part_length = digits_count;
 3919|  34.6k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 126, False: 34.5k]
  ------------------
 3920|  34.6k|                                             m_locale_options.decimal_point)) {
 3921|    126|            it = *r;
 3922|    126|        }
 3923|       |
 3924|  34.6k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 18, False: 34.6k]
  ------------------
 3925|  34.6k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|     18|            digits_count += ranges::distance(it, *r);
 3927|     18|            it = *r;
 3928|     18|        }
 3929|       |
 3930|  34.6k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.6k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  34.6k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  34.6k|        return it;
 3938|  34.6k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   121k|    {
 3789|   121k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 121k]
  |  |  |  Branch (859:45): [True: 0, False: 121k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   121k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   121k|        return read_while1_code_unit(
 3798|   121k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   121k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   121k|    {
  754|   121k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|   162k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   162k|                  obj(static_cast<decltype(args)>(args)...);
  747|   162k|              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   162k|    {
  684|   162k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   162k|            return static_cast<T*>(s.m_cp);
  686|   162k|        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   162k|            return static_cast<T*>(s.m_p);
  689|   162k|        }
  690|   162k|        else {
  691|   162k|            return reinterpret_cast<T*>(s.m_fp);
  692|   162k|        }
  693|   162k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   162k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   121k|        {
  662|   121k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   155k|    {
 3876|   155k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 7.05k, False: 148k]
  ------------------
 3877|  7.05k|            auto beg_exp_it = range.begin();
 3878|  7.05k|            auto it = *r;
 3879|       |
 3880|  7.05k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.99k, False: 66]
  ------------------
 3881|  7.05k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.99k|                it = r_sign->first;
 3883|  6.99k|            }
 3884|       |
 3885|  7.05k|            if (auto r_exp = read_while1_code_unit(
 3886|  7.05k|                    ranges::subrange{it, range.end()},
 3887|  7.05k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  7.05k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.84k, False: 5.20k]
  |  |  ------------------
  ------------------
 3889|  1.84k|                it = beg_exp_it;
 3890|  1.84k|            }
 3891|  5.20k|            else {
 3892|  5.20k|                it = *r_exp;
 3893|  5.20k|            }
 3894|       |
 3895|  7.05k|            return it;
 3896|  7.05k|        }
 3897|   148k|        return range.begin();
 3898|   155k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  7.05k|    {
  754|  7.05k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  18.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.7k|              cvref<T> obj = *get<T>(fn);
  745|  18.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.7k|              }
  748|  18.7k|              else {
  749|  18.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.7k|              }
  751|  18.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  18.7k|    {
  684|  18.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.7k|            return static_cast<T*>(s.m_cp);
  686|  18.7k|        }
  687|  18.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.7k|            return static_cast<T*>(s.m_p);
  689|  18.7k|        }
  690|  18.7k|        else {
  691|  18.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.7k|        }
  693|  18.7k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  18.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  7.05k|        {
  662|  7.05k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   437k|    {
 3944|   437k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   437k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 351k, False: 85.5k]
  |  Branch (3945:50): [True: 53.1k, False: 298k]
  ------------------
 3946|       |
 3947|   437k|        auto it = ranges::begin(range);
 3948|   437k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   437k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   437k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 282k, False: 154k]
  |  |  ------------------
  ------------------
 3952|   282k|            return r.transform_error(
 3953|   282k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   282k|                                              "Invalid floating-point value"));
 3955|   282k|        }
 3956|   154k|        else {
 3957|   154k|            digits_count += ranges::distance(it, *r);
 3958|   154k|            it = *r;
 3959|   154k|        }
 3960|       |
 3961|   154k|        m_integral_part_length = digits_count;
 3962|   154k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 417, False: 153k]
  ------------------
 3963|   154k|                                             m_locale_options.decimal_point)) {
 3964|    417|            it = *r;
 3965|    417|        }
 3966|       |
 3967|   154k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 33, False: 154k]
  ------------------
 3968|   154k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|     33|            digits_count += ranges::distance(it, *r);
 3970|     33|            it = *r;
 3971|     33|        }
 3972|       |
 3973|   154k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   154k|        auto beg_exp_it = it;
 3979|   154k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 121k, False: 33.1k]
  ------------------
 3980|   121k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   121k|        }
 3982|   154k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 4.03k, False: 150k]
  |  Branch (3982:29): [True: 3.39k, False: 648]
  ------------------
 3983|  3.39k|            return unexpected_scan_error(
 3984|  3.39k|                scan_error::invalid_scanned_value,
 3985|  3.39k|                "No exponent given to scientific float");
 3986|  3.39k|        }
 3987|       |
 3988|   150k|        m_kind =
 3989|   150k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 145k, False: 5.05k]
  ------------------
 3990|       |
 3991|   150k|        return it;
 3992|   154k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   591k|    {
 3774|   591k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 591k]
  |  |  |  Branch (859:45): [True: 0, False: 591k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   591k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   591k|        return read_while1_code_unit(
 3783|   591k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   591k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   591k|    {
  754|   591k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   755k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   755k|              cvref<T> obj = *get<T>(fn);
  745|   755k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   755k|                  obj(static_cast<decltype(args)>(args)...);
  747|   755k|              }
  748|   755k|              else {
  749|   755k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   755k|              }
  751|   755k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   755k|    {
  684|   755k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   755k|            return static_cast<T*>(s.m_cp);
  686|   755k|        }
  687|   755k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   755k|            return static_cast<T*>(s.m_p);
  689|   755k|        }
  690|   755k|        else {
  691|   755k|            return reinterpret_cast<T*>(s.m_fp);
  692|   755k|        }
  693|   755k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   755k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   591k|        {
  662|   591k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   185k|    {
 1577|   185k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   185k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  28.2k|        {
  662|  28.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   438k|    {
 3665|   438k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   438k|        return read_source_impl(range);
 3671|   438k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   131k|    {
 4170|   131k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   131k|#if !SCN_DISABLE_LOCALE
 4173|   131k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.2k, False: 103k]
  ------------------
 4174|  28.2k|            return read_impl<Range>(
 4175|  28.2k|                range, rd,
 4176|  28.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.2k|                },
 4179|  28.2k|                value, loc);
 4180|  28.2k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   131k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   174k|    {
 4206|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.1k, False: 121k]
  |  |  ------------------
  ------------------
 4208|  52.1k|            return unexpected(r.error());
 4209|  52.1k|        }
 4210|       |
 4211|   121k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 61.3k, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  61.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  61.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  61.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  61.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  61.3k|    }                                                  \
  |  |  |  | 3671|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  60.5k|        return ranges::next(range.begin(), n);
 4213|   121k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   524k|    {
  763|   524k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   524k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  28.2k|    {
  754|  28.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  28.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.2k|              cvref<T> obj = *get<T>(fn);
  745|  28.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.2k|              }
  748|  28.2k|              else {
  749|  28.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.2k|              }
  751|  28.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.2k|    {
  684|  28.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.2k|            return static_cast<T*>(s.m_cp);
  686|  28.2k|        }
  687|  28.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.2k|            return static_cast<T*>(s.m_p);
  689|  28.2k|        }
  690|  28.2k|        else {
  691|  28.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.2k|        }
  693|  28.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  28.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  85.5k|    {
 3679|  85.5k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  85.5k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  85.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 85.5k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  85.5k|        return read_source_impl(range);
 3685|  85.5k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   524k|    {
 3705|   524k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   524k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   524k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   524k|        auto it = sign_result.first;
 3708|   524k|        m_sign = sign_result.second;
 3709|       |
 3710|   524k|        auto digits_begin = it;
 3711|   524k|        auto r = ranges::subrange{it, range.end()};
 3712|   524k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   524k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   524k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 3715|   524k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   524k|            else {
 3724|   524k|                auto cb = [&](const auto& rr)
 3725|   524k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   524k|                    auto res = read_all(rr);
 3727|   524k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   524k|                        return unexpected_scan_error(
 3729|   524k|                            scan_error::invalid_scanned_value,
 3730|   524k|                            "Invalid float value");
 3731|   524k|                    }
 3732|   524k|                    return res;
 3733|   524k|                };
 3734|   524k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 156k, False: 367k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   156k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   156k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   156k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   156k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   156k|    }                                                  \
  |  | 3671|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   367k|            }
 3736|   524k|        }
 3737|   367k|        else {
 3738|   367k|            SCN_TRY_ASSIGN(
 3739|   367k|                it,
 3740|   367k|                do_read_source_impl(
 3741|   367k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   367k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   367k|        }
 3744|       |
 3745|   367k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   367k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 367k, False: 0]
  |  Branch (3747:48): [True: 367k, False: 0]
  ------------------
 3748|   367k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 367k, False: 0]
  ------------------
 3749|   367k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 367k, False: 0]
  ------------------
 3750|   367k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   367k|        }
 3752|       |
 3753|   367k|        handle_separators();
 3754|       |
 3755|   367k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 367k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   367k|        return it;
 3768|   367k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   524k|    {
 3811|   524k|        auto it = range.begin();
 3812|   524k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 524k, False: 0]
  ------------------
 3813|   524k|            return unexpected(r.error());
 3814|   524k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   524k|    {
 3834|   524k|        auto it = range.begin();
 3835|   524k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 524k, False: 0]
  ------------------
 3836|   524k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   524k|                scan_error::invalid_scanned_value,
 3838|   524k|                "Invalid floating-point NaN value"));
 3839|   524k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   300k|    {
 3804|   300k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   300k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   297k|{
 1996|   297k|    auto it = read_while_code_unit(range, pred);
 1997|   297k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 224k, False: 72.6k]
  ------------------
 1998|   224k|        return unexpected(parse_error::error);
 1999|   224k|    }
 2000|  72.6k|    return it;
 2001|   297k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  37.6k|    {
 3876|  37.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.66k, False: 34.9k]
  ------------------
 3877|  2.66k|            auto beg_exp_it = range.begin();
 3878|  2.66k|            auto it = *r;
 3879|       |
 3880|  2.66k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.64k, False: 18]
  ------------------
 3881|  2.66k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.64k|                it = r_sign->first;
 3883|  2.64k|            }
 3884|       |
 3885|  2.66k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.66k|                    ranges::subrange{it, range.end()},
 3887|  2.66k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.66k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 758, False: 1.90k]
  |  |  ------------------
  ------------------
 3889|    758|                it = beg_exp_it;
 3890|    758|            }
 3891|  1.90k|            else {
 3892|  1.90k|                it = *r_exp;
 3893|  1.90k|            }
 3894|       |
 3895|  2.66k|            return it;
 3896|  2.66k|        }
 3897|  34.9k|        return range.begin();
 3898|  37.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.66k|    {
  754|  2.66k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  6.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.83k|              cvref<T> obj = *get<T>(fn);
  745|  6.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.83k|              }
  748|  6.83k|              else {
  749|  6.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.83k|              }
  751|  6.83k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  6.83k|    {
  684|  6.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.83k|            return static_cast<T*>(s.m_cp);
  686|  6.83k|        }
  687|  6.83k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.83k|            return static_cast<T*>(s.m_p);
  689|  6.83k|        }
  690|  6.83k|        else {
  691|  6.83k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.83k|        }
  693|  6.83k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  6.83k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.66k|        {
  662|  2.66k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   224k|    {
 3944|   224k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   224k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 138k, False: 85.5k]
  |  Branch (3945:50): [True: 53.1k, False: 85.5k]
  ------------------
 3946|       |
 3947|   224k|        auto it = ranges::begin(range);
 3948|   224k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   224k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   224k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 153k, False: 70.7k]
  |  |  ------------------
  ------------------
 3952|   153k|            return r.transform_error(
 3953|   153k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   153k|                                              "Invalid floating-point value"));
 3955|   153k|        }
 3956|  70.7k|        else {
 3957|  70.7k|            digits_count += ranges::distance(it, *r);
 3958|  70.7k|            it = *r;
 3959|  70.7k|        }
 3960|       |
 3961|  70.7k|        m_integral_part_length = digits_count;
 3962|  70.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 222, False: 70.5k]
  ------------------
 3963|  70.7k|                                             m_locale_options.decimal_point)) {
 3964|    222|            it = *r;
 3965|    222|        }
 3966|       |
 3967|  70.7k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 18, False: 70.7k]
  ------------------
 3968|  70.7k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|     18|            digits_count += ranges::distance(it, *r);
 3970|     18|            it = *r;
 3971|     18|        }
 3972|       |
 3973|  70.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  70.7k|        auto beg_exp_it = it;
 3979|  70.7k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 37.6k, False: 33.1k]
  ------------------
 3980|  37.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  37.6k|        }
 3982|  70.7k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 4.03k, False: 66.6k]
  |  Branch (3982:29): [True: 3.39k, False: 648]
  ------------------
 3983|  3.39k|            return unexpected_scan_error(
 3984|  3.39k|                scan_error::invalid_scanned_value,
 3985|  3.39k|                "No exponent given to scientific float");
 3986|  3.39k|        }
 3987|       |
 3988|  67.3k|        m_kind =
 3989|  67.3k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 65.4k, False: 1.90k]
  ------------------
 3990|       |
 3991|  67.3k|        return it;
 3992|  70.7k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   294k|    {
 3774|   294k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   294k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   294k|        return read_while1_code_unit(
 3783|   294k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   294k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   294k|    {
  754|   294k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   370k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   370k|              cvref<T> obj = *get<T>(fn);
  745|   370k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   370k|                  obj(static_cast<decltype(args)>(args)...);
  747|   370k|              }
  748|   370k|              else {
  749|   370k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   370k|              }
  751|   370k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   370k|    {
  684|   370k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   370k|            return static_cast<T*>(s.m_cp);
  686|   370k|        }
  687|   370k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   370k|            return static_cast<T*>(s.m_p);
  689|   370k|        }
  690|   370k|        else {
  691|   370k|            return reinterpret_cast<T*>(s.m_fp);
  692|   370k|        }
  693|   370k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   370k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   294k|        {
  662|   294k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   524k|    {
 4000|   524k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   524k|        const bool allowed_nonhex =
 4002|   524k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   524k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   524k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 524k, False: 0]
  |  Branch (4005:45): [True: 0, False: 524k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   524k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 524k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   524k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 524k, False: 0]
  |  Branch (4014:45): [True: 0, False: 524k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   524k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 524k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   524k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 300k, False: 224k]
  |  Branch (4021:28): [True: 86.6k, False: 213k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  86.6k|            auto it = range.begin();
 4025|       |
 4026|  86.6k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 198, False: 86.4k]
  ------------------
 4027|    198|                m_kind = float_kind::hex_with_prefix;
 4028|    198|                it = *r;
 4029|    198|            }
 4030|  86.4k|            else {
 4031|  86.4k|                m_kind = float_kind::hex_without_prefix;
 4032|  86.4k|            }
 4033|       |
 4034|  86.6k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  86.6k|        }
 4036|   437k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 224k, False: 213k]
  |  Branch (4036:29): [True: 224k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   224k|            m_kind = float_kind::generic;
 4040|   224k|            return read_regular_float(range);
 4041|   224k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   213k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 495, False: 213k]
  |  |  ------------------
  ------------------
 4047|    495|            m_kind = float_kind::hex_with_prefix;
 4048|    495|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    495|        }
 4050|       |
 4051|   213k|        m_kind = float_kind::generic;
 4052|   213k|        return read_regular(range);
 4053|   213k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   300k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   300k|                    auto res = read_all(rr);
 3727|   300k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 300k]
  |  |  ------------------
  ------------------
 3728|     84|                        return unexpected_scan_error(
 3729|     84|                            scan_error::invalid_scanned_value,
 3730|     84|                            "Invalid float value");
 3731|     84|                    }
 3732|   300k|                    return res;
 3733|   300k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   300k|{
 1839|   300k|    return ranges::next(range.begin(), range.end());
 1840|   300k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   300k|    {
  313|   300k|        ranges::advance(x, bound);
  314|   300k|        return x;
  315|   300k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   300k|    {
  275|   300k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   300k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   367k|    {
 1577|   367k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   367k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   367k|    {
 1621|   367k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   367k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   367k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   367k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   367k|            m_storage.reset();
 1627|   367k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   367k|        }
 1629|   367k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   367k|                                          std::basic_string<CharT>>) {
 1631|   367k|            m_storage.emplace(SCN_FWD(range));
 1632|   367k|            m_view = string_view_type{*m_storage};
 1633|   367k|        }
 1634|   367k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   367k|                                          typename detail::basic_scan_buffer<
 1636|   367k|                                              value_t>::forward_iterator> &&
 1637|   367k|                           ranges::common_range<Range>) {
 1638|   367k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   367k|            auto end_seg = range.end().contiguous_segment();
 1640|   367k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   367k|                             detail::to_address(end_seg.end()))) {
 1642|   367k|                auto& str = m_storage.emplace();
 1643|   367k|                str.reserve(range.end().position() - range.begin().position());
 1644|   367k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   367k|                m_view = string_view_type{str};
 1646|   367k|                return;
 1647|   367k|            }
 1648|       |
 1649|   367k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   367k|                                                            end_seg.data());
 1651|   367k|            m_storage.reset();
 1652|   367k|        }
 1653|   367k|        else {
 1654|   367k|            auto& str = m_storage.emplace();
 1655|   367k|            if constexpr (ranges::sized_range<Range>) {
 1656|   367k|                str.reserve(range.size());
 1657|   367k|            }
 1658|   367k|            if constexpr (ranges::common_range<Range>) {
 1659|   367k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   367k|                          std::back_inserter(str));
 1661|   367k|            }
 1662|   367k|            else {
 1663|   367k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   367k|                     ++it) {
 1665|   367k|                    str.push_back(*it);
 1666|   367k|                }
 1667|   367k|            }
 1668|   367k|            m_view = string_view_type{str};
 1669|   367k|        }
 1670|   367k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  28.2k|        {
  662|  28.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   439k|    {
 3665|   439k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 439k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   439k|        return read_source_impl(range);
 3671|   439k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   132k|    {
 6193|   132k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   132k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   132k|            auto rd = make_reader<T, char_type>();
 6198|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   132k|                return unexpected(e);
 6200|   132k|            }
 6201|       |
 6202|   132k|            return impl(rd, range, value);
 6203|   132k|        }
 6204|   132k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   132k|            auto rd = make_reader<T, char_type>();
 6206|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   132k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 132k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   132k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   132k|                return impl(rd, range, value);
 6213|   132k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   132k|        else {
 6221|   132k|            SCN_EXPECT(false);
 6222|   132k|            SCN_UNREACHABLE;
 6223|   132k|        }
 6224|   132k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   132k|    {
 6124|   132k|        const bool need_skipped_width =
 6125|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 132k]
  |  Branch (6125:33): [True: 0, False: 132k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   132k|        auto it = rng.begin();
 6129|   132k|        std::ptrdiff_t prefix_width = 0;
 6130|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 132k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   132k|        else {
 6138|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 762, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    762|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   131k|            std::tie(it, prefix_width) = prefix_result;
 6140|   131k|        }
 6141|   131k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   131k|        std::ptrdiff_t value_width = 0;
 6145|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 131k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   131k|        else {
 6161|   131k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 44.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  44.6k|                                             specs, value, loc));
 6163|       |
 6164|  44.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 44.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  44.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  44.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  44.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 44.4k, False: 236]
  ------------------
 6174|  44.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  44.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  44.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  44.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  44.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  44.4k|                                 value_width));
 6178|  44.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  44.4k|        }
 6180|       |
 6181|  44.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  44.6k|                                                 value_width, postfix_width);
 6183|  44.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  44.6k|        return it;
 6188|  44.6k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   183k|    {
 3691|   183k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   183k|        const std::ptrdiff_t sign_len =
 3694|   183k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 232, False: 183k]
  ------------------
 3695|       |
 3696|   183k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 61.5k, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  61.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  61.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  61.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  61.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  61.5k|    }                                                  \
  |  |  |  | 3671|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   122k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   183k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   131k|    {
 4170|   131k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   131k|#if !SCN_DISABLE_LOCALE
 4173|   131k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.4k, False: 103k]
  ------------------
 4174|  28.4k|            return read_impl<Range>(
 4175|  28.4k|                range, rd,
 4176|  28.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.4k|                },
 4179|  28.4k|                value, loc);
 4180|  28.4k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   131k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   174k|    {
 4206|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112k, False: 61.6k]
  |  |  ------------------
  ------------------
 4208|   112k|            return unexpected(r.error());
 4209|   112k|        }
 4210|       |
 4211|  61.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  61.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  61.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  61.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 498, False: 61.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    498|    }                                                  \
  |  |  |  | 3671|  61.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  61.1k|        return ranges::next(range.begin(), n);
 4213|  61.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  28.4k|    {
  754|  28.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  28.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.4k|              cvref<T> obj = *get<T>(fn);
  745|  28.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.4k|              }
  748|  28.4k|              else {
  749|  28.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.4k|              }
  751|  28.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.4k|    {
  684|  28.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.4k|            return static_cast<T*>(s.m_cp);
  686|  28.4k|        }
  687|  28.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.4k|            return static_cast<T*>(s.m_p);
  689|  28.4k|        }
  690|  28.4k|        else {
  691|  28.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.4k|        }
  693|  28.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  28.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  28.4k|        {
  662|  28.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   132k|    {
 4170|   132k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   132k|#if !SCN_DISABLE_LOCALE
 4173|   132k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.4k, False: 103k]
  ------------------
 4174|  28.4k|            return read_impl<Range>(
 4175|  28.4k|                range, rd,
 4176|  28.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.4k|                },
 4179|  28.4k|                value, loc);
 4180|  28.4k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   132k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   174k|    {
 4206|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.3k, False: 122k]
  |  |  ------------------
  ------------------
 4208|  52.3k|            return unexpected(r.error());
 4209|  52.3k|        }
 4210|       |
 4211|   122k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   122k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 61.0k, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  61.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  61.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  61.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  61.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  61.0k|    }                                                  \
  |  |  |  | 3671|   122k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  61.3k|        return ranges::next(range.begin(), n);
 4213|   122k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  28.4k|    {
  754|  28.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  28.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.4k|              cvref<T> obj = *get<T>(fn);
  745|  28.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.4k|              }
  748|  28.4k|              else {
  749|  28.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.4k|              }
  751|  28.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.4k|    {
  684|  28.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.4k|            return static_cast<T*>(s.m_cp);
  686|  28.4k|        }
  687|  28.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.4k|            return static_cast<T*>(s.m_p);
  689|  28.4k|        }
  690|  28.4k|        else {
  691|  28.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.4k|        }
  693|  28.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  28.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  28.4k|        {
  662|  28.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   133k|    {
 6193|   133k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   133k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   133k|            auto rd = make_reader<T, char_type>();
 6198|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   133k|                return unexpected(e);
 6200|   133k|            }
 6201|       |
 6202|   133k|            return impl(rd, range, value);
 6203|   133k|        }
 6204|   133k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   133k|            auto rd = make_reader<T, char_type>();
 6206|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   133k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 133k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   133k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   133k|                return impl(rd, range, value);
 6213|   133k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   133k|        else {
 6221|   133k|            SCN_EXPECT(false);
 6222|   133k|            SCN_UNREACHABLE;
 6223|   133k|        }
 6224|   133k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   133k|    {
 6124|   133k|        const bool need_skipped_width =
 6125|   133k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 133k]
  |  Branch (6125:33): [True: 0, False: 133k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   133k|        auto it = rng.begin();
 6129|   133k|        std::ptrdiff_t prefix_width = 0;
 6130|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 133k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   133k|        else {
 6138|   133k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 778, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    778|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    778|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    778|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    778|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    778|    }                                                  \
  |  |  |  | 3671|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   132k|            std::tie(it, prefix_width) = prefix_result;
 6140|   132k|        }
 6141|   132k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   132k|        std::ptrdiff_t value_width = 0;
 6145|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 132k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   132k|        else {
 6161|   132k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 45.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  45.3k|                                             specs, value, loc));
 6163|       |
 6164|  45.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 45.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  45.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  45.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  45.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 45.1k, False: 246]
  ------------------
 6174|  45.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  45.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  45.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  45.1k|                                 value_width));
 6178|  45.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  45.1k|        }
 6180|       |
 6181|  45.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  45.3k|                                                 value_width, postfix_width);
 6183|  45.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  45.3k|        return it;
 6188|  45.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   185k|    {
 3691|   185k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   185k|        const std::ptrdiff_t sign_len =
 3694|   185k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 244, False: 185k]
  ------------------
 3695|       |
 3696|   185k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.9k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  60.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  60.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  60.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  60.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  60.9k|    }                                                  \
  |  |  |  | 3671|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   124k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   185k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   132k|    {
 4170|   132k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   132k|#if !SCN_DISABLE_LOCALE
 4173|   132k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.7k, False: 103k]
  ------------------
 4174|  28.7k|            return read_impl<Range>(
 4175|  28.7k|                range, rd,
 4176|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.7k|                },
 4179|  28.7k|                value, loc);
 4180|  28.7k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   132k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   175k|    {
 4206|   175k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 113k, False: 62.4k]
  |  |  ------------------
  ------------------
 4208|   113k|            return unexpected(r.error());
 4209|   113k|        }
 4210|       |
 4211|  62.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  62.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  62.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  62.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 97, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     97|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     97|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     97|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     97|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     97|    }                                                  \
  |  |  |  | 3671|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  62.3k|        return ranges::next(range.begin(), n);
 4213|  62.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  28.7k|    {
  754|  28.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  28.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.7k|              cvref<T> obj = *get<T>(fn);
  745|  28.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.7k|              }
  748|  28.7k|              else {
  749|  28.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.7k|              }
  751|  28.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.7k|    {
  684|  28.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.7k|            return static_cast<T*>(s.m_cp);
  686|  28.7k|        }
  687|  28.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.7k|            return static_cast<T*>(s.m_p);
  689|  28.7k|        }
  690|  28.7k|        else {
  691|  28.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.7k|        }
  693|  28.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  28.7k|        {
  662|  28.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   132k|    {
 4170|   132k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   132k|#if !SCN_DISABLE_LOCALE
 4173|   132k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 28.7k, False: 103k]
  ------------------
 4174|  28.7k|            return read_impl<Range>(
 4175|  28.7k|                range, rd,
 4176|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  28.7k|                },
 4179|  28.7k|                value, loc);
 4180|  28.7k|        }
 4181|   103k|#endif
 4182|       |
 4183|   103k|        return read_impl<Range>(
 4184|   103k|            range, rd,
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
 4187|   103k|            },
 4188|   103k|            value);
 4189|   132k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   175k|    {
 4206|   175k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.4k, False: 123k]
  |  |  ------------------
  ------------------
 4208|  52.4k|            return unexpected(r.error());
 4209|  52.4k|        }
 4210|       |
 4211|   123k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.8k, False: 62.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  60.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  60.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  60.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  60.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  60.8k|    }                                                  \
  |  |  |  | 3671|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  62.4k|        return ranges::next(range.begin(), n);
 4213|   123k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  28.7k|    {
  754|  28.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  28.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.7k|              cvref<T> obj = *get<T>(fn);
  745|  28.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.7k|              }
  748|  28.7k|              else {
  749|  28.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.7k|              }
  751|  28.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.7k|    {
  684|  28.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.7k|            return static_cast<T*>(s.m_cp);
  686|  28.7k|        }
  687|  28.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.7k|            return static_cast<T*>(s.m_p);
  689|  28.7k|        }
  690|  28.7k|        else {
  691|  28.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.7k|        }
  693|  28.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  28.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  28.7k|        {
  662|  28.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|   103k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   103k|            return static_cast<T*>(s.m_cp);
  686|   103k|        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   103k|            return static_cast<T*>(s.m_p);
  689|   103k|        }
  690|   103k|        else {
  691|   103k|            return reinterpret_cast<T*>(s.m_fp);
  692|   103k|        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   526k|{
 2061|   526k|    auto it = range.begin();
 2062|   704k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 702k, False: 2.75k]
  ------------------
 2063|   702k|        const auto val =
 2064|   702k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   702k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   702k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 702k, False: 0]
  |  |  ------------------
  ------------------
 2066|   702k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   702k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   702k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 524k, False: 178k]
  ------------------
 2069|   524k|                return it;
 2070|   524k|            }
 2071|   702k|        }
 2072|   178k|        it = val.iterator;
 2073|   178k|    }
 2074|       |
 2075|  2.75k|    return it;
 2076|   526k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   702k|{
 1899|   702k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   702k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   702k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   702k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   702k|    auto it = range.begin();
 1903|   702k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   702k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   702k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 702k, False: 0]
  ------------------
 1912|   702k|        ++it;
 1913|   702k|        return {it, string_type(1, *range.begin())};
 1914|   702k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   702k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   702k|    {
 1890|   702k|        return !codepoint.empty();
 1891|   702k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   526k|{
 2082|   526k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   526k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   526k|{
 2951|   526k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 526k, False: 0]
  ------------------
 2952|   526k|        auto it = read_while_classic_space(range);
 2953|   526k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   526k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 524k]
  |  |  ------------------
  ------------------
 2955|  2.75k|            return unexpected(e);
 2956|  2.75k|        }
 2957|       |
 2958|   524k|        return it;
 2959|   526k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   526k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   526k|{
 2117|   526k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   526k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   526k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   526k|        auto buf = make_contiguous_buffer(range);
 2121|   526k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   526k|        return ranges::next(range.begin(),
 2123|   526k|                            ranges::distance(buf.view().begin(), it));
 2124|   526k|    }
 2125|   526k|    else {
 2126|   526k|        auto it = range.begin();
 2127|       |
 2128|   526k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   526k|            auto seg = get_contiguous_beginning(range);
 2130|   526k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   526k|                seg_it != seg.end()) {
 2132|   526k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   526k|            }
 2134|   526k|            ranges::advance(it, seg.size());
 2135|   526k|        }
 2136|       |
 2137|   526k|        return read_while_code_point(
 2138|   526k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   526k|    }
 2140|   526k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   526k|    {
  754|   526k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   702k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   702k|              cvref<T> obj = *get<T>(fn);
  745|   702k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   702k|                  obj(static_cast<decltype(args)>(args)...);
  747|   702k|              }
  748|   702k|              else {
  749|   702k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   702k|              }
  751|   702k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   702k|    {
  684|   702k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   702k|            return static_cast<T*>(s.m_cp);
  686|   702k|        }
  687|   702k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   702k|            return static_cast<T*>(s.m_p);
  689|   702k|        }
  690|   702k|        else {
  691|   702k|            return reinterpret_cast<T*>(s.m_fp);
  692|   702k|        }
  693|   702k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   702k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   526k|        {
  662|   526k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.85M|{
 2088|  2.85M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.85M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.85M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.85M|        auto buf = make_contiguous_buffer(range);
 2092|  2.85M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.85M|        return ranges::next(range.begin(),
 2094|  2.85M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.85M|    }
 2096|  2.85M|    else {
 2097|  2.85M|        auto it = range.begin();
 2098|       |
 2099|  2.85M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.85M|            auto seg = get_contiguous_beginning(range);
 2101|  2.85M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.85M|                seg_it != seg.end()) {
 2103|  2.85M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.85M|            }
 2105|  2.85M|            ranges::advance(it, seg.size());
 2106|  2.85M|        }
 2107|       |
 2108|  2.85M|        return read_until_code_point(
 2109|  2.85M|            ranges::subrange{it, range.end()},
 2110|  2.85M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.85M|    }
 2112|  2.85M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.85M|{
 1683|  2.85M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.85M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.85M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.85M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.85M|    }
 1688|  2.85M|    else {
 1689|  2.85M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.85M|    }
 1691|  2.85M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.85M|    {
 1490|  2.85M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.85M|    {
 1577|  2.85M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.85M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.85M|    {
 1621|  2.85M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.85M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.85M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.85M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.85M|            m_storage.reset();
 1627|  2.85M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.85M|        }
 1629|  2.85M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.85M|                                          std::basic_string<CharT>>) {
 1631|  2.85M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.85M|            m_view = string_view_type{*m_storage};
 1633|  2.85M|        }
 1634|  2.85M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.85M|                                          typename detail::basic_scan_buffer<
 1636|  2.85M|                                              value_t>::forward_iterator> &&
 1637|  2.85M|                           ranges::common_range<Range>) {
 1638|  2.85M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.85M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.85M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.85M|                             detail::to_address(end_seg.end()))) {
 1642|  2.85M|                auto& str = m_storage.emplace();
 1643|  2.85M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.85M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.85M|                m_view = string_view_type{str};
 1646|  2.85M|                return;
 1647|  2.85M|            }
 1648|       |
 1649|  2.85M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.85M|                                                            end_seg.data());
 1651|  2.85M|            m_storage.reset();
 1652|  2.85M|        }
 1653|  2.85M|        else {
 1654|  2.85M|            auto& str = m_storage.emplace();
 1655|  2.85M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.85M|                str.reserve(range.size());
 1657|  2.85M|            }
 1658|  2.85M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.85M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.85M|                          std::back_inserter(str));
 1661|  2.85M|            }
 1662|  2.85M|            else {
 1663|  2.85M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.85M|                     ++it) {
 1665|  2.85M|                    str.push_back(*it);
 1666|  2.85M|                }
 1667|  2.85M|            }
 1668|  2.85M|            m_view = string_view_type{str};
 1669|  2.85M|        }
 1670|  2.85M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.95M|    {
 4100|  1.95M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 205k, False: 1.75M]
  ------------------
 4101|   205k|            return std::copysign(value, T{-1.0});
 4102|   205k|        }
 4103|  1.75M|        return std::copysign(value, T{1.0});
 4104|  1.95M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   169k|{
 2088|   169k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   169k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   169k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   169k|        auto buf = make_contiguous_buffer(range);
 2092|   169k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   169k|        return ranges::next(range.begin(),
 2094|   169k|                            ranges::distance(buf.view().begin(), it));
 2095|   169k|    }
 2096|   169k|    else {
 2097|   169k|        auto it = range.begin();
 2098|       |
 2099|   169k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   169k|            auto seg = get_contiguous_beginning(range);
 2101|   169k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   169k|                seg_it != seg.end()) {
 2103|   169k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   169k|            }
 2105|   169k|            ranges::advance(it, seg.size());
 2106|   169k|        }
 2107|       |
 2108|   169k|        return read_until_code_point(
 2109|   169k|            ranges::subrange{it, range.end()},
 2110|   169k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   169k|    }
 2112|   169k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   169k|    {
  754|   169k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   349k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   349k|              cvref<T> obj = *get<T>(fn);
  745|   349k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   349k|                  obj(static_cast<decltype(args)>(args)...);
  747|   349k|              }
  748|   349k|              else {
  749|   349k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   349k|              }
  751|   349k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   349k|    {
  684|   349k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   349k|            return static_cast<T*>(s.m_cp);
  686|   349k|        }
  687|   349k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   349k|            return static_cast<T*>(s.m_p);
  689|   349k|        }
  690|   349k|        else {
  691|   349k|            return reinterpret_cast<T*>(s.m_fp);
  692|   349k|        }
  693|   349k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   349k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   169k|        {
  662|   169k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   169k|    {
 1577|   169k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   169k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   169k|    {
 1621|   169k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   169k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   169k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   169k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   169k|            m_storage.reset();
 1627|   169k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   169k|        }
 1629|   169k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   169k|                                          std::basic_string<CharT>>) {
 1631|   169k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   169k|            m_view = string_view_type{*m_storage};
 1633|   169k|        }
 1634|   169k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   169k|                                          typename detail::basic_scan_buffer<
 1636|   169k|                                              value_t>::forward_iterator> &&
 1637|   169k|                           ranges::common_range<Range>) {
 1638|   169k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   169k|            auto end_seg = range.end().contiguous_segment();
 1640|   169k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   169k|                             detail::to_address(end_seg.end()))) {
 1642|   169k|                auto& str = m_storage.emplace();
 1643|   169k|                str.reserve(range.end().position() - range.begin().position());
 1644|   169k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   169k|                m_view = string_view_type{str};
 1646|   169k|                return;
 1647|   169k|            }
 1648|       |
 1649|   169k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   169k|                                                            end_seg.data());
 1651|   169k|            m_storage.reset();
 1652|   169k|        }
 1653|   169k|        else {
 1654|   169k|            auto& str = m_storage.emplace();
 1655|   169k|            if constexpr (ranges::sized_range<Range>) {
 1656|   169k|                str.reserve(range.size());
 1657|   169k|            }
 1658|   169k|            if constexpr (ranges::common_range<Range>) {
 1659|   169k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   169k|                          std::back_inserter(str));
 1661|   169k|            }
 1662|   169k|            else {
 1663|   169k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   169k|                     ++it) {
 1665|   169k|                    str.push_back(*it);
 1666|   169k|                }
 1667|   169k|            }
 1668|   169k|            m_view = string_view_type{str};
 1669|   169k|        }
 1670|   169k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   183k|    {
 4100|   183k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 178, False: 183k]
  ------------------
 4101|    178|            return std::copysign(value, T{-1.0});
 4102|    178|        }
 4103|   183k|        return std::copysign(value, T{1.0});
 4104|   183k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  2.11M|    {
 4100|  2.11M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 221k, False: 1.89M]
  ------------------
 4101|   221k|            return std::copysign(value, T{-1.0});
 4102|   221k|        }
 4103|  1.89M|        return std::copysign(value, T{1.0});
 4104|  2.11M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   183k|    {
 4100|   183k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 178, False: 183k]
  ------------------
 4101|    178|            return std::copysign(value, T{-1.0});
 4102|    178|        }
 4103|   183k|        return std::copysign(value, T{1.0});
 4104|   183k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  2.13M|    {
 4100|  2.13M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 227k, False: 1.90M]
  ------------------
 4101|   227k|            return std::copysign(value, T{-1.0});
 4102|   227k|        }
 4103|  1.90M|        return std::copysign(value, T{1.0});
 4104|  2.13M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   185k|    {
 4100|   185k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 190, False: 185k]
  ------------------
 4101|    190|            return std::copysign(value, T{-1.0});
 4102|    190|        }
 4103|   185k|        return std::copysign(value, T{1.0});
 4104|   185k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   938k|{
 5795|   938k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.61k, False: 931k]
  |  |  ------------------
  ------------------
 5796|  6.61k|        return unexpected(e);
 5797|  6.61k|    }
 5798|       |
 5799|   931k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 931k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   931k|    return skip_classic_whitespace(range);
 5804|   931k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   291k|    {
 5871|   291k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   291k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   291k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   291k|            auto rd = make_reader<T, char_type>();
 5876|   291k|            return impl(rd, range, value);
 5877|   291k|        }
 5878|   291k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   291k|            auto rd = make_reader<T, char_type>();
 5880|   291k|            if (!is_segment_contiguous(range)) {
 5881|   291k|                return impl(rd, range, value);
 5882|   291k|            }
 5883|   291k|            auto crange = get_as_contiguous(range);
 5884|   291k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   291k|            return ranges::next(range.begin(),
 5886|   291k|                                ranges::distance(crange.begin(), it));
 5887|   291k|        }
 5888|   291k|        else {
 5889|   291k|            SCN_EXPECT(false);
 5890|   291k|            SCN_UNREACHABLE;
 5891|   291k|        }
 5892|   291k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   291k|    {
 5863|   291k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.33k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.33k|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   288k|                        .transform_error(make_eof_scan_error));
 5865|   288k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   291k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   288k|    {
 4152|   288k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   288k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   288k|        float_reader<CharT> rd{};
 4155|   288k|        return read_impl<Range>(
 4156|   288k|            range, rd,
 4157|   288k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   288k|                return r.read_source(SCN_FWD(args)...);
 4159|   288k|            },
 4160|   288k|            value);
 4161|   288k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.84M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  2.10M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   288k|    {
  754|   288k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   288k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   288k|              cvref<T> obj = *get<T>(fn);
  745|   288k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   288k|                  obj(static_cast<decltype(args)>(args)...);
  747|   288k|              }
  748|   288k|              else {
  749|   288k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   288k|              }
  751|   288k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   288k|    {
  684|   288k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   288k|            return static_cast<T*>(s.m_cp);
  686|   288k|        }
  687|   288k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   288k|            return static_cast<T*>(s.m_p);
  689|   288k|        }
  690|   288k|        else {
  691|   288k|            return reinterpret_cast<T*>(s.m_fp);
  692|   288k|        }
  693|   288k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   288k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   288k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   288k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   288k|        {
  662|   288k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   321k|    {
 5871|   321k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   321k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   321k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   321k|            auto rd = make_reader<T, char_type>();
 5876|   321k|            return impl(rd, range, value);
 5877|   321k|        }
 5878|   321k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   321k|            auto rd = make_reader<T, char_type>();
 5880|   321k|            if (!is_segment_contiguous(range)) {
 5881|   321k|                return impl(rd, range, value);
 5882|   321k|            }
 5883|   321k|            auto crange = get_as_contiguous(range);
 5884|   321k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   321k|            return ranges::next(range.begin(),
 5886|   321k|                                ranges::distance(crange.begin(), it));
 5887|   321k|        }
 5888|   321k|        else {
 5889|   321k|            SCN_EXPECT(false);
 5890|   321k|            SCN_UNREACHABLE;
 5891|   321k|        }
 5892|   321k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   321k|    {
 5863|   321k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.68k|    }                                                  \
  |  |  |  | 3671|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   318k|                        .transform_error(make_eof_scan_error));
 5865|   318k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   321k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   318k|    {
 4152|   318k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   318k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   318k|        float_reader<CharT> rd{};
 4155|   318k|        return read_impl<Range>(
 4156|   318k|            range, rd,
 4157|   318k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   318k|                return r.read_source(SCN_FWD(args)...);
 4159|   318k|            },
 4160|   318k|            value);
 4161|   318k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   318k|    {
  754|   318k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   318k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   318k|              cvref<T> obj = *get<T>(fn);
  745|   318k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   318k|                  obj(static_cast<decltype(args)>(args)...);
  747|   318k|              }
  748|   318k|              else {
  749|   318k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   318k|              }
  751|   318k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   318k|    {
  684|   318k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   318k|            return static_cast<T*>(s.m_cp);
  686|   318k|        }
  687|   318k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   318k|            return static_cast<T*>(s.m_p);
  689|   318k|        }
  690|   318k|        else {
  691|   318k|            return reinterpret_cast<T*>(s.m_fp);
  692|   318k|        }
  693|   318k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   318k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   318k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   318k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   318k|        {
  662|   318k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   326k|    {
 5871|   326k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   326k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   326k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   326k|            auto rd = make_reader<T, char_type>();
 5876|   326k|            return impl(rd, range, value);
 5877|   326k|        }
 5878|   326k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   326k|            auto rd = make_reader<T, char_type>();
 5880|   326k|            if (!is_segment_contiguous(range)) {
 5881|   326k|                return impl(rd, range, value);
 5882|   326k|            }
 5883|   326k|            auto crange = get_as_contiguous(range);
 5884|   326k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   326k|            return ranges::next(range.begin(),
 5886|   326k|                                ranges::distance(crange.begin(), it));
 5887|   326k|        }
 5888|   326k|        else {
 5889|   326k|            SCN_EXPECT(false);
 5890|   326k|            SCN_UNREACHABLE;
 5891|   326k|        }
 5892|   326k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   326k|    {
 5863|   326k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.87k|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   323k|                        .transform_error(make_eof_scan_error));
 5865|   323k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   326k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   323k|    {
 4152|   323k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   323k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   323k|        float_reader<CharT> rd{};
 4155|   323k|        return read_impl<Range>(
 4156|   323k|            range, rd,
 4157|   323k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   323k|                return r.read_source(SCN_FWD(args)...);
 4159|   323k|            },
 4160|   323k|            value);
 4161|   323k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   323k|    {
  754|   323k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   323k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   323k|              cvref<T> obj = *get<T>(fn);
  745|   323k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   323k|                  obj(static_cast<decltype(args)>(args)...);
  747|   323k|              }
  748|   323k|              else {
  749|   323k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   323k|              }
  751|   323k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   323k|    {
  684|   323k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   323k|            return static_cast<T*>(s.m_cp);
  686|   323k|        }
  687|   323k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   323k|            return static_cast<T*>(s.m_p);
  689|   323k|        }
  690|   323k|        else {
  691|   323k|            return reinterpret_cast<T*>(s.m_fp);
  692|   323k|        }
  693|   323k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   323k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   323k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   323k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   323k|        {
  662|   323k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   925k|{
 5795|   925k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   925k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.72k, False: 919k]
  |  |  ------------------
  ------------------
 5796|  6.72k|        return unexpected(e);
 5797|  6.72k|    }
 5798|       |
 5799|   919k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 919k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   919k|    return skip_classic_whitespace(range);
 5804|   919k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   288k|    {
 5871|   288k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   288k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   288k|            auto rd = make_reader<T, char_type>();
 5876|   288k|            return impl(rd, range, value);
 5877|   288k|        }
 5878|   288k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   288k|            auto rd = make_reader<T, char_type>();
 5880|   288k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 288k, False: 0]
  ------------------
 5881|   288k|                return impl(rd, range, value);
 5882|   288k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   288k|        else {
 5889|   288k|            SCN_EXPECT(false);
 5890|   288k|            SCN_UNREACHABLE;
 5891|   288k|        }
 5892|   288k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   288k|    {
 5863|   288k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.35k, False: 286k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.35k|    }                                                  \
  |  |  |  | 3671|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   286k|                        .transform_error(make_eof_scan_error));
 5865|   286k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   288k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   286k|    {
 4152|   286k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   286k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   286k|        float_reader<CharT> rd{};
 4155|   286k|        return read_impl<Range>(
 4156|   286k|            range, rd,
 4157|   286k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   286k|                return r.read_source(SCN_FWD(args)...);
 4159|   286k|            },
 4160|   286k|            value);
 4161|   286k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   286k|    {
  754|   286k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   286k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   286k|              cvref<T> obj = *get<T>(fn);
  745|   286k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   286k|                  obj(static_cast<decltype(args)>(args)...);
  747|   286k|              }
  748|   286k|              else {
  749|   286k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   286k|              }
  751|   286k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   286k|    {
  684|   286k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   286k|            return static_cast<T*>(s.m_cp);
  686|   286k|        }
  687|   286k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   286k|            return static_cast<T*>(s.m_p);
  689|   286k|        }
  690|   286k|        else {
  691|   286k|            return reinterpret_cast<T*>(s.m_fp);
  692|   286k|        }
  693|   286k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   286k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   286k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   286k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   286k|        {
  662|   286k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   316k|    {
 5871|   316k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   316k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   316k|            auto rd = make_reader<T, char_type>();
 5876|   316k|            return impl(rd, range, value);
 5877|   316k|        }
 5878|   316k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   316k|            auto rd = make_reader<T, char_type>();
 5880|   316k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 316k, False: 0]
  ------------------
 5881|   316k|                return impl(rd, range, value);
 5882|   316k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   316k|        else {
 5889|   316k|            SCN_EXPECT(false);
 5890|   316k|            SCN_UNREACHABLE;
 5891|   316k|        }
 5892|   316k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   316k|    {
 5863|   316k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.69k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.69k|    }                                                  \
  |  |  |  | 3671|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   314k|                        .transform_error(make_eof_scan_error));
 5865|   314k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   316k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   314k|    {
 4152|   314k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   314k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   314k|        float_reader<CharT> rd{};
 4155|   314k|        return read_impl<Range>(
 4156|   314k|            range, rd,
 4157|   314k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   314k|                return r.read_source(SCN_FWD(args)...);
 4159|   314k|            },
 4160|   314k|            value);
 4161|   314k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   314k|    {
  754|   314k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   314k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   314k|              cvref<T> obj = *get<T>(fn);
  745|   314k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   314k|                  obj(static_cast<decltype(args)>(args)...);
  747|   314k|              }
  748|   314k|              else {
  749|   314k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   314k|              }
  751|   314k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   314k|    {
  684|   314k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   314k|            return static_cast<T*>(s.m_cp);
  686|   314k|        }
  687|   314k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   314k|            return static_cast<T*>(s.m_p);
  689|   314k|        }
  690|   314k|        else {
  691|   314k|            return reinterpret_cast<T*>(s.m_fp);
  692|   314k|        }
  693|   314k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   314k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   314k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   314k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   314k|        {
  662|   314k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   320k|    {
 5871|   320k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   320k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   320k|            auto rd = make_reader<T, char_type>();
 5876|   320k|            return impl(rd, range, value);
 5877|   320k|        }
 5878|   320k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   320k|            auto rd = make_reader<T, char_type>();
 5880|   320k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 320k, False: 0]
  ------------------
 5881|   320k|                return impl(rd, range, value);
 5882|   320k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   320k|        else {
 5889|   320k|            SCN_EXPECT(false);
 5890|   320k|            SCN_UNREACHABLE;
 5891|   320k|        }
 5892|   320k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   320k|    {
 5863|   320k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.86k|    }                                                  \
  |  |  |  | 3671|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   317k|                        .transform_error(make_eof_scan_error));
 5865|   317k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   320k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   317k|    {
 4152|   317k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   317k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   317k|        float_reader<CharT> rd{};
 4155|   317k|        return read_impl<Range>(
 4156|   317k|            range, rd,
 4157|   317k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   317k|                return r.read_source(SCN_FWD(args)...);
 4159|   317k|            },
 4160|   317k|            value);
 4161|   317k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   317k|    {
  754|   317k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   317k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   317k|              cvref<T> obj = *get<T>(fn);
  745|   317k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   317k|                  obj(static_cast<decltype(args)>(args)...);
  747|   317k|              }
  748|   317k|              else {
  749|   317k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   317k|              }
  751|   317k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   317k|    {
  684|   317k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   317k|            return static_cast<T*>(s.m_cp);
  686|   317k|        }
  687|   317k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   317k|            return static_cast<T*>(s.m_p);
  689|   317k|        }
  690|   317k|        else {
  691|   317k|            return reinterpret_cast<T*>(s.m_fp);
  692|   317k|        }
  693|   317k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   317k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   317k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   317k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   317k|        {
  662|   317k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  2.19M|    {
 2879|  2.19M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  6.45M|    {
 2883|  6.45M|        return m_current;
 2884|  6.45M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  4.26M|    {
 2888|  4.26M|        return m_range.end();
 2889|  4.26M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  2.06M|    {
 2903|  2.06M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  2.06M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  2.06M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 2.06M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  2.06M|        }
 2909|  2.06M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.06M|    static_cast<    \
  |  |  929|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  2.06M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  2.19M|    {
 2893|  2.19M|        return ranges::subrange{begin(), end()};
 2894|  2.19M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  2.19M|    {
 6037|  2.19M|        const bool need_skipped_width =
 6038|  2.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.19M]
  |  Branch (6038:33): [True: 0, False: 2.19M]
  ------------------
 6039|  2.19M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.19M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.19M]
  ------------------
 6043|  2.19M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.19M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.19M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.19M, False: 0]
  |  Branch (6047:56): [True: 2.19M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.19M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.19M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  4.37M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 2.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  2.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  4.37M|                            make_eof_scan_error));
 6058|       |
 6059|  4.37M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 2.17M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  2.17M|            return result_type{it, 0};
 6067|  4.37M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.19M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  2.04M|    {
 6079|  2.04M|        const bool need_skipped_width =
 6080|  2.04M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 2.04M]
  |  Branch (6080:33): [True: 0, False: 2.04M]
  ------------------
 6081|  2.04M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  2.04M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 2.04M]
  ------------------
 6084|  2.04M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 2.04M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  2.04M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.04M, False: 0]
  ------------------
 6093|  2.04M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 2.04M]
  ------------------
 6094|  2.04M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  2.04M|        return result_type{rng.begin(), 0};
 6118|  2.04M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   697k|    {
 6193|   697k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   697k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   697k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   697k|            auto rd = make_reader<T, char_type>();
 6198|   697k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 697k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   697k|            return impl(rd, range, value);
 6203|   697k|        }
 6204|   697k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   697k|            auto rd = make_reader<T, char_type>();
 6206|   697k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   697k|                return unexpected(e);
 6208|   697k|            }
 6209|       |
 6210|   697k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   697k|                specs.width != 0) {
 6212|   697k|                return impl(rd, range, value);
 6213|   697k|            }
 6214|       |
 6215|   697k|            auto crange = get_as_contiguous(range);
 6216|   697k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   697k|            return ranges::next(range.begin(),
 6218|   697k|                                ranges::distance(crange.begin(), it));
 6219|   697k|        }
 6220|   697k|        else {
 6221|   697k|            SCN_EXPECT(false);
 6222|   697k|            SCN_UNREACHABLE;
 6223|   697k|        }
 6224|   697k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   697k|    {
 6124|   697k|        const bool need_skipped_width =
 6125|   697k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 697k]
  |  Branch (6125:33): [True: 0, False: 697k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   697k|        auto it = rng.begin();
 6129|   697k|        std::ptrdiff_t prefix_width = 0;
 6130|   697k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 697k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   697k|        else {
 6138|   697k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   697k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   697k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   697k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.05k, False: 691k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.05k|    }                                                  \
  |  |  |  | 3671|   697k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   691k|            std::tie(it, prefix_width) = prefix_result;
 6140|   691k|        }
 6141|   691k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   691k|        std::ptrdiff_t value_width = 0;
 6145|   691k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 691k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   691k|        else {
 6161|   691k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   691k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   691k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 37.9k, False: 653k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  37.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  37.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  37.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  37.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  37.9k|    }                                                  \
  |  | 3671|   691k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   653k|                                             specs, value, loc));
 6163|       |
 6164|   653k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 653k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   653k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   653k|        std::ptrdiff_t postfix_width = 0;
 6173|   653k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 648k, False: 5.03k]
  ------------------
 6174|   648k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   648k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   648k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   648k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   648k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   648k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   648k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   648k|                                 value_width));
 6178|   648k|            std::tie(it, postfix_width) = postfix_result;
 6179|   648k|        }
 6180|       |
 6181|   653k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   653k|                                                 value_width, postfix_width);
 6183|   653k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 653k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   653k|        return it;
 6188|   653k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   745k|    {
 6193|   745k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   745k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   745k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   745k|            auto rd = make_reader<T, char_type>();
 6198|   745k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 745k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   745k|            return impl(rd, range, value);
 6203|   745k|        }
 6204|   745k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   745k|            auto rd = make_reader<T, char_type>();
 6206|   745k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   745k|                return unexpected(e);
 6208|   745k|            }
 6209|       |
 6210|   745k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   745k|                specs.width != 0) {
 6212|   745k|                return impl(rd, range, value);
 6213|   745k|            }
 6214|       |
 6215|   745k|            auto crange = get_as_contiguous(range);
 6216|   745k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   745k|            return ranges::next(range.begin(),
 6218|   745k|                                ranges::distance(crange.begin(), it));
 6219|   745k|        }
 6220|   745k|        else {
 6221|   745k|            SCN_EXPECT(false);
 6222|   745k|            SCN_UNREACHABLE;
 6223|   745k|        }
 6224|   745k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   745k|    {
 6124|   745k|        const bool need_skipped_width =
 6125|   745k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 745k]
  |  Branch (6125:33): [True: 0, False: 745k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   745k|        auto it = rng.begin();
 6129|   745k|        std::ptrdiff_t prefix_width = 0;
 6130|   745k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 745k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   745k|        else {
 6138|   745k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   745k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   745k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   745k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.76k, False: 738k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.76k|    }                                                  \
  |  |  |  | 3671|   745k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   738k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   738k|            std::tie(it, prefix_width) = prefix_result;
 6140|   738k|        }
 6141|   738k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   738k|        std::ptrdiff_t value_width = 0;
 6145|   738k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 738k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   738k|        else {
 6161|   738k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   738k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   738k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 37.2k, False: 701k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  37.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  37.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  37.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  37.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  37.2k|    }                                                  \
  |  | 3671|   738k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   738k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   701k|                                             specs, value, loc));
 6163|       |
 6164|   701k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 701k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   701k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   701k|        std::ptrdiff_t postfix_width = 0;
 6173|   701k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 696k, False: 5.63k]
  ------------------
 6174|   696k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   696k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   696k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   696k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 696k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   696k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   696k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   696k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   696k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   696k|                                 value_width));
 6178|   696k|            std::tie(it, postfix_width) = postfix_result;
 6179|   696k|        }
 6180|       |
 6181|   701k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   701k|                                                 value_width, postfix_width);
 6183|   701k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 701k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   701k|        return it;
 6188|   701k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   753k|    {
 6193|   753k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   753k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   753k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   753k|            auto rd = make_reader<T, char_type>();
 6198|   753k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 753k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   753k|            return impl(rd, range, value);
 6203|   753k|        }
 6204|   753k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   753k|            auto rd = make_reader<T, char_type>();
 6206|   753k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   753k|                return unexpected(e);
 6208|   753k|            }
 6209|       |
 6210|   753k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   753k|                specs.width != 0) {
 6212|   753k|                return impl(rd, range, value);
 6213|   753k|            }
 6214|       |
 6215|   753k|            auto crange = get_as_contiguous(range);
 6216|   753k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   753k|            return ranges::next(range.begin(),
 6218|   753k|                                ranges::distance(crange.begin(), it));
 6219|   753k|        }
 6220|   753k|        else {
 6221|   753k|            SCN_EXPECT(false);
 6222|   753k|            SCN_UNREACHABLE;
 6223|   753k|        }
 6224|   753k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   753k|    {
 6124|   753k|        const bool need_skipped_width =
 6125|   753k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 753k]
  |  Branch (6125:33): [True: 0, False: 753k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   753k|        auto it = rng.begin();
 6129|   753k|        std::ptrdiff_t prefix_width = 0;
 6130|   753k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 753k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   753k|        else {
 6138|   753k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   753k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   753k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   753k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.15k, False: 745k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.15k|    }                                                  \
  |  |  |  | 3671|   753k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   745k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   745k|            std::tie(it, prefix_width) = prefix_result;
 6140|   745k|        }
 6141|   745k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   745k|        std::ptrdiff_t value_width = 0;
 6145|   745k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 745k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   745k|        else {
 6161|   745k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   745k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   745k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 36.8k, False: 709k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  36.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  36.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  36.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  36.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  36.8k|    }                                                  \
  |  | 3671|   745k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   745k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   709k|                                             specs, value, loc));
 6163|       |
 6164|   709k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 709k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   709k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   709k|        std::ptrdiff_t postfix_width = 0;
 6173|   709k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 703k, False: 5.98k]
  ------------------
 6174|   703k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   703k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   703k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   703k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 703k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   703k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   703k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   703k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   703k|                                 value_width));
 6178|   703k|            std::tie(it, postfix_width) = postfix_result;
 6179|   703k|        }
 6180|       |
 6181|   709k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   709k|                                                 value_width, postfix_width);
 6183|   709k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 709k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   709k|        return it;
 6188|   709k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   129k|{
 5795|   129k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255, False: 128k]
  |  |  ------------------
  ------------------
 5796|    255|        return unexpected(e);
 5797|    255|    }
 5798|       |
 5799|   128k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 128k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   128k|    return skip_classic_whitespace(range);
 5804|   128k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  42.6k|    {
 5871|  42.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  42.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  42.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  42.6k|            auto rd = make_reader<T, char_type>();
 5876|  42.6k|            return impl(rd, range, value);
 5877|  42.6k|        }
 5878|  42.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  42.6k|            auto rd = make_reader<T, char_type>();
 5880|  42.6k|            if (!is_segment_contiguous(range)) {
 5881|  42.6k|                return impl(rd, range, value);
 5882|  42.6k|            }
 5883|  42.6k|            auto crange = get_as_contiguous(range);
 5884|  42.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  42.6k|            return ranges::next(range.begin(),
 5886|  42.6k|                                ranges::distance(crange.begin(), it));
 5887|  42.6k|        }
 5888|  42.6k|        else {
 5889|  42.6k|            SCN_EXPECT(false);
 5890|  42.6k|            SCN_UNREACHABLE;
 5891|  42.6k|        }
 5892|  42.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  42.6k|    {
 5863|  42.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 231, False: 42.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    231|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    231|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    231|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    231|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    231|    }                                                  \
  |  |  |  | 3671|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  42.4k|                        .transform_error(make_eof_scan_error));
 5865|  42.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  42.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  42.4k|    {
 4152|  42.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  42.4k|        float_reader<CharT> rd{};
 4155|  42.4k|        return read_impl<Range>(
 4156|  42.4k|            range, rd,
 4157|  42.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  42.4k|            },
 4160|  42.4k|            value);
 4161|  42.4k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   256k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  42.4k|    {
  754|  42.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  42.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.4k|              cvref<T> obj = *get<T>(fn);
  745|  42.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  42.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.4k|              }
  748|  42.4k|              else {
  749|  42.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.4k|              }
  751|  42.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.4k|    {
  684|  42.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  42.4k|            return static_cast<T*>(s.m_cp);
  686|  42.4k|        }
  687|  42.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  42.4k|            return static_cast<T*>(s.m_p);
  689|  42.4k|        }
  690|  42.4k|        else {
  691|  42.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  42.4k|        }
  693|  42.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  42.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  42.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  42.4k|        {
  662|  42.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  42.9k|    {
 5871|  42.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  42.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  42.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  42.9k|            auto rd = make_reader<T, char_type>();
 5876|  42.9k|            return impl(rd, range, value);
 5877|  42.9k|        }
 5878|  42.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  42.9k|            auto rd = make_reader<T, char_type>();
 5880|  42.9k|            if (!is_segment_contiguous(range)) {
 5881|  42.9k|                return impl(rd, range, value);
 5882|  42.9k|            }
 5883|  42.9k|            auto crange = get_as_contiguous(range);
 5884|  42.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  42.9k|            return ranges::next(range.begin(),
 5886|  42.9k|                                ranges::distance(crange.begin(), it));
 5887|  42.9k|        }
 5888|  42.9k|        else {
 5889|  42.9k|            SCN_EXPECT(false);
 5890|  42.9k|            SCN_UNREACHABLE;
 5891|  42.9k|        }
 5892|  42.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  42.9k|    {
 5863|  42.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  42.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 258, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    258|    }                                                  \
  |  |  |  | 3671|  42.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  42.6k|                        .transform_error(make_eof_scan_error));
 5865|  42.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  42.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  42.6k|    {
 4152|  42.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  42.6k|        float_reader<CharT> rd{};
 4155|  42.6k|        return read_impl<Range>(
 4156|  42.6k|            range, rd,
 4157|  42.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  42.6k|            },
 4160|  42.6k|            value);
 4161|  42.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  42.6k|    {
  754|  42.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  42.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.6k|              cvref<T> obj = *get<T>(fn);
  745|  42.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  42.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.6k|              }
  748|  42.6k|              else {
  749|  42.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.6k|              }
  751|  42.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.6k|    {
  684|  42.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  42.6k|            return static_cast<T*>(s.m_cp);
  686|  42.6k|        }
  687|  42.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  42.6k|            return static_cast<T*>(s.m_p);
  689|  42.6k|        }
  690|  42.6k|        else {
  691|  42.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  42.6k|        }
  693|  42.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  42.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  42.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  42.6k|        {
  662|  42.6k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  43.4k|    {
 5871|  43.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  43.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  43.4k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  43.4k|            auto rd = make_reader<T, char_type>();
 5876|  43.4k|            return impl(rd, range, value);
 5877|  43.4k|        }
 5878|  43.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  43.4k|            auto rd = make_reader<T, char_type>();
 5880|  43.4k|            if (!is_segment_contiguous(range)) {
 5881|  43.4k|                return impl(rd, range, value);
 5882|  43.4k|            }
 5883|  43.4k|            auto crange = get_as_contiguous(range);
 5884|  43.4k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  43.4k|            return ranges::next(range.begin(),
 5886|  43.4k|                                ranges::distance(crange.begin(), it));
 5887|  43.4k|        }
 5888|  43.4k|        else {
 5889|  43.4k|            SCN_EXPECT(false);
 5890|  43.4k|            SCN_UNREACHABLE;
 5891|  43.4k|        }
 5892|  43.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  43.4k|    {
 5863|  43.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 267, False: 43.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    267|    }                                                  \
  |  |  |  | 3671|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  43.1k|                        .transform_error(make_eof_scan_error));
 5865|  43.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  43.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  43.1k|    {
 4152|  43.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  43.1k|        float_reader<CharT> rd{};
 4155|  43.1k|        return read_impl<Range>(
 4156|  43.1k|            range, rd,
 4157|  43.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  43.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  43.1k|            },
 4160|  43.1k|            value);
 4161|  43.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  43.1k|    {
  754|  43.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  43.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1k|              cvref<T> obj = *get<T>(fn);
  745|  43.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  43.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.1k|              }
  748|  43.1k|              else {
  749|  43.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1k|              }
  751|  43.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.1k|    {
  684|  43.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  43.1k|            return static_cast<T*>(s.m_cp);
  686|  43.1k|        }
  687|  43.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  43.1k|            return static_cast<T*>(s.m_p);
  689|  43.1k|        }
  690|  43.1k|        else {
  691|  43.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  43.1k|        }
  693|  43.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  43.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  43.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  43.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  43.1k|        {
  662|  43.1k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   398k|    {
 2879|   398k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   931k|    {
 2883|   931k|        return m_current;
 2884|   931k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   533k|    {
 2888|   533k|        return m_range.end();
 2889|   533k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   134k|    {
 2903|   134k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   134k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   134k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 134k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   134k|        }
 2909|   134k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   134k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   398k|    {
 2893|   398k|        return ranges::subrange{begin(), end()};
 2894|   398k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   398k|    {
 6037|   398k|        const bool need_skipped_width =
 6038|   398k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 398k]
  |  Branch (6038:33): [True: 0, False: 398k]
  ------------------
 6039|   398k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   398k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 398k]
  ------------------
 6043|   398k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 398k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   398k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 398k, False: 0]
  |  Branch (6047:56): [True: 398k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   398k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 398k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   794k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   398k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   398k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   398k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.25k, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.25k|    }                                                  \
  |  |  |  | 3671|   398k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   794k|                            make_eof_scan_error));
 6058|       |
 6059|   794k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 396k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   396k|            return result_type{it, 0};
 6067|   794k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   398k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   133k|    {
 6079|   133k|        const bool need_skipped_width =
 6080|   133k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 133k]
  |  Branch (6080:33): [True: 0, False: 133k]
  ------------------
 6081|   133k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   133k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 133k]
  ------------------
 6084|   133k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 133k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   133k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 133k, False: 0]
  ------------------
 6093|   133k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 133k]
  ------------------
 6094|   133k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   133k|        return result_type{rng.begin(), 0};
 6118|   133k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   132k|    {
 6193|   132k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   132k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   132k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   132k|            auto rd = make_reader<T, char_type>();
 6198|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   132k|            return impl(rd, range, value);
 6203|   132k|        }
 6204|   132k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   132k|            auto rd = make_reader<T, char_type>();
 6206|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   132k|                return unexpected(e);
 6208|   132k|            }
 6209|       |
 6210|   132k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   132k|                specs.width != 0) {
 6212|   132k|                return impl(rd, range, value);
 6213|   132k|            }
 6214|       |
 6215|   132k|            auto crange = get_as_contiguous(range);
 6216|   132k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   132k|            return ranges::next(range.begin(),
 6218|   132k|                                ranges::distance(crange.begin(), it));
 6219|   132k|        }
 6220|   132k|        else {
 6221|   132k|            SCN_EXPECT(false);
 6222|   132k|            SCN_UNREACHABLE;
 6223|   132k|        }
 6224|   132k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   132k|    {
 6124|   132k|        const bool need_skipped_width =
 6125|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 132k]
  |  Branch (6125:33): [True: 0, False: 132k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   132k|        auto it = rng.begin();
 6129|   132k|        std::ptrdiff_t prefix_width = 0;
 6130|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 132k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   132k|        else {
 6138|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 712, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    712|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   131k|            std::tie(it, prefix_width) = prefix_result;
 6140|   131k|        }
 6141|   131k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   131k|        std::ptrdiff_t value_width = 0;
 6145|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 131k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   131k|        else {
 6161|   131k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 44.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  44.3k|                                             specs, value, loc));
 6163|       |
 6164|  44.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 44.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  44.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  44.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  44.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 44.1k, False: 214]
  ------------------
 6174|  44.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  44.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  44.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  44.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  44.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  44.1k|                                 value_width));
 6178|  44.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  44.1k|        }
 6180|       |
 6181|  44.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  44.3k|                                                 value_width, postfix_width);
 6183|  44.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  44.3k|        return it;
 6188|  44.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   132k|    {
 6193|   132k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   132k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   132k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   132k|            auto rd = make_reader<T, char_type>();
 6198|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   132k|            return impl(rd, range, value);
 6203|   132k|        }
 6204|   132k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   132k|            auto rd = make_reader<T, char_type>();
 6206|   132k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   132k|                return unexpected(e);
 6208|   132k|            }
 6209|       |
 6210|   132k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   132k|                specs.width != 0) {
 6212|   132k|                return impl(rd, range, value);
 6213|   132k|            }
 6214|       |
 6215|   132k|            auto crange = get_as_contiguous(range);
 6216|   132k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   132k|            return ranges::next(range.begin(),
 6218|   132k|                                ranges::distance(crange.begin(), it));
 6219|   132k|        }
 6220|   132k|        else {
 6221|   132k|            SCN_EXPECT(false);
 6222|   132k|            SCN_UNREACHABLE;
 6223|   132k|        }
 6224|   132k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   132k|    {
 6124|   132k|        const bool need_skipped_width =
 6125|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 132k]
  |  Branch (6125:33): [True: 0, False: 132k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   132k|        auto it = rng.begin();
 6129|   132k|        std::ptrdiff_t prefix_width = 0;
 6130|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 132k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   132k|        else {
 6138|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 762, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    762|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   132k|            std::tie(it, prefix_width) = prefix_result;
 6140|   132k|        }
 6141|   132k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   132k|        std::ptrdiff_t value_width = 0;
 6145|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 132k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   132k|        else {
 6161|   132k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 44.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  44.7k|                                             specs, value, loc));
 6163|       |
 6164|  44.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 44.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  44.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  44.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  44.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 44.5k, False: 236]
  ------------------
 6174|  44.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  44.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  44.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  44.5k|                                 value_width));
 6178|  44.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  44.5k|        }
 6180|       |
 6181|  44.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  44.7k|                                                 value_width, postfix_width);
 6183|  44.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 44.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  44.7k|        return it;
 6188|  44.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   133k|    {
 6193|   133k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   133k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   133k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   133k|            auto rd = make_reader<T, char_type>();
 6198|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   133k|            return impl(rd, range, value);
 6203|   133k|        }
 6204|   133k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   133k|            auto rd = make_reader<T, char_type>();
 6206|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   133k|                return unexpected(e);
 6208|   133k|            }
 6209|       |
 6210|   133k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   133k|                specs.width != 0) {
 6212|   133k|                return impl(rd, range, value);
 6213|   133k|            }
 6214|       |
 6215|   133k|            auto crange = get_as_contiguous(range);
 6216|   133k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   133k|            return ranges::next(range.begin(),
 6218|   133k|                                ranges::distance(crange.begin(), it));
 6219|   133k|        }
 6220|   133k|        else {
 6221|   133k|            SCN_EXPECT(false);
 6222|   133k|            SCN_UNREACHABLE;
 6223|   133k|        }
 6224|   133k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   133k|    {
 6124|   133k|        const bool need_skipped_width =
 6125|   133k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 133k]
  |  Branch (6125:33): [True: 0, False: 133k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   133k|        auto it = rng.begin();
 6129|   133k|        std::ptrdiff_t prefix_width = 0;
 6130|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 133k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   133k|        else {
 6138|   133k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 778, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    778|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    778|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    778|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    778|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    778|    }                                                  \
  |  |  |  | 3671|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   132k|            std::tie(it, prefix_width) = prefix_result;
 6140|   132k|        }
 6141|   132k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   132k|        std::ptrdiff_t value_width = 0;
 6145|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 132k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   132k|        else {
 6161|   132k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 87.2k, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  87.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  87.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  87.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  87.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  87.2k|    }                                                  \
  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  45.4k|                                             specs, value, loc));
 6163|       |
 6164|  45.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 45.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  45.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  45.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  45.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 45.2k, False: 246]
  ------------------
 6174|  45.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  45.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  45.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  45.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  45.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  45.2k|                                 value_width));
 6178|  45.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  45.2k|        }
 6180|       |
 6181|  45.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  45.4k|                                                 value_width, postfix_width);
 6183|  45.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  45.4k|        return it;
 6188|  45.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   128k|{
 5795|   128k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 255, False: 128k]
  |  |  ------------------
  ------------------
 5796|    255|        return unexpected(e);
 5797|    255|    }
 5798|       |
 5799|   128k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 128k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   128k|    return skip_classic_whitespace(range);
 5804|   128k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  42.5k|    {
 5871|  42.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  42.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  42.5k|            auto rd = make_reader<T, char_type>();
 5876|  42.5k|            return impl(rd, range, value);
 5877|  42.5k|        }
 5878|  42.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  42.5k|            auto rd = make_reader<T, char_type>();
 5880|  42.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 42.5k, False: 0]
  ------------------
 5881|  42.5k|                return impl(rd, range, value);
 5882|  42.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  42.5k|        else {
 5889|  42.5k|            SCN_EXPECT(false);
 5890|  42.5k|            SCN_UNREACHABLE;
 5891|  42.5k|        }
 5892|  42.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  42.5k|    {
 5863|  42.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 231, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    231|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    231|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    231|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    231|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    231|    }                                                  \
  |  |  |  | 3671|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  42.3k|                        .transform_error(make_eof_scan_error));
 5865|  42.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  42.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  42.3k|    {
 4152|  42.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  42.3k|        float_reader<CharT> rd{};
 4155|  42.3k|        return read_impl<Range>(
 4156|  42.3k|            range, rd,
 4157|  42.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  42.3k|            },
 4160|  42.3k|            value);
 4161|  42.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  42.3k|    {
  754|  42.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  42.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.3k|              cvref<T> obj = *get<T>(fn);
  745|  42.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  42.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.3k|              }
  748|  42.3k|              else {
  749|  42.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.3k|              }
  751|  42.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.3k|    {
  684|  42.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  42.3k|            return static_cast<T*>(s.m_cp);
  686|  42.3k|        }
  687|  42.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  42.3k|            return static_cast<T*>(s.m_p);
  689|  42.3k|        }
  690|  42.3k|        else {
  691|  42.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  42.3k|        }
  693|  42.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  42.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  42.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  42.3k|        {
  662|  42.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  42.8k|    {
 5871|  42.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  42.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  42.8k|            auto rd = make_reader<T, char_type>();
 5876|  42.8k|            return impl(rd, range, value);
 5877|  42.8k|        }
 5878|  42.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  42.8k|            auto rd = make_reader<T, char_type>();
 5880|  42.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 42.8k, False: 0]
  ------------------
 5881|  42.8k|                return impl(rd, range, value);
 5882|  42.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  42.8k|        else {
 5889|  42.8k|            SCN_EXPECT(false);
 5890|  42.8k|            SCN_UNREACHABLE;
 5891|  42.8k|        }
 5892|  42.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  42.8k|    {
 5863|  42.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  42.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 258, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    258|    }                                                  \
  |  |  |  | 3671|  42.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  42.6k|                        .transform_error(make_eof_scan_error));
 5865|  42.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  42.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  42.6k|    {
 4152|  42.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  42.6k|        float_reader<CharT> rd{};
 4155|  42.6k|        return read_impl<Range>(
 4156|  42.6k|            range, rd,
 4157|  42.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  42.6k|            },
 4160|  42.6k|            value);
 4161|  42.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  42.6k|    {
  754|  42.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  42.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.6k|              cvref<T> obj = *get<T>(fn);
  745|  42.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  42.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.6k|              }
  748|  42.6k|              else {
  749|  42.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.6k|              }
  751|  42.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.6k|    {
  684|  42.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  42.6k|            return static_cast<T*>(s.m_cp);
  686|  42.6k|        }
  687|  42.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  42.6k|            return static_cast<T*>(s.m_p);
  689|  42.6k|        }
  690|  42.6k|        else {
  691|  42.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  42.6k|        }
  693|  42.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  42.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  42.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  42.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  42.6k|        {
  662|  42.6k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  43.3k|    {
 5871|  43.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  43.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  43.3k|            auto rd = make_reader<T, char_type>();
 5876|  43.3k|            return impl(rd, range, value);
 5877|  43.3k|        }
 5878|  43.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  43.3k|            auto rd = make_reader<T, char_type>();
 5880|  43.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 43.3k, False: 0]
  ------------------
 5881|  43.3k|                return impl(rd, range, value);
 5882|  43.3k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  43.3k|        else {
 5889|  43.3k|            SCN_EXPECT(false);
 5890|  43.3k|            SCN_UNREACHABLE;
 5891|  43.3k|        }
 5892|  43.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  43.3k|    {
 5863|  43.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  43.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  43.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  43.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 267, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    267|    }                                                  \
  |  |  |  | 3671|  43.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  43.0k|                        .transform_error(make_eof_scan_error));
 5865|  43.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  43.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  43.0k|    {
 4152|  43.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  43.0k|        float_reader<CharT> rd{};
 4155|  43.0k|        return read_impl<Range>(
 4156|  43.0k|            range, rd,
 4157|  43.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  43.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  43.0k|            },
 4160|  43.0k|            value);
 4161|  43.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  43.0k|    {
  754|  43.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  43.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.0k|              cvref<T> obj = *get<T>(fn);
  745|  43.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  43.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.0k|              }
  748|  43.0k|              else {
  749|  43.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.0k|              }
  751|  43.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.0k|    {
  684|  43.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  43.0k|            return static_cast<T*>(s.m_cp);
  686|  43.0k|        }
  687|  43.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  43.0k|            return static_cast<T*>(s.m_p);
  689|  43.0k|        }
  690|  43.0k|        else {
  691|  43.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  43.0k|        }
  693|  43.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  43.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  43.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  43.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  43.0k|        {
  662|  43.0k|        }

LLVMFuzzerTestOneInput:
   54|  4.40k|{
   55|  4.40k|    scn::fuzz::run(data, size);
   56|  4.40k|    return 0;
   57|  4.40k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  4.40k|{
   33|  4.40k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 4.40k]
  |  Branch (33:35): [True: 0, False: 4.40k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  4.40k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  4.40k|    const auto& f =
   40|  4.40k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  4.40k|    do_basic_run(sv, f);
   42|       |
   43|  4.40k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  4.40k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  4.40k|    do_basic_run(wsv_reinterpret, wf);
   46|  4.40k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 4.40k, False: 0]
  ------------------
   47|  4.40k|        do_basic_run(wsv_transcode, wf);
   48|  4.40k|    }
   49|  4.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.40k|{
   25|  4.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.40k|{
   25|  4.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  8.80k|{
   25|  8.80k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  8.80k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  8.80k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  8.80k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  8.80k|{
   25|  8.80k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  8.80k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  8.80k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  8.80k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.40k|{
   52|  4.40k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.40k|    string_buffer.resize(size);
   56|  4.40k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.40k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.40k|    const auto wsv_reinterpret_size =
   61|  4.40k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 79, False: 4.32k]
  ------------------
   62|  4.40k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.40k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.40k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.40k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.40k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.40k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.40k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  4.40k|{
  122|  4.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  4.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  4.40k|    buf.resize(sizeof...(Args));
  125|  4.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  4.40k|    return buf;
  127|  4.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  4.40k|{
  108|  4.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  4.40k|        return format_string_view_buffer;
  110|  4.40k|    }
  111|  4.40k|    else {
  112|  4.40k|        return wformat_string_view_buffer;
  113|  4.40k|    }
  114|  4.40k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.40k|{
  185|  4.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.40k|                                   format_strings);
  188|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   445k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   445k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   445k|            auto result = scn::scan<T>(
  139|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   445k|                scn::runtime_format(f));
  141|   445k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 419k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   419k|            it = result->begin();
  145|   419k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   445k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   445k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   445k|            auto result = scn::scan<T>(
  154|   445k|                global_locale,
  155|   445k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   445k|                scn::runtime_format(f));
  157|   445k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 419k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   419k|            it = result->begin();
  161|   419k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|  97.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  97.0k|            auto result = scn::scan_value<T>(
  170|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  97.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 92.6k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|  92.6k|            it = result->begin();
  175|  92.6k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   479k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   479k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   479k|            auto result = scn::scan<T>(
  139|   479k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   479k|                scn::runtime_format(f));
  141|   479k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 453k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   453k|            it = result->begin();
  145|   453k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   479k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   479k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   479k|            auto result = scn::scan<T>(
  154|   479k|                global_locale,
  155|   479k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   479k|                scn::runtime_format(f));
  157|   479k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 453k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   453k|            it = result->begin();
  161|   453k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|   107k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   107k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   107k|            auto result = scn::scan_value<T>(
  170|   107k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   107k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 102k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|   102k|            it = result->begin();
  175|   102k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   485k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   485k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   485k|            auto result = scn::scan<T>(
  139|   485k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   485k|                scn::runtime_format(f));
  141|   485k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 458k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   458k|            it = result->begin();
  145|   458k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   485k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   485k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   485k|            auto result = scn::scan<T>(
  154|   485k|                global_locale,
  155|   485k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   485k|                scn::runtime_format(f));
  157|   485k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 458k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   458k|            it = result->begin();
  161|   458k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|   108k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   108k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   108k|            auto result = scn::scan_value<T>(
  170|   108k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   108k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 104k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|   104k|            it = result->begin();
  175|   104k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   476k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   476k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   476k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   476k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   476k|            auto result = scn::scan<T>(
  139|   476k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   476k|                scn::runtime_format(f));
  141|   476k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 449k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   449k|            it = result->begin();
  145|   449k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   476k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   476k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   476k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   476k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   476k|            auto result = scn::scan<T>(
  154|   476k|                global_locale,
  155|   476k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   476k|                scn::runtime_format(f));
  157|   476k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 449k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   449k|            it = result->begin();
  161|   449k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|  96.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  96.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  96.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  96.1k|            auto result = scn::scan_value<T>(
  170|  96.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  96.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 91.7k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|  91.7k|            it = result->begin();
  175|  91.7k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   513k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   513k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   513k|            auto result = scn::scan<T>(
  139|   513k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   513k|                scn::runtime_format(f));
  141|   513k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 486k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   486k|            it = result->begin();
  145|   486k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   513k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   513k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   513k|            auto result = scn::scan<T>(
  154|   513k|                global_locale,
  155|   513k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   513k|                scn::runtime_format(f));
  157|   513k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 486k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   486k|            it = result->begin();
  161|   486k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|   105k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   105k|            auto result = scn::scan_value<T>(
  170|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   105k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 101k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|   101k|            it = result->begin();
  175|   101k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.40k|{
  133|       |    // Regular scan
  134|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.4k, False: 4.40k]
  ------------------
  135|  26.4k|        auto it = scn::ranges::begin(source);
  136|   518k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   518k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   518k|            auto result = scn::scan<T>(
  139|   518k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   518k|                scn::runtime_format(f));
  141|   518k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.4k, False: 491k]
  ------------------
  142|  26.4k|                break;
  143|  26.4k|            }
  144|   491k|            it = result->begin();
  145|   491k|        }
  146|  26.4k|    }
  147|       |
  148|       |    // scan localized
  149|  26.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.4k, False: 4.40k]
  ------------------
  150|  26.4k|        auto it = scn::ranges::begin(source);
  151|   518k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   518k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   518k|            auto result = scn::scan<T>(
  154|   518k|                global_locale,
  155|   518k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   518k|                scn::runtime_format(f));
  157|   518k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.4k, False: 491k]
  ------------------
  158|  26.4k|                break;
  159|  26.4k|            }
  160|   491k|            it = result->begin();
  161|   491k|        }
  162|  26.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.40k|    {
  166|  4.40k|        auto it = scn::ranges::begin(source);
  167|   106k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   106k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   106k|            auto result = scn::scan_value<T>(
  170|   106k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   106k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.40k, False: 102k]
  ------------------
  172|  4.40k|                break;
  173|  4.40k|            }
  174|   102k|            it = result->begin();
  175|   102k|        }
  176|  4.40k|    }
  177|  4.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  4.40k|{
   90|  4.40k|    using char_type = ranges::range_value_t<Source>;
   91|  4.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.40k|    deque.clear();
   93|  4.40k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.40k|              std::back_inserter(deque));
   95|  4.40k|    return deque;
   96|  4.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  4.40k|{
   79|  4.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.40k|        return noncontiguous_buffer;
   81|  4.40k|    }
   82|  4.40k|    else {
   83|  4.40k|        return wnoncontiguous_buffer;
   84|  4.40k|    }
   85|  4.40k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  4.40k|{
  122|  4.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  4.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  4.40k|    buf.resize(sizeof...(Args));
  125|  4.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  4.40k|    return buf;
  127|  4.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  4.40k|{
  108|  4.40k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  4.40k|        return format_string_view_buffer;
  110|  4.40k|    }
  111|  4.40k|    else {
  112|  4.40k|        return wformat_string_view_buffer;
  113|  4.40k|    }
  114|  4.40k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  8.80k|{
  185|  8.80k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  8.80k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  8.80k|                                   format_strings);
  188|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  80.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  80.3k|            auto result = scn::scan<T>(
  139|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  80.3k|                scn::runtime_format(f));
  141|  80.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 27.5k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  80.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  80.3k|            auto result = scn::scan<T>(
  154|  80.3k|                global_locale,
  155|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  80.3k|                scn::runtime_format(f));
  157|  80.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 27.5k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.2k|            auto result = scn::scan_value<T>(
  170|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.42k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.42k|            it = result->begin();
  175|  5.42k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  80.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  80.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  80.6k|            auto result = scn::scan<T>(
  139|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  80.6k|                scn::runtime_format(f));
  141|  80.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 27.8k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  27.8k|            it = result->begin();
  145|  27.8k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  80.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  80.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  80.6k|            auto result = scn::scan<T>(
  154|  80.6k|                global_locale,
  155|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  80.6k|                scn::runtime_format(f));
  157|  80.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 27.8k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  27.8k|            it = result->begin();
  161|  27.8k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.3k|            auto result = scn::scan_value<T>(
  170|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.51k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.51k|            it = result->begin();
  175|  5.51k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  81.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  81.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  81.2k|            auto result = scn::scan<T>(
  139|  81.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  81.2k|                scn::runtime_format(f));
  141|  81.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 28.4k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  28.4k|            it = result->begin();
  145|  28.4k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  81.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  81.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  81.2k|            auto result = scn::scan<T>(
  154|  81.2k|                global_locale,
  155|  81.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  81.2k|                scn::runtime_format(f));
  157|  81.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 28.4k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  28.4k|            it = result->begin();
  161|  28.4k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.4k|            auto result = scn::scan_value<T>(
  170|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.67k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.67k|            it = result->begin();
  175|  5.67k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  80.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  80.3k|            auto result = scn::scan<T>(
  139|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  80.3k|                scn::runtime_format(f));
  141|  80.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 27.5k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  80.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  80.3k|            auto result = scn::scan<T>(
  154|  80.3k|                global_locale,
  155|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  80.3k|                scn::runtime_format(f));
  157|  80.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 27.5k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.1k|            auto result = scn::scan_value<T>(
  170|  14.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.39k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.39k|            it = result->begin();
  175|  5.39k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  80.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  80.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  80.6k|            auto result = scn::scan<T>(
  139|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  80.6k|                scn::runtime_format(f));
  141|  80.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 27.8k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  27.8k|            it = result->begin();
  145|  27.8k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  80.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  80.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  80.6k|            auto result = scn::scan<T>(
  154|  80.6k|                global_locale,
  155|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  80.6k|                scn::runtime_format(f));
  157|  80.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 27.8k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  27.8k|            it = result->begin();
  161|  27.8k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.2k|            auto result = scn::scan_value<T>(
  170|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.48k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.48k|            it = result->begin();
  175|  5.48k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  8.80k|{
  133|       |    // Regular scan
  134|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 52.8k, False: 8.80k]
  ------------------
  135|  52.8k|        auto it = scn::ranges::begin(source);
  136|  81.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  81.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  81.1k|            auto result = scn::scan<T>(
  139|  81.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  81.1k|                scn::runtime_format(f));
  141|  81.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 52.8k, False: 28.3k]
  ------------------
  142|  52.8k|                break;
  143|  52.8k|            }
  144|  28.3k|            it = result->begin();
  145|  28.3k|        }
  146|  52.8k|    }
  147|       |
  148|       |    // scan localized
  149|  52.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 52.8k, False: 8.80k]
  ------------------
  150|  52.8k|        auto it = scn::ranges::begin(source);
  151|  81.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  81.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  81.1k|            auto result = scn::scan<T>(
  154|  81.1k|                global_locale,
  155|  81.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  81.1k|                scn::runtime_format(f));
  157|  81.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 52.8k, False: 28.3k]
  ------------------
  158|  52.8k|                break;
  159|  52.8k|            }
  160|  28.3k|            it = result->begin();
  161|  28.3k|        }
  162|  52.8k|    }
  163|       |
  164|       |    // scan_value
  165|  8.80k|    {
  166|  8.80k|        auto it = scn::ranges::begin(source);
  167|  14.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.4k|            auto result = scn::scan_value<T>(
  170|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 8.80k, False: 5.64k]
  ------------------
  172|  8.80k|                break;
  173|  8.80k|            }
  174|  5.64k|            it = result->begin();
  175|  5.64k|        }
  176|  8.80k|    }
  177|  8.80k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  8.80k|{
   90|  8.80k|    using char_type = ranges::range_value_t<Source>;
   91|  8.80k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  8.80k|    deque.clear();
   93|  8.80k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  8.80k|              std::back_inserter(deque));
   95|  8.80k|    return deque;
   96|  8.80k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  8.80k|{
   79|  8.80k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  8.80k|        return noncontiguous_buffer;
   81|  8.80k|    }
   82|  8.80k|    else {
   83|  8.80k|        return wnoncontiguous_buffer;
   84|  8.80k|    }
   85|  8.80k|}

