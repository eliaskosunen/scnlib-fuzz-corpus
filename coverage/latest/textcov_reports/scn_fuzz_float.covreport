_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.40M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.40M|  chars_format const fmt = options.format;
  277|  2.40M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.40M|  parsed_number_string_t<UC> answer;
  280|  2.40M|  answer.valid = false;
  281|  2.40M|  answer.too_many_digits = false;
  282|  2.40M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.40M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.40M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.40M|  UC const * const start_digits = p;
  303|       |
  304|  2.40M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  14.1M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 12.9M, False: 1.17M]
  |  Branch (306:25): [True: 11.7M, False: 1.22M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  11.7M|    i = 10 * i +
  310|  11.7M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  11.7M|    ++p;
  312|  11.7M|  }
  313|  2.40M|  UC const * const end_of_integer_part = p;
  314|  2.40M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.40M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.40M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.40M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.40M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.40M|  int64_t exponent = 0;
  324|  2.40M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.22M, False: 1.17M]
  |  Branch (324:49): [True: 412k, False: 815k]
  ------------------
  325|  2.40M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 412k, False: 1.99M]
  ------------------
  326|   412k|    ++p;
  327|   412k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   412k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.66M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.41M, False: 245k]
  |  Branch (332:27): [True: 1.25M, False: 167k]
  ------------------
  333|  1.25M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.25M|      ++p;
  335|  1.25M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.25M|    }
  337|   412k|    exponent = before - p;
  338|   412k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   412k|    digit_count -= exponent;
  340|   412k|  }
  341|  2.40M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.40M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.40M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.40M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.40M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.40M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.40M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.10M, False: 298k]
  ------------------
  352|  2.40M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 982k, False: 1.12M]
  ------------------
  353|  2.40M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 249k, False: 732k]
  |  Branch (353:29): [True: 88.5k, False: 644k]
  ------------------
  354|  2.40M|       ||
  355|  2.40M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  2.06M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.06M]
  ------------------
  356|  2.06M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.06M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   338k|    UC const * location_of_e = p;
  359|   338k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 249k, False: 88.5k]
  |  Branch (359:28): [True: 88.5k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   338k|      ++p;
  361|   338k|    }
  362|   338k|    bool neg_exp = false;
  363|   338k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 338k, False: 215]
  |  Branch (363:24): [True: 23.9k, False: 314k]
  ------------------
  364|  23.9k|      neg_exp = true;
  365|  23.9k|      ++p;
  366|   314k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 314k, False: 215]
  |  Branch (366:31): [True: 60.2k, False: 253k]
  ------------------
  367|  60.2k|      ++p;
  368|  60.2k|    }
  369|   338k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 338k]
  |  Branch (369:24): [True: 1.00k, False: 337k]
  ------------------
  370|  1.25k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.25k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.25k|      p = location_of_e;
  376|   337k|    } else {
  377|  1.09M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 870k, False: 228k]
  |  Branch (377:29): [True: 761k, False: 109k]
  ------------------
  378|   761k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   761k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 713k, False: 48.6k]
  ------------------
  380|   713k|          exp_number = 10 * exp_number + digit;
  381|   713k|        }
  382|   761k|        ++p;
  383|   761k|      }
  384|   337k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 23.8k, False: 313k]
  ------------------
  385|   337k|      exponent += exp_number;
  386|   337k|    }
  387|  2.06M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.06M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.76M, False: 298k]
  |  Branch (389:44): [True: 0, False: 1.76M]
  ------------------
  390|  2.06M|  }
  391|  2.40M|  answer.lastmatch = p;
  392|  2.40M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.40M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 381k, False: 2.02M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   381k|    UC const * start = start_digits;
  405|  3.35M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.34M, False: 15.0k]
  |  Branch (405:32): [True: 2.91M, False: 431k]
  |  Branch (405:53): [True: 65.3k, False: 366k]
  ------------------
  406|  2.97M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.91M, False: 65.3k]
  ------------------
  407|  2.97M|      start++;
  408|  2.97M|    }
  409|       |
  410|   381k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 328k, False: 53.1k]
  ------------------
  411|   328k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   328k|      i = 0;
  416|   328k|      p = answer.integer.ptr;
  417|   328k|      UC const* int_end = p + answer.integer.len();
  418|   328k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.44M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.34M, False: 100k]
  |  Branch (419:54): [True: 4.11M, False: 227k]
  ------------------
  420|  4.11M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.11M|        ++p;
  422|  4.11M|      }
  423|   328k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 100k, False: 227k]
  ------------------
  424|   100k|        exponent = end_of_integer_part - p + exp_number;
  425|   100k|      }
  426|   227k|      else { // We have a value with a fractional component.
  427|   227k|        p = answer.fraction.ptr;
  428|   227k|        UC const* frac_end = p + answer.fraction.len();
  429|  4.15M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.92M, False: 227k]
  |  Branch (429:56): [True: 3.92M, False: 0]
  ------------------
  430|  3.92M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.92M|          ++p;
  432|  3.92M|        }
  433|   227k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   227k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   328k|    }
  437|   381k|  }
  438|  2.40M|  answer.exponent = exponent;
  439|  2.40M|  answer.mantissa = i;
  440|  2.40M|  return answer;
  441|  2.40M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  15.5M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  15.5M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 383k, False: 15.2M]
  |  Branch (36:27): [True: 1.12M, False: 14.0M]
  ------------------
   37|  15.5M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   412k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.66M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.39M, False: 268k]
  |  Branch (249:43): [True: 1.25M, False: 144k]
  ------------------
  250|  1.25M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.25M|    p += 8;
  252|  1.25M|  }
  253|   412k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.39M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.39M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.39M|     0x8080808080808080));
  172|  1.39M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  3.14M|uint64_t read8_to_u64(const UC *chars) {
   54|  3.14M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  3.14M|  uint64_t val;
   63|  3.14M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  3.14M|  return val;
   69|  3.14M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.74M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.74M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.74M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.74M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.74M|  val -= 0x3030303030303030;
  151|  1.74M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.74M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.74M|  return uint32_t(val);
  154|  1.74M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   494k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   494k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   494k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   494k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   494k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   114k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   114k|  chars_format const fmt = options.format;
  277|   114k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   114k|  parsed_number_string_t<UC> answer;
  280|   114k|  answer.valid = false;
  281|   114k|  answer.too_many_digits = false;
  282|   114k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   114k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 114k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   114k|  UC const * const start_digits = p;
  303|       |
  304|   114k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   236k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 156k, False: 80.7k]
  |  Branch (306:25): [True: 121k, False: 34.0k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   121k|    i = 10 * i +
  310|   121k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   121k|    ++p;
  312|   121k|  }
  313|   114k|  UC const * const end_of_integer_part = p;
  314|   114k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   114k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   114k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   114k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 114k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   114k|  int64_t exponent = 0;
  324|   114k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 34.0k, False: 80.7k]
  |  Branch (324:49): [True: 108, False: 33.9k]
  ------------------
  325|   114k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 108, False: 114k]
  ------------------
  326|    108|    ++p;
  327|    108|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    108|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|    108|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 30, False: 78]
  |  Branch (332:27): [True: 0, False: 30]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|    108|    exponent = before - p;
  338|    108|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    108|    digit_count -= exponent;
  340|    108|  }
  341|   114k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   114k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 114k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   114k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 114k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   114k|  int64_t exp_number = 0;            // explicit exponential part
  351|   114k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 89.3k, False: 25.3k]
  ------------------
  352|   114k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 33.9k, False: 55.4k]
  ------------------
  353|   114k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 33.8k]
  |  Branch (353:29): [True: 3.87k, False: 30.0k]
  ------------------
  354|   114k|       ||
  355|   114k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   110k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 110k]
  ------------------
  356|   110k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   110k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  3.93k|    UC const * location_of_e = p;
  359|  3.93k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 3.87k]
  |  Branch (359:28): [True: 3.87k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  3.93k|      ++p;
  361|  3.93k|    }
  362|  3.93k|    bool neg_exp = false;
  363|  3.93k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 3.92k, False: 10]
  |  Branch (363:24): [True: 564, False: 3.36k]
  ------------------
  364|    564|      neg_exp = true;
  365|    564|      ++p;
  366|  3.37k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 3.36k, False: 10]
  |  Branch (366:31): [True: 38, False: 3.32k]
  ------------------
  367|     38|      ++p;
  368|     38|    }
  369|  3.93k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 3.92k]
  |  Branch (369:24): [True: 500, False: 3.42k]
  ------------------
  370|    510|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 510]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    510|      p = location_of_e;
  376|  3.42k|    } else {
  377|  10.6k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 8.15k, False: 2.47k]
  |  Branch (377:29): [True: 7.20k, False: 950]
  ------------------
  378|  7.20k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  7.20k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 7.20k, False: 0]
  ------------------
  380|  7.20k|          exp_number = 10 * exp_number + digit;
  381|  7.20k|        }
  382|  7.20k|        ++p;
  383|  7.20k|      }
  384|  3.42k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 544, False: 2.88k]
  ------------------
  385|  3.42k|      exponent += exp_number;
  386|  3.42k|    }
  387|   110k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   110k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 85.4k, False: 25.3k]
  |  Branch (389:44): [True: 0, False: 85.4k]
  ------------------
  390|   110k|  }
  391|   114k|  answer.lastmatch = p;
  392|   114k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   114k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 114k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|   114k|  answer.exponent = exponent;
  439|   114k|  answer.mantissa = i;
  440|   114k|  return answer;
  441|   114k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   168k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   168k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 34.9k, False: 133k]
  |  Branch (36:27): [True: 538, False: 132k]
  ------------------
   37|   168k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    108|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    108|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    108|    return;
  240|    108|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|   111k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   243k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   387k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   387k|    return small_mul(vec, y);
  565|   387k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   592k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   592k|  limb carry = 0;
  284|  2.74M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.15M, False: 592k]
  ------------------
  285|  2.15M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.15M|  }
  287|   592k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 373k, False: 218k]
  ------------------
  288|   373k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   373k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
  289|   373k|  }
  290|   592k|  return true;
  291|   592k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.95M|  constexpr size_t len() const noexcept {
   77|  4.95M|    return length;
   78|  4.95M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.15M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.15M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.15M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.15M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.15M|  carry = limb(z >> limb_bits);
  235|  2.15M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.15M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.74M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.74M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.74M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.74M|    return data[index];
   60|  5.74M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   513k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   513k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 513k, False: 0]
  ------------------
   93|   513k|      push_unchecked(value);
   94|   513k|      return true;
   95|   513k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   513k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   619k|  constexpr size_t capacity() const noexcept {
   83|   619k|    return size;
   84|   619k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   609k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   609k|    data[length] = value;
   88|   609k|    length++;
   89|   609k|  }
_ZN10fast_float6bigint3addEm:
  567|   387k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   387k|    return small_add(vec, y);
  569|   387k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   387k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   387k|  return small_add_from(vec, y, 0);
  277|   387k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   387k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   387k|  size_t index = start;
  259|   387k|  limb carry = y;
  260|   387k|  bool overflow;
  261|   575k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 299k, False: 276k]
  |  Branch (261:24): [True: 188k, False: 111k]
  ------------------
  262|   188k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   188k|    carry = limb(overflow);
  264|   188k|    index += 1;
  265|   188k|  }
  266|   387k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 111k, False: 276k]
  ------------------
  267|   111k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   111k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
  268|   111k|  }
  269|   387k|  return true;
  270|   387k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   592k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   592k|  limb z;
  211|       |// gcc and clang
  212|   592k|#if defined(__has_builtin)
  213|   592k|  #if __has_builtin(__builtin_add_overflow)
  214|   592k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   592k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   592k|      return z;
  217|   592k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   592k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.3k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.3k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  15.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.3k]
  |  |  ------------------
  ------------------
  611|  15.3k|    return pow2(exp);
  612|  15.3k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|   111k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|   111k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|   111k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   120k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 9.03k, False: 111k]
  ------------------
  582|  9.03k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  9.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.03k]
  |  |  ------------------
  ------------------
  583|  9.03k|      exp -= large_step;
  584|  9.03k|    }
  585|   111k|#ifdef FASTFLOAT_64BIT_LIMB
  586|   111k|    uint32_t small_step = 27;
  587|   111k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   179k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 68.3k, False: 111k]
  ------------------
  593|  68.3k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  68.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
  594|  68.3k|      exp -= small_step;
  595|  68.3k|    }
  596|   111k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 91.0k, False: 20.1k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  91.0k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  91.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 91.0k]
  |  |  ------------------
  ------------------
  601|  91.0k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  91.0k|      );
  603|  91.0k|    }
  604|       |
  605|   111k|    return true;
  606|   111k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  9.03k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  9.03k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 9.03k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  9.03k|  } else {
  368|  9.03k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  9.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.03k]
  |  |  ------------------
  ------------------
  369|  9.03k|  }
  370|  9.03k|  return true;
  371|  9.03k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  9.03k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  9.03k|  limb_span xs = limb_span(x.data, x.len());
  337|  9.03k|  stackvec<size> z(xs);
  338|  9.03k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  9.03k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 9.03k, False: 0]
  ------------------
  341|  9.03k|    limb y0 = y[0];
  342|  9.03k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  9.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.03k]
  |  |  ------------------
  ------------------
  343|  45.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 36.1k, False: 9.03k]
  ------------------
  344|  36.1k|      limb yi = y[index];
  345|  36.1k|      stackvec<size> zi;
  346|  36.1k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 36.1k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  36.1k|        zi.set_len(0);
  349|  36.1k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  36.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
  350|  36.1k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  36.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
  351|  36.1k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  36.1k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  36.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
  353|  36.1k|      }
  354|  36.1k|    }
  355|  9.03k|  }
  356|       |
  357|  9.03k|  x.normalize();
  358|  9.03k|  return true;
  359|  9.03k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  9.03k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  9.03k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  9.03k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  9.03k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   141k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   141k|    length = uint16_t(len);
   75|   141k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  45.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  45.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 45.1k, False: 0]
  ------------------
  108|  45.1k|      extend_unchecked(s);
  109|  45.1k|      return true;
  110|  45.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  45.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  45.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  45.1k|    limb* ptr = data + length;
  102|  45.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  45.1k|    set_len(len() + s.len());
  104|  45.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  36.1k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  36.1k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 36.1k]
  |  Branch (300:26): [True: 35.7k, False: 396]
  ------------------
  301|  35.7k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  35.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
  302|  35.7k|  }
  303|       |
  304|  36.1k|  bool carry = false;
  305|   330k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 293k, False: 36.1k]
  ------------------
  306|   293k|    limb xi = x[index + start];
  307|   293k|    limb yi = y[index];
  308|   293k|    bool c1 = false;
  309|   293k|    bool c2 = false;
  310|   293k|    xi = scalar_add(xi, yi, c1);
  311|   293k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 109k, False: 183k]
  ------------------
  312|   109k|      xi = scalar_add(xi, 1, c2);
  313|   109k|    }
  314|   293k|    x[index + start] = xi;
  315|   293k|    carry = c1 | c2;
  316|   293k|  }
  317|       |
  318|       |  // handle overflow
  319|  36.1k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 36.1k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  36.1k|  return true;
  323|  36.1k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  35.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  35.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 35.7k]
  ------------------
  132|      0|      return false;
  133|  35.7k|    } else {
  134|  35.7k|      resize_unchecked(new_len, value);
  135|  35.7k|      return true;
  136|  35.7k|    }
  137|  35.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  35.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  35.7k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 35.7k, False: 0]
  ------------------
  120|  35.7k|      size_t count = new_len - len();
  121|  35.7k|      limb* first = data + len();
  122|  35.7k|      limb* last = first + count;
  123|  35.7k|      ::std::fill(first, last, value);
  124|  35.7k|      set_len(new_len);
  125|  35.7k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  35.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|   104k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|   104k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 104k, False: 0]
  |  Branch (152:25): [True: 0, False: 104k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|   104k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   149k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   149k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   149k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   149k|    size_t rindex = length - index - 1;
   69|   149k|    return data[rindex];
   70|   149k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|   111k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|   111k|    return shl(exp);
  574|   111k|  }
_ZN10fast_float6bigint3shlEm:
  530|   111k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|   111k|    size_t rem = n % limb_bits;
  532|   111k|    size_t div = n / limb_bits;
  533|   111k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 95.5k, False: 15.5k]
  ------------------
  534|  95.5k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  95.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 95.5k]
  |  |  ------------------
  ------------------
  535|  95.5k|    }
  536|   111k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 24.4k, False: 86.6k]
  ------------------
  537|  24.4k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  24.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 24.4k]
  |  |  ------------------
  ------------------
  538|  24.4k|    }
  539|   111k|    return true;
  540|   111k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  95.5k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  95.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  95.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  95.5k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  95.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  95.5k|    size_t shl = n;
  493|  95.5k|    size_t shr = limb_bits - shl;
  494|  95.5k|    limb prev = 0;
  495|   335k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 239k, False: 95.5k]
  ------------------
  496|   239k|      limb xi = vec[index];
  497|   239k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   239k|      prev = xi;
  499|   239k|    }
  500|       |
  501|  95.5k|    limb carry = prev >> shr;
  502|  95.5k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 28.9k, False: 66.6k]
  ------------------
  503|  28.9k|      return vec.try_push(carry);
  504|  28.9k|    }
  505|  66.6k|    return true;
  506|  95.5k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  24.4k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  24.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  24.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  24.4k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 24.4k]
  ------------------
  512|      0|      return false;
  513|  24.4k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 24.4k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  24.4k|      limb* dst = vec.data + n;
  516|  24.4k|      const limb* src = vec.data;
  517|  24.4k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  24.4k|      limb* first = vec.data;
  520|  24.4k|      limb* last = first + n;
  521|  24.4k|      ::std::fill(first, last, 0);
  522|  24.4k|      vec.set_len(n + vec.len());
  523|  24.4k|      return true;
  524|  24.4k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  24.4k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  39.7k|  constexpr bool is_empty() const noexcept {
   80|  39.7k|    return length == 0;
   81|  39.7k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.3k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.3k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.3k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.3k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.3k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 2.05k, False: 13.2k]
  ------------------
  435|  2.05k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.2k|    } else {
  437|  13.2k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.2k|      truncated |= vec.nonzero(2);
  439|  13.2k|      return result;
  440|  13.2k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.3k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  2.05k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  2.05k|  truncated = false;
  167|  2.05k|  int shl = leading_zeroes(r0);
  168|  2.05k|  return r0 << shl;
  169|  2.05k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.2k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.2k|  int shl = leading_zeroes(r0);
  174|  13.2k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.2k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.2k|  } else {
  178|  13.2k|    int shr = 64 - shl;
  179|  13.2k|    truncated = (r1 << shl) != 0;
  180|  13.2k|    return (r0 << shl) | (r1 >> shr);
  181|  13.2k|  }
  182|  13.2k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.2k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.3k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 849, False: 12.4k]
  ------------------
  143|    849|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 795, False: 54]
  ------------------
  144|    795|        return true;
  145|    795|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.4k|    return false;
  149|  13.2k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.3k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.3k|    int lz = ctlz();
  560|  15.3k|    return int(limb_bits * vec.len()) - lz;
  561|  15.3k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.3k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.3k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.3k]
  ------------------
  545|      0|      return 0;
  546|  15.3k|    } else {
  547|  15.3k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.3k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.3k|    }
  555|  15.3k|  }
_ZN10fast_float6bigintC2Em:
  418|  95.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  95.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  95.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  95.9k|    vec.normalize();
  426|  95.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  95.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  95.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 95.9k]
  ------------------
  464|      0|      return 1;
  465|  95.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 95.9k]
  ------------------
  466|      0|      return -1;
  467|  95.9k|    } else {
  468|   188k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 178k, False: 10.5k]
  ------------------
  469|   178k|        limb xi = vec[index - 1];
  470|   178k|        limb yi = other.vec[index - 1];
  471|   178k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.5k, False: 165k]
  ------------------
  472|  12.5k|          return 1;
  473|   165k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 72.8k, False: 92.6k]
  ------------------
  474|  72.8k|          return -1;
  475|  72.8k|        }
  476|   178k|      }
  477|  10.5k|      return 0;
  478|  95.9k|    }
  479|  95.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   356k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   356k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   356k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   356k|    return data[index];
   64|   356k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   483k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   483k|  adjusted_mantissa answer;
   96|   483k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 13.4k, False: 470k]
  |  Branch (96:19): [True: 2.11k, False: 468k]
  ------------------
   97|  15.5k|    answer.power2 = 0;
   98|  15.5k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  15.5k|    return answer;
  101|  15.5k|  }
  102|   468k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 9.91k, False: 458k]
  ------------------
  103|       |    // we want to get infinity:
  104|  9.91k|    answer.power2 = binary::infinite_power();
  105|  9.91k|    answer.mantissa = 0;
  106|  9.91k|    return answer;
  107|  9.91k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   458k|  int lz = leading_zeroes(w);
  112|   458k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   458k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   458k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   458k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   458k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   458k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 955, False: 457k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    955|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 54, False: 901]
  ------------------
  137|     54|      answer.power2 = 0;
  138|     54|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     54|      return answer;
  141|     54|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    901|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    901|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    901|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    901|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 901, False: 0]
  ------------------
  156|    901|    return answer;
  157|    955|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   457k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 174k, False: 283k]
  |  Branch (162:30): [True: 172k, False: 1.14k]
  |  Branch (162:77): [True: 155k, False: 17.4k]
  ------------------
  163|   457k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 27.7k, False: 127k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  27.7k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.2k, False: 14.4k]
  ------------------
  168|  13.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.2k|    }
  170|  27.7k|  }
  171|       |
  172|   457k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   457k|  answer.mantissa >>= 1;
  174|   457k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 18.1k, False: 439k]
  ------------------
  175|  18.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  18.1k|    answer.power2++; // undo previous addition
  177|  18.1k|  }
  178|       |
  179|   457k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   457k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.96k, False: 454k]
  ------------------
  181|  2.96k|    answer.power2 = binary::infinite_power();
  182|  2.96k|    answer.mantissa = 0;
  183|  2.96k|  }
  184|   457k|  return answer;
  185|   458k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   513k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   513k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   513k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   513k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   513k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   513k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   513k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 89.6k, False: 424k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  89.6k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  89.6k|    firstproduct.low += secondproduct.high;
   35|  89.6k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 73.9k, False: 15.7k]
  ------------------
   36|  73.9k|      firstproduct.high++;
   37|  73.9k|    }
   38|  89.6k|  }
   39|   513k|  return firstproduct;
   40|   513k|}
_ZN10fast_float6detail5powerEi:
   58|  1.00M|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  1.00M|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  1.00M|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  55.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  55.4k|  int lz = leading_zeroes(w);
   82|  55.4k|  w <<= lz;
   83|  55.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  55.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  55.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  55.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  55.4k|  int hilz = int(w >> 63) ^ 1;
   69|  55.4k|  adjusted_mantissa answer;
   70|  55.4k|  answer.mantissa = w << hilz;
   71|  55.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  55.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  55.4k|  return answer;
   74|  55.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   453k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   453k|  adjusted_mantissa answer;
   96|   453k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.12k, False: 444k]
  |  Branch (96:19): [True: 442, False: 444k]
  ------------------
   97|  8.56k|    answer.power2 = 0;
   98|  8.56k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  8.56k|    return answer;
  101|  8.56k|  }
  102|   444k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.93k, False: 439k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.93k|    answer.power2 = binary::infinite_power();
  105|  4.93k|    answer.mantissa = 0;
  106|  4.93k|    return answer;
  107|  4.93k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   439k|  int lz = leading_zeroes(w);
  112|   439k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   439k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   439k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   439k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   439k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   439k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 15.0k, False: 424k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  15.0k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 14.9k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  14.9k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  14.9k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  14.9k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  14.9k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 14.9k, False: 0]
  ------------------
  156|  14.9k|    return answer;
  157|  15.0k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   424k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 136k, False: 288k]
  |  Branch (162:30): [True: 74.0k, False: 62.3k]
  |  Branch (162:77): [True: 65.8k, False: 8.23k]
  ------------------
  163|   424k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 23.2k, False: 42.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  23.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 15.2k, False: 8.05k]
  ------------------
  168|  15.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  15.2k|    }
  170|  23.2k|  }
  171|       |
  172|   424k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   424k|  answer.mantissa >>= 1;
  174|   424k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.4k, False: 410k]
  ------------------
  175|  14.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.4k|    answer.power2++; // undo previous addition
  177|  14.4k|  }
  178|       |
  179|   424k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   424k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 284, False: 424k]
  ------------------
  181|    284|    answer.power2 = binary::infinite_power();
  182|    284|    answer.mantissa = 0;
  183|    284|  }
  184|   424k|  return answer;
  185|   439k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   495k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   495k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   495k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   495k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   495k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   495k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   495k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 134k, False: 360k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   134k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   134k|    firstproduct.low += secondproduct.high;
   35|   134k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 70.0k, False: 64.4k]
  ------------------
   36|  70.0k|      firstproduct.high++;
   37|  70.0k|    }
   38|   134k|  }
   39|   495k|  return firstproduct;
   40|   495k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  55.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  55.7k|  int lz = leading_zeroes(w);
   82|  55.7k|  w <<= lz;
   83|  55.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  55.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  55.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  55.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  55.7k|  int hilz = int(w >> 63) ^ 1;
   69|  55.7k|  adjusted_mantissa answer;
   70|  55.7k|  answer.mantissa = w << hilz;
   71|  55.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  55.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  55.7k|  return answer;
   74|  55.7k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  55.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  55.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  55.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  55.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  55.4k|  size_t digits = 0;
  413|  55.4k|  bigint bigmant;
  414|  55.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  55.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  55.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 882, False: 54.5k]
  ------------------
  418|    882|    return positive_digit_comp<T>(bigmant, exponent);
  419|  54.5k|  } else {
  420|  54.5k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  54.5k|  }
  422|  55.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|   111k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|   111k|  uint64_t mantissa = num.mantissa;
   30|   111k|  int32_t exponent = int32_t(num.exponent);
   31|   556k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 444k, False: 111k]
  ------------------
   32|   444k|    mantissa /= 10000;
   33|   444k|    exponent += 4;
   34|   444k|  }
   35|   222k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 111k, False: 111k]
  ------------------
   36|   111k|    mantissa /= 100;
   37|   111k|    exponent += 2;
   38|   111k|  }
   39|   111k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 111k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|   111k|  return exponent;
   44|   111k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|   111k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|   111k|  size_t counter = 0;
  245|   111k|  digits = 0;
  246|   111k|  limb value = 0;
  247|   111k|#ifdef FASTFLOAT_64BIT_LIMB
  248|   111k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|   111k|  UC const * p = num.integer.ptr;
  255|   111k|  UC const * pend = p + num.integer.len();
  256|   111k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   240k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 129k, False: 110k]
  ------------------
  259|   241k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 139k, False: 101k]
  |  Branch (259:45): [True: 112k, False: 27.3k]
  |  Branch (259:70): [True: 112k, False: 427]
  ------------------
  260|   112k|      parse_eight_digits(p, value, counter, digits);
  261|   112k|    }
  262|   469k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 435k, False: 34.0k]
  |  Branch (262:30): [True: 340k, False: 94.9k]
  |  Branch (262:43): [True: 339k, False: 427]
  ------------------
  263|   339k|      parse_one_digit(p, value, counter, digits);
  264|   339k|    }
  265|   129k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 427, False: 128k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    427|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    427|      bool truncated = is_truncated(p, pend);
  269|    427|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 395, False: 32]
  ------------------
  270|    395|        truncated |= is_truncated(num.fraction);
  271|    395|      }
  272|    427|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 239, False: 188]
  ------------------
  273|    239|        round_up_bigint(result, digits);
  274|    239|      }
  275|    427|      return;
  276|   128k|    } else {
  277|   128k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   128k|      counter = 0;
  279|   128k|      value = 0;
  280|   128k|    }
  281|   129k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|   110k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 96.6k, False: 14.2k]
  ------------------
  285|  96.6k|    p = num.fraction.ptr;
  286|  96.6k|    pend = p + num.fraction.len();
  287|  96.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.8k, False: 80.7k]
  ------------------
  288|  15.8k|      skip_zeros(p, pend);
  289|  15.8k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   341k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 252k, False: 88.3k]
  ------------------
  292|   634k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 522k, False: 112k]
  |  Branch (292:47): [True: 384k, False: 137k]
  |  Branch (292:72): [True: 381k, False: 2.99k]
  ------------------
  293|   381k|        parse_eight_digits(p, value, counter, digits);
  294|   381k|      }
  295|  1.05M|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 890k, False: 160k]
  |  Branch (295:32): [True: 804k, False: 86.4k]
  |  Branch (295:45): [True: 798k, False: 5.81k]
  ------------------
  296|   798k|        parse_one_digit(p, value, counter, digits);
  297|   798k|      }
  298|   252k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 8.28k, False: 244k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  8.28k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  8.28k|        bool truncated = is_truncated(p, pend);
  302|  8.28k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 4.84k, False: 3.43k]
  ------------------
  303|  4.84k|          round_up_bigint(result, digits);
  304|  4.84k|        }
  305|  8.28k|        return;
  306|   244k|      } else {
  307|   244k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   244k|        counter = 0;
  309|   244k|        value = 0;
  310|   244k|      }
  311|   252k|    }
  312|  96.6k|  }
  313|       |
  314|   102k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 102k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|   102k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   127k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   127k|  uint64_t val;
  161|   200k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 145k, False: 54.6k]
  ------------------
  162|   145k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   145k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72.3k, False: 73.3k]
  ------------------
  164|  72.3k|      break;
  165|  72.3k|    }
  166|  73.3k|    first += int_cmp_len<UC>();
  167|  73.3k|  }
  168|   312k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 297k, False: 15.8k]
  ------------------
  169|   297k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 111k, False: 185k]
  ------------------
  170|   111k|      break;
  171|   111k|    }
  172|   185k|    first++;
  173|   185k|  }
  174|   127k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   494k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   494k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   494k|  p += 8;
  210|   494k|  counter += 8;
  211|   494k|  count += 8;
  212|   494k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.13M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.13M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.13M|  p++;
  219|  1.13M|  counter++;
  220|  1.13M|  count++;
  221|  1.13M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   387k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   387k|  big.mul(power);
  226|   387k|  big.add(value);
  227|   387k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  9.10k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  9.10k|  uint64_t val;
  183|  20.6k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 13.8k, False: 6.85k]
  ------------------
  184|  13.8k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  13.8k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.25k, False: 11.5k]
  ------------------
  186|  2.25k|      return true;
  187|  2.25k|    }
  188|  11.5k|    first += int_cmp_len<UC>();
  189|  11.5k|  }
  190|  11.1k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 7.16k, False: 3.94k]
  ------------------
  191|  7.16k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.90k, False: 4.25k]
  ------------------
  192|  2.90k|      return true;
  193|  2.90k|    }
  194|  4.25k|    ++first;
  195|  4.25k|  }
  196|  3.94k|  return false;
  197|  6.85k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    395|bool is_truncated(span<const UC> s) noexcept {
  201|    395|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    395|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  5.08k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  5.08k|  add_native(big, 10, 1);
  234|  5.08k|  count++;
  235|  5.08k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    882|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    882|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    882|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    882|  adjusted_mantissa answer;
  324|    882|  bool truncated;
  325|    882|  answer.mantissa = bigmant.hi64(truncated);
  326|    882|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    882|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    882|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    882|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    882|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    882|    });
  333|    882|  });
  334|       |
  335|    882|  return answer;
  336|    882|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    882|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    882|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    882|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 882]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    882|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    882|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 882]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    882|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    882|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 882]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    882|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    882|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    882|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    882|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    882|    });
  333|    882|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    882|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    882|  const uint64_t mask
  125|    882|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 882]
  ------------------
  126|    882|    ? UINT64_MAX
  127|    882|    : (uint64_t(1) << shift) - 1;
  128|    882|  const uint64_t halfway
  129|    882|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 882]
  ------------------
  130|    882|    ? 0
  131|    882|    : uint64_t(1) << (shift - 1);
  132|    882|  uint64_t truncated_bits = am.mantissa & mask;
  133|    882|  bool is_above = truncated_bits > halfway;
  134|    882|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    882|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 882]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    882|  } else {
  140|    882|    am.mantissa >>= shift;
  141|    882|  }
  142|    882|  am.power2 += shift;
  143|       |
  144|    882|  bool is_odd = (am.mantissa & 1) == 1;
  145|    882|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    882|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    882|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    882|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 88, False: 794]
  |  Branch (331:27): [True: 644, False: 150]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 96, False: 630]
  |  Branch (331:66): [True: 32, False: 64]
  ------------------
  332|    882|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  54.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  54.5k|  bigint& real_digits = bigmant;
  347|  54.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  54.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  54.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  54.5k|  T b;
  354|  54.5k|  to_float(false, am_b, b);
  355|  54.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  54.5k|  bigint theor_digits(theor.mantissa);
  357|  54.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  54.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  54.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  54.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 54.5k, False: 0]
  ------------------
  363|  54.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  54.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  54.5k|  }
  365|  54.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 54.5k, False: 0]
  ------------------
  366|  54.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  54.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  54.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  54.5k|  int ord = real_digits.compare(theor_digits);
  373|  54.5k|  adjusted_mantissa answer = am;
  374|  54.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.5k|      (void)_;  // not needed, since we've done our comparison
  377|  54.5k|      (void)__; // not needed, since we've done our comparison
  378|  54.5k|      if (ord > 0) {
  379|  54.5k|        return true;
  380|  54.5k|      } else if (ord < 0) {
  381|  54.5k|        return false;
  382|  54.5k|      } else {
  383|  54.5k|        return is_odd;
  384|  54.5k|      }
  385|  54.5k|    });
  386|  54.5k|  });
  387|       |
  388|  54.5k|  return answer;
  389|  54.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  54.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 54.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 54.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  54.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  95.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  95.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 95.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  95.9k|  } else {
  153|  95.9k|    am.mantissa >>= shift;
  154|  95.9k|  }
  155|  95.9k|  am.power2 += shift;
  156|  95.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  54.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  54.5k|  adjusted_mantissa am = to_extended(value);
   84|  54.5k|  am.mantissa <<= 1;
   85|  54.5k|  am.mantissa += 1;
   86|  54.5k|  am.power2 -= 1;
   87|  54.5k|  return am;
   88|  54.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  54.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  54.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  54.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  54.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  54.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  54.5k|  adjusted_mantissa am;
   56|  54.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  54.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  54.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  54.5k|#endif
   63|  54.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 54.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  54.5k|  } else {
   68|       |    // normal
   69|  54.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  54.5k|    am.power2 -= bias;
   71|  54.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  54.5k|  }
   73|       |
   74|  54.5k|  return am;
   75|  54.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  54.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  54.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  54.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 54.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  54.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  54.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 54.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  54.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  54.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 54.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  54.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  54.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  54.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.5k|      (void)_;  // not needed, since we've done our comparison
  377|  54.5k|      (void)__; // not needed, since we've done our comparison
  378|  54.5k|      if (ord > 0) {
  379|  54.5k|        return true;
  380|  54.5k|      } else if (ord < 0) {
  381|  54.5k|        return false;
  382|  54.5k|      } else {
  383|  54.5k|        return is_odd;
  384|  54.5k|      }
  385|  54.5k|    });
  386|  54.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  54.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  54.5k|  const uint64_t mask
  125|  54.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 54.5k]
  ------------------
  126|  54.5k|    ? UINT64_MAX
  127|  54.5k|    : (uint64_t(1) << shift) - 1;
  128|  54.5k|  const uint64_t halfway
  129|  54.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 54.5k]
  ------------------
  130|  54.5k|    ? 0
  131|  54.5k|    : uint64_t(1) << (shift - 1);
  132|  54.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  54.5k|  bool is_above = truncated_bits > halfway;
  134|  54.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  54.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 54.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  54.5k|  } else {
  140|  54.5k|    am.mantissa >>= shift;
  141|  54.5k|  }
  142|  54.5k|  am.power2 += shift;
  143|       |
  144|  54.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  54.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  54.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  54.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  54.5k|      (void)_;  // not needed, since we've done our comparison
  377|  54.5k|      (void)__; // not needed, since we've done our comparison
  378|  54.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 544, False: 54.0k]
  ------------------
  379|    544|        return true;
  380|  54.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 44.5k, False: 9.49k]
  ------------------
  381|  44.5k|        return false;
  382|  44.5k|      } else {
  383|  9.49k|        return is_odd;
  384|  9.49k|      }
  385|  54.5k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  55.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  55.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  55.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  55.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  55.7k|  size_t digits = 0;
  413|  55.7k|  bigint bigmant;
  414|  55.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  55.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  55.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.4k, False: 41.3k]
  ------------------
  418|  14.4k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  41.3k|  } else {
  420|  41.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  41.3k|  }
  422|  55.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.4k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.4k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.4k|  adjusted_mantissa answer;
  324|  14.4k|  bool truncated;
  325|  14.4k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.4k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.4k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.4k|    });
  333|  14.4k|  });
  334|       |
  335|  14.4k|  return answer;
  336|  14.4k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.16k, False: 13.2k]
  ------------------
  109|  1.16k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.16k|    am.power2++;
  111|  1.16k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.4k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.4k|    });
  333|  14.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.4k|  const uint64_t mask
  125|  14.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.4k]
  ------------------
  126|  14.4k|    ? UINT64_MAX
  127|  14.4k|    : (uint64_t(1) << shift) - 1;
  128|  14.4k|  const uint64_t halfway
  129|  14.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.4k]
  ------------------
  130|  14.4k|    ? 0
  131|  14.4k|    : uint64_t(1) << (shift - 1);
  132|  14.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.4k|  bool is_above = truncated_bits > halfway;
  134|  14.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.4k|  } else {
  140|  14.4k|    am.mantissa >>= shift;
  141|  14.4k|  }
  142|  14.4k|  am.power2 += shift;
  143|       |
  144|  14.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.4k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.30k, False: 13.1k]
  |  Branch (331:27): [True: 12.1k, False: 1.01k]
  |  Branch (331:41): [True: 3.97k, False: 8.14k]
  |  Branch (331:56): [True: 401, False: 8.75k]
  |  Branch (331:66): [True: 82, False: 319]
  ------------------
  332|  14.4k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  41.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  41.3k|  bigint& real_digits = bigmant;
  347|  41.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  41.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  41.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  41.3k|  T b;
  354|  41.3k|  to_float(false, am_b, b);
  355|  41.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  41.3k|  bigint theor_digits(theor.mantissa);
  357|  41.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  41.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  41.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  41.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 41.3k, False: 0]
  ------------------
  363|  41.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  41.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  41.3k|  }
  365|  41.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.76k, False: 35.5k]
  ------------------
  366|  5.76k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.76k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 35.4k, False: 158]
  ------------------
  368|  35.4k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  35.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  35.4k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  41.3k|  int ord = real_digits.compare(theor_digits);
  373|  41.3k|  adjusted_mantissa answer = am;
  374|  41.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  41.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  41.3k|      (void)_;  // not needed, since we've done our comparison
  377|  41.3k|      (void)__; // not needed, since we've done our comparison
  378|  41.3k|      if (ord > 0) {
  379|  41.3k|        return true;
  380|  41.3k|      } else if (ord < 0) {
  381|  41.3k|        return false;
  382|  41.3k|      } else {
  383|  41.3k|        return is_odd;
  384|  41.3k|      }
  385|  41.3k|    });
  386|  41.3k|  });
  387|       |
  388|  41.3k|  return answer;
  389|  41.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  41.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  41.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  41.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 192, False: 41.1k]
  ------------------
   96|       |    // have a denormal float
   97|    192|    int32_t shift = -am.power2 + 1;
   98|    192|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    192|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 192, False: 0]
  ------------------
  101|    192|    return;
  102|    192|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  41.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  41.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 41.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  41.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  41.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 41.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  41.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  41.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  41.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  41.3k|  adjusted_mantissa am = to_extended(value);
   84|  41.3k|  am.mantissa <<= 1;
   85|  41.3k|  am.mantissa += 1;
   86|  41.3k|  am.power2 -= 1;
   87|  41.3k|  return am;
   88|  41.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  41.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  41.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  41.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  41.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  41.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  41.3k|  adjusted_mantissa am;
   56|  41.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  41.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  41.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  41.3k|#endif
   63|  41.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 192, False: 41.1k]
  ------------------
   64|       |    // denormal
   65|    192|    am.power2 = 1 - bias;
   66|    192|    am.mantissa = bits & mantissa_mask;
   67|  41.1k|  } else {
   68|       |    // normal
   69|  41.1k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  41.1k|    am.power2 -= bias;
   71|  41.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  41.1k|  }
   73|       |
   74|  41.3k|  return am;
   75|  41.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  41.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  41.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  41.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 192, False: 41.1k]
  ------------------
   96|       |    // have a denormal float
   97|    192|    int32_t shift = -am.power2 + 1;
   98|    192|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    192|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 192, False: 0]
  ------------------
  101|    192|    return;
  102|    192|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  41.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  41.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 41.0k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  41.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  41.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 41.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  41.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  41.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  41.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  41.3k|      (void)_;  // not needed, since we've done our comparison
  377|  41.3k|      (void)__; // not needed, since we've done our comparison
  378|  41.3k|      if (ord > 0) {
  379|  41.3k|        return true;
  380|  41.3k|      } else if (ord < 0) {
  381|  41.3k|        return false;
  382|  41.3k|      } else {
  383|  41.3k|        return is_odd;
  384|  41.3k|      }
  385|  41.3k|    });
  386|  41.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  41.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  41.3k|  const uint64_t mask
  125|  41.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 41.3k]
  ------------------
  126|  41.3k|    ? UINT64_MAX
  127|  41.3k|    : (uint64_t(1) << shift) - 1;
  128|  41.3k|  const uint64_t halfway
  129|  41.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 41.3k]
  ------------------
  130|  41.3k|    ? 0
  131|  41.3k|    : uint64_t(1) << (shift - 1);
  132|  41.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  41.3k|  bool is_above = truncated_bits > halfway;
  134|  41.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  41.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 41.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  41.3k|  } else {
  140|  41.3k|    am.mantissa >>= shift;
  141|  41.3k|  }
  142|  41.3k|  am.power2 += shift;
  143|       |
  144|  41.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  41.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  41.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  41.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  41.3k|      (void)_;  // not needed, since we've done our comparison
  377|  41.3k|      (void)__; // not needed, since we've done our comparison
  378|  41.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 12.0k, False: 29.3k]
  ------------------
  379|  12.0k|        return true;
  380|  29.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 28.2k, False: 1.07k]
  ------------------
  381|  28.2k|        return false;
  382|  28.2k|      } else {
  383|  1.07k|        return is_odd;
  384|  1.07k|      }
  385|  41.3k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.80M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.81M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   763k|  constexpr size_t len() const noexcept {
  238|   763k|    return length;
  239|   763k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.20M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.20M|  return -10;
  469|  1.20M|#endif
  470|  1.20M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.14M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.14M|  return 10;
  517|  1.14M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   957k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   957k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   957k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  3.25M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  3.25M|  return 23;
  477|  3.25M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   881k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   881k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   881k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.15M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   470k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   470k|  return -65;
  568|   470k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   468k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   468k|  return 38;
  559|   468k|}
_ZN10fast_float14leading_zeroesEm:
  268|  1.03M|int leading_zeroes(uint64_t input_num) {
  269|  1.03M|  assert(input_num > 0);
  270|  1.03M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  1.03M|  return __builtin_clzll(input_num);
  285|  1.03M|#endif
  286|  1.03M|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.23M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.23M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.23M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.23M|  answer.low = uint64_t(r);
  337|  1.23M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.23M|  return answer;
  342|  1.23M|}
_ZN10fast_float8value128C2Ev:
  251|  1.23M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   569k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   569k|  return -127;
  500|   569k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   174k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   174k|  return -17;
  493|   174k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   172k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   172k|  return 10;
  485|   172k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   328k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   328k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 111k, False: 216k]
  |  Branch (352:38): [True: 0, False: 216k]
  ------------------
  353|   328k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  55.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  55.4k|  return 114;
  575|  55.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   306k|{
  650|   306k|    return sizeof(uint64_t) / sizeof(UC);
  651|   306k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   159k|{
  644|   159k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   159k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   159k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   165k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   600k|  constexpr size_t len() const noexcept {
  238|   600k|    return length;
  239|   600k|  }
_ZNK10fast_float4spanImEixEm:
  241|   339k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   339k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   339k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   339k|    return ptr[index];
  244|   339k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   381k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   381k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   381k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   381k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   381k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   381k|  ::memcpy(&value, &word, sizeof(T));
  615|   381k|#endif
  616|   381k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   381k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   905k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   905k|  return 0xFF;
  507|   905k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.40M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   229k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   114k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   114k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.31M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.31M|  return -22;
  461|  1.31M|#endif
  462|  1.31M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.27M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.27M|  return 22;
  514|  1.27M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  1.04M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  1.04M|  return uint64_t(2) << mantissa_explicit_bits();
  521|  1.04M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  3.15M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  3.15M|  return 52;
  474|  3.15M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  1.02M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  1.02M|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  1.02M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   444k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   444k|  return -342;
  564|   444k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   444k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   444k|  return 308;
  555|   444k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   551k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   551k|  return -1023;
  497|   551k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   136k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   136k|  return -4;
  489|   136k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  74.0k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  74.0k|  return 23;
  481|  74.0k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  55.7k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  55.7k|  return 769;
  572|  55.7k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   323k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   323k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   323k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   323k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   323k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   323k|  ::memcpy(&value, &word, sizeof(T));
  615|   323k|#endif
  616|   323k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   323k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   808k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   808k|  return 0x7FF;
  504|   808k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.15M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.15M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.15M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.15M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.15M|    return from_chars_advanced(first, last, value, options);
  143|  1.15M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.15M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.15M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.15M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.15M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.15M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.15M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.15M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.15M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.15M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.15M|  answer.ec = std::errc(); // be optimistic
  221|  1.15M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.15M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.08M, False: 67.1k]
  |  Branch (227:69): [True: 1.00M, False: 74.8k]
  |  Branch (227:131): [True: 901k, False: 107k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   901k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 901k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   901k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 825k, False: 75.7k]
  ------------------
  239|   825k|        value = T(pns.mantissa);
  240|   825k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 13.1k, False: 812k]
  ------------------
  241|   812k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   825k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 825k]
  ------------------
  243|   825k|        return answer;
  244|   825k|      }
  245|   901k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   901k|  }
  262|   325k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   325k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 157k, False: 168k]
  |  Branch (263:29): [True: 157k, False: 0]
  ------------------
  264|   157k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 55.4k, False: 101k]
  ------------------
  265|  55.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  55.4k|    }
  267|   157k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   325k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 55.4k, False: 270k]
  ------------------
  271|   325k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   325k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 312k, False: 13.4k]
  |  Branch (273:29): [True: 23.0k, False: 289k]
  |  Branch (273:49): [True: 1.72k, False: 21.2k]
  |  Branch (273:68): [True: 8.82k, False: 314k]
  ------------------
  274|  10.5k|    answer.ec = std::errc::result_out_of_range;
  275|  10.5k|  }
  276|   325k|  return answer;
  277|  1.15M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  2.00M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  2.00M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  2.00M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  2.00M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  2.00M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  2.00M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  57.3k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  57.3k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  57.3k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  57.3k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  57.3k|    return from_chars_advanced(first, last, value, options);
  143|  57.3k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  57.3k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  57.3k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  57.3k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  57.3k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  57.3k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 57.3k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  57.3k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  57.3k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 57.3k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  57.3k|  answer.ec = std::errc(); // be optimistic
  221|  57.3k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  57.3k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 57.0k, False: 222]
  |  Branch (227:69): [True: 56.1k, False: 896]
  |  Branch (227:131): [True: 56.1k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  56.1k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 56.1k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  56.1k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 56.1k, False: 18]
  ------------------
  239|  56.1k|        value = T(pns.mantissa);
  240|  56.1k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 50, False: 56.1k]
  ------------------
  241|  56.1k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  56.1k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 56.1k]
  ------------------
  243|  56.1k|        return answer;
  244|  56.1k|      }
  245|  56.1k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  56.1k|  }
  262|  1.13k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.13k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.13k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.13k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.13k]
  ------------------
  271|  1.13k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.13k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 1.11k, False: 18]
  |  Branch (273:29): [True: 934, False: 184]
  |  Branch (273:49): [True: 144, False: 790]
  |  Branch (273:68): [True: 790, False: 202]
  ------------------
  274|    934|    answer.ec = std::errc::result_out_of_range;
  275|    934|  }
  276|  1.13k|  return answer;
  277|  57.3k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.25M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.25M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.25M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.25M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.25M|    return from_chars_advanced(first, last, value, options);
  143|  1.25M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.25M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.25M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.25M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.25M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.25M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.25M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.25M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.25M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.25M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.25M|  answer.ec = std::errc(); // be optimistic
  221|  1.25M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.25M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.21M, False: 37.7k]
  |  Branch (227:69): [True: 1.13M, False: 77.5k]
  |  Branch (227:131): [True: 993k, False: 145k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   993k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 993k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   993k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 972k, False: 21.0k]
  ------------------
  239|   972k|        value = T(pns.mantissa);
  240|   972k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 50.3k, False: 921k]
  ------------------
  241|   921k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   972k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 972k]
  ------------------
  243|   972k|        return answer;
  244|   972k|      }
  245|   993k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   993k|  }
  262|   281k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   281k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 170k, False: 110k]
  |  Branch (263:29): [True: 170k, False: 0]
  ------------------
  264|   170k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 55.7k, False: 115k]
  ------------------
  265|  55.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  55.7k|    }
  267|   170k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   281k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 55.7k, False: 225k]
  ------------------
  271|   281k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   281k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 273k, False: 8.10k]
  |  Branch (273:29): [True: 12.6k, False: 260k]
  |  Branch (273:49): [True: 460, False: 12.1k]
  |  Branch (273:68): [True: 4.14k, False: 276k]
  ------------------
  274|  4.60k|    answer.ec = std::errc::result_out_of_range;
  275|  4.60k|  }
  276|   281k|  return answer;
  277|  1.25M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  57.4k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  57.4k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  57.4k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  57.4k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  57.4k|    return from_chars_advanced(first, last, value, options);
  143|  57.4k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  57.4k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  57.4k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  57.4k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  57.4k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  57.4k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 57.4k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  57.4k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  57.4k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 57.4k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  57.4k|  answer.ec = std::errc(); // be optimistic
  221|  57.4k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  57.4k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 57.2k, False: 194]
  |  Branch (227:69): [True: 56.3k, False: 840]
  |  Branch (227:131): [True: 56.3k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  56.3k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 56.3k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  56.3k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 56.3k, False: 0]
  ------------------
  239|  56.3k|        value = T(pns.mantissa);
  240|  56.3k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 78, False: 56.3k]
  ------------------
  241|  56.3k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  56.3k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 56.3k]
  ------------------
  243|  56.3k|        return answer;
  244|  56.3k|      }
  245|  56.3k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  56.3k|  }
  262|  1.03k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  1.03k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 1.03k]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  1.03k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 1.03k]
  ------------------
  271|  1.03k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  1.03k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 1.01k, False: 18]
  |  Branch (273:29): [True: 492, False: 524]
  |  Branch (273:49): [True: 0, False: 492]
  |  Branch (273:68): [True: 492, False: 542]
  ------------------
  274|    492|    answer.ec = std::errc::result_out_of_range;
  275|    492|  }
  276|  1.03k|  return answer;
  277|  57.4k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  8.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   988k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   989k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  7.49M|{
 3807|  7.49M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  7.49M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  7.49M|    }
 3810|  7.49M|    else if constexpr (sizeof(U) == 2) {
 3811|  7.49M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  7.49M|    }
 3813|  7.49M|    else {
 3814|       |        // utf-32
 3815|  7.49M|        static_assert(sizeof(U) == 4);
 3816|  7.49M|        SCN_UNUSED(ch);
 3817|  7.49M|        return 1;
 3818|  7.49M|    }
 3819|  7.49M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  7.49M|{
 3771|  7.49M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  7.49M|    SCN_GCC_COMPAT_PUSH
 3774|  7.49M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  7.49M|    constexpr char lengths[] =
 3776|  7.49M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  7.49M|        "\1\1\1\1\1\1\1\1"
 3778|  7.49M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  7.49M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  7.49M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  7.49M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  7.49M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  7.49M|    SCN_GCC_COMPAT_POP
 3785|  7.49M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  6.95M|{
 4013|  6.95M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  6.95M|        return decode_utf8_code_point_exhaustive(input);
 4015|  6.95M|    }
 4016|  6.95M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  6.95M|        return decode_utf16_code_point_exhaustive(input);
 4018|  6.95M|    }
 4019|  6.95M|    else {
 4020|  6.95M|        SCN_EXPECT(input.size() == 1);
 4021|  6.95M|        auto cp = static_cast<char32_t>(input.front());
 4022|  6.95M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  6.95M|            return invalid_code_point;
 4024|  6.95M|        }
 4025|  6.95M|        return cp;
 4026|  6.95M|    }
 4027|  6.95M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  6.95M|{
 3826|  6.95M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  6.95M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  6.95M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  6.95M|    };
 3831|       |
 3832|  6.95M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 6.66M, False: 299k]
  ------------------
 3833|  6.66M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 855, False: 6.65M]
  ------------------
 3834|    855|            SCN_UNLIKELY_ATTR
 3835|    855|            return invalid_code_point;
 3836|    855|        }
 3837|  6.65M|        return static_cast<char32_t>(input[0]);
 3838|  6.66M|    }
 3839|       |
 3840|   299k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 265k, False: 34.1k]
  ------------------
 3841|   265k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 145, False: 264k]
  ------------------
 3842|    145|            SCN_UNLIKELY_ATTR
 3843|    145|            return invalid_code_point;
 3844|    145|        }
 3845|   264k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 54.2k, False: 210k]
  ------------------
 3846|  54.2k|            SCN_UNLIKELY_ATTR
 3847|  54.2k|            return invalid_code_point;
 3848|  54.2k|        }
 3849|       |
 3850|   210k|        char32_t cp{};
 3851|   210k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   210k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   210k|        return cp;
 3854|   264k|    }
 3855|       |
 3856|  34.1k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 15.0k, False: 19.1k]
  ------------------
 3857|  15.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 173, False: 14.8k]
  ------------------
 3858|    173|            SCN_UNLIKELY_ATTR
 3859|    173|            return invalid_code_point;
 3860|    173|        }
 3861|  14.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 7.05k, False: 7.78k]
  ------------------
 3862|  14.8k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.48k, False: 6.30k]
  ------------------
 3863|  8.53k|            SCN_UNLIKELY_ATTR
 3864|  8.53k|            return invalid_code_point;
 3865|  8.53k|        }
 3866|       |
 3867|  6.30k|        char32_t cp{};
 3868|  6.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  6.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  6.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  6.30k|        return cp;
 3872|  14.8k|    }
 3873|       |
 3874|  19.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 19.1k, False: 0]
  ------------------
 3875|  19.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 19.1k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  19.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 2.74k, False: 16.4k]
  ------------------
 3880|  2.74k|            SCN_UNLIKELY_ATTR
 3881|  2.74k|            return invalid_code_point;
 3882|  2.74k|        }
 3883|  16.4k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 3.88k, False: 12.5k]
  ------------------
 3884|  16.4k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.34k, False: 11.1k]
  ------------------
 3885|  16.4k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 1.77k, False: 9.41k]
  ------------------
 3886|  7.00k|            SCN_UNLIKELY_ATTR
 3887|  7.00k|            return invalid_code_point;
 3888|  7.00k|        }
 3889|       |
 3890|  9.41k|        char32_t cp{};
 3891|  9.41k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  9.41k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  9.41k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  9.41k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  9.41k|        return cp;
 3896|  16.4k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   327k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   327k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   327k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  14.1M|{
 3699|  14.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  14.1M|                                          decltype(first), decltype(last)> &&
 3701|  14.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  14.1M|        return {first, last};
 3703|  14.1M|    }
 3704|  14.1M|    else {
 3705|  14.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  14.1M|                                       to_address(first), to_address(last)))};
 3707|  14.1M|    }
 3708|  14.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  43.1M|{
  326|  43.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  43.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  43.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  48.2M|{
  304|  48.2M|    return p;
  305|  48.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  21.0M|{
 3730|  21.0M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  21.0M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  21.0M|                      decltype(it)> &&
 3733|  21.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  21.0M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  21.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  21.0M|        return it;
 3736|  21.0M|    }
 3737|  21.0M|    else {
 3738|  21.0M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  21.0M|    }
 3740|  21.0M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   143k|    {
 2724|   143k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   143k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   143k|    {
 2705|   143k|        return decay_copy(t.begin());
 2706|   143k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  28.9M|{
 1949|  28.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  28.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  28.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.41M|    {
 2781|  5.41M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.41M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.41M|    {
 2763|  5.41M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.41M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   384k|{
 8867|   384k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   384k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   384k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   384k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|  1.56M|{
 5396|  1.56M|    detail::check_scan_arg_types<Args...>();
 5397|  1.56M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.56M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.98M|{
 5135|  1.98M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.98M|                  "Scan argument types must be default constructible");
 5137|  1.98M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.98M|                  "Scan argument types must be Destructible");
 5139|  1.98M|    static_assert(
 5140|  1.98M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.98M|        "Scan argument types must not be references");
 5142|  1.98M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|  1.56M|    {
 5349|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.56M|    {
 5360|  1.56M|        return {detail::make_arg<
 5361|  1.56M|            kind, Context,
 5362|  1.56M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.56M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.56M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|  1.56M|{
 5170|  1.56M|    return make_value<Context>(value).ref_value;
 5171|  1.56M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  1.73M|{
 5120|  1.73M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.73M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.73M|                                  needs_context_tag>) {
 5124|  1.73M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.73M|    }
 5126|  1.73M|    else {
 5127|  1.73M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.73M|            value, context_tag<Context>{}));
 5129|  1.73M|    }
 5130|  1.73M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  1.73M|    {                                                                        \
 4959|  1.73M|        return val;                                                          \
 4960|  1.73M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.98M|{
 5089|  1.98M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.98M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.98M|    constexpr bool scannable_char =
 5093|  1.98M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.98M|    static_assert(scannable_char,
 5095|  1.98M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.98M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.98M|    constexpr bool scannable_const =
 5099|  1.98M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.98M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.98M|    constexpr bool scannable_disabled =
 5103|  1.98M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.98M|    static_assert(scannable_disabled,
 5105|  1.98M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.98M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.98M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.98M|    static_assert(
 5110|  1.98M|        scannable,
 5111|  1.98M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.98M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.98M|    return arg_value{arg};
 5115|  1.98M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|  1.98M|    {
 4902|  1.98M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.21M|{
 8654|  1.21M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.21M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.21M|{
 8591|  1.21M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.21M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.21M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.4k, False: 1.15M]
  |  |  ------------------
  ------------------
 8595|  64.4k|        return unexpected(result.error());
 8596|  64.4k|    }
 8597|  1.15M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.21M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  2.70M|{
 4720|  2.70M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.70M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.70M|                  "\n"
 4724|  2.70M|                  "Unsupported range type given as input to a scanning "
 4725|  2.70M|                  "function.\n"
 4726|  2.70M|                  "A range needs to have a character type (value type) "
 4727|  2.70M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.70M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.70M|                  "to be included.\n"
 4730|  2.70M|                  "See the scnlib documentation for more details.");
 4731|  2.70M|    static_assert(
 4732|  2.70M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.70M|        "\n"
 4734|  2.70M|        "Unsupported range type given as input to a scanning "
 4735|  2.70M|        "function.\n"
 4736|  2.70M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.70M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.70M|        "not supported.");
 4739|  2.70M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.70M|                  "\n"
 4741|  2.70M|                  "Unsupported range type given as input to a scanning "
 4742|  2.70M|                  "function.\n"
 4743|  2.70M|                  "file_marker_found cannot be used as an "
 4744|  2.70M|                  "source range type to scn::scan.\n"
 4745|  2.70M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.70M|                  "and do not provide an explicit source range, "
 4747|  2.70M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.70M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.70M|                  "\n"
 4750|  2.70M|                  "Unsupported range type given as input to a scanning "
 4751|  2.70M|                  "function.\n"
 4752|  2.70M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.70M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.70M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.70M|                  "\n"
 4756|  2.70M|                  "Unsupported range type given as input to a scanning "
 4757|  2.70M|                  "function.\n"
 4758|  2.70M|                  "A range needs to model forward_range and have a valid "
 4759|  2.70M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.70M|                  "Examples of scannable ranges are std::string, "
 4761|  2.70M|                  "std::string_view, "
 4762|  2.70M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.70M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.70M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.70M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  2.70M|{
 4659|  2.70M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  2.70M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  2.70M|    }
 4662|  2.70M|    else {
 4663|  2.70M|        return invalid_char_type{};
 4664|  2.70M|    }
 4665|  2.70M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.70M|    {
 2855|  2.70M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.70M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.70M|    {
 2836|  2.70M|        return t.data();
 2837|  2.70M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  2.70M|    {
 3231|  2.70M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 22.0k, False: 2.68M]
  ------------------
 3232|  2.70M|                   ? nullptr
 3233|  2.70M|                   : std::addressof(*ranges::begin(derived()));
 3234|  2.70M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.70M|    {
 3005|  2.70M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.70M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.70M|    {
 2978|  2.70M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.70M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  15.0M|    {
 3339|  15.0M|        return m_iterator == m_sentinel;
 3340|  15.0M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  5.39M|    {
 3185|  5.39M|        return static_cast<const D&>(*this);
 3186|  5.39M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.25M|    {
 2724|  5.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.25M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.25M|    {
 2705|  5.25M|        return decay_copy(t.begin());
 2706|  5.25M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  65.7M|    {
 3330|  65.7M|        return m_iterator;
 3331|  65.7M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  2.70M|    {
 2930|  2.70M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.70M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.70M|    {
 2896|  2.70M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.70M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  8.51M|{
 1949|  8.51M|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  8.51M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  15.1M|    {
 3346|  15.1M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  15.1M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  20.7M|    {
 1598|  20.7M|        return has_value();
 1599|  20.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  41.0M|    {
  485|  41.0M|        return m_has_value;
  486|  41.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.27M|    {
 1604|  1.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.27M|        return this->get_unexpected().error();
 1606|  1.27M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.27M|    {
  468|  1.27M|        return m_unexpected;
  469|  1.27M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  9.81M|    {
  361|  9.81M|        return m_unexpected;
  362|  9.81M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  4.79M|    {
  347|  4.79M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.79M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   139k|    {
 1476|   139k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   139k|    {
  447|   139k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  11.5M|    {
  356|  11.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  11.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  11.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.70M|    {
 1177|  2.70M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.56M|{
 5923|  2.56M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.56M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.56M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.56M|    }
 5927|  2.56M|    else {
 5928|  2.56M|        auto it = ranges::begin(source);
 5929|  2.56M|        while (n > 0) {
 5930|  2.56M|            --n;
 5931|  2.56M|            ++it;
 5932|  2.56M|        }
 5933|  2.56M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.56M|    }
 5935|  2.56M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  15.5M|    {
 2724|  15.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  15.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  15.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  15.5M|    {
 2705|  15.5M|        return decay_copy(t.begin());
 2706|  15.5M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  2.56M|{
 5910|  2.56M|    return ranges::end(source);
 5911|  2.56M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.56M|    {
 2781|  2.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.56M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.56M|    {
 2763|  2.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  32.0M|    {
 3334|  32.0M|        return m_sentinel;
 3335|  32.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  8.18M|    {
 1653|  8.18M|        return value();
 1654|  8.18M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  19.0M|    {
 1627|  19.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.0M|        return this->get_value();
 1629|  19.0M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  19.0M|    {
  451|  19.0M|        return m_value;
  452|  19.0M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.56M|    {
 1430|  2.56M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  2.56M|    {
  437|  2.56M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   769k|    {
 7975|   769k|        return m_str;
 7976|   769k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.56M|    {
 5426|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|  1.56M|    {
 5379|  1.56M|        return m_argptrs;
 5380|  1.56M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  4.96M|    {
 5478|  4.96M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   769k|{
 8820|   769k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   769k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 726k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   726k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   726k|    static_cast<    \
  |  |  929|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   726k|    static_cast<    \
  |  |  929|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   769k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  2.70M|    {
 1598|  2.70M|        return has_value();
 1599|  2.70M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.41M|    {
  485|  5.41M|        return m_has_value;
  486|  5.41M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   139k|    {
 1604|   139k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   139k|        return this->get_unexpected().error();
 1606|   139k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   139k|    {
  468|   139k|        return m_unexpected;
  469|   139k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   853k|    {
 1177|   853k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  2.30M|    {
 1653|  2.30M|        return value();
 1654|  2.30M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.56M|    {
 1627|  2.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.56M|        return this->get_value();
 1629|  2.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.56M|    {
  451|  2.56M|        return m_value;
  452|  2.56M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   806k|    {
 5830|   806k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  2.56M|    {
 5681|  2.56M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|  1.71M|    {
 5616|  1.71M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   806k|    {
 1430|   806k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   806k|    {
  437|   806k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|  1.56M|    {
 5374|  1.56M|        return m_args;
 5375|  1.56M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  25.6M|    {
 3316|  25.6M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  4.96M|{
 7691|  4.96M|    return s;
 7692|  4.96M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  4.96M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   769k|    {
 7971|   769k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   853k|    {
 1598|   853k|        return has_value();
 1599|   853k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.66M|    {
  485|  1.66M|        return m_has_value;
  486|  1.66M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   806k|    {
 1673|   806k|        return &value();
 1674|   806k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   806k|    {
 1627|   806k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   806k|        return this->get_value();
 1629|   806k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   806k|    {
  451|   806k|        return m_value;
  452|   806k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  2.56M|    {
 5698|  2.56M|        return ranges::begin(m_range);
 5699|  2.56M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   384k|{
 8934|   384k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   384k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   384k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   384k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.21M|{
 8672|  1.21M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.21M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.21M|{
 8607|  1.21M|#if !SCN_DISABLE_LOCALE
 8608|  1.21M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.21M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.21M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.21M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.21M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.4k, False: 1.15M]
  |  |  ------------------
  ------------------
 8615|  64.4k|        return unexpected(result.error());
 8616|  64.4k|    }
 8617|  1.15M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.21M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  84.0k|{
 8973|  84.0k|    T value;
 8974|  84.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  84.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  84.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  84.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  84.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 80.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  84.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  80.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.5k|    static_cast<    \
  |  |  929|  80.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.5k|    static_cast<    \
  |  |  929|  80.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  84.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   165k|{
 5155|   165k|    check_scan_arg_types<T>();
 5156|       |
 5157|   165k|    basic_scan_arg<Context> arg;
 5158|   165k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   165k|    arg.m_value = make_value<Context>(value);
 5160|   165k|    return arg;
 5161|   165k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  5.49M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  6.26M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   271k|{
 8685|   271k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   271k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   271k|{
 8631|   271k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   271k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   271k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 260k]
  |  |  ------------------
  ------------------
 8635|  10.7k|        return unexpected(result.error());
 8636|  10.7k|    }
 8637|   260k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   271k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   260k|    {
 1663|   260k|        return std::move(value());
 1664|   260k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   414k|{
 8867|   414k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   414k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   414k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   414k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.68M|{
 5396|  1.68M|    detail::check_scan_arg_types<Args...>();
 5397|  1.68M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.68M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  2.12M|{
 5135|  2.12M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.12M|                  "Scan argument types must be default constructible");
 5137|  2.12M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.12M|                  "Scan argument types must be Destructible");
 5139|  2.12M|    static_assert(
 5140|  2.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.12M|        "Scan argument types must not be references");
 5142|  2.12M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  1.68M|    {
 5349|  1.68M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.68M|    {
 5360|  1.68M|        return {detail::make_arg<
 5361|  1.68M|            kind, Context,
 5362|  1.68M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.68M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.68M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.68M|{
 5170|  1.68M|    return make_value<Context>(value).ref_value;
 5171|  1.68M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  1.86M|{
 5120|  1.86M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.86M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.86M|                                  needs_context_tag>) {
 5124|  1.86M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.86M|    }
 5126|  1.86M|    else {
 5127|  1.86M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.86M|            value, context_tag<Context>{}));
 5129|  1.86M|    }
 5130|  1.86M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  1.86M|    {                                                                        \
 4959|  1.86M|        return val;                                                          \
 4960|  1.86M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  2.12M|{
 5089|  2.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.12M|    constexpr bool scannable_char =
 5093|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.12M|    static_assert(scannable_char,
 5095|  2.12M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.12M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.12M|    constexpr bool scannable_const =
 5099|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.12M|    constexpr bool scannable_disabled =
 5103|  2.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.12M|    static_assert(scannable_disabled,
 5105|  2.12M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.12M|    static_assert(
 5110|  2.12M|        scannable,
 5111|  2.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.12M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.12M|    return arg_value{arg};
 5115|  2.12M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  2.12M|    {
 4902|  2.12M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   828k|    {
 7975|   828k|        return m_str;
 7976|   828k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.68M|    {
 5426|  1.68M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.68M|    {
 5379|  1.68M|        return m_argptrs;
 5380|  1.68M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   828k|{
 8820|   828k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   828k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 785k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   785k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   785k|    static_cast<    \
  |  |  929|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   785k|    static_cast<    \
  |  |  929|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   828k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   920k|    {
 1177|   920k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   874k|    {
 5830|   874k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|  1.84M|    {
 5616|  1.84M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   874k|    {
 1430|   874k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   874k|    {
  437|   874k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.68M|    {
 5374|  1.68M|        return m_args;
 5375|  1.68M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   828k|    {
 7971|   828k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   920k|    {
 1598|   920k|        return has_value();
 1599|   920k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.79M|    {
  485|  1.79M|        return m_has_value;
  486|  1.79M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   874k|    {
 1673|   874k|        return &value();
 1674|   874k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   874k|    {
 1627|   874k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   874k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   874k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   874k|        return this->get_value();
 1629|   874k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   874k|    {
  451|   874k|        return m_value;
  452|   874k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   414k|{
 8934|   414k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   414k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   414k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   414k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  92.8k|{
 8973|  92.8k|    T value;
 8974|  92.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  92.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 89.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  89.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  89.2k|    static_cast<    \
  |  |  929|  89.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  89.2k|    static_cast<    \
  |  |  929|  89.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  92.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   182k|{
 5155|   182k|    check_scan_arg_types<T>();
 5156|       |
 5157|   182k|    basic_scan_arg<Context> arg;
 5158|   182k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   182k|    arg.m_value = make_value<Context>(value);
 5160|   182k|    return arg;
 5161|   182k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   419k|{
 8867|   419k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   419k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   419k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   419k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.70M|{
 5396|  1.70M|    detail::check_scan_arg_types<Args...>();
 5397|  1.70M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.70M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  2.14M|{
 5135|  2.14M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.14M|                  "Scan argument types must be default constructible");
 5137|  2.14M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.14M|                  "Scan argument types must be Destructible");
 5139|  2.14M|    static_assert(
 5140|  2.14M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.14M|        "Scan argument types must not be references");
 5142|  2.14M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|  1.70M|    {
 5349|  1.70M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.70M|    {
 5360|  1.70M|        return {detail::make_arg<
 5361|  1.70M|            kind, Context,
 5362|  1.70M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.70M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.70M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.70M|{
 5170|  1.70M|    return make_value<Context>(value).ref_value;
 5171|  1.70M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  1.89M|{
 5120|  1.89M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  1.89M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  1.89M|                                  needs_context_tag>) {
 5124|  1.89M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  1.89M|    }
 5126|  1.89M|    else {
 5127|  1.89M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  1.89M|            value, context_tag<Context>{}));
 5129|  1.89M|    }
 5130|  1.89M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  1.89M|    {                                                                        \
 4959|  1.89M|        return val;                                                          \
 4960|  1.89M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  2.14M|{
 5089|  2.14M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.14M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.14M|    constexpr bool scannable_char =
 5093|  2.14M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.14M|    static_assert(scannable_char,
 5095|  2.14M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.14M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.14M|    constexpr bool scannable_const =
 5099|  2.14M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.14M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.14M|    constexpr bool scannable_disabled =
 5103|  2.14M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.14M|    static_assert(scannable_disabled,
 5105|  2.14M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.14M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.14M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.14M|    static_assert(
 5110|  2.14M|        scannable,
 5111|  2.14M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.14M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.14M|    return arg_value{arg};
 5115|  2.14M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  2.14M|    {
 4902|  2.14M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   838k|    {
 7975|   838k|        return m_str;
 7976|   838k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  1.70M|    {
 5426|  1.70M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.70M|    {
 5379|  1.70M|        return m_argptrs;
 5380|  1.70M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   838k|{
 8820|   838k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 795k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   795k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   795k|    static_cast<    \
  |  |  929|   795k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   795k|    static_cast<    \
  |  |  929|   795k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   838k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   932k|    {
 1177|   932k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   886k|    {
 5830|   886k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|  1.86M|    {
 5616|  1.86M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   886k|    {
 1430|   886k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   886k|    {
  437|   886k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.70M|    {
 5374|  1.70M|        return m_args;
 5375|  1.70M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   838k|    {
 7971|   838k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   932k|    {
 1598|   932k|        return has_value();
 1599|   932k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.81M|    {
  485|  1.81M|        return m_has_value;
  486|  1.81M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   886k|    {
 1673|   886k|        return &value();
 1674|   886k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   886k|    {
 1627|   886k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   886k|        return this->get_value();
 1629|   886k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   886k|    {
  451|   886k|        return m_value;
  452|   886k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   419k|{
 8934|   419k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   419k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   419k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   419k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  94.4k|{
 8973|  94.4k|    T value;
 8974|  94.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  94.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  94.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  94.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  94.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 90.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  94.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  90.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  90.8k|    static_cast<    \
  |  |  929|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  90.8k|    static_cast<    \
  |  |  929|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  94.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   184k|{
 5155|   184k|    check_scan_arg_types<T>();
 5156|       |
 5157|   184k|    basic_scan_arg<Context> arg;
 5158|   184k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   184k|    arg.m_value = make_value<Context>(value);
 5160|   184k|    return arg;
 5161|   184k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   139k|    {
 2724|   139k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   139k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   139k|    {
 2705|   139k|        return decay_copy(t.begin());
 2706|   139k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|   123M|{
 1949|   123M|    return SCN_FWD(t);
  ------------------
  |  |  930|   123M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   123M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.57M|    {
 2781|  5.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.57M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.57M|    {
 2763|  5.57M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.57M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   399k|{
 8867|   399k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   399k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   399k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   399k|    static_cast<    \
  |  |  929|   399k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   399k|    static_cast<    \
  |  |  929|   399k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   399k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  1.26M|{
 8654|  1.26M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  1.26M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  1.26M|{
 8591|  1.26M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.26M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.26M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.4k, False: 1.19M]
  |  |  ------------------
  ------------------
 8595|  64.4k|        return unexpected(result.error());
 8596|  64.4k|    }
 8597|  1.19M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.26M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  2.78M|{
 4720|  2.78M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.78M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.78M|                  "\n"
 4724|  2.78M|                  "Unsupported range type given as input to a scanning "
 4725|  2.78M|                  "function.\n"
 4726|  2.78M|                  "A range needs to have a character type (value type) "
 4727|  2.78M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.78M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.78M|                  "to be included.\n"
 4730|  2.78M|                  "See the scnlib documentation for more details.");
 4731|  2.78M|    static_assert(
 4732|  2.78M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.78M|        "\n"
 4734|  2.78M|        "Unsupported range type given as input to a scanning "
 4735|  2.78M|        "function.\n"
 4736|  2.78M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.78M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.78M|        "not supported.");
 4739|  2.78M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.78M|                  "\n"
 4741|  2.78M|                  "Unsupported range type given as input to a scanning "
 4742|  2.78M|                  "function.\n"
 4743|  2.78M|                  "file_marker_found cannot be used as an "
 4744|  2.78M|                  "source range type to scn::scan.\n"
 4745|  2.78M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.78M|                  "and do not provide an explicit source range, "
 4747|  2.78M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.78M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.78M|                  "\n"
 4750|  2.78M|                  "Unsupported range type given as input to a scanning "
 4751|  2.78M|                  "function.\n"
 4752|  2.78M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.78M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.78M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.78M|                  "\n"
 4756|  2.78M|                  "Unsupported range type given as input to a scanning "
 4757|  2.78M|                  "function.\n"
 4758|  2.78M|                  "A range needs to model forward_range and have a valid "
 4759|  2.78M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.78M|                  "Examples of scannable ranges are std::string, "
 4761|  2.78M|                  "std::string_view, "
 4762|  2.78M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.78M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.78M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.78M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  2.78M|{
 4690|  2.78M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  2.78M|        return file_marker_found{};
 4692|  2.78M|    }
 4693|  2.78M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  2.78M|        if constexpr (ranges::range<Range>) {
 4695|  2.78M|            return insufficient_range{};
 4696|  2.78M|        }
 4697|  2.78M|        else {
 4698|  2.78M|            return invalid_input_range{};
 4699|  2.78M|        }
 4700|  2.78M|    }
 4701|  2.78M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  2.78M|        return invalid_char_type{};
 4703|  2.78M|    }
 4704|  2.78M|    else {
 4705|  2.78M|        return make_forward_scan_buffer(r);
 4706|  2.78M|    }
 4707|  2.78M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  2.78M|{
 4524|  2.78M|    return basic_scan_forward_buffer_impl(range);
 4525|  2.78M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  2.78M|    {
 4411|  2.78M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  2.78M|    {
 4382|  2.78M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  2.78M|    {
 4151|  2.78M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  2.78M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.43M|    {
 2724|  5.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.43M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.43M|    {
 2705|  5.43M|        return decay_copy(t.begin());
 2706|  5.43M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  8.08M|    {
 3330|  8.08M|        return m_iterator;
 3331|  8.08M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  35.9M|    {
 4415|  35.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 437k, False: 35.4M]
  ------------------
 4416|   437k|            return false;
 4417|   437k|        }
 4418|  35.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  35.4M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  35.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  35.4M|        }
 4421|  35.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 32.7M, False: 2.76M]
  ------------------
 4422|  32.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  32.7M|                                          this->m_current_view.begin(),
 4424|  32.7M|                                          this->m_current_view.end());
 4425|  32.7M|        }
 4426|  35.4M|        m_latest = *m_cursor;
 4427|  35.4M|        ++m_cursor;
 4428|  35.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  35.4M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  35.4M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  35.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  35.4M|        }
 4432|  35.4M|        return true;
 4433|  35.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   106M|    {
 2781|   106M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   106M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   106M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   106M|    {
 2763|   106M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   106M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   106M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|   109M|    {
 3334|   109M|        return m_sentinel;
 3335|   109M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  2.78M|    {
 4071|  2.78M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  2.78M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   139k|    {
 1476|   139k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   139k|    {
  447|   139k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.78M|    {
 1177|  2.78M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  2.64M|{
 5923|  2.64M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  2.64M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.64M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  2.64M|    }
 5927|  2.64M|    else {
 5928|  2.64M|        auto it = ranges::begin(source);
 5929|  2.64M|        while (n > 0) {
 5930|  2.64M|            --n;
 5931|  2.64M|            ++it;
 5932|  2.64M|        }
 5933|  2.64M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  2.64M|    }
 5935|  2.64M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.64M|    {
 2724|  2.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.64M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.64M|    {
 2705|  2.64M|        return decay_copy(t.begin());
 2706|  2.64M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  2.64M|{
 5910|  2.64M|    return ranges::end(source);
 5911|  2.64M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.64M|    {
 2781|  2.64M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.64M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.64M|    {
 2763|  2.64M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.64M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  2.64M|    {
 1430|  2.64M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  2.64M|    {
  437|  2.64M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   799k|    {
 7975|   799k|        return m_str;
 7976|   799k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   799k|{
 8820|   799k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 756k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   756k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   756k|    static_cast<    \
  |  |  929|   756k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   756k|    static_cast<    \
  |  |  929|   756k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   799k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  2.78M|    {
 1598|  2.78M|        return has_value();
 1599|  2.78M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.57M|    {
  485|  5.57M|        return m_has_value;
  486|  5.57M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   139k|    {
 1604|   139k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   139k|        return this->get_unexpected().error();
 1606|   139k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   139k|    {
  468|   139k|        return m_unexpected;
  469|   139k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   880k|    {
 1177|   880k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  2.39M|    {
 1653|  2.39M|        return value();
 1654|  2.39M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  2.64M|    {
 1627|  2.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.64M|        return this->get_value();
 1629|  2.64M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.64M|    {
  451|  2.64M|        return m_value;
  452|  2.64M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   834k|    {
 5830|   834k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  2.64M|    {
 5681|  2.64M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   834k|    {
 1430|   834k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   834k|    {
  437|   834k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  5.43M|    {
 3316|  5.43M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   799k|    {
 7971|   799k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   880k|    {
 1598|   880k|        return has_value();
 1599|   880k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.71M|    {
  485|  1.71M|        return m_has_value;
  486|  1.71M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   834k|    {
 1673|   834k|        return &value();
 1674|   834k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   834k|    {
 1627|   834k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   834k|        return this->get_value();
 1629|   834k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   834k|    {
  451|   834k|        return m_value;
  452|   834k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  2.64M|    {
 5698|  2.64M|        return ranges::begin(m_range);
 5699|  2.64M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   399k|{
 8934|   399k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   399k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   399k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   399k|    static_cast<    \
  |  |  929|   399k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   399k|    static_cast<    \
  |  |  929|   399k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   399k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  1.26M|{
 8672|  1.26M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  1.26M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  1.26M|{
 8607|  1.26M|#if !SCN_DISABLE_LOCALE
 8608|  1.26M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.26M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.26M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.26M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.26M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.4k, False: 1.19M]
  |  |  ------------------
  ------------------
 8615|  64.4k|        return unexpected(result.error());
 8616|  64.4k|    }
 8617|  1.19M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.26M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  81.0k|{
 8973|  81.0k|    T value;
 8974|  81.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  81.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  81.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  81.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  81.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 77.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  81.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  77.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  81.0k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   260k|{
 8685|   260k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   260k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   260k|{
 8631|   260k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   260k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   260k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 249k]
  |  |  ------------------
  ------------------
 8635|  10.7k|        return unexpected(result.error());
 8636|  10.7k|    }
 8637|   249k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   260k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   249k|    {
 1663|   249k|        return std::move(value());
 1664|   249k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   429k|{
 8867|   429k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   429k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   429k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   429k|    static_cast<    \
  |  |  929|   429k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   429k|    static_cast<    \
  |  |  929|   429k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   429k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   859k|    {
 7975|   859k|        return m_str;
 7976|   859k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   859k|{
 8820|   859k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   859k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 816k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   816k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   816k|    static_cast<    \
  |  |  929|   816k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   816k|    static_cast<    \
  |  |  929|   816k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   859k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   949k|    {
 1177|   949k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   902k|    {
 5830|   902k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   902k|    {
 1430|   902k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   902k|    {
  437|   902k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   859k|    {
 7971|   859k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   949k|    {
 1598|   949k|        return has_value();
 1599|   949k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.85M|    {
  485|  1.85M|        return m_has_value;
  486|  1.85M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   902k|    {
 1673|   902k|        return &value();
 1674|   902k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   902k|    {
 1627|   902k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   902k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   902k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   902k|        return this->get_value();
 1629|   902k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   902k|    {
  451|   902k|        return m_value;
  452|   902k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   429k|{
 8934|   429k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   429k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   429k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   429k|    static_cast<    \
  |  |  929|   429k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   429k|    static_cast<    \
  |  |  929|   429k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   429k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  89.2k|{
 8973|  89.2k|    T value;
 8974|  89.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  89.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  89.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  89.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  89.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 85.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  89.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  85.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.7k|    static_cast<    \
  |  |  929|  85.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.7k|    static_cast<    \
  |  |  929|  85.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  89.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   434k|{
 8867|   434k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   434k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   434k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   434k|    static_cast<    \
  |  |  929|   434k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   434k|    static_cast<    \
  |  |  929|   434k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   434k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   869k|    {
 7975|   869k|        return m_str;
 7976|   869k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   869k|{
 8820|   869k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   869k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 826k]
  |  |  ------------------
  ------------------
 8821|  42.9k|        return unexpected(result.error());
 8822|  42.9k|    }
 8823|   826k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   826k|    static_cast<    \
  |  |  929|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   826k|    static_cast<    \
  |  |  929|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   869k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  46.5k|    {
 1476|  46.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  46.5k|    {
  447|  46.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   959k|    {
 1177|   959k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   912k|    {
 5830|   912k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   912k|    {
 1430|   912k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   912k|    {
  437|   912k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   869k|    {
 7971|   869k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   959k|    {
 1598|   959k|        return has_value();
 1599|   959k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.87M|    {
  485|  1.87M|        return m_has_value;
  486|  1.87M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   912k|    {
 1673|   912k|        return &value();
 1674|   912k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   912k|    {
 1627|   912k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   912k|        return this->get_value();
 1629|   912k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   912k|    {
  451|   912k|        return m_value;
  452|   912k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   434k|{
 8934|   434k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   434k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   434k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   434k|    static_cast<    \
  |  |  929|   434k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   434k|    static_cast<    \
  |  |  929|   434k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   434k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  90.3k|{
 8973|  90.3k|    T value;
 8974|  90.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  90.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  90.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  90.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  90.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.58k, False: 86.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.58k|    }                                                  \
  |  |  |  | 3671|  90.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  86.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  86.7k|    static_cast<    \
  |  |  929|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  86.7k|    static_cast<    \
  |  |  929|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  90.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   286k|    {
 2724|   286k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   286k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   286k|    {
 2705|   286k|        return decay_copy(t.begin());
 2706|   286k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.18M|{
 1949|  2.18M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.18M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   776k|    {
 2781|   776k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   776k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   776k|    {
 2763|   776k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   776k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   235k|{
 5396|   235k|    detail::check_scan_arg_types<Args...>();
 5397|   235k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   235k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   235k|    {
 5349|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   235k|    {
 5360|   235k|        return {detail::make_arg<
 5361|   235k|            kind, Context,
 5362|   235k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   235k|                                 typename Context::char_type>::value>(args)...};
 5364|   235k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   235k|{
 5170|   235k|    return make_value<Context>(value).ref_value;
 5171|   235k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   255k|{
 5120|   255k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   255k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   255k|                                  needs_context_tag>) {
 5124|   255k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   255k|    }
 5126|   255k|    else {
 5127|   255k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   255k|            value, context_tag<Context>{}));
 5129|   255k|    }
 5130|   255k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   255k|    {                                                                        \
 4959|   255k|        return val;                                                          \
 4960|   255k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   176k|{
 8591|   176k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   176k|    auto result = vscan_impl(buffer, format, args);
 8594|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 47.9k]
  |  |  ------------------
  ------------------
 8595|   128k|        return unexpected(result.error());
 8596|   128k|    }
 8597|  47.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   176k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   384k|{
 4720|   384k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   384k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   384k|                  "\n"
 4724|   384k|                  "Unsupported range type given as input to a scanning "
 4725|   384k|                  "function.\n"
 4726|   384k|                  "A range needs to have a character type (value type) "
 4727|   384k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   384k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   384k|                  "to be included.\n"
 4730|   384k|                  "See the scnlib documentation for more details.");
 4731|   384k|    static_assert(
 4732|   384k|        !std::is_same_v<T, custom_char_traits>,
 4733|   384k|        "\n"
 4734|   384k|        "Unsupported range type given as input to a scanning "
 4735|   384k|        "function.\n"
 4736|   384k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   384k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   384k|        "not supported.");
 4739|   384k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   384k|                  "\n"
 4741|   384k|                  "Unsupported range type given as input to a scanning "
 4742|   384k|                  "function.\n"
 4743|   384k|                  "file_marker_found cannot be used as an "
 4744|   384k|                  "source range type to scn::scan.\n"
 4745|   384k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   384k|                  "and do not provide an explicit source range, "
 4747|   384k|                  "or use scn::scan with a FILE* directly.");
 4748|   384k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   384k|                  "\n"
 4750|   384k|                  "Unsupported range type given as input to a scanning "
 4751|   384k|                  "function.\n"
 4752|   384k|                  "In order to be scannable, a range needs to satisfy "
 4753|   384k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   384k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   384k|                  "\n"
 4756|   384k|                  "Unsupported range type given as input to a scanning "
 4757|   384k|                  "function.\n"
 4758|   384k|                  "A range needs to model forward_range and have a valid "
 4759|   384k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   384k|                  "Examples of scannable ranges are std::string, "
 4761|   384k|                  "std::string_view, "
 4762|   384k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   384k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   384k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   384k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   384k|{
 4659|   384k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   384k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   384k|    }
 4662|   384k|    else {
 4663|   384k|        return invalid_char_type{};
 4664|   384k|    }
 4665|   384k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   384k|    {
 2855|   384k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   384k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   384k|    {
 2836|   384k|        return t.data();
 2837|   384k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   384k|    {
 3231|   384k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 653, False: 383k]
  ------------------
 3232|   384k|                   ? nullptr
 3233|   384k|                   : std::addressof(*ranges::begin(derived()));
 3234|   384k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   384k|    {
 3005|   384k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   384k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   384k|    {
 2978|   384k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   384k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   639k|    {
 3339|   639k|        return m_iterator == m_sentinel;
 3340|   639k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   768k|    {
 3185|   768k|        return static_cast<const D&>(*this);
 3186|   768k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   489k|    {
 2724|   489k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   489k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   489k|    {
 2705|   489k|        return decay_copy(t.begin());
 2706|   489k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  10.8M|    {
 3330|  10.8M|        return m_iterator;
 3331|  10.8M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   384k|    {
 2930|   384k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   384k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   384k|    {
 2896|   384k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   384k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.61M|    {
 3346|  1.61M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.61M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   279k|    {
 1476|   279k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   279k|    {
  447|   279k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   384k|    {
 1177|   384k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   105k|{
 5923|   105k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   105k|                      ranges::iterator_t<SourceRange>>) {
 5925|   105k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   105k|    }
 5927|   105k|    else {
 5928|   105k|        auto it = ranges::begin(source);
 5929|   105k|        while (n > 0) {
 5930|   105k|            --n;
 5931|   105k|            ++it;
 5932|   105k|        }
 5933|   105k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   105k|    }
 5935|   105k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   526k|    {
 2724|   526k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   526k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   526k|    {
 2705|   526k|        return decay_copy(t.begin());
 2706|   526k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   105k|{
 5910|   105k|    return ranges::end(source);
 5911|   105k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   105k|    {
 2781|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   105k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   105k|    {
 2763|   105k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   105k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  5.57M|    {
 3334|  5.57M|        return m_sentinel;
 3335|  5.57M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   105k|    {
 1430|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   105k|    {
  437|   105k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   117k|    {
 7975|   117k|        return m_str;
 7976|   117k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   235k|    {
 5426|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   235k|    {
 5379|   235k|        return m_argptrs;
 5380|   235k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   707k|    {
 5478|   707k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   117k|{
 8820|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 31.6k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  31.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.6k|    static_cast<    \
  |  |  929|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.6k|    static_cast<    \
  |  |  929|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   117k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   384k|    {
 1598|   384k|        return has_value();
 1599|   384k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   769k|    {
  485|   769k|        return m_has_value;
  486|   769k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   279k|    {
 1604|   279k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   279k|        return this->get_unexpected().error();
 1606|   279k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   279k|    {
  468|   279k|        return m_unexpected;
  469|   279k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   127k|    {
 1177|   127k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  95.9k|    {
 1653|  95.9k|        return value();
 1654|  95.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   105k|    {
 1627|   105k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   105k|        return this->get_value();
 1629|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   105k|    {
  451|   105k|        return m_value;
  452|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  34.8k|    {
 5830|  34.8k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   105k|    {
 5681|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  34.8k|    {
 1430|  34.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  34.8k|    {
  437|  34.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   235k|    {
 5374|   235k|        return m_args;
 5375|   235k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  3.76M|    {
 3316|  3.76M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   707k|{
 7696|   707k|    return s;
 7697|   707k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   707k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   117k|    {
 7971|   117k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   127k|    {
 1598|   127k|        return has_value();
 1599|   127k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   162k|    {
  485|   162k|        return m_has_value;
  486|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  34.8k|    {
 1673|  34.8k|        return &value();
 1674|  34.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  34.8k|    {
 1627|  34.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  34.8k|        return this->get_value();
 1629|  34.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  34.8k|    {
  451|  34.8k|        return m_value;
  452|  34.8k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   105k|    {
 5698|   105k|        return ranges::begin(m_range);
 5699|   105k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   176k|{
 8607|   176k|#if !SCN_DISABLE_LOCALE
 8608|   176k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   176k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   176k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   176k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 47.9k]
  |  |  ------------------
  ------------------
 8615|   128k|        return unexpected(result.error());
 8616|   128k|    }
 8617|  47.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   176k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  20.5k|{
 5155|  20.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  20.5k|    basic_scan_arg<Context> arg;
 5158|  20.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  20.5k|    arg.m_value = make_value<Context>(value);
 5160|  20.5k|    return arg;
 5161|  20.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   769k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  30.9k|{
 8631|  30.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  30.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  30.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.4k, False: 9.50k]
  |  |  ------------------
  ------------------
 8635|  21.4k|        return unexpected(result.error());
 8636|  21.4k|    }
 8637|  9.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  9.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  30.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  9.50k|    {
 1663|  9.50k|        return std::move(value());
 1664|  9.50k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   235k|{
 5396|   235k|    detail::check_scan_arg_types<Args...>();
 5397|   235k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   235k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   235k|    {
 5349|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   235k|    {
 5360|   235k|        return {detail::make_arg<
 5361|   235k|            kind, Context,
 5362|   235k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   235k|                                 typename Context::char_type>::value>(args)...};
 5364|   235k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   235k|{
 5170|   235k|    return make_value<Context>(value).ref_value;
 5171|   235k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   256k|{
 5120|   256k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   256k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   256k|                                  needs_context_tag>) {
 5124|   256k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   256k|    }
 5126|   256k|    else {
 5127|   256k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   256k|            value, context_tag<Context>{}));
 5129|   256k|    }
 5130|   256k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   256k|    {                                                                        \
 4959|   256k|        return val;                                                          \
 4960|   256k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   117k|    {
 7975|   117k|        return m_str;
 7976|   117k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   235k|    {
 5426|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   235k|    {
 5379|   235k|        return m_argptrs;
 5380|   235k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   117k|{
 8820|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 31.9k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  31.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.9k|    static_cast<    \
  |  |  929|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.9k|    static_cast<    \
  |  |  929|  31.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   117k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  35.0k|    {
 5830|  35.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  35.0k|    {
 1430|  35.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  35.0k|    {
  437|  35.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   235k|    {
 5374|   235k|        return m_args;
 5375|   235k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   117k|    {
 7971|   117k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   163k|    {
  485|   163k|        return m_has_value;
  486|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  35.0k|    {
 1673|  35.0k|        return &value();
 1674|  35.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  35.0k|    {
 1627|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.0k|        return this->get_value();
 1629|  35.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  35.0k|    {
  451|  35.0k|        return m_value;
  452|  35.0k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  20.6k|{
 5155|  20.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  20.6k|    basic_scan_arg<Context> arg;
 5158|  20.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  20.6k|    arg.m_value = make_value<Context>(value);
 5160|  20.6k|    return arg;
 5161|  20.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   236k|{
 5396|   236k|    detail::check_scan_arg_types<Args...>();
 5397|   236k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   236k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   236k|    {
 5349|   236k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   236k|    {
 5360|   236k|        return {detail::make_arg<
 5361|   236k|            kind, Context,
 5362|   236k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   236k|                                 typename Context::char_type>::value>(args)...};
 5364|   236k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   236k|{
 5170|   236k|    return make_value<Context>(value).ref_value;
 5171|   236k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   257k|{
 5120|   257k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   257k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   257k|                                  needs_context_tag>) {
 5124|   257k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   257k|    }
 5126|   257k|    else {
 5127|   257k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   257k|            value, context_tag<Context>{}));
 5129|   257k|    }
 5130|   257k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   257k|    {                                                                        \
 4959|   257k|        return val;                                                          \
 4960|   257k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   118k|    {
 7975|   118k|        return m_str;
 7976|   118k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   236k|    {
 5426|   236k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   236k|    {
 5379|   236k|        return m_argptrs;
 5380|   236k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   118k|{
 8820|   118k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 32.2k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  32.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  32.2k|    static_cast<    \
  |  |  929|  32.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  32.2k|    static_cast<    \
  |  |  929|  32.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   118k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  35.5k|    {
 5830|  35.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  35.5k|    {
 1430|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  35.5k|    {
  437|  35.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   236k|    {
 5374|   236k|        return m_args;
 5375|   236k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   118k|    {
 7971|   118k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   164k|    {
  485|   164k|        return m_has_value;
  486|   164k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  35.5k|    {
 1673|  35.5k|        return &value();
 1674|  35.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  35.5k|    {
 1627|  35.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.5k|        return this->get_value();
 1629|  35.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  35.5k|    {
  451|  35.5k|        return m_value;
  452|  35.5k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  20.7k|{
 5155|  20.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  20.7k|    basic_scan_arg<Context> arg;
 5158|  20.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  20.7k|    arg.m_value = make_value<Context>(value);
 5160|  20.7k|    return arg;
 5161|  20.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   279k|    {
 2724|   279k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   279k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   279k|    {
 2705|   279k|        return decay_copy(t.begin());
 2706|   279k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  6.62M|{
 1949|  6.62M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.62M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   768k|    {
 2781|   768k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   768k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   768k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   768k|    {
 2763|   768k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   768k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   768k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   176k|{
 8591|   176k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   176k|    auto result = vscan_impl(buffer, format, args);
 8594|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 47.8k]
  |  |  ------------------
  ------------------
 8595|   128k|        return unexpected(result.error());
 8596|   128k|    }
 8597|  47.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   176k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   384k|{
 4720|   384k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   384k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   384k|                  "\n"
 4724|   384k|                  "Unsupported range type given as input to a scanning "
 4725|   384k|                  "function.\n"
 4726|   384k|                  "A range needs to have a character type (value type) "
 4727|   384k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   384k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   384k|                  "to be included.\n"
 4730|   384k|                  "See the scnlib documentation for more details.");
 4731|   384k|    static_assert(
 4732|   384k|        !std::is_same_v<T, custom_char_traits>,
 4733|   384k|        "\n"
 4734|   384k|        "Unsupported range type given as input to a scanning "
 4735|   384k|        "function.\n"
 4736|   384k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   384k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   384k|        "not supported.");
 4739|   384k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   384k|                  "\n"
 4741|   384k|                  "Unsupported range type given as input to a scanning "
 4742|   384k|                  "function.\n"
 4743|   384k|                  "file_marker_found cannot be used as an "
 4744|   384k|                  "source range type to scn::scan.\n"
 4745|   384k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   384k|                  "and do not provide an explicit source range, "
 4747|   384k|                  "or use scn::scan with a FILE* directly.");
 4748|   384k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   384k|                  "\n"
 4750|   384k|                  "Unsupported range type given as input to a scanning "
 4751|   384k|                  "function.\n"
 4752|   384k|                  "In order to be scannable, a range needs to satisfy "
 4753|   384k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   384k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   384k|                  "\n"
 4756|   384k|                  "Unsupported range type given as input to a scanning "
 4757|   384k|                  "function.\n"
 4758|   384k|                  "A range needs to model forward_range and have a valid "
 4759|   384k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   384k|                  "Examples of scannable ranges are std::string, "
 4761|   384k|                  "std::string_view, "
 4762|   384k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   384k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   384k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   384k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   384k|{
 4690|   384k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   384k|        return file_marker_found{};
 4692|   384k|    }
 4693|   384k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   384k|        if constexpr (ranges::range<Range>) {
 4695|   384k|            return insufficient_range{};
 4696|   384k|        }
 4697|   384k|        else {
 4698|   384k|            return invalid_input_range{};
 4699|   384k|        }
 4700|   384k|    }
 4701|   384k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   384k|        return invalid_char_type{};
 4703|   384k|    }
 4704|   384k|    else {
 4705|   384k|        return make_forward_scan_buffer(r);
 4706|   384k|    }
 4707|   384k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   384k|{
 4524|   384k|    return basic_scan_forward_buffer_impl(range);
 4525|   384k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   384k|    {
 4411|   384k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   384k|    {
 4382|   384k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   384k|    {
 4151|   384k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   384k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   489k|    {
 2724|   489k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   489k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   489k|    {
 2705|   489k|        return decay_copy(t.begin());
 2706|   489k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   594k|    {
 3330|   594k|        return m_iterator;
 3331|   594k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.73M|    {
 4415|  1.73M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 160k, False: 1.57M]
  ------------------
 4416|   160k|            return false;
 4417|   160k|        }
 4418|  1.57M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.57M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.57M|        }
 4421|  1.57M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.18M, False: 383k]
  ------------------
 4422|  1.18M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.18M|                                          this->m_current_view.begin(),
 4424|  1.18M|                                          this->m_current_view.end());
 4425|  1.18M|        }
 4426|  1.57M|        m_latest = *m_cursor;
 4427|  1.57M|        ++m_cursor;
 4428|  1.57M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.57M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.57M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.57M|        }
 4432|  1.57M|        return true;
 4433|  1.57M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.87M|    {
 2781|  4.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.87M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.87M|    {
 2763|  4.87M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.87M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  4.97M|    {
 3334|  4.97M|        return m_sentinel;
 3335|  4.97M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   384k|    {
 4071|   384k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   384k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   384k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   279k|    {
 1476|   279k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   279k|    {
  447|   279k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   384k|    {
 1177|   384k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   105k|{
 5923|   105k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   105k|                      ranges::iterator_t<SourceRange>>) {
 5925|   105k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   105k|    }
 5927|   105k|    else {
 5928|   105k|        auto it = ranges::begin(source);
 5929|   105k|        while (n > 0) {
 5930|   105k|            --n;
 5931|   105k|            ++it;
 5932|   105k|        }
 5933|   105k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   105k|    }
 5935|   105k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   105k|    {
 2724|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   105k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   105k|    {
 2705|   105k|        return decay_copy(t.begin());
 2706|   105k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   105k|{
 5910|   105k|    return ranges::end(source);
 5911|   105k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   105k|    {
 2781|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   105k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   105k|    {
 2763|   105k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   105k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   105k|    {
 1430|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   105k|    {
  437|   105k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   117k|    {
 7975|   117k|        return m_str;
 7976|   117k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   117k|{
 8820|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 31.6k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  31.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.6k|    static_cast<    \
  |  |  929|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.6k|    static_cast<    \
  |  |  929|  31.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   117k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   384k|    {
 1598|   384k|        return has_value();
 1599|   384k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   768k|    {
  485|   768k|        return m_has_value;
  486|   768k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   279k|    {
 1604|   279k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   279k|        return this->get_unexpected().error();
 1606|   279k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   279k|    {
  468|   279k|        return m_unexpected;
  469|   279k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   127k|    {
 1177|   127k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  95.6k|    {
 1653|  95.6k|        return value();
 1654|  95.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   105k|    {
 1627|   105k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   105k|        return this->get_value();
 1629|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   105k|    {
  451|   105k|        return m_value;
  452|   105k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  34.7k|    {
 5830|  34.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   105k|    {
 5681|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  34.7k|    {
 1430|  34.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  34.7k|    {
  437|  34.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   489k|    {
 3316|   489k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   117k|    {
 7971|   117k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   127k|    {
 1598|   127k|        return has_value();
 1599|   127k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   162k|    {
  485|   162k|        return m_has_value;
  486|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  34.7k|    {
 1673|  34.7k|        return &value();
 1674|  34.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  34.7k|    {
 1627|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  34.7k|        return this->get_value();
 1629|  34.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  34.7k|    {
  451|  34.7k|        return m_value;
  452|  34.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   105k|    {
 5698|   105k|        return ranges::begin(m_range);
 5699|   105k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   176k|{
 8607|   176k|#if !SCN_DISABLE_LOCALE
 8608|   176k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   176k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   176k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   176k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 47.8k]
  |  |  ------------------
  ------------------
 8615|   128k|        return unexpected(result.error());
 8616|   128k|    }
 8617|  47.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   176k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  30.9k|{
 8631|  30.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  30.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  30.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.4k, False: 9.46k]
  |  |  ------------------
  ------------------
 8635|  21.4k|        return unexpected(result.error());
 8636|  21.4k|    }
 8637|  9.46k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  30.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  9.46k|    {
 1663|  9.46k|        return std::move(value());
 1664|  9.46k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   117k|    {
 7975|   117k|        return m_str;
 7976|   117k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   117k|{
 8820|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 31.8k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  31.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.8k|    static_cast<    \
  |  |  929|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.8k|    static_cast<    \
  |  |  929|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   117k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  35.0k|    {
 5830|  35.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  35.0k|    {
 1430|  35.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  35.0k|    {
  437|  35.0k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   117k|    {
 7971|   117k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   163k|    {
  485|   163k|        return m_has_value;
  486|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  35.0k|    {
 1673|  35.0k|        return &value();
 1674|  35.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  35.0k|    {
 1627|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.0k|        return this->get_value();
 1629|  35.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  35.0k|    {
  451|  35.0k|        return m_value;
  452|  35.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   118k|    {
 7975|   118k|        return m_str;
 7976|   118k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   118k|{
 8820|   118k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 32.2k]
  |  |  ------------------
  ------------------
 8821|  85.9k|        return unexpected(result.error());
 8822|  85.9k|    }
 8823|  32.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  32.2k|    static_cast<    \
  |  |  929|  32.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  32.2k|    static_cast<    \
  |  |  929|  32.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   118k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  93.0k|    {
 1476|  93.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  93.0k|    {
  447|  93.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   128k|    {
 1177|   128k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  35.4k|    {
 5830|  35.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  35.4k|    {
 1430|  35.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  35.4k|    {
  437|  35.4k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   118k|    {
 7971|   118k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   128k|    {
 1598|   128k|        return has_value();
 1599|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   163k|    {
  485|   163k|        return m_has_value;
  486|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  35.4k|    {
 1673|  35.4k|        return &value();
 1674|  35.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  35.4k|    {
 1627|  35.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  35.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  35.4k|        return this->get_value();
 1629|  35.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  35.4k|    {
  451|  35.4k|        return m_value;
  452|  35.4k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  6.76M|    {
 3568|  6.76M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  6.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  6.76M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  28.9M|    {
 3574|  28.9M|        return m_code == good;
 3575|  28.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   644k|    {
 3585|   644k|        return m_code;
 3586|   644k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   127M|    {
 3330|   127M|        return m_iterator;
 3331|   127M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  13.5M|    {
 3330|  13.5M|        return m_iterator;
 3331|  13.5M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  4.48M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|  1.24M|    {
 6272|  1.24M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.24M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|  1.24M|            m_specs.localized = true;
 6274|  1.24M|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|  1.24M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  3.23M|    {
 6303|  3.23M|        m_specs.type = type;
 6304|  3.23M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  4.48M|    {
 6376|  4.48M|        return static_cast<bool>(m_error);
 6377|  4.48M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   644k|{
 3609|   644k|    return a.code() == b;
 3610|   644k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   644k|{
 3613|   644k|    return !(a == b);
 3614|   644k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.24M|{
 7063|  1.24M|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.24M]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.24M]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.24M]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 1.24M]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.24M]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.24M]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.24M]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.24M]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 1.24M]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.24M]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.24M]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.24M]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.24M]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.24M]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 1.24M]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.24M]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   388k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 388k, False: 855k]
  ------------------
 7091|   812k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 424k, False: 819k]
  ------------------
 7092|  1.24M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 431k, False: 812k]
  ------------------
 7093|  1.24M|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 1.24M]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 1.24M]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.24M]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 1.24M]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.24M]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.24M]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.24M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.24M|            SCN_CLANG_POP
 7110|  1.24M|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.24M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  5.42M|    {
 2896|  5.42M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  5.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  5.42M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  5.42M|    {
 2930|  5.42M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  5.42M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  5.42M|    {
 2953|  5.42M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  5.42M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  5.42M|    {
 2962|  5.42M|        return fn::impl(std::forward<T>(t));
 2963|  5.42M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.38k|{
 3654|  1.38k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.38k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.34k|{
 3654|  2.34k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.34k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  41.5k|{
 3654|  41.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  41.5k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  4.48M|{
 7193|  4.48M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 3.23M, False: 1.24M]
  ------------------
 7194|  4.48M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 3.23M]
  ------------------
 7195|  3.23M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 3.23M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  4.48M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   811M|    {
 4195|   811M|        return m_end == nullptr;
 4196|   811M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  2.19M|{
 3715|  2.19M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  2.19M|                                          const CharT*, const CharT*>) {
 3717|  2.19M|        return {first, last};
 3718|  2.19M|    }
 3719|  2.19M|    else {
 3720|  2.19M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  2.19M|    }
 3722|  2.19M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  10.6M|    {
 4211|  10.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 10.6M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  10.6M|        return parent()->get_segment_starting_at(position());
 4217|  10.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   452M|    {
 4205|   452M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   452M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   452M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   452M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   452M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  10.6M|    {
 4101|  10.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  10.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70M, False: 5.91M]
  |  |  ------------------
  ------------------
 4102|  10.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  4.70M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  4.70M|        }
 4105|  5.91M|        const auto start = pos - m_putback_buffer.size();
 4106|  5.91M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  5.91M|        return m_current_view.substr(start);
 4108|  5.91M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  7.39M|    {
 4200|  7.39M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  7.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  7.39M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  7.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  19.4M|    {
 4190|  19.4M|        return m_position;
 4191|  19.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  8.36M|    {
 4123|  8.36M|        return m_is_contiguous;
 4124|  8.36M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  39.1M|    {
 4195|  39.1M|        return m_end == nullptr;
 4196|  39.1M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   101k|{
 3715|   101k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   101k|                                          const CharT*, const CharT*>) {
 3717|   101k|        return {first, last};
 3718|   101k|    }
 3719|   101k|    else {
 3720|   101k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   101k|    }
 3722|   101k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   596k|    {
 4211|   596k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 596k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   596k|        return parent()->get_segment_starting_at(position());
 4217|   596k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  21.1M|    {
 4205|  21.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  21.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  21.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  21.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   596k|    {
 4101|   596k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206k, False: 389k]
  |  |  ------------------
  ------------------
 4102|   596k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   206k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   206k|        }
 4105|   389k|        const auto start = pos - m_putback_buffer.size();
 4106|   389k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   389k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   389k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   389k|        return m_current_view.substr(start);
 4108|   389k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|   979k|    {
 4200|   979k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|   979k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|   979k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.61M|    {
 4190|  1.61M|        return m_position;
 4191|  1.61M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.15M|    {
 4123|  1.15M|        return m_is_contiguous;
 4124|  1.15M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  24.6M|    {
 3180|  24.6M|        return static_cast<D&>(*this);
 3181|  24.6M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  12.3M|    {
 2978|  12.3M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  12.3M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  12.3M|    {
 3005|  12.3M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  12.3M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  12.3M|    {
 3221|  12.3M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 18.8k, False: 12.3M]
  ------------------
 3222|  12.3M|                   ? nullptr
 3223|  12.3M|                   : std::addressof(*ranges::begin(derived()));
 3224|  12.3M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   508k|    {
 3180|   508k|        return static_cast<D&>(*this);
 3181|   508k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   254k|    {
 2978|   254k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   254k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   254k|    {
 3005|   254k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   254k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   254k|    {
 3221|   254k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 254k]
  ------------------
 3222|   254k|                   ? nullptr
 3223|   254k|                   : std::addressof(*ranges::begin(derived()));
 3224|   254k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  2.00M|    {
 8169|  2.00M|        return ranges::subrange{begin(), end()};
 8170|  2.00M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  5.91M|    {
 8153|  5.91M|        return m_current;
 8154|  5.91M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  2.00M|    {
 8161|  2.00M|        return ranges::default_sentinel;
 8162|  2.00M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  31.0M|    {
 3316|  31.0M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  9.58M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.78M|    {
 1837|  2.78M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.78M|                                            std::forward<F>(f));
 1839|  2.78M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  2.78M|{
 1323|  2.78M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.78M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.78M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.78M|            return result(*std::forward<Exp>(exp));
 1327|  2.78M|        }
 1328|       |
 1329|  2.78M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.78M|        return result(unexpect, monostate{});
 1331|  2.78M|    }
 1332|  2.78M|    else {
 1333|  2.78M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.78M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.78M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.75M, False: 30.0k]
  |  |  ------------------
  ------------------
 1335|  2.78M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.78M|                   : result(unexpect,
 1337|  30.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  30.0k|                                           std::forward<Exp>(exp).error()));
 1339|  2.78M|    }
 1340|  2.78M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  29.8M|    {
  485|  29.8M|        return m_has_value;
  486|  29.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  10.1M|    {
 1663|  10.1M|        return std::move(value());
 1664|  10.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  11.6M|    {
 1627|  11.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  11.6M|        return this->get_value();
 1629|  11.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  11.6M|    {
  451|  11.6M|        return m_value;
  452|  11.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  12.5M|    {
 1430|  12.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  12.5M|    {
  437|  12.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.8M|    {
 1177|  15.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  61.2k|{
 1211|  61.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  61.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  84.2k|    {
 1614|  84.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  84.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  84.2k|        return std::move(this->get_unexpected().error());
 1616|  84.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|   114k|    {
  468|   114k|        return m_unexpected;
  469|   114k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   516k|    {
  361|   516k|        return m_unexpected;
  362|   516k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.72M|    {
 1486|  2.72M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.07M|    {
  447|  3.07M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   291k|    {
 8169|   291k|        return ranges::subrange{begin(), end()};
 8170|   291k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   659k|    {
 8153|   659k|        return m_current;
 8154|   659k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   291k|    {
 8161|   291k|        return ranges::default_sentinel;
 8162|   291k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  3.14M|    {
 3316|  3.14M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   384k|    {
 1837|   384k|        return detail::transform_error_impl(std::move(*this),
 1838|   384k|                                            std::forward<F>(f));
 1839|   384k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   384k|{
 1323|   384k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   384k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   384k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   384k|            return result(*std::forward<Exp>(exp));
 1327|   384k|        }
 1328|       |
 1329|   384k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   384k|        return result(unexpect, monostate{});
 1331|   384k|    }
 1332|   384k|    else {
 1333|   384k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   384k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   384k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 381k, False: 2.45k]
  |  |  ------------------
  ------------------
 1335|   384k|                   ? result(*std::forward<Exp>(exp))
 1336|   384k|                   : result(unexpect,
 1337|  2.45k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.45k|                                           std::forward<Exp>(exp).error()));
 1339|   384k|    }
 1340|   384k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.31M|    {
  485|  3.31M|        return m_has_value;
  486|  3.31M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.30M|    {
 1663|  1.30M|        return std::move(value());
 1664|  1.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.31M|    {
 1627|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.31M|        return this->get_value();
 1629|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.31M|    {
  451|  1.31M|        return m_value;
  452|  1.31M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   775k|    {
 1430|   775k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   775k|    {
  437|   775k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.20M|    {
 1177|  2.20M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  54.0k|    {
 1614|  54.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.0k|        return std::move(this->get_unexpected().error());
 1616|  54.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  55.1k|    {
  468|  55.1k|        return m_unexpected;
  469|  55.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   658k|    {
 1486|   658k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.42M|    {
  447|  1.42M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   241k|    {
  347|   241k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   241k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   241k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   306k|    {
 1476|   306k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  2.90M|    {
  447|  2.90M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.2M|    {
 1177|  15.2M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  12.2M|    {
 1430|  12.2M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  12.2M|    {
  437|  12.2M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  17.9M|    {
 1598|  17.9M|        return has_value();
 1599|  17.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  28.0M|    {
  485|  28.0M|        return m_has_value;
  486|  28.0M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   368k|    {
 1604|   368k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   368k|        return this->get_unexpected().error();
 1606|   368k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   368k|    {
  468|   368k|        return m_unexpected;
  469|   368k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  7.87M|    {
 1663|  7.87M|        return std::move(value());
 1664|  7.87M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  9.75M|    {
 1627|  9.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.75M|        return this->get_value();
 1629|  9.75M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.75M|    {
  451|  9.75M|        return m_value;
  452|  9.75M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   622k|    {
 1476|   622k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.13M|    {
  447|  1.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.20M|    {
 1177|  2.20M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.58M|    {
 1598|  2.58M|        return has_value();
 1599|  2.58M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.15M|    {
  485|  4.15M|        return m_has_value;
  486|  4.15M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   750k|    {
 1604|   750k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   750k|        return this->get_unexpected().error();
 1606|   750k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   750k|    {
  468|   750k|        return m_unexpected;
  469|   750k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   741k|    {
 1663|   741k|        return std::move(value());
 1664|   741k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   818k|    {
 1627|   818k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   818k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   818k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   818k|        return this->get_value();
 1629|   818k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   818k|    {
  451|   818k|        return m_value;
  452|   818k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.70M|    {
 1837|  2.70M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.70M|                                            std::forward<F>(f));
 1839|  2.70M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.70M|{
 1323|  2.70M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.70M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.70M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.70M|            return result(*std::forward<Exp>(exp));
 1327|  2.70M|        }
 1328|       |
 1329|  2.70M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.70M|        return result(unexpect, monostate{});
 1331|  2.70M|    }
 1332|  2.70M|    else {
 1333|  2.70M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.70M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.70M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.68M, False: 26.3k]
  |  |  ------------------
  ------------------
 1335|  2.70M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.70M|                   : result(unexpect,
 1337|  26.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  26.3k|                                           std::forward<Exp>(exp).error()));
 1339|  2.70M|    }
 1340|  2.70M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  10.3M|    {
  485|  10.3M|        return m_has_value;
  486|  10.3M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.68M|    {
 1663|  2.68M|        return std::move(value());
 1664|  2.68M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.65M|    {
 1627|  3.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.65M|        return this->get_value();
 1629|  3.65M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.65M|    {
  451|  3.65M|        return m_value;
  452|  3.65M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  26.3k|    {
 1614|  26.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  26.3k|        return std::move(this->get_unexpected().error());
 1616|  26.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  33.3k|    {
  468|  33.3k|        return m_unexpected;
  469|  33.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.60M|    {
 1486|  2.60M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  19.9M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   344k|    {
 1476|   344k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  24.7M|    {
 4280|  24.7M|        return x.is_at_end();
 4281|  24.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  61.6M|    {
 4324|  61.6M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 61.6M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  61.6M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 61.6M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  61.6M|        return !read_at_position();
 4331|  61.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   265M|    {
 4304|   265M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   265M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   265M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   265M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 265M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   265M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   265M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230M, False: 35.9M]
  |  |  ------------------
  ------------------
 4311|   230M|            return true;
 4312|   230M|        }
 4313|       |
 4314|  71.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 35.9M, False: 35.4M]
  ------------------
 4315|  35.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 437k, False: 35.4M]
  ------------------
 4316|   437k|                return false;
 4317|   437k|            }
 4318|  35.9M|        }
 4319|  35.4M|        return true;
 4320|  35.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   344M|    {
 4081|   344M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   344M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  68.2M|    {
 4239|  68.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  68.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  68.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 68.2M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  68.2M|        auto res = read_at_position();
 4248|  68.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  68.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  68.2M|        return parent()->get_character_at(m_position);
 4250|  68.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  68.2M|    {
 4112|  68.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  68.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5M, False: 25.6M]
  |  |  ------------------
  ------------------
 4113|  68.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  42.5M|            return m_putback_buffer[pos];
 4115|  42.5M|        }
 4116|  25.6M|        const auto start = pos - m_putback_buffer.size();
 4117|  25.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  25.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  25.6M|        return m_current_view[start];
 4119|  25.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  18.0M|    {
 1430|  18.0M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  18.0M|    {
  437|  18.0M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.1M|    {
 1177|  18.1M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   158k|    {
  347|   158k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   158k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   158k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   114k|    {
 1476|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   114k|    {
  447|   114k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   258k|    {
  356|   258k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   258k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   258k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  7.97M|    {
 1598|  7.97M|        return has_value();
 1599|  7.97M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.49M|    {
 1653|  1.49M|        return value();
 1654|  1.49M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  64.8M|    {
 4274|  64.8M|        return !(lhs == rhs);
 4275|  64.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  72.2M|    {
 4269|  72.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 72.2M, False: 0]
  |  Branch (4269:46): [True: 9.39M, False: 62.8M]
  ------------------
 4270|  72.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|   136M|    {
 4225|   136M|        ++m_position;
 4226|   136M|        (void)read_at_position();
 4227|   136M|        return *this;
 4228|   136M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|   100k|    {
  347|   100k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   100k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  22.5k|    {
 1476|  22.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  22.5k|    {
  447|  22.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.88M|    {
 1177|  3.88M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.86M|    {
 1430|  3.86M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  3.86M|    {
  437|  3.86M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  3.88M|    {
 1598|  3.88M|        return has_value();
 1599|  3.88M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.77M|    {
  485|  7.77M|        return m_has_value;
  486|  7.77M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  22.5k|    {
 1604|  22.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.5k|        return this->get_unexpected().error();
 1606|  22.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  22.5k|    {
  468|  22.5k|        return m_unexpected;
  469|  22.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.86M|    {
 1663|  3.86M|        return std::move(value());
 1664|  3.86M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.86M|    {
  451|  3.86M|        return m_value;
  452|  3.86M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  87.9M|    {
 3334|  87.9M|        return m_sentinel;
 3335|  87.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  97.0k|    {
  347|  97.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  97.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  97.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  24.0M|    {
  361|  24.0M|        return m_unexpected;
  362|  24.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  6.53M|    {
  356|  6.53M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.53M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  29.7M|    {
  347|  29.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.7M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  29.7M|    {
  361|  29.7M|        return m_unexpected;
  362|  29.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  29.7M|    {
  356|  29.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  29.7M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   157k|{
 1211|   157k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   157k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  6.28M|    {
  347|  6.28M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  6.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  30.5k|    {
 1604|  30.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  30.5k|        return this->get_unexpected().error();
 1606|  30.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.80M|    {
 1476|  2.80M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.85M|    {
  447|  2.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.9M|    {
 1177|  30.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  1.51M|    {
 1430|  1.51M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.51M|    {
  437|  1.51M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  15.8M|    {
 1476|  15.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  15.8M|    {
  447|  15.8M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  33.7M|    {
 1598|  33.7M|        return has_value();
 1599|  33.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  59.3M|    {
  485|  59.3M|        return m_has_value;
  486|  59.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  7.69M|    {
 1604|  7.69M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.69M|        return this->get_unexpected().error();
 1606|  7.69M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.69M|    {
  468|  7.69M|        return m_unexpected;
  469|  7.69M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  3.02M|    {
 1430|  3.02M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  3.02M|    {
  437|  3.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02M|    {
 1177|  3.02M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    514|    {
 1476|    514|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    514|    {
  447|    514|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  7.84M|    {
 1653|  7.84M|        return value();
 1654|  7.84M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  15.1M|    {
 1627|  15.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.1M|        return this->get_value();
 1629|  15.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  15.1M|    {
  451|  15.1M|        return m_value;
  452|  15.1M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   269k|    {
 1598|   269k|        return has_value();
 1599|   269k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  6.05M|    {
  485|  6.05M|        return m_has_value;
  486|  6.05M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.75M|    {
 1663|  2.75M|        return std::move(value());
 1664|  2.75M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  3.02M|    {
 1627|  3.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.02M|        return this->get_value();
 1629|  3.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  3.02M|    {
  451|  3.02M|        return m_value;
  452|  3.02M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  7.39M|    {
 1837|  7.39M|        return detail::transform_error_impl(std::move(*this),
 1838|  7.39M|                                            std::forward<F>(f));
 1839|  7.39M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  7.39M|{
 1323|  7.39M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  7.39M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  7.39M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  7.39M|            return result(*std::forward<Exp>(exp));
 1327|  7.39M|        }
 1328|       |
 1329|  7.39M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  7.39M|        return result(unexpect, monostate{});
 1331|  7.39M|    }
 1332|  7.39M|    else {
 1333|  7.39M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  7.39M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  7.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.34M, False: 54.2k]
  |  |  ------------------
  ------------------
 1335|  7.39M|                   ? result(*std::forward<Exp>(exp))
 1336|  7.39M|                   : result(unexpect,
 1337|  54.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.2k|                                           std::forward<Exp>(exp).error()));
 1339|  7.39M|    }
 1340|  7.39M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  10.7M|    {
  437|  10.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  54.2k|    {
 1486|  54.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  7.34M|    {
 1663|  7.34M|        return std::move(value());
 1664|  7.34M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  3.19M|    {
 3330|  3.19M|        return m_iterator;
 3331|  3.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  3.19M|    {
 3334|  3.19M|        return m_sentinel;
 3335|  3.19M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  18.5M|    {
 1598|  18.5M|        return has_value();
 1599|  18.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  29.0M|    {
  485|  29.0M|        return m_has_value;
  486|  29.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   454k|    {
 1604|   454k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   454k|        return this->get_unexpected().error();
 1606|   454k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   454k|    {
  468|   454k|        return m_unexpected;
  469|   454k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  8.06M|    {
 1663|  8.06M|        return std::move(value());
 1664|  8.06M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  10.0M|    {
 1627|  10.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.0M|        return this->get_value();
 1629|  10.0M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.0M|    {
  451|  10.0M|        return m_value;
  452|  10.0M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.04M|{
  326|  5.04M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.04M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  2.52M|    {
 3316|  2.52M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  36.8M|    {
 4291|  36.8M|        return !x.is_at_end();
 4292|  36.8M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  33.3k|    {
 1476|  33.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  33.3k|    {
  447|  33.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.68M|    {
 1177|  6.68M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  6.65M|    {
 1430|  6.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  6.65M|    {
  437|  6.65M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  3.97M|    {
 1598|  3.97M|        return has_value();
 1599|  3.97M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   976k|    {
 1653|   976k|        return value();
 1654|   976k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  18.9k|    {
 1476|  18.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  18.9k|    {
  447|  18.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.66M|    {
 1177|  3.66M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.64M|    {
 1430|  3.64M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  3.64M|    {
  437|  3.64M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  3.66M|    {
 1598|  3.66M|        return has_value();
 1599|  3.66M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.32M|    {
  485|  7.32M|        return m_has_value;
  486|  7.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  18.9k|    {
 1604|  18.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.9k|        return this->get_unexpected().error();
 1606|  18.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  18.9k|    {
  468|  18.9k|        return m_unexpected;
  469|  18.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.64M|    {
 1663|  3.64M|        return std::move(value());
 1664|  3.64M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.64M|    {
 1627|  3.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.64M|        return this->get_value();
 1629|  3.64M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.64M|    {
  451|  3.64M|        return m_value;
  452|  3.64M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  6.99k|    {
 1604|  6.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.99k|        return this->get_unexpected().error();
 1606|  6.99k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  2.70M|    {
 1476|  2.70M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  2.70M|    {
  447|  2.70M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.3M|    {
 1177|  15.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   993k|    {
 1430|   993k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   993k|    {
  437|   993k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.4M|    {
 1476|  10.4M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  10.4M|    {
  447|  10.4M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  17.9M|    {
 1598|  17.9M|        return has_value();
 1599|  17.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  30.6M|    {
  485|  30.6M|        return m_has_value;
  486|  30.6M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  7.22M|    {
 1604|  7.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  7.22M|        return this->get_unexpected().error();
 1606|  7.22M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  7.22M|    {
  468|  7.22M|        return m_unexpected;
  469|  7.22M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  2.76M|    {
 1430|  2.76M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.76M|    {
  437|  2.76M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.76M|    {
 1177|  2.76M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    162|    {
 1476|    162|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    162|    {
  447|    162|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.89M|    {
 1653|  2.89M|        return value();
 1654|  2.89M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.89M|    {
 1627|  2.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89M|        return this->get_value();
 1629|  2.89M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.89M|    {
  451|  2.89M|        return m_value;
  452|  2.89M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  85.1k|    {
 1598|  85.1k|        return has_value();
 1599|  85.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  5.53M|    {
  485|  5.53M|        return m_has_value;
  486|  5.53M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.68M|    {
 1663|  2.68M|        return std::move(value());
 1664|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.76M|    {
 1627|  2.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.76M|        return this->get_value();
 1629|  2.76M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  2.76M|    {
  451|  2.76M|        return m_value;
  452|  2.76M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.13M|    {
  437|  1.13M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.19M|    {
 2855|  5.19M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.19M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.19M|    {
 2836|  5.19M|        return t.data();
 2837|  5.19M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  1.27M|    {
 1476|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  1.27M|    {
  447|  1.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.5M|    {
 1177|  17.5M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  16.0M|    {
 1430|  16.0M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  16.0M|    {
  437|  16.0M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  10.8M|    {
 1663|  10.8M|        return std::move(value());
 1664|  10.8M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  6.43M|{
 1211|  6.43M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  6.43M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  2.75M|    {
 1837|  2.75M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.75M|                                            std::forward<F>(f));
 1839|  2.75M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  2.75M|{
 1323|  2.75M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.75M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.75M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.75M|            return result(*std::forward<Exp>(exp));
 1327|  2.75M|        }
 1328|       |
 1329|  2.75M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.75M|        return result(unexpect, monostate{});
 1331|  2.75M|    }
 1332|  2.75M|    else {
 1333|  2.75M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.75M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.75M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.75M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.75M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.75M|    }
 1340|  2.75M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.75M|    {
 1430|  2.75M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  2.75M|    {
  437|  2.75M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.75M|    {
 1177|  2.75M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.75M|    {
 1598|  2.75M|        return has_value();
 1599|  2.75M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.51M|    {
  485|  5.51M|        return m_has_value;
  486|  5.51M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.75M|    {
 1663|  2.75M|        return std::move(value());
 1664|  2.75M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.75M|    {
 1627|  2.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.75M|        return this->get_value();
 1629|  2.75M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.75M|    {
  451|  2.75M|        return m_value;
  452|  2.75M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  2.69M|    {
 1823|  2.69M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.69M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  2.69M|{
 1323|  2.69M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.69M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.69M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.69M|            return result(*std::forward<Exp>(exp));
 1327|  2.69M|        }
 1328|       |
 1329|  2.69M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.69M|        return result(unexpect, monostate{});
 1331|  2.69M|    }
 1332|  2.69M|    else {
 1333|  2.69M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.69M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.69M]
  |  |  ------------------
  ------------------
 1335|  2.69M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.69M|                   : result(unexpect,
 1337|  2.69M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.69M|                                           std::forward<Exp>(exp).error()));
 1339|  2.69M|    }
 1340|  2.69M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   141k|    {
  437|   141k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  1.99M|    {
 1653|  1.99M|        return value();
 1654|  1.99M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   672k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   268k|    {
 1673|   268k|        return &value();
 1674|   268k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.94M|    {
 2724|  1.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.94M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.94M|    {
 2705|  1.94M|        return decay_copy(t.begin());
 2706|  1.94M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.94M|{
 1949|  1.94M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.94M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|  1.20M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  2.68M|    {
 1837|  2.68M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.68M|                                            std::forward<F>(f));
 1839|  2.68M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  2.68M|{
 1323|  2.68M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.68M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.68M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.68M|            return result(*std::forward<Exp>(exp));
 1327|  2.68M|        }
 1328|       |
 1329|  2.68M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.68M|        return result(unexpect, monostate{});
 1331|  2.68M|    }
 1332|  2.68M|    else {
 1333|  2.68M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.68M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.68M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.68M, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.68M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.68M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.68M|    }
 1340|  2.68M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  2.68M|    {
 1430|  2.68M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  2.68M|    {
  437|  2.68M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.68M|    {
 1177|  2.68M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  2.68M|    {
 1598|  2.68M|        return has_value();
 1599|  2.68M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.36M|    {
  485|  5.36M|        return m_has_value;
  486|  5.36M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  2.68M|    {
 1663|  2.68M|        return std::move(value());
 1664|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  2.68M|    {
 1627|  2.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.68M|        return this->get_value();
 1629|  2.68M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.68M|    {
  451|  2.68M|        return m_value;
  452|  2.68M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  2.57M|    {
 1823|  2.57M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  2.57M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  2.57M|{
 1323|  2.57M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.57M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.57M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.57M|            return result(*std::forward<Exp>(exp));
 1327|  2.57M|        }
 1328|       |
 1329|  2.57M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.57M|        return result(unexpect, monostate{});
 1331|  2.57M|    }
 1332|  2.57M|    else {
 1333|  2.57M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.57M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.57M]
  |  |  ------------------
  ------------------
 1335|  2.57M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.57M|                   : result(unexpect,
 1337|  2.57M|                            trivial_invoke(std::forward<F>(f),
 1338|  2.57M|                                           std::forward<Exp>(exp).error()));
 1339|  2.57M|    }
 1340|  2.57M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  2.57M|    {
 3648|  2.57M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.88M|    {
 1653|  1.88M|        return value();
 1654|  1.88M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  84.9k|    {
 1673|  84.9k|        return &value();
 1674|  84.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  2.69M|    {
 3648|  2.69M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   770k|    {
 1476|   770k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  2.74M|    {
 4280|  2.74M|        return x.is_at_end();
 4281|  2.74M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  3.92M|    {
 4324|  3.92M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 3.92M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  3.92M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 3.92M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  3.92M|        return !read_at_position();
 4331|  3.92M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  11.8M|    {
 4304|  11.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  11.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 11.8M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  11.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  11.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.1M, False: 1.73M]
  |  |  ------------------
  ------------------
 4311|  10.1M|            return true;
 4312|  10.1M|        }
 4313|       |
 4314|  3.30M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.73M, False: 1.57M]
  ------------------
 4315|  1.73M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 160k, False: 1.57M]
  ------------------
 4316|   160k|                return false;
 4317|   160k|            }
 4318|  1.73M|        }
 4319|  1.57M|        return true;
 4320|  1.73M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  16.1M|    {
 4081|  16.1M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  16.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  3.64M|    {
 4239|  3.64M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  3.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 3.64M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  3.64M|        auto res = read_at_position();
 4248|  3.64M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  3.64M|        return parent()->get_character_at(m_position);
 4250|  3.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  3.64M|    {
 4112|  3.64M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.08M, False: 552k]
  |  |  ------------------
  ------------------
 4113|  3.64M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  3.08M|            return m_putback_buffer[pos];
 4115|  3.08M|        }
 4116|   552k|        const auto start = pos - m_putback_buffer.size();
 4117|   552k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   552k|        return m_current_view[start];
 4119|   552k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.16M|{
 3807|  1.16M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.16M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.16M|    }
 3810|  1.16M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.16M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.16M|    }
 3813|  1.16M|    else {
 3814|       |        // utf-32
 3815|  1.16M|        static_assert(sizeof(U) == 4);
 3816|  1.16M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.16M|        return 1;
 3818|  1.16M|    }
 3819|  1.16M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  1.89M|    {
 1430|  1.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.89M|    {
  437|  1.89M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.94M|    {
 1177|  1.94M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  55.1k|    {
 1476|  55.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  55.1k|    {
  447|  55.1k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   583k|    {
 1598|   583k|        return has_value();
 1599|   583k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  5.03k|    {
 1653|  5.03k|        return value();
 1654|  5.03k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  1.46M|    {
 4274|  1.46M|        return !(lhs == rhs);
 4275|  1.46M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  2.04M|    {
 4269|  2.04M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 2.04M, False: 0]
  |  Branch (4269:46): [True: 658k, False: 1.39M]
  ------------------
 4270|  2.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  4.30M|    {
 4225|  4.30M|        ++m_position;
 4226|  4.30M|        (void)read_at_position();
 4227|  4.30M|        return *this;
 4228|  4.30M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.16M|{
 4013|  1.16M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.16M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.16M|    }
 4016|  1.16M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.16M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.16M|    }
 4019|  1.16M|    else {
 4020|  1.16M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.16M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.16M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 292k, False: 874k]
  |  |  ------------------
  ------------------
 4023|   292k|            return invalid_code_point;
 4024|   292k|        }
 4025|   874k|        return cp;
 4026|  1.16M|    }
 4027|  1.16M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.84k|    {
 1476|  1.84k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.84k|    {
  447|  1.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   367k|    {
 1177|   367k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   365k|    {
 1430|   365k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   365k|    {
  437|   365k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   367k|    {
 1598|   367k|        return has_value();
 1599|   367k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   735k|    {
  485|   735k|        return m_has_value;
  486|   735k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.84k|    {
 1604|  1.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.84k|        return this->get_unexpected().error();
 1606|  1.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.84k|    {
  468|  1.84k|        return m_unexpected;
  469|  1.84k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   365k|    {
 1663|   365k|        return std::move(value());
 1664|   365k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   365k|    {
 1627|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   365k|        return this->get_value();
 1629|   365k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   365k|    {
  451|   365k|        return m_value;
  452|   365k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  6.38M|    {
 3334|  6.38M|        return m_sentinel;
 3335|  6.38M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.07k|    {
 1604|  1.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.07k|        return this->get_unexpected().error();
 1606|  1.07k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   434k|    {
 1476|   434k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   486k|    {
  447|   486k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.41M|    {
 1177|  3.41M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  5.03k|    {
 1430|  5.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.03k|    {
  437|  5.03k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  1.88M|    {
 1476|  1.88M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.88M|    {
  447|  1.88M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  3.80M|    {
 1598|  3.80M|        return has_value();
 1599|  3.80M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.08M|    {
  485|  7.08M|        return m_has_value;
  486|  7.08M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.47M|    {
 1604|  1.47M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.47M|        return this->get_unexpected().error();
 1606|  1.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.47M|    {
  468|  1.47M|        return m_unexpected;
  469|  1.47M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   385k|    {
 1430|   385k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   385k|    {
  437|   385k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   385k|    {
 1177|   385k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     27|    {
 1476|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     27|    {
  447|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   224k|    {
 1653|   224k|        return value();
 1654|   224k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.15M|    {
 1627|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.15M|        return this->get_value();
 1629|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.15M|    {
  451|  1.15M|        return m_value;
  452|  1.15M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  4.06k|    {
 1598|  4.06k|        return has_value();
 1599|  4.06k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   771k|    {
  485|   771k|        return m_has_value;
  486|   771k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   381k|    {
 1663|   381k|        return std::move(value());
 1664|   381k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   385k|    {
 1627|   385k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   385k|        return this->get_value();
 1629|   385k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   385k|    {
  451|   385k|        return m_value;
  452|   385k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   979k|    {
 1837|   979k|        return detail::transform_error_impl(std::move(*this),
 1838|   979k|                                            std::forward<F>(f));
 1839|   979k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   979k|{
 1323|   979k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   979k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   979k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   979k|            return result(*std::forward<Exp>(exp));
 1327|   979k|        }
 1328|       |
 1329|   979k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   979k|        return result(unexpect, monostate{});
 1331|   979k|    }
 1332|   979k|    else {
 1333|   979k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   979k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   979k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 927k, False: 51.6k]
  |  |  ------------------
  ------------------
 1335|   979k|                   ? result(*std::forward<Exp>(exp))
 1336|   979k|                   : result(unexpect,
 1337|  51.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  51.6k|                                           std::forward<Exp>(exp).error()));
 1339|   979k|    }
 1340|   979k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.03M|    {
 1430|  1.03M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.03M|    {
  437|  1.03M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  51.6k|    {
 1486|  51.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|   927k|    {
 1663|   927k|        return std::move(value());
 1664|   927k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   114k|    {
 3330|   114k|        return m_iterator;
 3331|   114k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   114k|    {
 3334|   114k|        return m_sentinel;
 3335|   114k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.58M|    {
 1598|  2.58M|        return has_value();
 1599|  2.58M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.30M|    {
  485|  4.30M|        return m_has_value;
  486|  4.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  1.04M|    {
 1604|  1.04M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.04M|        return this->get_unexpected().error();
 1606|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.04M|    {
  468|  1.04M|        return m_unexpected;
  469|  1.04M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   593k|    {
 1663|   593k|        return std::move(value());
 1664|   593k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   669k|    {
 1627|   669k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   669k|        return this->get_value();
 1629|   669k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   669k|    {
  451|   669k|        return m_value;
  452|   669k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   211k|{
  304|   211k|    return p;
  305|   211k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   211k|{
  326|   211k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   211k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   105k|    {
 3316|   105k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.17M|    {
 4291|  1.17M|        return !x.is_at_end();
 4292|  1.17M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  54.4k|    {
 1476|  54.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  54.4k|    {
  447|  54.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.81M|    {
 1177|  1.81M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.75M|    {
 1430|  1.75M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.75M|    {
  437|  1.75M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   446k|    {
 1598|   446k|        return has_value();
 1599|   446k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.17M|    {
  485|  3.17M|        return m_has_value;
  486|  3.17M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  2.20k|    {
 1653|  2.20k|        return value();
 1654|  2.20k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.31M|    {
 1627|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.31M|        return this->get_value();
 1629|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.31M|    {
  451|  1.31M|        return m_value;
  452|  1.31M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.84k|    {
 1476|  1.84k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.84k|    {
  447|  1.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   368k|    {
 1177|   368k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   366k|    {
 1430|   366k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   366k|    {
  437|   366k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   384k|    {
 1837|   384k|        return detail::transform_error_impl(std::move(*this),
 1838|   384k|                                            std::forward<F>(f));
 1839|   384k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   384k|{
 1323|   384k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   384k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   384k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   384k|            return result(*std::forward<Exp>(exp));
 1327|   384k|        }
 1328|       |
 1329|   384k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   384k|        return result(unexpect, monostate{});
 1331|   384k|    }
 1332|   384k|    else {
 1333|   384k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   384k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   384k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 382k, False: 2.45k]
  |  |  ------------------
  ------------------
 1335|   384k|                   ? result(*std::forward<Exp>(exp))
 1336|   384k|                   : result(unexpect,
 1337|  2.45k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.45k|                                           std::forward<Exp>(exp).error()));
 1339|   384k|    }
 1340|   384k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.31M|    {
 1663|  1.31M|        return std::move(value());
 1664|  1.31M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  54.1k|    {
 1614|  54.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.1k|        return std::move(this->get_unexpected().error());
 1616|  54.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  54.4k|    {
  468|  54.4k|        return m_unexpected;
  469|  54.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   510k|    {
 1486|   510k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   368k|    {
 1598|   368k|        return has_value();
 1599|   368k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   736k|    {
  485|   736k|        return m_has_value;
  486|   736k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.84k|    {
 1604|  1.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.84k|        return this->get_unexpected().error();
 1606|  1.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.84k|    {
  468|  1.84k|        return m_unexpected;
  469|  1.84k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   366k|    {
 1663|   366k|        return std::move(value());
 1664|   366k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   366k|    {
 1627|   366k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   366k|        return this->get_value();
 1629|   366k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   366k|    {
  451|   366k|        return m_value;
  452|   366k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    302|    {
 1604|    302|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    302|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    302|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    302|        return this->get_unexpected().error();
 1606|    302|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   434k|    {
 1476|   434k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   485k|    {
  447|   485k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.99M|    {
 1177|  2.99M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  2.20k|    {
 1430|  2.20k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.20k|    {
  437|  2.20k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.53M|    {
 1476|  1.53M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.53M|    {
  447|  1.53M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.37M|    {
 1598|  3.37M|        return has_value();
 1599|  3.37M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  6.22M|    {
  485|  6.22M|        return m_has_value;
  486|  6.22M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.32M|    {
 1604|  1.32M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.32M|        return this->get_unexpected().error();
 1606|  1.32M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.32M|    {
  468|  1.32M|        return m_unexpected;
  469|  1.32M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   383k|    {
 1430|   383k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   383k|    {
  437|   383k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   383k|    {
 1177|   383k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     12|    {
 1476|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     12|    {
  447|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  85.1k|    {
 1653|  85.1k|        return value();
 1654|  85.1k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  1.60k|    {
 1598|  1.60k|        return has_value();
 1599|  1.60k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   767k|    {
  485|   767k|        return m_has_value;
  486|   767k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   382k|    {
 1663|   382k|        return std::move(value());
 1664|   382k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   383k|    {
 1627|   383k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   383k|        return this->get_value();
 1629|   383k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   383k|    {
  451|   383k|        return m_value;
  452|   383k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   980k|    {
 1837|   980k|        return detail::transform_error_impl(std::move(*this),
 1838|   980k|                                            std::forward<F>(f));
 1839|   980k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   980k|{
 1323|   980k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   980k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   980k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   980k|            return result(*std::forward<Exp>(exp));
 1327|   980k|        }
 1328|       |
 1329|   980k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   980k|        return result(unexpect, monostate{});
 1331|   980k|    }
 1332|   980k|    else {
 1333|   980k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   980k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   980k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 928k, False: 51.6k]
  |  |  ------------------
  ------------------
 1335|   980k|                   ? result(*std::forward<Exp>(exp))
 1336|   980k|                   : result(unexpect,
 1337|  51.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  51.6k|                                           std::forward<Exp>(exp).error()));
 1339|   980k|    }
 1340|   980k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   970k|    {
 1430|   970k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   970k|    {
  437|   970k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  51.6k|    {
 1486|  51.6k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   928k|    {
 1663|   928k|        return std::move(value());
 1664|   928k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   254k|    {
 2855|   254k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   254k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   254k|    {
 2836|   254k|        return t.data();
 2837|   254k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   381k|    {
 1837|   381k|        return detail::transform_error_impl(std::move(*this),
 1838|   381k|                                            std::forward<F>(f));
 1839|   381k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   381k|{
 1323|   381k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   381k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   381k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   381k|            return result(*std::forward<Exp>(exp));
 1327|   381k|        }
 1328|       |
 1329|   381k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   381k|        return result(unexpect, monostate{});
 1331|   381k|    }
 1332|   381k|    else {
 1333|   381k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   381k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   381k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 381k, False: 0]
  |  |  ------------------
  ------------------
 1335|   381k|                   ? result(*std::forward<Exp>(exp))
 1336|   381k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   381k|    }
 1340|   381k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   381k|    {
 1430|   381k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   381k|    {
  437|   381k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   381k|    {
 1177|   381k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   381k|    {
 1598|   381k|        return has_value();
 1599|   381k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   763k|    {
  485|   763k|        return m_has_value;
  486|   763k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   381k|    {
 1663|   381k|        return std::move(value());
 1664|   381k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   381k|    {
 1627|   381k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   381k|        return this->get_value();
 1629|   381k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   381k|    {
  451|   381k|        return m_value;
  452|   381k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   655k|    {
 1823|   655k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   655k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   655k|{
 1323|   655k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   655k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   655k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   655k|            return result(*std::forward<Exp>(exp));
 1327|   655k|        }
 1328|       |
 1329|   655k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   655k|        return result(unexpect, monostate{});
 1331|   655k|    }
 1332|   655k|    else {
 1333|   655k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   655k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   655k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 655k]
  |  |  ------------------
  ------------------
 1335|   655k|                   ? result(*std::forward<Exp>(exp))
 1336|   655k|                   : result(unexpect,
 1337|   655k|                            trivial_invoke(std::forward<F>(f),
 1338|   655k|                                           std::forward<Exp>(exp).error()));
 1339|   655k|    }
 1340|   655k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  76.7k|    {
 1653|  76.7k|        return value();
 1654|  76.7k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  4.03k|    {
 1673|  4.03k|        return &value();
 1674|  4.03k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   319k|    {
 2724|   319k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   319k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   319k|    {
 2705|   319k|        return decay_copy(t.begin());
 2706|   319k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   319k|{
 1949|   319k|    return SCN_FWD(t);
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   319k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   153k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   382k|    {
 1837|   382k|        return detail::transform_error_impl(std::move(*this),
 1838|   382k|                                            std::forward<F>(f));
 1839|   382k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   382k|{
 1323|   382k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   382k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   382k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   382k|            return result(*std::forward<Exp>(exp));
 1327|   382k|        }
 1328|       |
 1329|   382k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   382k|        return result(unexpect, monostate{});
 1331|   382k|    }
 1332|   382k|    else {
 1333|   382k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   382k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   382k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 382k, False: 0]
  |  |  ------------------
  ------------------
 1335|   382k|                   ? result(*std::forward<Exp>(exp))
 1336|   382k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   382k|    }
 1340|   382k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   382k|    {
 1430|   382k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   382k|    {
  437|   382k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   382k|    {
 1177|   382k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   382k|    {
 1598|   382k|        return has_value();
 1599|   382k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   764k|    {
  485|   764k|        return m_has_value;
  486|   764k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   382k|    {
 1663|   382k|        return std::move(value());
 1664|   382k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   382k|    {
 1627|   382k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   382k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   382k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   382k|        return this->get_value();
 1629|   382k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   382k|    {
  451|   382k|        return m_value;
  452|   382k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   507k|    {
 1823|   507k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   507k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   507k|{
 1323|   507k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   507k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   507k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   507k|            return result(*std::forward<Exp>(exp));
 1327|   507k|        }
 1328|       |
 1329|   507k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   507k|        return result(unexpect, monostate{});
 1331|   507k|    }
 1332|   507k|    else {
 1333|   507k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   507k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 1335|   507k|                   ? result(*std::forward<Exp>(exp))
 1336|   507k|                   : result(unexpect,
 1337|   507k|                            trivial_invoke(std::forward<F>(f),
 1338|   507k|                                           std::forward<Exp>(exp).error()));
 1339|   507k|    }
 1340|   507k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   507k|    {
 3648|   507k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  76.8k|    {
 1653|  76.8k|        return value();
 1654|  76.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  1.59k|    {
 1673|  1.59k|        return &value();
 1674|  1.59k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   655k|    {
 3648|   655k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   271k|    {
 1430|   271k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   271k|    {
  437|   271k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   196k|{
 3654|   196k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   196k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.44M|    {
 2855|  2.44M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.44M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.44M|    {
 2836|  2.44M|        return t.data();
 2837|  2.44M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  4.96M|    {
 5466|  4.96M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.96M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  4.96M|        return static_cast<std::size_t>(m_desc &
 5471|  4.96M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  4.96M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  9.92M|    {
 5491|  9.92M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  9.92M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  4.96M|    {
 5434|  4.96M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.96M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.96M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.96M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  4.96M|        const auto t = type(id);
 5446|  4.96M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.96M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  4.96M|        basic_scan_arg<Context> arg;
 5451|  4.96M|        arg.m_type = t;
 5452|  4.96M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 4.96M, False: 0]
  ------------------
 5453|  4.96M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  4.96M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  4.96M|        return arg;
 5459|  4.96M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  4.96M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  4.96M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  4.96M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  4.96M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  4.96M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  4.96M|    {
 5495|  4.96M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  4.96M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  9.39M|    {
 5247|  9.39M|        return m_type != detail::arg_type::none_type;
 5248|  9.39M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   814k|{
 8417|   814k|#define SCN_VISIT(Type)                                         \
 8418|   814k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   814k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   814k|    }                                                           \
 8421|   814k|    else {                                                      \
 8422|   814k|        return vis(monostate_val);                              \
 8423|   814k|    }
 8424|       |
 8425|   814k|    monostate monostate_val{};
 8426|       |
 8427|   814k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 814k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 814k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 814k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 814k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 814k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 814k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 814k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 814k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 814k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 814k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 814k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 814k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 814k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 814k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 814k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   252k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 252k, False: 561k]
  ------------------
 8459|   252k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8460|   278k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 278k, False: 535k]
  ------------------
 8461|   278k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   278k|    }                                                           \
  |  | 8421|   278k|    else {                                                      \
  |  | 8422|   278k|        return vis(monostate_val);                              \
  |  | 8423|   278k|    }
  ------------------
 8462|   283k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 283k, False: 530k]
  ------------------
 8463|   283k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   283k|    }                                                           \
  |  | 8421|   283k|    else {                                                      \
  |  | 8422|   283k|        return vis(monostate_val);                              \
  |  | 8423|   283k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 814k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 814k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 814k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 814k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 814k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 814k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 814k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 814k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 814k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   814k|            SCN_CLANG_POP
 8495|   814k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  3.89M|    {
 5545|  3.89M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  2.00M|    {
 8138|  2.00M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  3.89M|    {
 8056|  3.89M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  2.78M|{
 4344|  2.78M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 2.78M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  2.78M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  2.78M|                            ranges::default_sentinel};
 4350|  2.78M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  2.78M|    {
 4177|  2.78M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  2.78M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  2.78M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   782k|{
 8417|   782k|#define SCN_VISIT(Type)                                         \
 8418|   782k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   782k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   782k|    }                                                           \
 8421|   782k|    else {                                                      \
 8422|   782k|        return vis(monostate_val);                              \
 8423|   782k|    }
 8424|       |
 8425|   782k|    monostate monostate_val{};
 8426|       |
 8427|   782k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 782k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 782k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 782k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 782k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 782k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 782k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 782k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 782k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 782k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 782k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 782k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 782k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 782k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 782k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 782k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   243k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 243k, False: 538k]
  ------------------
 8459|   243k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   243k|    }                                                           \
  |  | 8421|   243k|    else {                                                      \
  |  | 8422|   243k|        return vis(monostate_val);                              \
  |  | 8423|   243k|    }
  ------------------
 8460|   267k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 267k, False: 514k]
  ------------------
 8461|   267k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   267k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   267k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   267k|    }                                                           \
  |  | 8421|   267k|    else {                                                      \
  |  | 8422|   267k|        return vis(monostate_val);                              \
  |  | 8423|   267k|    }
  ------------------
 8462|   271k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 271k, False: 511k]
  ------------------
 8463|   271k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   271k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   271k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   271k|    }                                                           \
  |  | 8421|   271k|    else {                                                      \
  |  | 8422|   271k|        return vis(monostate_val);                              \
  |  | 8423|   271k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 782k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 782k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 782k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 782k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 782k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 782k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 782k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 782k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 782k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   782k|            SCN_CLANG_POP
 8495|   782k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.89M|{
 7044|  1.89M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.89M|    handler.check_args_exhausted();
 7046|  1.89M|    return handler.get_error();
 7047|  1.89M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.89M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.89M|    auto begin = format.data();
 7013|  1.89M|    auto it = begin;
 7014|  1.89M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.67M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.89M, False: 1.78M]
  ------------------
 7017|  1.89M|        const auto ch = *it++;
 7018|  1.89M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.89M, False: 0]
  ------------------
 7019|  1.89M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.89M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.89M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 107k, False: 1.78M]
  ------------------
 7023|   107k|                return;
 7024|   107k|            }
 7025|  1.89M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.89M|    }
 7036|       |
 7037|  1.78M|    handler.on_literal_text(begin, end);
 7038|  1.78M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  1.89M|{
 6942|  1.89M|    struct id_adapter {
 6943|  1.89M|        constexpr void operator()()
 6944|  1.89M|        {
 6945|  1.89M|            arg_id = handler.on_arg_id();
 6946|  1.89M|        }
 6947|  1.89M|        constexpr void operator()(std::size_t id)
 6948|  1.89M|        {
 6949|  1.89M|            arg_id = handler.on_arg_id(id);
 6950|  1.89M|        }
 6951|       |
 6952|  1.89M|        constexpr void on_error(const char* msg)
 6953|  1.89M|        {
 6954|  1.89M|            SCN_UNLIKELY_ATTR
 6955|  1.89M|            handler.on_error(msg);
 6956|  1.89M|        }
 6957|       |
 6958|  1.89M|        Handler& handler;
 6959|  1.89M|        std::size_t arg_id;
 6960|  1.89M|    };
 6961|       |
 6962|  1.89M|    ++begin;
 6963|  1.89M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.89M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.89M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.89M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.89M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.89M|    else {
 6975|  1.89M|        auto adapter = id_adapter{handler, 0};
 6976|  1.89M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.89M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.89M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.89M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.89M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.89M, False: 0]
  ------------------
 6987|  1.89M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.89M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.89M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  |  Branch (859:45): [True: 0, False: 1.89M]
  |  |  |  Branch (859:45): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.89M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.89M|    }
 7003|  1.89M|    return begin + 1;
 7004|  1.89M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  3.89M|    {
 8039|  3.89M|        return m_args.get(id);
 8040|  3.89M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  3.89M|    {
 8049|  3.89M|        return m_locale;
 8050|  3.89M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  3.89M|    {
 5566|  3.89M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.89M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  3.89M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  3.89M|        do_check_arg_id(id);
 5574|  3.89M|        return id;
 5575|  3.89M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  3.89M|{
 6054|  3.89M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  3.89M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  3.89M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.89M|{
 6443|  1.89M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.89M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.89M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.89M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.89M|    handler();
 6449|  1.89M|    return begin;
 6450|  1.89M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.89M|        {
 6945|  1.89M|            arg_id = handler.on_arg_id();
 6946|  1.89M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  7.79M|    {
 5252|  7.79M|        return m_type;
 5253|  7.79M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  3.89M|    {
 5561|  3.89M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  3.89M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  7.79M|    {
 5550|  7.79M|        return m_format.data();
 5551|  7.79M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  1.89M|    {
 7122|  1.89M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.89M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.89M|{
 6858|  1.89M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.89M|        if (*begin == CharT{'['}) {
 6860|  1.89M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.89M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.89M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.89M|                return begin;
 6866|  1.89M|            }
 6867|  1.89M|            handler.on_character_set_string(set);
 6868|  1.89M|            return begin;
 6869|  1.89M|        }
 6870|  1.89M|        if (*begin == CharT{'/'}) {
 6871|  1.89M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.89M|        }
 6873|  1.89M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.89M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.89M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.89M|            return begin;
 6877|  1.89M|        }
 6878|  1.89M|        handler.on_type(type);
 6879|  1.89M|        return begin;
 6880|  1.89M|    };
 6881|       |
 6882|  1.89M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.89M, False: 0]
  |  Branch (6882:28): [True: 1.89M, False: 0]
  ------------------
 6883|  1.89M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.89M, False: 0]
  |  Branch (6883:36): [True: 1.34M, False: 542k]
  ------------------
 6884|  1.34M|        return do_presentation();
 6885|  1.34M|    }
 6886|       |
 6887|   542k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   542k|    begin = parse_align(begin, end, handler);
 6893|   542k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   542k|    begin = parse_width(begin, end, handler);
 6899|   542k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   542k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 542k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   542k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 542k, False: 0]
  ------------------
 6918|   542k|        handler.on_localized();
 6919|   542k|        ++begin;
 6920|   542k|    }
 6921|   542k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   542k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 542k, False: 0]
  |  Branch (6926:25): [True: 0, False: 542k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   542k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   542k|    return begin;
 6935|   542k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  3.89M|{
 6507|  3.89M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 2.77M, False: 1.12M]
  |  Branch (6507:33): [True: 2.77M, False: 0]
  ------------------
 6508|  3.89M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 1.12M, False: 0]
  |  Branch (6508:33): [True: 1.12M, False: 0]
  ------------------
 6509|  3.89M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.34M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.34M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.34M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.34M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.34M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.34M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.34M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.34M|        handler.on_type(type);
 6879|  1.34M|        return begin;
 6880|  1.34M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  2.77M|{
 6455|  2.77M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 2.77M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.77M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.77M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.77M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.77M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 2.77M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.77M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 2.77M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.77M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 2.77M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|  1.25M|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 1.25M, False: 1.52M]
  ------------------
 6474|  1.25M|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 2.77M]
  ------------------
 6475|  1.25M|            return presentation_type::float_hex;
 6476|  77.5k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 77.5k, False: 2.70M]
  ------------------
 6477|  77.5k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 2.77M]
  ------------------
 6478|  77.5k|            return presentation_type::float_scientific;
 6479|   507k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 507k, False: 2.27M]
  ------------------
 6480|   507k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 2.77M]
  ------------------
 6481|   507k|            return presentation_type::float_fixed;
 6482|   944k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 944k, False: 1.83M]
  ------------------
 6483|   944k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.77M]
  ------------------
 6484|   944k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.77M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.77M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.77M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 2.77M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 2.77M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 2.77M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 2.77M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  2.77M|    }
 6502|  2.77M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   542k|{
 6532|   542k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   542k|    auto check_align = [](wchar_t ch) {
 6535|   542k|        switch (ch) {
 6536|   542k|            case L'<':
 6537|   542k|                return align_type::left;
 6538|   542k|            case L'>':
 6539|   542k|                return align_type::right;
 6540|   542k|            case L'^':
 6541|   542k|                return align_type::center;
 6542|   542k|            default:
 6543|   542k|                return align_type::none;
 6544|   542k|        }
 6545|   542k|    };
 6546|       |
 6547|   542k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   542k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  |  Branch (859:45): [True: 0, False: 542k]
  |  |  |  Branch (859:45): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6549|   542k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   542k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   542k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   542k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   542k|    const auto begin_before_fill = begin;
 6559|   542k|    begin += potential_fill_len;
 6560|       |
 6561|   542k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 542k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   542k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   542k|    const auto begin_after_fill = begin;
 6567|   542k|    ++begin;
 6568|       |
 6569|   542k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 542k, False: 0]
  ------------------
 6570|   542k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 542k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   542k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 542k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   542k|    }
 6578|       |
 6579|   542k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 542k, False: 0]
  ------------------
 6580|   542k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 542k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   542k|        return begin_before_fill;
 6585|   542k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   542k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  1.12M|{
 6514|  1.12M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  1.12M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  1.12M|        return 1;
 6517|  1.12M|    }
 6518|  1.12M|    else {
 6519|  1.12M|        const auto lengths =
 6520|  1.12M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  1.12M|            "\3\4";
 6522|  1.12M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  1.12M|        return len;
 6524|  1.12M|    }
 6525|  1.12M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  1.08M|    auto check_align = [](wchar_t ch) {
 6535|  1.08M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.08M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.08M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.08M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.08M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.08M, False: 0]
  ------------------
 6543|  1.08M|                return align_type::none;
 6544|  1.08M|        }
 6545|  1.08M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   542k|{
 6597|   542k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   542k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   542k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   542k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 542k, False: 0]
  |  Branch (6599:33): [True: 0, False: 542k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   542k|    return begin;
 6610|   542k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   542k|    {
 7127|   542k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   542k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 542k, False: 0]
  ------------------
 7129|   542k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 542k, False: 0]
  ------------------
 7130|   542k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 542k]
  ------------------
 7131|   542k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   542k|        Handler::on_localized();
 7139|   542k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.89M|{
 8417|  1.89M|#define SCN_VISIT(Type)                                         \
 8418|  1.89M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.89M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.89M|    }                                                           \
 8421|  1.89M|    else {                                                      \
 8422|  1.89M|        return vis(monostate_val);                              \
 8423|  1.89M|    }
 8424|       |
 8425|  1.89M|    monostate monostate_val{};
 8426|       |
 8427|  1.89M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.89M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.89M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.89M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.89M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.89M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.89M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.89M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.89M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.89M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.89M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.89M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.89M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.89M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.89M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.89M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   601k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 601k, False: 1.29M]
  ------------------
 8459|   601k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   601k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   601k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   601k|    }                                                           \
  |  | 8421|   601k|    else {                                                      \
  |  | 8422|   601k|        return vis(monostate_val);                              \
  |  | 8423|   601k|    }
  ------------------
 8460|   642k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 642k, False: 1.25M]
  ------------------
 8461|   642k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   642k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   642k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   642k|    }                                                           \
  |  | 8421|   642k|    else {                                                      \
  |  | 8422|   642k|        return vis(monostate_val);                              \
  |  | 8423|   642k|    }
  ------------------
 8462|   649k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 649k, False: 1.24M]
  ------------------
 8463|   649k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   649k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   649k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   649k|    }                                                           \
  |  | 8421|   649k|    else {                                                      \
  |  | 8422|   649k|        return vis(monostate_val);                              \
  |  | 8423|   649k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.89M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.89M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.89M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.89M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.89M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.89M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.89M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.89M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.89M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.89M|            SCN_CLANG_POP
 8495|  1.89M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  2.00M|{
 7044|  2.00M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  2.00M|    handler.check_args_exhausted();
 7046|  2.00M|    return handler.get_error();
 7047|  2.00M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  2.00M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  2.00M|    auto begin = format.data();
 7013|  2.00M|    auto it = begin;
 7014|  2.00M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  3.90M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 2.00M, False: 1.89M]
  ------------------
 7017|  2.00M|        const auto ch = *it++;
 7018|  2.00M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 2.00M, False: 0]
  ------------------
 7019|  2.00M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  2.00M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  2.00M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 107k, False: 1.89M]
  ------------------
 7023|   107k|                return;
 7024|   107k|            }
 7025|  2.00M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  2.00M|    }
 7036|       |
 7037|  1.89M|    handler.on_literal_text(begin, end);
 7038|  1.89M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.89M|    {
 8175|  1.89M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.89M|    static_cast<    \
  |  |  929|  1.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.89M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  2.00M|{
 6942|  2.00M|    struct id_adapter {
 6943|  2.00M|        constexpr void operator()()
 6944|  2.00M|        {
 6945|  2.00M|            arg_id = handler.on_arg_id();
 6946|  2.00M|        }
 6947|  2.00M|        constexpr void operator()(std::size_t id)
 6948|  2.00M|        {
 6949|  2.00M|            arg_id = handler.on_arg_id(id);
 6950|  2.00M|        }
 6951|       |
 6952|  2.00M|        constexpr void on_error(const char* msg)
 6953|  2.00M|        {
 6954|  2.00M|            SCN_UNLIKELY_ATTR
 6955|  2.00M|            handler.on_error(msg);
 6956|  2.00M|        }
 6957|       |
 6958|  2.00M|        Handler& handler;
 6959|  2.00M|        std::size_t arg_id;
 6960|  2.00M|    };
 6961|       |
 6962|  2.00M|    ++begin;
 6963|  2.00M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  2.00M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 2.00M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  2.00M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 2.00M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  2.00M|    else {
 6975|  2.00M|        auto adapter = id_adapter{handler, 0};
 6976|  2.00M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  2.00M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  2.00M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 2.00M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  2.00M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 2.00M, False: 0]
  ------------------
 6987|  2.00M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  2.00M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  2.00M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  |  Branch (859:45): [True: 0, False: 2.00M]
  |  |  |  Branch (859:45): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  2.00M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  2.00M|    }
 7003|  2.00M|    return begin + 1;
 7004|  2.00M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  2.00M|{
 6443|  2.00M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  2.00M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 2.00M, False: 0]
  |  Branch (6444:26): [True: 0, False: 2.00M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  2.00M|    handler();
 6449|  2.00M|    return begin;
 6450|  2.00M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  2.00M|        {
 6945|  2.00M|            arg_id = handler.on_arg_id();
 6946|  2.00M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  2.00M|    {
 7122|  2.00M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  2.00M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  2.00M|{
 6858|  2.00M|    auto do_presentation = [&]() -> const CharT* {
 6859|  2.00M|        if (*begin == CharT{'['}) {
 6860|  2.00M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.00M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  2.00M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  2.00M|                return begin;
 6866|  2.00M|            }
 6867|  2.00M|            handler.on_character_set_string(set);
 6868|  2.00M|            return begin;
 6869|  2.00M|        }
 6870|  2.00M|        if (*begin == CharT{'/'}) {
 6871|  2.00M|            return parse_presentation_regex(begin, end, handler);
 6872|  2.00M|        }
 6873|  2.00M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  2.00M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  2.00M|            handler.on_error("Invalid type specifier in format string");
 6876|  2.00M|            return begin;
 6877|  2.00M|        }
 6878|  2.00M|        handler.on_type(type);
 6879|  2.00M|        return begin;
 6880|  2.00M|    };
 6881|       |
 6882|  2.00M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 2.00M, False: 0]
  |  Branch (6882:28): [True: 2.00M, False: 0]
  ------------------
 6883|  2.00M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 2.00M, False: 0]
  |  Branch (6883:36): [True: 1.42M, False: 577k]
  ------------------
 6884|  1.42M|        return do_presentation();
 6885|  1.42M|    }
 6886|       |
 6887|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   577k|    begin = parse_align(begin, end, handler);
 6893|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   577k|    begin = parse_width(begin, end, handler);
 6899|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   577k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 577k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   577k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 577k, False: 0]
  ------------------
 6918|   577k|        handler.on_localized();
 6919|   577k|        ++begin;
 6920|   577k|    }
 6921|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   577k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 577k, False: 0]
  |  Branch (6926:25): [True: 0, False: 577k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   577k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   577k|    return begin;
 6935|   577k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  1.42M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.42M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 1.42M]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|  1.42M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.42M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.42M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|  1.42M|        handler.on_type(type);
 6879|  1.42M|        return begin;
 6880|  1.42M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   577k|{
 6532|   577k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   577k|    auto check_align = [](wchar_t ch) {
 6535|   577k|        switch (ch) {
 6536|   577k|            case L'<':
 6537|   577k|                return align_type::left;
 6538|   577k|            case L'>':
 6539|   577k|                return align_type::right;
 6540|   577k|            case L'^':
 6541|   577k|                return align_type::center;
 6542|   577k|            default:
 6543|   577k|                return align_type::none;
 6544|   577k|        }
 6545|   577k|    };
 6546|       |
 6547|   577k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   577k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  |  Branch (859:45): [True: 0, False: 577k]
  |  |  |  Branch (859:45): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6549|   577k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   577k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   577k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   577k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   577k|    const auto begin_before_fill = begin;
 6559|   577k|    begin += potential_fill_len;
 6560|       |
 6561|   577k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 577k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   577k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   577k|    const auto begin_after_fill = begin;
 6567|   577k|    ++begin;
 6568|       |
 6569|   577k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 577k, False: 0]
  ------------------
 6570|   577k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 577k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   577k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 577k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   577k|    }
 6578|       |
 6579|   577k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 577k, False: 0]
  ------------------
 6580|   577k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 577k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   577k|        return begin_before_fill;
 6585|   577k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   577k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  1.15M|    auto check_align = [](wchar_t ch) {
 6535|  1.15M|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.15M]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 1.15M]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 1.15M]
  ------------------
 6541|      0|                return align_type::center;
 6542|  1.15M|            default:
  ------------------
  |  Branch (6542:13): [True: 1.15M, False: 0]
  ------------------
 6543|  1.15M|                return align_type::none;
 6544|  1.15M|        }
 6545|  1.15M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   577k|{
 6597|   577k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   577k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   577k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   577k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 577k, False: 0]
  |  Branch (6599:33): [True: 0, False: 577k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   577k|    return begin;
 6610|   577k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   577k|    {
 7127|   577k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   577k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 577k, False: 0]
  ------------------
 7129|   577k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 577k, False: 0]
  ------------------
 7130|   577k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 577k]
  ------------------
 7131|   577k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   577k|        Handler::on_localized();
 7139|   577k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  2.00M|{
 8417|  2.00M|#define SCN_VISIT(Type)                                         \
 8418|  2.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  2.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  2.00M|    }                                                           \
 8421|  2.00M|    else {                                                      \
 8422|  2.00M|        return vis(monostate_val);                              \
 8423|  2.00M|    }
 8424|       |
 8425|  2.00M|    monostate monostate_val{};
 8426|       |
 8427|  2.00M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 2.00M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 2.00M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 2.00M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 2.00M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 2.00M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.00M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.00M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.00M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.00M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.00M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.00M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.00M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.00M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.00M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.00M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   637k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 637k, False: 1.36M]
  ------------------
 8459|   637k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   637k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   637k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   637k|    }                                                           \
  |  | 8421|   637k|    else {                                                      \
  |  | 8422|   637k|        return vis(monostate_val);                              \
  |  | 8423|   637k|    }
  ------------------
 8460|   681k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 681k, False: 1.32M]
  ------------------
 8461|   681k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   681k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   681k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   681k|    }                                                           \
  |  | 8421|   681k|    else {                                                      \
  |  | 8422|   681k|        return vis(monostate_val);                              \
  |  | 8423|   681k|    }
  ------------------
 8462|   688k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 688k, False: 1.31M]
  ------------------
 8463|   688k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   688k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   688k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   688k|    }                                                           \
  |  | 8421|   688k|    else {                                                      \
  |  | 8422|   688k|        return vis(monostate_val);                              \
  |  | 8423|   688k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.00M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.00M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.00M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.00M]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.00M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.00M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 2.00M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 2.00M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 2.00M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  2.00M|            SCN_CLANG_POP
 8495|  2.00M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   139k|    {
 4076|   139k|        sync(0);
 4077|   139k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   707k|    {
 5466|   707k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 707k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   707k|        return static_cast<std::size_t>(m_desc &
 5471|   707k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   707k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.41M|    {
 5491|  1.41M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.41M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   707k|    {
 5434|   707k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 707k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   707k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 707k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   707k|        const auto t = type(id);
 5446|   707k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 707k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   707k|        basic_scan_arg<Context> arg;
 5451|   707k|        arg.m_type = t;
 5452|   707k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 707k, False: 0]
  ------------------
 5453|   707k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   707k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   707k|        return arg;
 5459|   707k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   707k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   707k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   707k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   707k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   707k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   707k|    {
 5495|   707k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   707k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.35M|    {
 5247|  1.35M|        return m_type != detail::arg_type::none_type;
 5248|  1.35M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  92.9k|{
 8417|  92.9k|#define SCN_VISIT(Type)                                         \
 8418|  92.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  92.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  92.9k|    }                                                           \
 8421|  92.9k|    else {                                                      \
 8422|  92.9k|        return vis(monostate_val);                              \
 8423|  92.9k|    }
 8424|       |
 8425|  92.9k|    monostate monostate_val{};
 8426|       |
 8427|  92.9k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 92.9k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 92.9k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 92.9k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 92.9k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 92.9k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 92.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 92.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 92.9k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 92.9k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 92.9k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 92.9k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 92.9k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 92.9k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 92.9k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 92.9k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  30.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 30.8k, False: 62.0k]
  ------------------
 8459|  30.8k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  30.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.8k|    }                                                           \
  |  | 8421|  30.8k|    else {                                                      \
  |  | 8422|  30.8k|        return vis(monostate_val);                              \
  |  | 8423|  30.8k|    }
  ------------------
 8460|  30.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 30.9k, False: 61.9k]
  ------------------
 8461|  30.9k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  30.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.9k|    }                                                           \
  |  | 8421|  30.9k|    else {                                                      \
  |  | 8422|  30.9k|        return vis(monostate_val);                              \
  |  | 8423|  30.9k|    }
  ------------------
 8462|  31.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 31.1k, False: 61.8k]
  ------------------
 8463|  31.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  31.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  31.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  31.1k|    }                                                           \
  |  | 8421|  31.1k|    else {                                                      \
  |  | 8422|  31.1k|        return vis(monostate_val);                              \
  |  | 8423|  31.1k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 92.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 92.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 92.9k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 92.9k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 92.9k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 92.9k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 92.9k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 92.9k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 92.9k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  92.9k|            SCN_CLANG_POP
 8495|  92.9k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   583k|    {
 5545|   583k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   291k|    {
 8138|   291k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   583k|    {
 8056|   583k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   291k|{
 7044|   291k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   291k|    handler.check_args_exhausted();
 7046|   291k|    return handler.get_error();
 7047|   291k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   291k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   291k|    auto begin = format.data();
 7013|   291k|    auto it = begin;
 7014|   291k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   368k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 291k, False: 76.8k]
  ------------------
 7017|   291k|        const auto ch = *it++;
 7018|   291k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 291k, False: 0]
  ------------------
 7019|   291k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   291k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   291k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 214k, False: 76.8k]
  ------------------
 7023|   214k|                return;
 7024|   214k|            }
 7025|   291k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   291k|    }
 7036|       |
 7037|  76.8k|    handler.on_literal_text(begin, end);
 7038|  76.8k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   291k|{
 6942|   291k|    struct id_adapter {
 6943|   291k|        constexpr void operator()()
 6944|   291k|        {
 6945|   291k|            arg_id = handler.on_arg_id();
 6946|   291k|        }
 6947|   291k|        constexpr void operator()(std::size_t id)
 6948|   291k|        {
 6949|   291k|            arg_id = handler.on_arg_id(id);
 6950|   291k|        }
 6951|       |
 6952|   291k|        constexpr void on_error(const char* msg)
 6953|   291k|        {
 6954|   291k|            SCN_UNLIKELY_ATTR
 6955|   291k|            handler.on_error(msg);
 6956|   291k|        }
 6957|       |
 6958|   291k|        Handler& handler;
 6959|   291k|        std::size_t arg_id;
 6960|   291k|    };
 6961|       |
 6962|   291k|    ++begin;
 6963|   291k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   291k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 291k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   291k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 291k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   291k|    else {
 6975|   291k|        auto adapter = id_adapter{handler, 0};
 6976|   291k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   291k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   291k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 291k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   291k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 291k, False: 0]
  ------------------
 6987|   291k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   291k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   291k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  |  Branch (859:45): [True: 0, False: 291k]
  |  |  |  Branch (859:45): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   291k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   291k|    }
 7003|   291k|    return begin + 1;
 7004|   291k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   583k|    {
 8039|   583k|        return m_args.get(id);
 8040|   583k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   583k|    {
 8049|   583k|        return m_locale;
 8050|   583k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   583k|    {
 5566|   583k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   583k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   583k|        do_check_arg_id(id);
 5574|   583k|        return id;
 5575|   583k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   583k|{
 6054|   583k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   583k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   583k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   291k|{
 6443|   291k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   291k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 291k, False: 0]
  |  Branch (6444:26): [True: 0, False: 291k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   291k|    handler();
 6449|   291k|    return begin;
 6450|   291k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   291k|        {
 6945|   291k|            arg_id = handler.on_arg_id();
 6946|   291k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.16M|    {
 5252|  1.16M|        return m_type;
 5253|  1.16M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   583k|    {
 5561|   583k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   583k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   384k|{
 4344|   384k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 384k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   384k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   384k|                            ranges::default_sentinel};
 4350|   384k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   384k|    {
 4177|   384k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   384k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   384k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.16M|    {
 5550|  1.16M|        return m_format.data();
 5551|  1.16M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   291k|    {
 7122|   291k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   291k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   291k|{
 6858|   291k|    auto do_presentation = [&]() -> const CharT* {
 6859|   291k|        if (*begin == CharT{'['}) {
 6860|   291k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   291k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   291k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   291k|                return begin;
 6866|   291k|            }
 6867|   291k|            handler.on_character_set_string(set);
 6868|   291k|            return begin;
 6869|   291k|        }
 6870|   291k|        if (*begin == CharT{'/'}) {
 6871|   291k|            return parse_presentation_regex(begin, end, handler);
 6872|   291k|        }
 6873|   291k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   291k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   291k|            handler.on_error("Invalid type specifier in format string");
 6876|   291k|            return begin;
 6877|   291k|        }
 6878|   291k|        handler.on_type(type);
 6879|   291k|        return begin;
 6880|   291k|    };
 6881|       |
 6882|   291k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 291k, False: 0]
  |  Branch (6882:28): [True: 291k, False: 0]
  ------------------
 6883|   291k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 291k, False: 0]
  |  Branch (6883:36): [True: 229k, False: 61.9k]
  ------------------
 6884|   229k|        return do_presentation();
 6885|   229k|    }
 6886|       |
 6887|  61.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  61.9k|    begin = parse_align(begin, end, handler);
 6893|  61.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  61.9k|    begin = parse_width(begin, end, handler);
 6899|  61.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  61.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 61.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  61.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 61.9k, False: 0]
  ------------------
 6918|  61.9k|        handler.on_localized();
 6919|  61.9k|        ++begin;
 6920|  61.9k|    }
 6921|  61.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  61.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 61.9k, False: 0]
  |  Branch (6926:25): [True: 0, False: 61.9k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  61.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  61.9k|    return begin;
 6935|  61.9k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   583k|{
 6507|   583k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 459k, False: 123k]
  |  Branch (6507:33): [True: 459k, False: 0]
  ------------------
 6508|   583k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 123k, False: 0]
  |  Branch (6508:33): [True: 123k, False: 0]
  ------------------
 6509|   583k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   229k|    auto do_presentation = [&]() -> const CharT* {
 6859|   229k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 229k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   229k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 229k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   229k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   229k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   229k|        handler.on_type(type);
 6879|   229k|        return begin;
 6880|   229k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   459k|{
 6455|   459k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 459k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 459k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 459k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 459k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 459k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 459k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 459k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 459k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 459k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 459k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   125k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 125k, False: 334k]
  ------------------
 6474|   125k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 459k]
  ------------------
 6475|   125k|            return presentation_type::float_hex;
 6476|  86.4k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 86.4k, False: 372k]
  ------------------
 6477|  86.4k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 459k]
  ------------------
 6478|  86.4k|            return presentation_type::float_scientific;
 6479|   123k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 123k, False: 335k]
  ------------------
 6480|   123k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 459k]
  ------------------
 6481|   123k|            return presentation_type::float_fixed;
 6482|   123k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 123k, False: 335k]
  ------------------
 6483|   123k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 459k]
  ------------------
 6484|   123k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 459k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 459k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 459k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 459k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 459k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 459k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 459k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   459k|    }
 6502|   459k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  61.9k|{
 6532|  61.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  61.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  61.9k|    auto check_align = [](wchar_t ch) {
 6535|  61.9k|        switch (ch) {
 6536|  61.9k|            case L'<':
 6537|  61.9k|                return align_type::left;
 6538|  61.9k|            case L'>':
 6539|  61.9k|                return align_type::right;
 6540|  61.9k|            case L'^':
 6541|  61.9k|                return align_type::center;
 6542|  61.9k|            default:
 6543|  61.9k|                return align_type::none;
 6544|  61.9k|        }
 6545|  61.9k|    };
 6546|       |
 6547|  61.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  61.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  |  Branch (859:45): [True: 0, False: 61.9k]
  |  |  |  Branch (859:45): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6549|  61.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  61.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  61.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  61.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  61.9k|    const auto begin_before_fill = begin;
 6559|  61.9k|    begin += potential_fill_len;
 6560|       |
 6561|  61.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 61.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  61.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  61.9k|    const auto begin_after_fill = begin;
 6567|  61.9k|    ++begin;
 6568|       |
 6569|  61.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 61.9k, False: 0]
  ------------------
 6570|  61.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  61.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 61.9k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  61.9k|    }
 6578|       |
 6579|  61.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 61.9k, False: 0]
  ------------------
 6580|  61.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 61.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  61.9k|        return begin_before_fill;
 6585|  61.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  61.9k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   123k|{
 6514|   123k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   123k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   123k|        return 1;
 6517|   123k|    }
 6518|   123k|    else {
 6519|   123k|        const auto lengths =
 6520|   123k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   123k|            "\3\4";
 6522|   123k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   123k|        return len;
 6524|   123k|    }
 6525|   123k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   123k|    auto check_align = [](wchar_t ch) {
 6535|   123k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 123k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 123k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 123k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   123k|            default:
  ------------------
  |  Branch (6542:13): [True: 123k, False: 0]
  ------------------
 6543|   123k|                return align_type::none;
 6544|   123k|        }
 6545|   123k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  61.9k|{
 6597|  61.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  61.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  61.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 61.9k, False: 0]
  |  Branch (6599:33): [True: 0, False: 61.9k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  61.9k|    return begin;
 6610|  61.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  61.9k|    {
 7127|  61.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  61.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 61.9k, False: 0]
  ------------------
 7129|  61.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 61.9k, False: 0]
  ------------------
 7130|  61.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 61.9k]
  ------------------
 7131|  61.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  61.9k|        Handler::on_localized();
 7139|  61.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   291k|{
 8417|   291k|#define SCN_VISIT(Type)                                         \
 8418|   291k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   291k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   291k|    }                                                           \
 8421|   291k|    else {                                                      \
 8422|   291k|        return vis(monostate_val);                              \
 8423|   291k|    }
 8424|       |
 8425|   291k|    monostate monostate_val{};
 8426|       |
 8427|   291k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 291k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 291k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 291k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 291k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 291k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 291k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 291k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 291k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 291k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 291k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 291k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 291k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 291k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 291k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 291k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  97.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 97.0k, False: 194k]
  ------------------
 8459|  97.0k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.0k|    }                                                           \
  |  | 8421|  97.0k|    else {                                                      \
  |  | 8422|  97.0k|        return vis(monostate_val);                              \
  |  | 8423|  97.0k|    }
  ------------------
 8460|  97.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 97.2k, False: 194k]
  ------------------
 8461|  97.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  97.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.2k|    }                                                           \
  |  | 8421|  97.2k|    else {                                                      \
  |  | 8422|  97.2k|        return vis(monostate_val);                              \
  |  | 8423|  97.2k|    }
  ------------------
 8462|  97.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 97.4k, False: 194k]
  ------------------
 8463|  97.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.4k|    }                                                           \
  |  | 8421|  97.4k|    else {                                                      \
  |  | 8422|  97.4k|        return vis(monostate_val);                              \
  |  | 8423|  97.4k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 291k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 291k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 291k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 291k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 291k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 291k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 291k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 291k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 291k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   291k|            SCN_CLANG_POP
 8495|   291k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  92.8k|{
 8417|  92.8k|#define SCN_VISIT(Type)                                         \
 8418|  92.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  92.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  92.8k|    }                                                           \
 8421|  92.8k|    else {                                                      \
 8422|  92.8k|        return vis(monostate_val);                              \
 8423|  92.8k|    }
 8424|       |
 8425|  92.8k|    monostate monostate_val{};
 8426|       |
 8427|  92.8k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 92.8k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 92.8k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 92.8k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 92.8k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 92.8k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 92.8k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 92.8k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 92.8k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 92.8k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 92.8k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 92.8k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 92.8k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 92.8k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 92.8k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 92.8k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  30.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 30.8k, False: 62.0k]
  ------------------
 8459|  30.8k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  30.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.8k|    }                                                           \
  |  | 8421|  30.8k|    else {                                                      \
  |  | 8422|  30.8k|        return vis(monostate_val);                              \
  |  | 8423|  30.8k|    }
  ------------------
 8460|  30.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 30.9k, False: 61.9k]
  ------------------
 8461|  30.9k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  30.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.9k|    }                                                           \
  |  | 8421|  30.9k|    else {                                                      \
  |  | 8422|  30.9k|        return vis(monostate_val);                              \
  |  | 8423|  30.9k|    }
  ------------------
 8462|  31.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 31.0k, False: 61.7k]
  ------------------
 8463|  31.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  31.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  31.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  31.0k|    }                                                           \
  |  | 8421|  31.0k|    else {                                                      \
  |  | 8422|  31.0k|        return vis(monostate_val);                              \
  |  | 8423|  31.0k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 92.8k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 92.8k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 92.8k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 92.8k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 92.8k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 92.8k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 92.8k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 92.8k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 92.8k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  92.8k|            SCN_CLANG_POP
 8495|  92.8k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   291k|{
 7044|   291k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   291k|    handler.check_args_exhausted();
 7046|   291k|    return handler.get_error();
 7047|   291k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   291k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   291k|    auto begin = format.data();
 7013|   291k|    auto it = begin;
 7014|   291k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   368k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 291k, False: 76.7k]
  ------------------
 7017|   291k|        const auto ch = *it++;
 7018|   291k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 291k, False: 0]
  ------------------
 7019|   291k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   291k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   291k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 214k, False: 76.7k]
  ------------------
 7023|   214k|                return;
 7024|   214k|            }
 7025|   291k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   291k|    }
 7036|       |
 7037|  76.7k|    handler.on_literal_text(begin, end);
 7038|  76.7k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  76.7k|    {
 8175|  76.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  76.7k|    static_cast<    \
  |  |  929|  76.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  76.7k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   291k|{
 6942|   291k|    struct id_adapter {
 6943|   291k|        constexpr void operator()()
 6944|   291k|        {
 6945|   291k|            arg_id = handler.on_arg_id();
 6946|   291k|        }
 6947|   291k|        constexpr void operator()(std::size_t id)
 6948|   291k|        {
 6949|   291k|            arg_id = handler.on_arg_id(id);
 6950|   291k|        }
 6951|       |
 6952|   291k|        constexpr void on_error(const char* msg)
 6953|   291k|        {
 6954|   291k|            SCN_UNLIKELY_ATTR
 6955|   291k|            handler.on_error(msg);
 6956|   291k|        }
 6957|       |
 6958|   291k|        Handler& handler;
 6959|   291k|        std::size_t arg_id;
 6960|   291k|    };
 6961|       |
 6962|   291k|    ++begin;
 6963|   291k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   291k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 291k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   291k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 291k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   291k|    else {
 6975|   291k|        auto adapter = id_adapter{handler, 0};
 6976|   291k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   291k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   291k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 291k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   291k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 291k, False: 0]
  ------------------
 6987|   291k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   291k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   291k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  |  Branch (859:45): [True: 0, False: 291k]
  |  |  |  Branch (859:45): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   291k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   291k|    }
 7003|   291k|    return begin + 1;
 7004|   291k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   291k|{
 6443|   291k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   291k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 291k, False: 0]
  |  Branch (6444:26): [True: 0, False: 291k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   291k|    handler();
 6449|   291k|    return begin;
 6450|   291k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   291k|        {
 6945|   291k|            arg_id = handler.on_arg_id();
 6946|   291k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   291k|    {
 7122|   291k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   291k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   291k|{
 6858|   291k|    auto do_presentation = [&]() -> const CharT* {
 6859|   291k|        if (*begin == CharT{'['}) {
 6860|   291k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   291k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   291k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   291k|                return begin;
 6866|   291k|            }
 6867|   291k|            handler.on_character_set_string(set);
 6868|   291k|            return begin;
 6869|   291k|        }
 6870|   291k|        if (*begin == CharT{'/'}) {
 6871|   291k|            return parse_presentation_regex(begin, end, handler);
 6872|   291k|        }
 6873|   291k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   291k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   291k|            handler.on_error("Invalid type specifier in format string");
 6876|   291k|            return begin;
 6877|   291k|        }
 6878|   291k|        handler.on_type(type);
 6879|   291k|        return begin;
 6880|   291k|    };
 6881|       |
 6882|   291k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 291k, False: 0]
  |  Branch (6882:28): [True: 291k, False: 0]
  ------------------
 6883|   291k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 291k, False: 0]
  |  Branch (6883:36): [True: 229k, False: 61.8k]
  ------------------
 6884|   229k|        return do_presentation();
 6885|   229k|    }
 6886|       |
 6887|  61.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  61.8k|    begin = parse_align(begin, end, handler);
 6893|  61.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  61.8k|    begin = parse_width(begin, end, handler);
 6899|  61.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  61.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 61.8k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  61.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 61.8k, False: 0]
  ------------------
 6918|  61.8k|        handler.on_localized();
 6919|  61.8k|        ++begin;
 6920|  61.8k|    }
 6921|  61.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  61.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 61.8k, False: 0]
  |  Branch (6926:25): [True: 0, False: 61.8k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  61.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  61.8k|    return begin;
 6935|  61.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   229k|    auto do_presentation = [&]() -> const CharT* {
 6859|   229k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 229k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   229k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 229k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   229k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   229k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   229k|        handler.on_type(type);
 6879|   229k|        return begin;
 6880|   229k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  61.8k|{
 6532|  61.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  61.8k|    auto check_align = [](wchar_t ch) {
 6535|  61.8k|        switch (ch) {
 6536|  61.8k|            case L'<':
 6537|  61.8k|                return align_type::left;
 6538|  61.8k|            case L'>':
 6539|  61.8k|                return align_type::right;
 6540|  61.8k|            case L'^':
 6541|  61.8k|                return align_type::center;
 6542|  61.8k|            default:
 6543|  61.8k|                return align_type::none;
 6544|  61.8k|        }
 6545|  61.8k|    };
 6546|       |
 6547|  61.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  61.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  |  Branch (859:45): [True: 0, False: 61.8k]
  |  |  |  Branch (859:45): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6549|  61.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  61.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  61.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  61.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  61.8k|    const auto begin_before_fill = begin;
 6559|  61.8k|    begin += potential_fill_len;
 6560|       |
 6561|  61.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 61.8k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  61.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  61.8k|    const auto begin_after_fill = begin;
 6567|  61.8k|    ++begin;
 6568|       |
 6569|  61.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 61.8k, False: 0]
  ------------------
 6570|  61.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.8k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  61.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 61.8k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  61.8k|    }
 6578|       |
 6579|  61.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 61.8k, False: 0]
  ------------------
 6580|  61.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 61.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  61.8k|        return begin_before_fill;
 6585|  61.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  61.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   123k|    auto check_align = [](wchar_t ch) {
 6535|   123k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 123k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 123k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 123k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   123k|            default:
  ------------------
  |  Branch (6542:13): [True: 123k, False: 0]
  ------------------
 6543|   123k|                return align_type::none;
 6544|   123k|        }
 6545|   123k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  61.8k|{
 6597|  61.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  61.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 61.8k, False: 0]
  |  Branch (6599:33): [True: 0, False: 61.8k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  61.8k|    return begin;
 6610|  61.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  61.8k|    {
 7127|  61.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  61.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 61.8k, False: 0]
  ------------------
 7129|  61.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 61.8k, False: 0]
  ------------------
 7130|  61.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 61.8k]
  ------------------
 7131|  61.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  61.8k|        Handler::on_localized();
 7139|  61.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   291k|{
 8417|   291k|#define SCN_VISIT(Type)                                         \
 8418|   291k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   291k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   291k|    }                                                           \
 8421|   291k|    else {                                                      \
 8422|   291k|        return vis(monostate_val);                              \
 8423|   291k|    }
 8424|       |
 8425|   291k|    monostate monostate_val{};
 8426|       |
 8427|   291k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 291k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 291k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 291k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 291k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 291k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 291k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 291k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 291k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 291k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 291k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 291k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 291k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 291k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 291k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 291k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  96.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 96.9k, False: 194k]
  ------------------
 8459|  96.9k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  96.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  96.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  96.9k|    }                                                           \
  |  | 8421|  96.9k|    else {                                                      \
  |  | 8422|  96.9k|        return vis(monostate_val);                              \
  |  | 8423|  96.9k|    }
  ------------------
 8460|  97.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 97.1k, False: 194k]
  ------------------
 8461|  97.1k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  97.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.1k|    }                                                           \
  |  | 8421|  97.1k|    else {                                                      \
  |  | 8422|  97.1k|        return vis(monostate_val);                              \
  |  | 8423|  97.1k|    }
  ------------------
 8462|  97.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 97.4k, False: 194k]
  ------------------
 8463|  97.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.4k|    }                                                           \
  |  | 8421|  97.4k|    else {                                                      \
  |  | 8422|  97.4k|        return vis(monostate_val);                              \
  |  | 8423|  97.4k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 291k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 291k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 291k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 291k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 291k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 291k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 291k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 291k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 291k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   291k|            SCN_CLANG_POP
 8495|   291k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   279k|    {
 4076|   279k|        sync(0);
 4077|   279k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   532k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  61.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  58.8k|{
   89|  58.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  58.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  58.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   176k|{
   44|   176k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   176k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  58.8k|{
  127|  58.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  58.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  58.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  58.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   176k|{
   60|   176k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   176k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.2k|{
  163|  10.2k|    T value;
  164|  10.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.12k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.12k|    static_cast<    \
  |  |  929|  3.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.12k|    static_cast<    \
  |  |  929|  3.12k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  30.9k|{
   72|  30.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  30.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  58.9k|{
   89|  58.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  58.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  58.9k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  58.9k|{
  127|  58.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  58.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  58.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  58.9k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.3k|{
  163|  10.3k|    T value;
  164|  10.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.16k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.16k|    static_cast<    \
  |  |  929|  3.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.16k|    static_cast<    \
  |  |  929|  3.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  59.1k|{
   89|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.1k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  59.1k|{
  127|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.1k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.3k|{
  163|  10.3k|    T value;
  164|  10.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.21k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.21k|    static_cast<    \
  |  |  929|  3.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.21k|    static_cast<    \
  |  |  929|  3.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.3k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  58.7k|{
   89|  58.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  58.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.7k|    static_cast<    \
  |  |  929|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.7k|    static_cast<    \
  |  |  929|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  58.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   176k|{
   44|   176k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   176k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  58.7k|{
  127|  58.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  58.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  58.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.7k|    static_cast<    \
  |  |  929|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.7k|    static_cast<    \
  |  |  929|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  58.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   176k|{
   60|   176k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   176k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.2k|{
  163|  10.2k|    T value;
  164|  10.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.11k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.11k|    static_cast<    \
  |  |  929|  3.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.11k|    static_cast<    \
  |  |  929|  3.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  30.9k|{
   72|  30.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  30.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  58.8k|{
   89|  58.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  58.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  58.8k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  58.8k|{
  127|  58.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  58.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  58.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  58.8k|    static_cast<    \
  |  |  929|  58.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  58.8k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.3k|{
  163|  10.3k|    T value;
  164|  10.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.14k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.14k|    static_cast<    \
  |  |  929|  3.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.14k|    static_cast<    \
  |  |  929|  3.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  59.0k|{
   89|  59.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.0k|    static_cast<    \
  |  |  929|  59.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.0k|    static_cast<    \
  |  |  929|  59.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.0k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  59.0k|{
  127|  59.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.0k|    static_cast<    \
  |  |  929|  59.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.0k|    static_cast<    \
  |  |  929|  59.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.0k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.3k|{
  163|  10.3k|    T value;
  164|  10.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 3.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.16k|    }                                                  \
  |  |  |  | 3671|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.3k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.83M|{
  653|  2.83M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.83M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.23M|{
  659|  1.23M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.23M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 616k, False: 616k]
  ------------------
  661|  1.23M|                    : std::locale{};
  662|  1.23M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.66M|{
 1221|  1.66M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.66M|                                  m_nan_payload_buffer, value);
 1223|  1.66M|    value = this->setsign(value);
 1224|  1.66M|    return n;
 1225|  1.66M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   119k|{
 1221|   119k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   119k|                                  m_nan_payload_buffer, value);
 1223|   119k|    value = this->setsign(value);
 1224|   119k|    return n;
 1225|   119k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.79M|{
 1221|  1.79M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.79M|                                  m_nan_payload_buffer, value);
 1223|  1.79M|    value = this->setsign(value);
 1224|  1.79M|    return n;
 1225|  1.79M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   120k|{
 1221|   120k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   120k|                                  m_nan_payload_buffer, value);
 1223|   120k|    value = this->setsign(value);
 1224|   120k|    return n;
 1225|   120k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.81M|{
 1221|  1.81M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.81M|                                  m_nan_payload_buffer, value);
 1223|  1.81M|    value = this->setsign(value);
 1224|  1.81M|    return n;
 1225|  1.81M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   120k|{
 1221|   120k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   120k|                                  m_nan_payload_buffer, value);
 1223|   120k|    value = this->setsign(value);
 1224|   120k|    return n;
 1225|   120k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.21M|{
 2184|  1.21M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.21M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  1.26M|{
 2192|  1.26M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  1.26M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.19M, False: 64.4k]
  |  |  ------------------
  ------------------
 2194|  1.19M|        source.sync(*n);
 2195|  1.19M|    }
 2196|  64.4k|    else {
 2197|  64.4k|        source.sync_all();
 2198|  64.4k|    }
 2199|  1.26M|    return n;
 2200|  1.26M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   176k|{
 2208|   176k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   176k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   176k|{
 2216|   176k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   176k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   176k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 47.8k, False: 128k]
  |  |  ------------------
  ------------------
 2218|  47.8k|        source.sync(*n);
 2219|  47.8k|    }
 2220|   128k|    else {
 2221|   128k|        source.sync_all();
 2222|   128k|    }
 2223|   176k|    return n;
 2224|   176k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.44M|{
  194|  2.44M|    return find_classic_impl(
  195|  2.44M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.44M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.44M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  5.48M|{
  202|  5.48M|    return find_classic_impl(
  203|  5.48M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  5.48M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  5.48M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  1.21M|{
 2141|  1.21M|    return vscan_internal(source, format, args);
 2142|  1.21M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  1.26M|{
 2147|  1.26M|    auto n = vscan_internal(source, format, args);
 2148|  1.26M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.19M, False: 64.4k]
  |  |  ------------------
  ------------------
 2149|  1.19M|        source.sync(*n);
 2150|  1.19M|    }
 2151|  64.4k|    else {
 2152|  64.4k|        source.sync_all();
 2153|  64.4k|    }
 2154|  1.26M|    return n;
 2155|  1.26M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   176k|{
 2161|   176k|    return vscan_internal(source, format, args);
 2162|   176k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   176k|{
 2167|   176k|    auto n = vscan_internal(source, format, args);
 2168|   176k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   176k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 47.8k, False: 128k]
  |  |  ------------------
  ------------------
 2169|  47.8k|        source.sync(*n);
 2170|  47.8k|    }
 2171|   128k|    else {
 2172|   128k|        source.sync_all();
 2173|   128k|    }
 2174|   176k|    return n;
 2175|   176k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   271k|{
 2251|   271k|    return vscan_value_internal(source, arg);
 2252|   271k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   260k|{
 2256|   260k|    auto n = vscan_value_internal(source, arg);
 2257|   260k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   260k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 249k, False: 10.7k]
  |  |  ------------------
  ------------------
 2258|   249k|        source.sync(*n);
 2259|   249k|    }
 2260|  10.7k|    else {
 2261|  10.7k|        source.sync_all();
 2262|  10.7k|    }
 2263|   260k|    return n;
 2264|   260k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  30.9k|{
 2270|  30.9k|    return vscan_value_internal(source, arg);
 2271|  30.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  30.9k|{
 2276|  30.9k|    auto n = vscan_value_internal(source, arg);
 2277|  30.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  30.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.46k, False: 21.4k]
  |  |  ------------------
  ------------------
 2278|  9.46k|        source.sync(*n);
 2279|  9.46k|    }
 2280|  21.4k|    else {
 2281|  21.4k|        source.sync_all();
 2282|  21.4k|    }
 2283|  30.9k|    return n;
 2284|  30.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.44M|{
  118|  2.44M|    auto it = source.begin();
  119|       |
  120|  9.87M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 8.38M, False: 1.48M]
  ------------------
  121|  8.38M|        auto sv =
  122|  8.38M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  8.38M|                .substr(0, 8);
  124|       |
  125|  8.38M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 8.18M, False: 198k]
  ------------------
  126|  8.18M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  8.18M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  8.18M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 867k, False: 7.32M]
  ------------------
  129|   867k|                break;
  130|   867k|            }
  131|  7.32M|            continue;
  132|  8.18M|        }
  133|       |
  134|   686k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 573k, False: 112k]
  ------------------
  135|   573k|            auto tmp =
  136|   573k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   573k|            auto res = get_next_code_point(tmp);
  138|   573k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 85.7k, False: 487k]
  ------------------
  139|  85.7k|                return it;
  140|  85.7k|            }
  141|   487k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   487k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   487k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   487k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   487k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   487k|        }
  145|   198k|    }
  146|       |
  147|  2.35M|    return detail::make_string_view_iterator(source, it);
  148|  2.44M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  11.8M|{
  105|  11.8M|    static_assert(sizeof(*source.data()) == 1);
  106|  11.8M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  11.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  11.8M|    uint64_t word{};
  108|  11.8M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  11.8M|    return has_byte_greater(word, 127) != 0;
  111|  11.8M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  53.8M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   573k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  5.48M|{
  118|  5.48M|    auto it = source.begin();
  119|       |
  120|  5.97M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.49M, False: 2.48M]
  ------------------
  121|  3.49M|        auto sv =
  122|  3.49M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.49M|                .substr(0, 8);
  124|       |
  125|  3.49M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.26M, False: 226k]
  ------------------
  126|  3.26M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.26M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.26M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.79M, False: 476k]
  ------------------
  129|  2.79M|                break;
  130|  2.79M|            }
  131|   476k|            continue;
  132|  3.26M|        }
  133|       |
  134|   433k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 415k, False: 17.8k]
  ------------------
  135|   415k|            auto tmp =
  136|   415k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   415k|            auto res = get_next_code_point(tmp);
  138|   415k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 208k, False: 207k]
  ------------------
  139|   208k|                return it;
  140|   208k|            }
  141|   207k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   207k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   207k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   207k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   207k|        }
  145|   226k|    }
  146|       |
  147|  5.27M|    return detail::make_string_view_iterator(source, it);
  148|  5.48M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  5.22M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   415k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.66M|{
 1138|  1.66M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.2k, False: 1.65M]
  ------------------
 1139|  14.2k|        value = std::numeric_limits<T>::infinity();
 1140|  14.2k|        return 3;
 1141|  14.2k|    }
 1142|  1.65M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.8k, False: 1.64M]
  ------------------
 1143|  10.8k|        value = std::numeric_limits<T>::infinity();
 1144|  10.8k|        return 8;
 1145|  10.8k|    }
 1146|  1.64M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 62.4k, False: 1.58M]
  ------------------
 1147|  62.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  62.4k|        return 3;
 1149|  62.4k|    }
 1150|  1.58M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.57M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.57M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.57M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 358k, False: 1.22M]
  ------------------
 1185|   358k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.99k, False: 354k]
  |  |  ------------------
  ------------------
 1186|  3.99k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.99k|                                         "Invalid floating-point digit");
 1188|  3.99k|        }
 1189|   358k|    }
 1190|  1.57M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 1.56M]
  |  |  ------------------
  ------------------
 1191|  10.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.5k|                                     "Invalid floating-point digit");
 1193|  10.5k|    }
 1194|       |
 1195|  1.56M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.56M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.56M|            double tmp{};
 1200|  1.56M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.56M|            value = tmp;
 1202|  1.56M|            return ret;
 1203|  1.56M|        }
 1204|  1.56M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.56M|            return fast_float_fallback(data, value);
 1208|  1.56M|        }
 1209|  1.56M|    }
 1210|  1.56M|    else {
 1211|       |        // Default to fast_float
 1212|  1.56M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.56M|    }
 1214|  1.56M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.56M|    {
 1078|  1.56M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.82M|    {
  712|  5.82M|        return {kind, options};
  713|  5.82M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.56M|    {
 1082|  1.56M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 354k, False: 1.21M]
  ------------------
 1083|  1.56M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 59.0k, False: 1.15M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   413k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   413k|                                              value);
 1087|   413k|        }
 1088|       |
 1089|  1.15M|        const auto flags = get_flags();
 1090|  1.15M|        const auto view = get_view();
 1091|  1.15M|        const auto result = fast_float::from_chars(
 1092|  1.15M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.15M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.15M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 1.14M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  10.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  10.5k|                                              value);
 1102|  10.5k|        }
 1103|       |
 1104|  1.14M|        return result.ptr - view.data();
 1105|  1.15M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   423k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   423k|    {
 1048|   423k|#if !SCN_DISABLE_STRTOD
 1049|   423k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   423k|    }
 1056|   423k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   423k|    {
  894|   423k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   437k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   423k|    {
  898|   423k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   423k|                           generic_strtod);
  900|   423k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   423k|    {
  732|   423k|        CharT* end{};
  733|   423k|        errno = 0;
  734|   423k|        value = strtod_cb(src, &end);
  735|   423k|        const auto saved_errno = errno;
  736|   423k|        auto chars_read = end - src;
  737|       |
  738|   423k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   423k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 411k]
  |  |  ------------------
  ------------------
  740|  12.5k|            return unexpected(e);
  741|  12.5k|        }
  742|       |
  743|   411k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 352k, False: 58.5k]
  ------------------
  744|   411k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 352k, False: 0]
  ------------------
  745|   352k|            chars_read -= 2;
  746|   352k|        }
  747|       |
  748|   411k|        return chars_read;
  749|   423k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   437k|    {
  778|   437k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 117k, False: 320k]
  |  Branch (778:37): [True: 0, False: 117k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   437k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 59.2k, False: 378k]
  ------------------
  785|   437k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 59.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   437k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 14.1k, False: 423k]
  |  Branch (791:34): [True: 2.06k, False: 12.1k]
  ------------------
  792|  2.06k|            SCN_UNLIKELY_ATTR
  793|  2.06k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.06k|        }
  795|       |
  796|   435k|        SCN_GCC_COMPAT_PUSH
  797|   435k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   435k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 435k, False: 0]
  ------------------
  800|   435k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 435k, False: 0]
  ------------------
  801|   435k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 11.4k, False: 424k]
  ------------------
  802|  11.4k|            SCN_UNLIKELY_ATTR
  803|  11.4k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  11.4k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   424k|            return {};
  809|   435k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   451k|{
  687|   451k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 119k, False: 332k]
  |  Branch (687:25): [True: 0, False: 332k]
  ------------------
  688|   451k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   423k|    {
  755|   423k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 416k, False: 7.28k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   416k|            auto first_space = read_until_classic_space(input.view());
  758|   416k|            input.assign(
  759|   416k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   416k|        }
  761|       |
  762|   423k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 354k, False: 69.5k]
  ------------------
  763|   354k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   354k|                input.get_allocated_string().insert(0, "0x");
  765|   354k|            }
  766|   354k|            else {
  767|   354k|                input.get_allocated_string().insert(0, L"0x");
  768|   354k|            }
  769|   354k|        }
  770|       |
  771|   423k|        return input.get_allocated_string().c_str();
  772|   423k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   423k|    {
  905|   423k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   423k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   423k|        }
  908|   423k|        else {
  909|   423k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   423k|        }
  911|   423k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   423k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   423k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   423k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   423k|            return std::strtof(str, str_end);
  839|   423k|        }
  840|   423k|        else if constexpr (std::is_same_v<T, double>) {
  841|   423k|            return std::strtod(str, str_end);
  842|   423k|        }
  843|   423k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   423k|            return std::strtold(str, str_end);
  845|   423k|        }
  846|   423k|#endif
  847|   423k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.51M|    {
 1061|  2.51M|        unsigned format_flags{};
 1062|  2.51M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.49M, False: 22.0k]
  ------------------
 1063|  2.49M|            format_flags |= fast_float::fixed;
 1064|  2.49M|        }
 1065|  2.51M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.19M, False: 324k]
  ------------------
 1066|  2.19M|            format_flags |= fast_float::scientific;
 1067|  2.19M|        }
 1068|       |
 1069|  2.51M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.51M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.15M|    {
 1110|  1.15M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.15M|            return m_input.view();
 1112|  1.15M|        }
 1113|  1.15M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.15M|            return std::u16string_view{
 1115|  1.15M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.15M|                m_input.view().size()};
 1117|  1.15M|        }
 1118|  1.15M|        else {
 1119|  1.15M|            return std::u32string_view{
 1120|  1.15M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.15M|                m_input.view().size()};
 1122|  1.15M|        }
 1123|  1.15M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   119k|{
 1138|   119k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 119k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   119k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 119k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   119k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 119k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   119k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 119k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   119k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   119k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 27.1k, False: 92.6k]
  ------------------
 1185|  27.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.0k, False: 13.0k]
  |  |  ------------------
  ------------------
 1186|  14.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  14.0k|                                         "Invalid floating-point digit");
 1188|  14.0k|        }
 1189|  27.1k|    }
 1190|   105k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.2k, False: 70.4k]
  |  |  ------------------
  ------------------
 1191|  35.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  35.2k|                                     "Invalid floating-point digit");
 1193|  35.2k|    }
 1194|       |
 1195|  70.4k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  70.4k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  70.4k|            double tmp{};
 1200|  70.4k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  70.4k|            value = tmp;
 1202|  70.4k|            return ret;
 1203|  70.4k|        }
 1204|  70.4k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  70.4k|            return fast_float_fallback(data, value);
 1208|  70.4k|        }
 1209|  70.4k|    }
 1210|  70.4k|    else {
 1211|       |        // Default to fast_float
 1212|  70.4k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  70.4k|    }
 1214|  70.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  70.4k|    {
 1078|  70.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   239k|    {
  712|   239k|        return {kind, options};
  713|   239k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  70.4k|    {
 1082|  70.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 12.9k, False: 57.5k]
  ------------------
 1083|  70.4k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 189, False: 57.3k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  13.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  13.1k|                                              value);
 1087|  13.1k|        }
 1088|       |
 1089|  57.3k|        const auto flags = get_flags();
 1090|  57.3k|        const auto view = get_view();
 1091|  57.3k|        const auto result = fast_float::from_chars(
 1092|  57.3k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  57.3k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.3k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  57.3k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 934, False: 56.3k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    934|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    934|                                              value);
 1102|    934|        }
 1103|       |
 1104|  56.3k|        return result.ptr - view.data();
 1105|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  14.1k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  14.1k|    {
 1048|  14.1k|#if !SCN_DISABLE_STRTOD
 1049|  14.1k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  14.1k|    }
 1056|  14.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  14.1k|    {
  894|  14.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  14.1k|    {
  898|  14.1k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  14.1k|                           generic_strtod);
  900|  14.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  14.1k|    {
  732|  14.1k|        CharT* end{};
  733|  14.1k|        errno = 0;
  734|  14.1k|        value = strtod_cb(src, &end);
  735|  14.1k|        const auto saved_errno = errno;
  736|  14.1k|        auto chars_read = end - src;
  737|       |
  738|  14.1k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  14.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 962, False: 13.1k]
  |  |  ------------------
  ------------------
  740|    962|            return unexpected(e);
  741|    962|        }
  742|       |
  743|  13.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 12.9k, False: 189]
  ------------------
  744|  13.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 12.9k, False: 0]
  ------------------
  745|  12.9k|            chars_read -= 2;
  746|  12.9k|        }
  747|       |
  748|  13.1k|        return chars_read;
  749|  14.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  14.1k|    {
  755|  14.1k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 13.4k, False: 678]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  13.4k|            auto first_space = read_until_classic_space(input.view());
  758|  13.4k|            input.assign(
  759|  13.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  13.4k|        }
  761|       |
  762|  14.1k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 12.9k, False: 1.12k]
  ------------------
  763|  12.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  12.9k|                input.get_allocated_string().insert(0, "0x");
  765|  12.9k|            }
  766|  12.9k|            else {
  767|  12.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  12.9k|            }
  769|  12.9k|        }
  770|       |
  771|  14.1k|        return input.get_allocated_string().c_str();
  772|  14.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  14.1k|    {
  905|  14.1k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  14.1k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  14.1k|        }
  908|  14.1k|        else {
  909|  14.1k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  14.1k|        }
  911|  14.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  14.1k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  14.1k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  14.1k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  14.1k|            return std::wcstof(str, str_end);
  877|  14.1k|        }
  878|  14.1k|        else if constexpr (std::is_same_v<T, double>) {
  879|  14.1k|            return std::wcstod(str, str_end);
  880|  14.1k|        }
  881|  14.1k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  14.1k|            return std::wcstold(str, str_end);
  883|  14.1k|        }
  884|  14.1k|#endif
  885|  14.1k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  57.3k|    {
 1110|  57.3k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  57.3k|            return m_input.view();
 1112|  57.3k|        }
 1113|  57.3k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  57.3k|            return std::u16string_view{
 1115|  57.3k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  57.3k|                m_input.view().size()};
 1117|  57.3k|        }
 1118|  57.3k|        else {
 1119|  57.3k|            return std::u32string_view{
 1120|  57.3k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  57.3k|                m_input.view().size()};
 1122|  57.3k|        }
 1123|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.79M|{
 1138|  1.79M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.5k, False: 1.78M]
  ------------------
 1139|  15.5k|        value = std::numeric_limits<T>::infinity();
 1140|  15.5k|        return 3;
 1141|  15.5k|    }
 1142|  1.78M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.4k, False: 1.77M]
  ------------------
 1143|  11.4k|        value = std::numeric_limits<T>::infinity();
 1144|  11.4k|        return 8;
 1145|  11.4k|    }
 1146|  1.77M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 64.5k, False: 1.70M]
  ------------------
 1147|  64.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  64.5k|        return 3;
 1149|  64.5k|    }
 1150|  1.70M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.70M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.70M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.70M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 372k, False: 1.33M]
  ------------------
 1185|   372k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.28k, False: 367k]
  |  |  ------------------
  ------------------
 1186|  4.28k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.28k|                                         "Invalid floating-point digit");
 1188|  4.28k|        }
 1189|   372k|    }
 1190|  1.70M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 1.68M]
  |  |  ------------------
  ------------------
 1191|  11.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.9k|                                     "Invalid floating-point digit");
 1193|  11.9k|    }
 1194|       |
 1195|  1.68M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.68M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.68M|            double tmp{};
 1200|  1.68M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.68M|            value = tmp;
 1202|  1.68M|            return ret;
 1203|  1.68M|        }
 1204|  1.68M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.68M|            return fast_float_fallback(data, value);
 1208|  1.68M|        }
 1209|  1.68M|    }
 1210|  1.68M|    else {
 1211|       |        // Default to fast_float
 1212|  1.68M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.68M|    }
 1214|  1.68M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.68M|    {
 1078|  1.68M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.68M|    {
 1082|  1.68M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 367k, False: 1.32M]
  ------------------
 1083|  1.68M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 67.6k, False: 1.25M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   435k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   435k|                                              value);
 1087|   435k|        }
 1088|       |
 1089|  1.25M|        const auto flags = get_flags();
 1090|  1.25M|        const auto view = get_view();
 1091|  1.25M|        const auto result = fast_float::from_chars(
 1092|  1.25M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.25M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.25M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.60k, False: 1.24M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.60k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.60k|                                              value);
 1102|  4.60k|        }
 1103|       |
 1104|  1.24M|        return result.ptr - view.data();
 1105|  1.25M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   439k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   439k|    {
 1048|   439k|#if !SCN_DISABLE_STRTOD
 1049|   439k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   439k|    }
 1056|   439k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   439k|    {
  894|   439k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   453k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   439k|    {
  898|   439k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   439k|                           generic_strtod);
  900|   439k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   439k|    {
  732|   439k|        CharT* end{};
  733|   439k|        errno = 0;
  734|   439k|        value = strtod_cb(src, &end);
  735|   439k|        const auto saved_errno = errno;
  736|   439k|        auto chars_read = end - src;
  737|       |
  738|   439k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   439k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.27k, False: 434k]
  |  |  ------------------
  ------------------
  740|  5.27k|            return unexpected(e);
  741|  5.27k|        }
  742|       |
  743|   434k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 367k, False: 67.6k]
  ------------------
  744|   434k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 367k, False: 0]
  ------------------
  745|   367k|            chars_read -= 2;
  746|   367k|        }
  747|       |
  748|   434k|        return chars_read;
  749|   439k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   453k|    {
  778|   453k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 119k, False: 334k]
  |  Branch (778:37): [True: 0, False: 119k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   453k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 67.8k, False: 385k]
  ------------------
  785|   453k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 67.8k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   453k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.79k, False: 447k]
  |  Branch (791:34): [True: 578, False: 5.21k]
  ------------------
  792|    578|            SCN_UNLIKELY_ATTR
  793|    578|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    578|        }
  795|       |
  796|   453k|        SCN_GCC_COMPAT_PUSH
  797|   453k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   453k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 453k, False: 0]
  ------------------
  800|   453k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 453k, False: 0]
  ------------------
  801|   453k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.21k, False: 447k]
  ------------------
  802|  5.21k|            SCN_UNLIKELY_ATTR
  803|  5.21k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.21k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   447k|            return {};
  809|   453k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   459k|{
  691|   459k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 119k, False: 339k]
  |  Branch (691:24): [True: 0, False: 339k]
  ------------------
  692|   459k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   439k|    {
  755|   439k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 434k, False: 5.17k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   434k|            auto first_space = read_until_classic_space(input.view());
  758|   434k|            input.assign(
  759|   434k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   434k|        }
  761|       |
  762|   439k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 367k, False: 72.3k]
  ------------------
  763|   367k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   367k|                input.get_allocated_string().insert(0, "0x");
  765|   367k|            }
  766|   367k|            else {
  767|   367k|                input.get_allocated_string().insert(0, L"0x");
  768|   367k|            }
  769|   367k|        }
  770|       |
  771|   439k|        return input.get_allocated_string().c_str();
  772|   439k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   439k|    {
  905|   439k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   439k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   439k|        }
  908|   439k|        else {
  909|   439k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   439k|        }
  911|   439k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   439k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   439k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   439k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   439k|            return std::strtof(str, str_end);
  839|   439k|        }
  840|   439k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   439k|            return std::strtod(str, str_end);
  842|   439k|        }
  843|   439k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   439k|            return std::strtold(str, str_end);
  845|   439k|        }
  846|   439k|#endif
  847|   439k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.25M|    {
 1110|  1.25M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.25M|            return m_input.view();
 1112|  1.25M|        }
 1113|  1.25M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.25M|            return std::u16string_view{
 1115|  1.25M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.25M|                m_input.view().size()};
 1117|  1.25M|        }
 1118|  1.25M|        else {
 1119|  1.25M|            return std::u32string_view{
 1120|  1.25M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.25M|                m_input.view().size()};
 1122|  1.25M|        }
 1123|  1.25M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   120k|{
 1138|   120k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 120k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   120k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 120k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   120k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 120k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   120k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 120k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   120k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   120k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 27.1k, False: 92.8k]
  ------------------
 1185|  27.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.0k, False: 13.0k]
  |  |  ------------------
  ------------------
 1186|  14.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  14.0k|                                         "Invalid floating-point digit");
 1188|  14.0k|        }
 1189|  27.1k|    }
 1190|   105k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.3k, False: 70.6k]
  |  |  ------------------
  ------------------
 1191|  35.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  35.3k|                                     "Invalid floating-point digit");
 1193|  35.3k|    }
 1194|       |
 1195|  70.6k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  70.6k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  70.6k|            double tmp{};
 1200|  70.6k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  70.6k|            value = tmp;
 1202|  70.6k|            return ret;
 1203|  70.6k|        }
 1204|  70.6k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  70.6k|            return fast_float_fallback(data, value);
 1208|  70.6k|        }
 1209|  70.6k|    }
 1210|  70.6k|    else {
 1211|       |        // Default to fast_float
 1212|  70.6k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  70.6k|    }
 1214|  70.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  70.6k|    {
 1078|  70.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  70.6k|    {
 1082|  70.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 12.9k, False: 57.6k]
  ------------------
 1083|  70.6k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 189, False: 57.4k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  13.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  13.1k|                                              value);
 1087|  13.1k|        }
 1088|       |
 1089|  57.4k|        const auto flags = get_flags();
 1090|  57.4k|        const auto view = get_view();
 1091|  57.4k|        const auto result = fast_float::from_chars(
 1092|  57.4k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  57.4k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.4k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  57.4k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 492, False: 56.9k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    492|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    492|                                              value);
 1102|    492|        }
 1103|       |
 1104|  56.9k|        return result.ptr - view.data();
 1105|  57.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  13.6k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  13.6k|    {
 1048|  13.6k|#if !SCN_DISABLE_STRTOD
 1049|  13.6k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  13.6k|    }
 1056|  13.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  13.6k|    {
  894|  13.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  13.6k|    {
  898|  13.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  13.6k|                           generic_strtod);
  900|  13.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  13.6k|    {
  732|  13.6k|        CharT* end{};
  733|  13.6k|        errno = 0;
  734|  13.6k|        value = strtod_cb(src, &end);
  735|  13.6k|        const auto saved_errno = errno;
  736|  13.6k|        auto chars_read = end - src;
  737|       |
  738|  13.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  13.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 516, False: 13.1k]
  |  |  ------------------
  ------------------
  740|    516|            return unexpected(e);
  741|    516|        }
  742|       |
  743|  13.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 12.9k, False: 189]
  ------------------
  744|  13.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 12.9k, False: 0]
  ------------------
  745|  12.9k|            chars_read -= 2;
  746|  12.9k|        }
  747|       |
  748|  13.1k|        return chars_read;
  749|  13.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  13.6k|    {
  755|  13.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 13.2k, False: 457]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  13.2k|            auto first_space = read_until_classic_space(input.view());
  758|  13.2k|            input.assign(
  759|  13.2k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  13.2k|        }
  761|       |
  762|  13.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 12.9k, False: 681]
  ------------------
  763|  12.9k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  12.9k|                input.get_allocated_string().insert(0, "0x");
  765|  12.9k|            }
  766|  12.9k|            else {
  767|  12.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  12.9k|            }
  769|  12.9k|        }
  770|       |
  771|  13.6k|        return input.get_allocated_string().c_str();
  772|  13.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  13.6k|    {
  905|  13.6k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  13.6k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  13.6k|        }
  908|  13.6k|        else {
  909|  13.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  13.6k|        }
  911|  13.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  13.6k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  13.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  13.6k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  13.6k|            return std::wcstof(str, str_end);
  877|  13.6k|        }
  878|  13.6k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  13.6k|            return std::wcstod(str, str_end);
  880|  13.6k|        }
  881|  13.6k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  13.6k|            return std::wcstold(str, str_end);
  883|  13.6k|        }
  884|  13.6k|#endif
  885|  13.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  57.4k|    {
 1110|  57.4k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  57.4k|            return m_input.view();
 1112|  57.4k|        }
 1113|  57.4k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  57.4k|            return std::u16string_view{
 1115|  57.4k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  57.4k|                m_input.view().size()};
 1117|  57.4k|        }
 1118|  57.4k|        else {
 1119|  57.4k|            return std::u32string_view{
 1120|  57.4k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  57.4k|                m_input.view().size()};
 1122|  57.4k|        }
 1123|  57.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.81M|{
 1138|  1.81M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 16.0k, False: 1.80M]
  ------------------
 1139|  16.0k|        value = std::numeric_limits<T>::infinity();
 1140|  16.0k|        return 3;
 1141|  16.0k|    }
 1142|  1.80M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.6k, False: 1.78M]
  ------------------
 1143|  11.6k|        value = std::numeric_limits<T>::infinity();
 1144|  11.6k|        return 8;
 1145|  11.6k|    }
 1146|  1.78M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 65.0k, False: 1.72M]
  ------------------
 1147|  65.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  65.0k|        return 3;
 1149|  65.0k|    }
 1150|  1.72M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.72M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.72M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.72M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 372k, False: 1.35M]
  ------------------
 1185|   372k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 368k]
  |  |  ------------------
  ------------------
 1186|  4.44k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.44k|                                         "Invalid floating-point digit");
 1188|  4.44k|        }
 1189|   372k|    }
 1190|  1.71M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 1.70M]
  |  |  ------------------
  ------------------
 1191|  12.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.7k|                                     "Invalid floating-point digit");
 1193|  12.7k|    }
 1194|       |
 1195|  1.70M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.70M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.70M|            double tmp{};
 1200|  1.70M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.70M|            value = tmp;
 1202|  1.70M|            return ret;
 1203|  1.70M|        }
 1204|  1.70M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.70M|            return fast_float_fallback(data, value);
 1208|  1.70M|        }
 1209|  1.70M|    }
 1210|  1.70M|    else {
 1211|       |        // Default to fast_float
 1212|  1.70M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.70M|    }
 1214|  1.70M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.70M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.70M|    {
 1048|  1.70M|#if !SCN_DISABLE_STRTOD
 1049|  1.70M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.70M|    }
 1056|  1.70M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.70M|    {
  894|  1.70M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.77M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.70M|    {
  898|  1.70M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.70M|                           generic_strtod);
  900|  1.70M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.70M|    {
  732|  1.70M|        CharT* end{};
  733|  1.70M|        errno = 0;
  734|  1.70M|        value = strtod_cb(src, &end);
  735|  1.70M|        const auto saved_errno = errno;
  736|  1.70M|        auto chars_read = end - src;
  737|       |
  738|  1.70M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.70M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 1.70M]
  |  |  ------------------
  ------------------
  740|  1.41k|            return unexpected(e);
  741|  1.41k|        }
  742|       |
  743|  1.70M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 368k, False: 1.33M]
  ------------------
  744|  1.70M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 368k, False: 0]
  ------------------
  745|   368k|            chars_read -= 2;
  746|   368k|        }
  747|       |
  748|  1.70M|        return chars_read;
  749|  1.70M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.77M|    {
  778|  1.77M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 516k, False: 1.26M]
  |  Branch (778:37): [True: 0, False: 516k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.77M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 67.9k, False: 1.70M]
  ------------------
  785|  1.77M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 67.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.77M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.46k, False: 1.77M]
  |  Branch (791:34): [True: 140, False: 1.32k]
  ------------------
  792|    140|            SCN_UNLIKELY_ATTR
  793|    140|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    140|        }
  795|       |
  796|  1.77M|        SCN_GCC_COMPAT_PUSH
  797|  1.77M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.77M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.77M, False: 0]
  ------------------
  800|  1.77M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.77M, False: 0]
  ------------------
  801|  1.77M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.32k, False: 1.77M]
  ------------------
  802|  1.32k|            SCN_UNLIKELY_ATTR
  803|  1.32k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.32k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.77M|            return {};
  809|  1.77M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.77M|{
  695|  1.77M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 516k, False: 1.26M]
  |  Branch (695:26): [True: 0, False: 1.26M]
  ------------------
  696|  1.77M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.70M|    {
  755|  1.70M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.58M, False: 116k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.58M|            auto first_space = read_until_classic_space(input.view());
  758|  1.58M|            input.assign(
  759|  1.58M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.58M|        }
  761|       |
  762|  1.70M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 368k, False: 1.33M]
  ------------------
  763|   368k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   368k|                input.get_allocated_string().insert(0, "0x");
  765|   368k|            }
  766|   368k|            else {
  767|   368k|                input.get_allocated_string().insert(0, L"0x");
  768|   368k|            }
  769|   368k|        }
  770|       |
  771|  1.70M|        return input.get_allocated_string().c_str();
  772|  1.70M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.70M|    {
  905|  1.70M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.70M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.70M|        }
  908|  1.70M|        else {
  909|  1.70M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.70M|        }
  911|  1.70M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.70M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.70M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.70M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.70M|            return std::strtof(str, str_end);
  839|  1.70M|        }
  840|  1.70M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.70M|            return std::strtod(str, str_end);
  842|  1.70M|        }
  843|  1.70M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.70M|            return std::strtold(str, str_end);
  845|  1.70M|        }
  846|  1.70M|#endif
  847|  1.70M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   120k|{
 1138|   120k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 120k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   120k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 120k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   120k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 120k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   120k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 120k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   120k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   120k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 27.1k, False: 93.3k]
  ------------------
 1185|  27.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.0k, False: 13.0k]
  |  |  ------------------
  ------------------
 1186|  14.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  14.0k|                                         "Invalid floating-point digit");
 1188|  14.0k|        }
 1189|  27.1k|    }
 1190|   106k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.4k, False: 70.9k]
  |  |  ------------------
  ------------------
 1191|  35.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  35.4k|                                     "Invalid floating-point digit");
 1193|  35.4k|    }
 1194|       |
 1195|  70.9k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  70.9k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  70.9k|            double tmp{};
 1200|  70.9k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  70.9k|            value = tmp;
 1202|  70.9k|            return ret;
 1203|  70.9k|        }
 1204|  70.9k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  70.9k|            return fast_float_fallback(data, value);
 1208|  70.9k|        }
 1209|  70.9k|    }
 1210|  70.9k|    else {
 1211|       |        // Default to fast_float
 1212|  70.9k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  70.9k|    }
 1214|  70.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  70.9k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  70.9k|    {
 1048|  70.9k|#if !SCN_DISABLE_STRTOD
 1049|  70.9k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  70.9k|    }
 1056|  70.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  70.9k|    {
  894|  70.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  70.9k|    {
  898|  70.9k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  70.9k|                           generic_strtod);
  900|  70.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  70.9k|    {
  732|  70.9k|        CharT* end{};
  733|  70.9k|        errno = 0;
  734|  70.9k|        value = strtod_cb(src, &end);
  735|  70.9k|        const auto saved_errno = errno;
  736|  70.9k|        auto chars_read = end - src;
  737|       |
  738|  70.9k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  70.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 70.9k]
  |  |  ------------------
  ------------------
  740|     54|            return unexpected(e);
  741|     54|        }
  742|       |
  743|  70.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 13.0k, False: 57.9k]
  ------------------
  744|  70.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 13.0k, False: 0]
  ------------------
  745|  13.0k|            chars_read -= 2;
  746|  13.0k|        }
  747|       |
  748|  70.9k|        return chars_read;
  749|  70.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  70.9k|    {
  755|  70.9k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 69.5k, False: 1.42k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  69.5k|            auto first_space = read_until_classic_space(input.view());
  758|  69.5k|            input.assign(
  759|  69.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  69.5k|        }
  761|       |
  762|  70.9k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 13.0k, False: 57.9k]
  ------------------
  763|  13.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  13.0k|                input.get_allocated_string().insert(0, "0x");
  765|  13.0k|            }
  766|  13.0k|            else {
  767|  13.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  13.0k|            }
  769|  13.0k|        }
  770|       |
  771|  70.9k|        return input.get_allocated_string().c_str();
  772|  70.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  70.9k|    {
  905|  70.9k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  70.9k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  70.9k|        }
  908|  70.9k|        else {
  909|  70.9k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  70.9k|        }
  911|  70.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  70.9k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  70.9k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  70.9k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  70.9k|            return std::wcstof(str, str_end);
  877|  70.9k|        }
  878|  70.9k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  70.9k|            return std::wcstod(str, str_end);
  880|  70.9k|        }
  881|  70.9k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  70.9k|            return std::wcstold(str, str_end);
  883|  70.9k|        }
  884|  70.9k|#endif
  885|  70.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.52M|{
 2073|  2.52M|    const auto argcount = args.size();
 2074|  2.52M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 521k, False: 2.00M]
  |  Branch (2074:60): [True: 521k, False: 0]
  ------------------
 2075|   521k|        auto arg = args.get(0);
 2076|   521k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   521k|    static_cast<    \
  |  |  929|   521k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   521k|    }
 2078|       |
 2079|  2.00M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 2.00M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  2.00M|    SCN_UNLIKELY_ATTR
 2087|  2.00M|    {
 2088|  2.00M|        auto handler = format_handler<false, CharT>{
 2089|  2.00M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.00M|    static_cast<    \
  |  |  929|  2.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.00M|    static_cast<    \
  |  |  929|  2.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  2.00M|        return vscan_parse_format_string(format, handler);
 2091|  2.00M|    }
 2092|  2.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.96M|{
 1625|  4.96M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.89M, False: 1.06M]
  ------------------
 1626|  3.89M|        return false;
 1627|  3.89M|    }
 1628|  1.06M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.06M, False: 0]
  |  Branch (1628:39): [True: 1.06M, False: 0]
  ------------------
 1629|  4.96M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   782k|{
 1658|   782k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   782k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   782k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 782k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   782k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   782k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   782k|    static_cast<    \
  |  |  929|   782k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   782k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   782k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   782k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   782k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.2k, False: 749k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.2k|    }                                                  \
  |  |  |  | 3671|   782k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   749k|    return it.position();
 1675|   782k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.89M|    {
 1903|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.48M|    {
 1722|  4.48M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.48M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.89M|    {
 1853|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.89M|{
 2038|  1.89M|    const auto beg = handler.get_ctx().begin();
 2039|  1.89M|    detail::parse_format_string<false>(format, handler);
 2040|  1.89M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 1.78M]
  |  |  ------------------
  ------------------
 2041|   107k|        return unexpected(handler.error);
 2042|   107k|    }
 2043|  1.78M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.89M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  13.0M|    {
 2022|  13.0M|        return ctx.get();
 2023|  13.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  13.0M|    {
 1857|  13.0M|        return contiguous_ctx;
 1858|  13.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.67M|    {
 1907|  3.67M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.67M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.89M|{
 1681|  1.89M|    auto arg = ctx.arg(id);
 1682|  1.89M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.89M|    return arg;
 1686|  1.89M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.48M|    {
 1797|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.48M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.48M|            visited_args_lower64 |= (1ull << id);
 1808|  4.48M|            return;
 1809|  4.48M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.48M|    {
 1782|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.48M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.48M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.48M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   644k|    {
 1766|   644k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 644k, False: 0]
  |  |  ------------------
  ------------------
 1767|   644k|            error = err;
 1768|   644k|        }
 1769|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.89M|    {
 1944|  1.89M|        return parse_ctx.next_arg_id();
 1945|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.89M|    {
 1985|  1.89M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.89M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.89M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.89M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.89M|        auto specs = detail::format_specs{};
 1998|  1.89M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.89M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.89M|            arg.type()};
 2001|       |
 2002|  1.89M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.89M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.89M]
  |  Branch (2003:29): [True: 0, False: 1.89M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.89M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.89M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.89M|        on_visit_scan_arg(
 2014|  1.89M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.89M|                                           get_ctx().locale()},
 2016|  1.89M|            arg);
 2017|  1.89M|        return parse_ctx.begin();
 2018|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.89M|    {
 1701|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.89M|    {
 1956|  1.89M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.89M]
  |  Branch (1956:23): [True: 0, False: 1.89M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.89M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.89M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 1.78M]
  |  |  ------------------
  ------------------
 1963|   107k|            on_error(r.error());
 1964|   107k|        }
 1965|  1.78M|        else {
 1966|  1.78M|            get_ctx().advance_to(*r);
 1967|  1.78M|        }
 1968|  1.89M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.48M|    {
 1729|  4.48M|        {
 1730|  4.48M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.48M]
  ------------------
 1731|  4.48M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.48M]
  ------------------
 1732|  4.48M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.48M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.48M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.48M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.48M|        }
 1739|       |
 1740|  4.48M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.48M, False: 0]
  ------------------
 1741|  4.48M|            return;
 1742|  4.48M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.48M|    {
 1777|  4.48M|        return error;
 1778|  4.48M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  13.4M|    {
 1773|  13.4M|        return static_cast<bool>(error);
 1774|  13.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  2.00M|    {
 1903|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  2.00M|    {
 1830|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.00M|{
 2038|  2.00M|    const auto beg = handler.get_ctx().begin();
 2039|  2.00M|    detail::parse_format_string<false>(format, handler);
 2040|  2.00M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 1.89M]
  |  |  ------------------
  ------------------
 2041|   107k|        return unexpected(handler.error);
 2042|   107k|    }
 2043|  1.89M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  13.8M|    {
 2022|  13.8M|        return ctx.get();
 2023|  13.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  13.8M|    {
 1834|  13.8M|        return ctx;
 1835|  13.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.90M|    {
 1907|  3.90M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.90M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  3.90M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  2.00M|{
 1681|  2.00M|    auto arg = ctx.arg(id);
 1682|  2.00M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.00M|    return arg;
 1686|  2.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  2.00M|    {
 1944|  2.00M|        return parse_ctx.next_arg_id();
 1945|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  2.00M|    {
 1985|  2.00M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.00M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.00M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.00M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.00M|        auto specs = detail::format_specs{};
 1998|  2.00M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.00M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.00M|            arg.type()};
 2001|       |
 2002|  2.00M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.00M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.00M]
  |  Branch (2003:29): [True: 0, False: 2.00M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.00M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  2.00M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.00M|        on_visit_scan_arg(
 2014|  2.00M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.00M|                                           get_ctx().locale()},
 2016|  2.00M|            arg);
 2017|  2.00M|        return parse_ctx.begin();
 2018|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  2.00M|    {
 1701|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  2.00M|    {
 1956|  2.00M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.00M]
  |  Branch (1956:23): [True: 0, False: 2.00M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.00M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.00M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 1.89M]
  |  |  ------------------
  ------------------
 1963|   107k|            on_error(r.error());
 1964|   107k|        }
 1965|  1.89M|        else {
 1966|  1.89M|            get_ctx().advance_to(*r);
 1967|  1.89M|        }
 1968|  2.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.43M|{
 2053|  2.43M|    const auto argcount = args.size();
 2054|  2.43M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 542k, False: 1.89M]
  |  Branch (2054:60): [True: 542k, False: 0]
  ------------------
 2055|   542k|        auto arg = args.get(0);
 2056|   542k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   542k|    static_cast<    \
  |  |  929|   542k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   542k|    }
 2058|       |
 2059|  1.89M|    auto handler = format_handler<true, CharT>{
 2060|  1.89M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.89M|                                       source.data() + source.size()},
 2062|  1.89M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.89M|    static_cast<    \
  |  |  929|  1.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.89M|    static_cast<    \
  |  |  929|  1.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.89M|    return vscan_parse_format_string(format, handler);
 2064|  2.43M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   814k|{
 1638|   814k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 814k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   814k|    auto reader =
 1644|   814k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   814k|            ranges::subrange<const CharT*>{source.data(),
 1646|   814k|                                           source.data() + source.size()},
 1647|   814k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   814k|    static_cast<    \
  |  |  929|   814k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   814k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   814k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   814k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   814k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.2k, False: 781k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  32.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  32.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  32.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  32.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  32.2k|    }                                                  \
  |  |  |  | 3671|   814k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   781k|    return ranges::distance(source.data(), it);
 1650|   814k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   353k|{
 2053|   353k|    const auto argcount = args.size();
 2054|   353k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 61.9k, False: 291k]
  |  Branch (2054:60): [True: 61.9k, False: 0]
  ------------------
 2055|  61.9k|        auto arg = args.get(0);
 2056|  61.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  61.9k|    static_cast<    \
  |  |  929|  61.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  61.9k|    }
 2058|       |
 2059|   291k|    auto handler = format_handler<true, CharT>{
 2060|   291k|        ranges::subrange<const CharT*>{source.data(),
 2061|   291k|                                       source.data() + source.size()},
 2062|   291k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   291k|    static_cast<    \
  |  |  929|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   291k|    static_cast<    \
  |  |  929|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   291k|    return vscan_parse_format_string(format, handler);
 2064|   353k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   707k|{
 1625|   707k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 583k, False: 123k]
  ------------------
 1626|   583k|        return false;
 1627|   583k|    }
 1628|   123k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 123k, False: 0]
  |  Branch (1628:39): [True: 123k, False: 0]
  ------------------
 1629|   707k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  92.9k|{
 1638|  92.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  92.9k|    auto reader =
 1644|  92.9k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  92.9k|            ranges::subrange<const CharT*>{source.data(),
 1646|  92.9k|                                           source.data() + source.size()},
 1647|  92.9k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  92.9k|    static_cast<    \
  |  |  929|  92.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  92.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  92.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  64.4k|    }                                                  \
  |  |  |  | 3671|  92.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  28.5k|    return ranges::distance(source.data(), it);
 1650|  92.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   291k|    {
 1903|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   291k|    {
 1853|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   291k|{
 2038|   291k|    const auto beg = handler.get_ctx().begin();
 2039|   291k|    detail::parse_format_string<false>(format, handler);
 2040|   291k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 76.8k]
  |  |  ------------------
  ------------------
 2041|   214k|        return unexpected(handler.error);
 2042|   214k|    }
 2043|  76.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.61M|    {
 2022|  1.61M|        return ctx.get();
 2023|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.61M|    {
 1857|  1.61M|        return contiguous_ctx;
 1858|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   368k|    {
 1907|   368k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 368k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   368k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   291k|{
 1681|   291k|    auto arg = ctx.arg(id);
 1682|   291k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   291k|    return arg;
 1686|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   291k|    {
 1944|   291k|        return parse_ctx.next_arg_id();
 1945|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   291k|    {
 1985|   291k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   291k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   291k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 291k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   291k|        auto specs = detail::format_specs{};
 1998|   291k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   291k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   291k|            arg.type()};
 2001|       |
 2002|   291k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   291k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 291k]
  |  Branch (2003:29): [True: 0, False: 291k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   291k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   291k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   291k|        on_visit_scan_arg(
 2014|   291k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   291k|                                           get_ctx().locale()},
 2016|   291k|            arg);
 2017|   291k|        return parse_ctx.begin();
 2018|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   291k|    {
 1701|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   291k|    {
 1956|   291k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 291k]
  |  Branch (1956:23): [True: 0, False: 291k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   291k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   291k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 76.8k]
  |  |  ------------------
  ------------------
 1963|   214k|            on_error(r.error());
 1964|   214k|        }
 1965|  76.8k|        else {
 1966|  76.8k|            get_ctx().advance_to(*r);
 1967|  76.8k|        }
 1968|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   353k|{
 2073|   353k|    const auto argcount = args.size();
 2074|   353k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 61.8k, False: 291k]
  |  Branch (2074:60): [True: 61.8k, False: 0]
  ------------------
 2075|  61.8k|        auto arg = args.get(0);
 2076|  61.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  61.8k|    }
 2078|       |
 2079|   291k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 291k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   291k|    SCN_UNLIKELY_ATTR
 2087|   291k|    {
 2088|   291k|        auto handler = format_handler<false, CharT>{
 2089|   291k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   291k|    static_cast<    \
  |  |  929|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   291k|    static_cast<    \
  |  |  929|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   291k|        return vscan_parse_format_string(format, handler);
 2091|   291k|    }
 2092|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  92.8k|{
 1658|  92.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  92.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  92.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  92.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  92.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  92.8k|    static_cast<    \
  |  |  929|  92.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  92.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 28.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  64.4k|    }                                                  \
  |  |  |  | 3671|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  28.3k|    return it.position();
 1675|  92.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   291k|    {
 1903|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   291k|    {
 1830|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   291k|{
 2038|   291k|    const auto beg = handler.get_ctx().begin();
 2039|   291k|    detail::parse_format_string<false>(format, handler);
 2040|   291k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 76.7k]
  |  |  ------------------
  ------------------
 2041|   214k|        return unexpected(handler.error);
 2042|   214k|    }
 2043|  76.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.61M|    {
 2022|  1.61M|        return ctx.get();
 2023|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.61M|    {
 1834|  1.61M|        return ctx;
 1835|  1.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   368k|    {
 1907|   368k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 368k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   368k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   291k|{
 1681|   291k|    auto arg = ctx.arg(id);
 1682|   291k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   291k|    return arg;
 1686|   291k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   291k|    {
 1944|   291k|        return parse_ctx.next_arg_id();
 1945|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   291k|    {
 1985|   291k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   291k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   291k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 291k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   291k|        auto specs = detail::format_specs{};
 1998|   291k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   291k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   291k|            arg.type()};
 2001|       |
 2002|   291k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   291k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 291k]
  |  Branch (2003:29): [True: 0, False: 291k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   291k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   291k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   291k|        on_visit_scan_arg(
 2014|   291k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   291k|                                           get_ctx().locale()},
 2016|   291k|            arg);
 2017|   291k|        return parse_ctx.begin();
 2018|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   291k|    {
 1701|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   291k|    {
 1956|   291k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 291k]
  |  Branch (1956:23): [True: 0, False: 291k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   291k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   291k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 76.7k]
  |  |  ------------------
  ------------------
 1963|   214k|            on_error(r.error());
 1964|   214k|        }
 1965|  76.7k|        else {
 1966|  76.7k|            get_ctx().advance_to(*r);
 1967|  76.7k|        }
 1968|   291k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   271k|{
 2099|   271k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   271k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   260k|{
 2099|   260k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   260k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  30.9k|{
 2099|  30.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  30.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  30.9k|{
 2099|  30.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  30.9k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.58k|{
 1363|  3.58k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.58k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.58k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.58k|            std::u32string tmp;
 1368|  3.58k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.58k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.58k|                std::u32string_view{tmp}, dest);
 1371|  3.58k|        }
 1372|  3.58k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.58k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.58k|        }
 1375|  3.58k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.58k|{
 1256|  3.58k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.58k|    auto it = src.begin();
 1259|  1.30M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.29M, False: 3.58k]
  ------------------
 1260|  1.29M|        auto res = get_next_code_point(
 1261|  1.29M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.29M|                                                                 src.end()));
 1263|  1.29M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.61k, False: 1.29M]
  |  |  ------------------
  ------------------
 1264|  3.61k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.61k|        }
 1266|  1.29M|        else {
 1267|  1.29M|            dest.push_back(res.value);
 1268|  1.29M|        }
 1269|  1.29M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.29M|    }
 1271|  3.58k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.28M|{
 1169|  2.28M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.28M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.28M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 2.24M]
  |  |  ------------------
  ------------------
 1173|  39.1k|        return {get_start_for_next_code_point(input),
 1174|  39.1k|                detail::invalid_code_point};
 1175|  39.1k|    }
 1176|  2.24M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.48k, False: 2.24M]
  |  |  ------------------
  ------------------
 1177|  6.48k|        return {input.end(), detail::invalid_code_point};
 1178|  6.48k|    }
 1179|       |
 1180|  2.24M|    return {input.begin() + len,
 1181|  2.24M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.24M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  39.1k|{
 1155|  39.1k|    auto it = input.begin();
 1156|   350k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 340k, False: 9.91k]
  ------------------
 1157|   340k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 29.2k, False: 311k]
  ------------------
 1158|  29.2k|            break;
 1159|  29.2k|        }
 1160|   340k|    }
 1161|  39.1k|    return it;
 1162|  39.1k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  47.8M|    {
  809|  47.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  47.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  47.8M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  17.8M|    {
  823|  17.8M|        return a.m_code == b.m_code;
  824|  17.8M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.66M|    {
 1728|  2.66M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.66M|        std::strcpy(m_locbuf, loc);
 1730|  2.66M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.66M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.66M|        std::setlocale(m_category, m_locbuf);
 1735|  2.66M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.66M|    {
 1757|  2.66M|        std::setlocale(cat, "C");
 1758|  2.66M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.48M|    {
 2936|  4.48M|        return m_msg == nullptr;
 2937|  4.48M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  4.43M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  59.0M|{
  458|  59.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  59.0M|        static_cast<unsigned char>(ch))];
  460|  59.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  48.1k|{
  469|  48.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  48.1k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  11.8M|{
  539|  11.8M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  11.8M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  21.0M|{
  784|  21.0M|    return e != eof_error::good;
  785|  21.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  61.2k|{
  798|  61.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  61.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  61.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  61.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   254k|{
  845|   254k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   254k|    return parse_error::eof;
  847|   254k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  6.43M|{
  854|  6.43M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 6.43M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  6.43M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 91.1k, False: 6.34M]
  ------------------
  859|  91.1k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  91.1k|    }
  861|       |
  862|  6.34M|    return scan_error{code, msg};
  863|  6.43M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  6.43M|{
  868|  6.43M|    return [code, msg](parse_error err) {
  869|  6.43M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.43M|    };
  871|  6.43M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  6.87M|{
 1200|       |    // Pattern_White_Space property
 1201|  6.87M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 6.56M, False: 312k]
  |  Branch (1201:27): [True: 2.22M, False: 4.33M]
  ------------------
 1202|  6.87M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 147k, False: 4.50M]
  ------------------
 1203|  6.87M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 200k, False: 4.30M]
  ------------------
 1204|  6.87M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.68k, False: 4.29M]
  ------------------
 1205|  6.87M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 21.5k, False: 4.27M]
  ------------------
 1206|  6.87M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 205k, False: 4.06M]
  ------------------
 1207|  6.87M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 4.06M]
  ------------------
 1208|  6.87M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  7.14M|{
 2220|  7.14M|    unsigned char running_diff{0};
 2221|  26.8M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 19.6M, False: 7.14M]
  ------------------
 2222|  19.6M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  19.6M|    }
 2224|  7.14M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 221k, False: 6.92M]
  |  Branch (2224:33): [True: 34.1k, False: 6.88M]
  ------------------
 2225|  7.14M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  45.2M|{
 3123|  45.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  45.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.26M|{
 3127|  1.26M|#if WCHAR_MIN < 0
 3128|  1.26M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.25M, False: 15.9k]
  |  Branch (3128:20): [True: 734k, False: 518k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   734k|        return char_to_int(static_cast<char>(ch));
 3133|   734k|    }
 3134|   534k|    return 255;
 3135|  1.26M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.83M|{
 6008|  3.83M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.83M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.83M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.83M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.83M|    return {};
 6023|  3.83M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.96M|    {
  304|  7.96M|        ranges::advance(x, n);
  305|  7.96M|        return x;
  306|  7.96M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.96M|    {
  268|  7.96M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.96M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.96M|    {
  151|  7.96M|        i += n;
  152|  7.96M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  9.49M|    {
  108|  9.49M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  9.49M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  9.49M|    {
   87|  9.49M|        return s - i;
   88|  9.49M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.03M|    {
  304|  1.03M|        ranges::advance(x, n);
  305|  1.03M|        return x;
  306|  1.03M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.03M|    {
  268|  1.03M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.03M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.03M|    {
  151|  1.03M|        i += n;
  152|  1.03M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   146k|    {
  108|   146k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   146k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   146k|    {
   87|   146k|        return s - i;
   88|   146k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.78M|{
  981|  2.78M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.78M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.78M|        return true;
  984|  2.78M|    }
  985|  2.78M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.78M|                           ranges::const_iterator_t<Range>,
  987|  2.78M|                           typename detail::basic_scan_buffer<
  988|  2.78M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.78M|        auto beg = r.begin();
  990|  2.78M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.78M, False: 0]
  ------------------
  991|  2.78M|            return false;
  992|  2.78M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.78M|    else {
 1006|  2.78M|        return false;
 1007|  2.78M|    }
 1008|  2.78M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  76.8M|    {
  763|  76.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  76.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  76.8M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  7.39M|{
 1857|  7.39M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  7.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  7.39M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  7.39M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  7.39M|        if (sz < count) {
 1862|  7.39M|            return unexpected(eof_error::eof);
 1863|  7.39M|        }
 1864|       |
 1865|  7.39M|        return ranges::next(range.begin(), count);
 1866|  7.39M|    }
 1867|  7.39M|    else {
 1868|  7.39M|        auto it = range.begin();
 1869|  7.39M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 4.57M, False: 2.82M]
  ------------------
 1870|  4.57M|            return ranges::next(it, count);
 1871|  4.57M|        }
 1872|       |
 1873|  11.2M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 8.51M, False: 2.77M]
  ------------------
 1874|  8.51M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 54.2k, False: 8.46M]
  ------------------
 1875|  54.2k|                return unexpected(eof_error::eof);
 1876|  54.2k|            }
 1877|  8.51M|        }
 1878|       |
 1879|  2.77M|        return it;
 1880|  2.82M|    }
 1881|  7.39M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  7.39M|{
 1095|  7.39M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  7.39M|        return r.size();
 1097|  7.39M|    }
 1098|  7.39M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  7.39M|                           ranges::const_iterator_t<Range>,
 1100|  7.39M|                           typename detail::basic_scan_buffer<
 1101|  7.39M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  7.39M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  7.39M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  7.39M|        }
 1105|  7.39M|        else {
 1106|  7.39M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 7.39M, False: 0]
  ------------------
 1107|  7.39M|                return static_cast<size_t>(
 1108|  7.39M|                    r.begin().parent()->chars_available() -
 1109|  7.39M|                    r.begin().position());
 1110|  7.39M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  7.39M|        }
 1113|  7.39M|    }
 1114|  7.39M|    else {
 1115|  7.39M|        return 0;
 1116|  7.39M|    }
 1117|  7.39M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.88M|    {
  754|  6.88M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  38.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.4M|              cvref<T> obj = *get<T>(fn);
  745|  38.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.4M|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.4M|              }
  748|  38.4M|              else {
  749|  38.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.4M|              }
  751|  38.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  38.4M|    {
  684|  38.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.4M|            return static_cast<T*>(s.m_cp);
  686|  38.4M|        }
  687|  38.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.4M|            return static_cast<T*>(s.m_p);
  689|  38.4M|        }
  690|  38.4M|        else {
  691|  38.4M|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.4M|        }
  693|  38.4M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.88M|        {
  662|  6.88M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  11.5M|    {
  763|  11.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  11.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.23M|    {
  754|  3.23M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  5.68M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.68M|              cvref<T> obj = *get<T>(fn);
  745|  5.68M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.68M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.68M|              }
  748|  5.68M|              else {
  749|  5.68M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.68M|              }
  751|  5.68M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.68M|    {
  684|  5.68M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.68M|            return static_cast<T*>(s.m_cp);
  686|  5.68M|        }
  687|  5.68M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.68M|            return static_cast<T*>(s.m_p);
  689|  5.68M|        }
  690|  5.68M|        else {
  691|  5.68M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.68M|        }
  693|  5.68M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  3.23M|        {
  662|  3.23M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  2.00M|    {
 6037|  2.00M|        const bool need_skipped_width =
 6038|  2.00M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 2.00M]
  |  Branch (6038:33): [True: 0, False: 2.00M]
  ------------------
 6039|  2.00M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.00M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 2.00M]
  ------------------
 6043|  2.00M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 2.00M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  2.00M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 2.00M, False: 0]
  |  Branch (6047:56): [True: 2.00M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  2.00M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 2.00M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.99M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  2.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.5k, False: 1.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.5k|    }                                                  \
  |  |  |  | 3671|  2.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.99M|                            make_eof_scan_error));
 6058|       |
 6059|  3.99M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.98M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.98M|            return result_type{it, 0};
 6067|  3.99M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  2.00M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  5.43M|{
 1976|  5.43M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.43M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  5.43M|{
 1957|  5.43M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.43M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.43M|    }
 1960|  5.43M|    else {
 1961|  5.43M|        auto first = range.begin();
 1962|  29.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 29.9M, False: 40.3k]
  ------------------
 1963|  29.9M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 5.39M, False: 24.5M]
  ------------------
 1964|  5.39M|                return first;
 1965|  5.39M|            }
 1966|  29.9M|        }
 1967|  40.3k|        return first;
 1968|  5.43M|    }
 1969|  5.43M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.79M|    {
  108|  4.79M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.79M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.79M|    {
   94|  4.79M|        iter_difference_t<I> counter{0};
   95|  48.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 43.8M, False: 4.79M]
  ------------------
   96|  43.8M|            ++i;
   97|  43.8M|            ++counter;
   98|  43.8M|        }
   99|  4.79M|        return counter;
  100|  4.79M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  6.43M|    return [code, msg](parse_error err) {
  869|  6.43M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  6.43M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.10M|    {
 1780|  1.10M|        auto stdloc = loc.get<std::locale>();
 1781|  1.10M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.10M|        grouping = numpunct.grouping();
 1783|  1.10M|        thousands_sep =
 1784|  1.10M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.10M]
  ------------------
 1785|  1.10M|        decimal_point = numpunct.decimal_point();
 1786|  1.10M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.10M|{
 1717|  1.10M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.10M, False: 0]
  ------------------
 1718|  1.10M|        return std::use_facet<Facet>(stdloc);
 1719|  1.10M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.10M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  7.97M|{
 1846|  7.97M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.5k, False: 7.94M]
  |  |  ------------------
  ------------------
 1847|  30.5k|        return unexpected(e);
 1848|  30.5k|    }
 1849|       |
 1850|  7.94M|    return ranges::next(range.begin());
 1851|  7.97M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  11.5M|{
  950|  11.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  11.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.5k, False: 11.4M]
  |  |  ------------------
  ------------------
  951|  60.5k|        return eof_error::eof;
  952|  60.5k|    }
  953|  11.4M|    return eof_error::good;
  954|  11.5M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  16.2M|{
  944|  16.2M|    return is_range_eof(r.begin(), r.end());
  945|  16.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  16.2M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  16.2M|    {
  937|  16.2M|        return begin == end;
  938|  16.2M|    }
  939|  16.2M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  7.94M|    {
  296|  7.94M|        ++x;
  297|  7.94M|        return x;
  298|  7.94M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  3.02M|{
 3141|  3.02M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.02M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.22M, False: 805k]
  ------------------
 3143|  2.22M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.22M, False: 514]
  ------------------
 3144|  2.22M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.22M|        }
 3146|    514|        return unexpected(eof_error::eof);
 3147|  2.22M|    }
 3148|       |
 3149|   805k|    auto& it = *r;
 3150|   805k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 320k, False: 485k]
  ------------------
 3151|   320k|        return std::pair{it, sign_type::minus_sign};
 3152|   320k|    }
 3153|   485k|    return std::pair{it, sign_type::plus_sign};
 3154|   805k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  5.33M|{
 2272|  5.33M|    auto it = read_code_unit(range);
 2273|  5.33M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 5.31M]
  |  |  ------------------
  ------------------
 2274|  17.9k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  17.9k|    }
 2276|       |
 2277|  9.95M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 9.95M, False: 4.24M]
  ------------------
 2278|  9.95M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.07M, False: 8.87M]
  ------------------
 2279|  1.07M|            return *it;
 2280|  1.07M|        }
 2281|  9.95M|    }
 2282|       |
 2283|  4.24M|    return unexpected(parse_error::error);
 2284|  5.31M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  7.39M|{
 2231|  7.39M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.39M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.39M|        if (range.size() < str.size()) {
 2236|  7.39M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  7.39M|        }
 2238|  7.39M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  7.39M|            return unexpected(parse_error::error);
 2240|  7.39M|        }
 2241|  7.39M|        return ranges::next(range.begin(), str.size());
 2242|  7.39M|    }
 2243|  7.39M|    else {
 2244|  7.39M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.39M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.39M|                return ch;
 2247|  7.39M|            }
 2248|  7.39M|            return static_cast<char_type>(ch +
 2249|  7.39M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.39M|        };
 2251|       |
 2252|  7.39M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  7.39M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.39M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.39M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.2k, False: 7.34M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  54.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  54.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  54.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  54.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  54.2k|    }                                                  \
  |  |  |  | 3671|  7.39M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  7.34M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.34M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.34M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  7.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.08M, False: 254k]
  |  |  ------------------
  ------------------
 2257|  7.34M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.34M|                    return ascii_tolower(a) ==
 2259|  7.34M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.34M|                }))) {
 2261|  7.08M|            return unexpected(parse_error::error);
 2262|  7.08M|        }
 2263|       |
 2264|   254k|        return it;
 2265|  7.34M|    }
 2266|  7.39M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  8.57M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  8.57M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 7.76M, False: 809k]
  |  Branch (2245:29): [True: 688k, False: 120k]
  ------------------
 2246|  8.45M|                return ch;
 2247|  8.45M|            }
 2248|   120k|            return static_cast<char_type>(ch +
 2249|   120k|                                          static_cast<char_type>('a' - 'A'));
 2250|  8.57M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.64M|{
 2146|  2.64M|    auto it = read_code_unit(range);
 2147|  2.64M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 2.63M]
  |  |  ------------------
  ------------------
 2148|  12.5k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.5k|    }
 2150|       |
 2151|  2.63M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.20M, False: 422k]
  |  |  ------------------
  ------------------
 2152|  2.63M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.20M|        return unexpected(parse_error::error);
 2154|  2.20M|    }
 2155|       |
 2156|   422k|    return *it;
 2157|  2.63M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  5.42M|{
 1996|  5.42M|    auto it = read_while_code_unit(range, pred);
 1997|  5.42M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.26M, False: 3.16M]
  ------------------
 1998|  2.26M|        return unexpected(parse_error::error);
 1999|  2.26M|    }
 2000|  3.16M|    return it;
 2001|  5.42M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.52M|    {
 1621|  2.52M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.52M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.52M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.52M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.52M|            m_storage.reset();
 1627|  2.52M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.52M|        }
 1629|  2.52M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.52M|                                          std::basic_string<CharT>>) {
 1631|  2.52M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.52M|            m_view = string_view_type{*m_storage};
 1633|  2.52M|        }
 1634|  2.52M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.52M|                                          typename detail::basic_scan_buffer<
 1636|  2.52M|                                              value_t>::forward_iterator> &&
 1637|  2.52M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.52M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.52M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.52M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332k, False: 2.19M]
  |  |  ------------------
  ------------------
 1641|  2.52M|                             detail::to_address(end_seg.end()))) {
 1642|   332k|                auto& str = m_storage.emplace();
 1643|   332k|                str.reserve(range.end().position() - range.begin().position());
 1644|   332k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   332k|                m_view = string_view_type{str};
 1646|   332k|                return;
 1647|   332k|            }
 1648|       |
 1649|  2.19M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.19M|                                                            end_seg.data());
 1651|  2.19M|            m_storage.reset();
 1652|  2.19M|        }
 1653|  2.52M|        else {
 1654|  2.52M|            auto& str = m_storage.emplace();
 1655|  2.52M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.52M|                str.reserve(range.size());
 1657|  2.52M|            }
 1658|  2.52M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.52M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.52M|                          std::back_inserter(str));
 1661|  2.52M|            }
 1662|  2.52M|            else {
 1663|  2.52M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.52M|                     ++it) {
 1665|  2.52M|                    str.push_back(*it);
 1666|  2.52M|                }
 1667|  2.52M|            }
 1668|  2.52M|            m_view = string_view_type{str};
 1669|  2.52M|        }
 1670|  2.52M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  18.3M|    {
 1582|  18.3M|        return m_view;
 1583|  18.3M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  10.8M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.88M|    {
 6079|  1.88M|        const bool need_skipped_width =
 6080|  1.88M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.88M]
  |  Branch (6080:33): [True: 0, False: 1.88M]
  ------------------
 6081|  1.88M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.88M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.88M]
  ------------------
 6084|  1.88M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.88M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.88M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.88M, False: 0]
  ------------------
 6093|  1.88M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.88M]
  ------------------
 6094|  1.88M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.88M|        return result_type{rng.begin(), 0};
 6118|  1.88M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.97M|{
 1846|  3.97M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.99k, False: 3.97M]
  |  |  ------------------
  ------------------
 1847|  6.99k|        return unexpected(e);
 1848|  6.99k|    }
 1849|       |
 1850|  3.97M|    return ranges::next(range.begin());
 1851|  3.97M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.49M|{
  950|  7.49M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.3k, False: 7.46M]
  |  |  ------------------
  ------------------
  951|  33.3k|        return eof_error::eof;
  952|  33.3k|    }
  953|  7.46M|    return eof_error::good;
  954|  7.49M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.49M|{
  944|  7.49M|    return is_range_eof(r.begin(), r.end());
  945|  7.49M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.49M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.49M|    {
  937|  7.49M|        return begin == end;
  938|  7.49M|    }
  939|  7.49M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.97M|    {
  296|  3.97M|        ++x;
  297|  3.97M|        return x;
  298|  3.97M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.76M|{
 3141|  2.76M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.76M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.00M, False: 762k]
  ------------------
 3143|  2.00M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.00M, False: 162]
  ------------------
 3144|  2.00M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.00M|        }
 3146|    162|        return unexpected(eof_error::eof);
 3147|  2.00M|    }
 3148|       |
 3149|   762k|    auto& it = *r;
 3150|   762k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 305k, False: 457k]
  ------------------
 3151|   305k|        return std::pair{it, sign_type::minus_sign};
 3152|   305k|    }
 3153|   457k|    return std::pair{it, sign_type::plus_sign};
 3154|   762k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.21M|{
 2272|  3.21M|    auto it = read_code_unit(range);
 2273|  3.21M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.27k, False: 3.20M]
  |  |  ------------------
  ------------------
 2274|  3.27k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.27k|    }
 2276|       |
 2277|  5.89M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.89M, False: 2.36M]
  ------------------
 2278|  5.89M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 848k, False: 5.04M]
  ------------------
 2279|   848k|            return *it;
 2280|   848k|        }
 2281|  5.89M|    }
 2282|       |
 2283|  2.36M|    return unexpected(parse_error::error);
 2284|  3.20M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  7.20M|{
 2231|  7.20M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  7.20M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  7.20M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  7.20M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 58.1k, False: 7.14M]
  ------------------
 2236|  58.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  58.1k|        }
 2238|  7.14M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.88M, False: 255k]
  ------------------
 2239|  6.88M|            return unexpected(parse_error::error);
 2240|  6.88M|        }
 2241|   255k|        return ranges::next(range.begin(), str.size());
 2242|  7.14M|    }
 2243|  7.20M|    else {
 2244|  7.20M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.20M|            if (ch < 'A' || ch > 'Z') {
 2246|  7.20M|                return ch;
 2247|  7.20M|            }
 2248|  7.20M|            return static_cast<char_type>(ch +
 2249|  7.20M|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.20M|        };
 2251|       |
 2252|  7.20M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  7.20M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  7.20M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  7.20M|        if (SCN_UNLIKELY(!std::equal(
 2257|  7.20M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  7.20M|                    return ascii_tolower(a) ==
 2259|  7.20M|                           static_cast<detail::char_t<Range>>(b);
 2260|  7.20M|                }))) {
 2261|  7.20M|            return unexpected(parse_error::error);
 2262|  7.20M|        }
 2263|       |
 2264|  7.20M|        return it;
 2265|  7.20M|    }
 2266|  7.20M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   767k|{
 2146|   767k|    auto it = read_code_unit(range);
 2147|   767k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 763k]
  |  |  ------------------
  ------------------
 2148|  3.71k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.71k|    }
 2150|       |
 2151|   763k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 635k, False: 128k]
  |  |  ------------------
  ------------------
 2152|   763k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   635k|        return unexpected(parse_error::error);
 2154|   635k|    }
 2155|       |
 2156|   128k|    return *it;
 2157|   763k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  10.2M|    {
 1503|  10.2M|        return sv;
 1504|  10.2M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.45M|{
 1976|  1.45M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.45M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.45M|{
 1957|  1.45M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.45M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.45M|    }
 1960|  1.45M|    else {
 1961|  1.45M|        auto first = range.begin();
 1962|  1.45M|        for (; first != range.end(); ++first) {
 1963|  1.45M|            if (pred(*first)) {
 1964|  1.45M|                return first;
 1965|  1.45M|            }
 1966|  1.45M|        }
 1967|  1.45M|        return first;
 1968|  1.45M|    }
 1969|  1.45M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.70M|{
 2951|  2.70M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.70M, False: 0]
  ------------------
 2952|  2.70M|        auto it = read_while_classic_space(range);
 2953|  2.70M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.70M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 2.68M]
  |  |  ------------------
  ------------------
 2955|  20.1k|            return unexpected(e);
 2956|  20.1k|        }
 2957|       |
 2958|  2.68M|        return it;
 2959|  2.70M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.70M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.70M|{
 2117|  2.70M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.70M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.70M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.70M|        auto buf = make_contiguous_buffer(range);
 2121|  2.70M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.70M|        return ranges::next(range.begin(),
 2123|  2.70M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.70M|    }
 2125|  2.70M|    else {
 2126|  2.70M|        auto it = range.begin();
 2127|       |
 2128|  2.70M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.70M|            auto seg = get_contiguous_beginning(range);
 2130|  2.70M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.70M|                seg_it != seg.end()) {
 2132|  2.70M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.70M|            }
 2134|  2.70M|            ranges::advance(it, seg.size());
 2135|  2.70M|        }
 2136|       |
 2137|  2.70M|        return read_while_code_point(
 2138|  2.70M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.70M|    }
 2140|  2.70M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.70M|{
 1683|  2.70M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.70M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.70M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.70M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.70M|    }
 1688|  2.70M|    else {
 1689|  2.70M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.70M|    }
 1691|  2.70M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.70M|    {
 1490|  2.70M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  7.54M|    {
  304|  7.54M|        ranges::advance(x, n);
  305|  7.54M|        return x;
  306|  7.54M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  10.0M|    {
  268|  10.0M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  10.0M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  10.0M|    {
  181|  47.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 37.8M, False: 10.0M]
  ------------------
  182|  37.8M|            ++i;
  183|  37.8M|        }
  184|  10.0M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   637k|    {
 6193|   637k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   637k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   637k|            auto rd = make_reader<T, char_type>();
 6198|   637k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   637k|                return unexpected(e);
 6200|   637k|            }
 6201|       |
 6202|   637k|            return impl(rd, range, value);
 6203|   637k|        }
 6204|   637k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   637k|            auto rd = make_reader<T, char_type>();
 6206|   637k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 637k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   637k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 637k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   637k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   637k|                return impl(rd, range, value);
 6213|   637k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   637k|        else {
 6221|   637k|            SCN_EXPECT(false);
 6222|   637k|            SCN_UNREACHABLE;
 6223|   637k|        }
 6224|   637k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.89M|    {
 3040|  3.89M|        reader_error_handler eh{};
 3041|  3.89M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.89M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.89M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.89M|        return {};
 3046|  3.89M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.89M|    {
 3051|  3.89M|        return static_cast<Derived&>(*this);
 3052|  3.89M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.89M|    {
 4145|  3.89M|        detail::check_float_type_specs(specs, eh);
 4146|  3.89M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   637k|    {
 6124|   637k|        const bool need_skipped_width =
 6125|   637k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 637k]
  |  Branch (6125:33): [True: 0, False: 637k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   637k|        auto it = rng.begin();
 6129|   637k|        std::ptrdiff_t prefix_width = 0;
 6130|   637k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 637k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   637k|        else {
 6138|   637k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   637k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   637k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   637k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.75k, False: 630k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.75k|    }                                                  \
  |  |  |  | 3671|   637k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   630k|            std::tie(it, prefix_width) = prefix_result;
 6140|   630k|        }
 6141|   630k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   630k|        std::ptrdiff_t value_width = 0;
 6145|   630k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 630k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   630k|        else {
 6161|   630k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.0k, False: 601k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  29.0k|    }                                                  \
  |  | 3671|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   601k|                                             specs, value, loc));
 6163|       |
 6164|   601k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 601k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   601k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   601k|        std::ptrdiff_t postfix_width = 0;
 6173|   601k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 596k, False: 5.19k]
  ------------------
 6174|   596k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   596k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   596k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   596k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 596k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   596k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   596k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   596k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   596k|                                 value_width));
 6178|   596k|            std::tie(it, postfix_width) = postfix_result;
 6179|   596k|        }
 6180|       |
 6181|   601k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   601k|                                                 value_width, postfix_width);
 6183|   601k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 601k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   601k|        return it;
 6188|   601k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  9.14M|    {
 3035|  9.14M|        return true;
 3036|  9.14M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.85M|    {
 4217|  3.85M|        unsigned options{};
 4218|  3.85M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.10M, False: 2.74M]
  ------------------
 4219|  1.10M|            options |= float_reader_base::allow_thsep;
 4220|  1.10M|        }
 4221|       |
 4222|  3.85M|        SCN_GCC_COMPAT_PUSH
 4223|  3.85M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.85M|        switch (specs.type) {
 4226|   502k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 502k, False: 3.35M]
  ------------------
 4227|   502k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  75.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 75.3k, False: 3.78M]
  ------------------
 4230|  75.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.23M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.23M, False: 2.62M]
  ------------------
 4233|  1.23M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   935k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 935k, False: 2.92M]
  ------------------
 4236|   935k|                return options | float_reader_base::allow_scientific |
 4237|   935k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.10M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.10M, False: 2.74M]
  ------------------
 4240|  1.10M|                return options | float_reader_base::allow_scientific |
 4241|  1.10M|                       float_reader_base::allow_fixed |
 4242|  1.10M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.85M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.85M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.85M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.85M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.85M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  5.43M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  10.8M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.66M|    {
 3691|  1.66M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.66M|        const std::ptrdiff_t sign_len =
 3694|  1.66M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 464k, False: 1.20M]
  ------------------
 3695|       |
 3696|  1.66M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.66M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.66M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.66M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.0k, False: 1.64M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  27.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  27.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  27.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  27.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  27.0k|    }                                                  \
  |  |  |  | 3671|  1.66M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.64M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.66M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  5.28M|    {
 4057|  5.28M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 5.28M, False: 0]
  ------------------
 4058|  5.28M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 5.28M, False: 0]
  ------------------
 4059|  5.28M|            return;
 4060|  5.28M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  6.22M|    {
 1587|  6.22M|        return m_storage.has_value();
 1588|  6.22M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.65M|    {
 1592|  3.65M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.65M|        return *m_storage;
 1594|  3.65M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   630k|    {
 4170|   630k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   630k|#if !SCN_DISABLE_LOCALE
 4173|   630k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 177k, False: 453k]
  ------------------
 4174|   177k|            return read_impl<Range>(
 4175|   177k|                range, rd,
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   177k|                },
 4179|   177k|                value, loc);
 4180|   177k|        }
 4181|   453k|#endif
 4182|       |
 4183|   453k|        return read_impl<Range>(
 4184|   453k|            range, rd,
 4185|   453k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   453k|                return r.read_source(SCN_FWD(args)...);
 4187|   453k|            },
 4188|   453k|            value);
 4189|   630k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   871k|    {
 4206|   871k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   871k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   871k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.0k, False: 840k]
  |  |  ------------------
  ------------------
 4208|  31.0k|            return unexpected(r.error());
 4209|  31.0k|        }
 4210|       |
 4211|   840k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   840k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   840k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   840k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.57k, False: 834k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.57k|    }                                                  \
  |  |  |  | 3671|   840k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   834k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   834k|        return ranges::next(range.begin(), n);
 4213|   840k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.75M|    {
  763|  2.75M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.75M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   177k|    {
  684|   177k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   177k|            return static_cast<T*>(s.m_cp);
  686|   177k|        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   177k|            return static_cast<T*>(s.m_p);
  689|   177k|        }
  690|   177k|        else {
  691|   177k|            return reinterpret_cast<T*>(s.m_fp);
  692|   177k|        }
  693|   177k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   177k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   177k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   177k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   571k|    {
 3679|   571k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   571k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   571k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 571k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   571k|        return read_source_impl(range);
 3685|   571k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.75M|    {
 3705|  2.75M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.75M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.75M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.75M|        auto it = sign_result.first;
 3708|  2.75M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.75M|        auto digits_begin = it;
 3711|  2.75M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.75M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.75M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.75M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.75M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.75M|                SCN_TRY_ASSIGN(
 3717|  2.75M|                    it,
 3718|  2.75M|                    do_read_source_impl(
 3719|  2.75M|                        r,
 3720|  2.75M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.75M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.75M|            }
 3723|  2.75M|            else {
 3724|  2.75M|                auto cb = [&](const auto& rr)
 3725|  2.75M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.75M|                    auto res = read_all(rr);
 3727|  2.75M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.75M|                        return unexpected_scan_error(
 3729|  2.75M|                            scan_error::invalid_scanned_value,
 3730|  2.75M|                            "Invalid float value");
 3731|  2.75M|                    }
 3732|  2.75M|                    return res;
 3733|  2.75M|                };
 3734|  2.75M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.75M|            }
 3736|  2.75M|        }
 3737|  2.75M|        else {
 3738|  2.75M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  2.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 99.3k, False: 2.65M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  99.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  99.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  99.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  99.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  99.3k|    }                                                  \
  |  | 3671|  2.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.65M|                it,
 3740|  2.65M|                do_read_source_impl(
 3741|  2.65M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.65M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.65M|        }
 3744|       |
 3745|  2.65M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.65M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.63M, False: 23.1k]
  |  Branch (3747:48): [True: 2.61M, False: 17.0k]
  ------------------
 3748|  2.65M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.52M, False: 96.1k]
  ------------------
 3749|  2.65M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.52M, False: 2.66k]
  ------------------
 3750|  2.52M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.52M|        }
 3752|       |
 3753|  2.65M|        handle_separators();
 3754|       |
 3755|  2.65M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.65M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.65M|        return it;
 3768|  2.65M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.75M|    {
 4000|  2.75M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.75M|        const bool allowed_nonhex =
 4002|  2.75M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.75M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.75M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.71M, False: 40.2k]
  |  Branch (4005:45): [True: 0, False: 2.71M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.75M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 40.2k, False: 2.71M]
  ------------------
 4011|  40.2k|            return *r;
 4012|  40.2k|        }
 4013|       |
 4014|  2.71M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.62M, False: 98.7k]
  |  Branch (4014:45): [True: 1.19k, False: 2.61M]
  ------------------
 4015|  1.19k|            return unexpected(r.error());
 4016|  1.19k|        }
 4017|  2.71M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 98.7k, False: 2.61M]
  ------------------
 4018|  98.7k|            return *r;
 4019|  98.7k|        }
 4020|       |
 4021|  2.61M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.87M, False: 739k]
  |  Branch (4021:28): [True: 605k, False: 1.27M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   605k|            auto it = range.begin();
 4025|       |
 4026|   605k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 29.9k, False: 575k]
  ------------------
 4027|  29.9k|                m_kind = float_kind::hex_with_prefix;
 4028|  29.9k|                it = *r;
 4029|  29.9k|            }
 4030|   575k|            else {
 4031|   575k|                m_kind = float_kind::hex_without_prefix;
 4032|   575k|            }
 4033|       |
 4034|   605k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   605k|        }
 4036|  2.01M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 739k, False: 1.27M]
  |  Branch (4036:29): [True: 739k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   739k|            m_kind = float_kind::generic;
 4040|   739k|            return read_regular_float(range);
 4041|   739k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.27M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 4047|  67.0k|            m_kind = float_kind::hex_with_prefix;
 4048|  67.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  67.0k|        }
 4050|       |
 4051|  1.20M|        m_kind = float_kind::generic;
 4052|  1.20M|        return read_regular(range);
 4053|  1.27M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.75M|    {
 3811|  2.75M|        auto it = range.begin();
 3812|  2.75M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.71M, False: 40.2k]
  ------------------
 3813|  2.71M|            return unexpected(r.error());
 3814|  2.71M|        }
 3815|  40.2k|        else {
 3816|  40.2k|            it = *r;
 3817|  40.2k|        }
 3818|       |
 3819|  40.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  40.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  40.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 23.1k, False: 17.0k]
  ------------------
 3822|  23.1k|            m_kind = float_kind::inf_short;
 3823|  23.1k|            return it;
 3824|  23.1k|        }
 3825|  17.0k|        else {
 3826|  17.0k|            m_kind = float_kind::inf_long;
 3827|  17.0k|            return *r;
 3828|  17.0k|        }
 3829|  40.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.71M|    {
 3834|  2.71M|        auto it = range.begin();
 3835|  2.71M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.61M, False: 99.9k]
  ------------------
 3836|  2.61M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.61M|                scan_error::invalid_scanned_value,
 3838|  2.61M|                "Invalid floating-point NaN value"));
 3839|  2.61M|        }
 3840|  99.9k|        else {
 3841|  99.9k|            it = *r;
 3842|  99.9k|        }
 3843|       |
 3844|  99.9k|        if (auto r =
 3845|  99.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  99.9k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 96.1k, False: 3.86k]
  ------------------
 3847|  96.1k|            m_kind = float_kind::nan_simple;
 3848|  96.1k|            return it;
 3849|  96.1k|        }
 3850|  3.86k|        else {
 3851|  3.86k|            it = *r;
 3852|  3.86k|        }
 3853|       |
 3854|  3.86k|        auto payload_beg_it = it;
 3855|  3.86k|        it = read_while_code_unit(
 3856|  3.86k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.86k|                return is_ascii_char(ch) &&
 3858|  3.86k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.86k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.86k|            });
 3861|  3.86k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.86k|        m_kind = float_kind::nan_with_payload;
 3864|  3.86k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.19k]
  ------------------
 3865|  3.86k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.19k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.19k|                                     "Invalid floating-point NaN payload");
 3870|  3.86k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.86k|    {
  754|  3.86k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  24.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.3k|              cvref<T> obj = *get<T>(fn);
  745|  24.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.3k|              }
  748|  24.3k|              else {
  749|  24.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.3k|              }
  751|  24.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  24.3k|    {
  684|  24.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.3k|            return static_cast<T*>(s.m_cp);
  686|  24.3k|        }
  687|  24.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.3k|            return static_cast<T*>(s.m_p);
  689|  24.3k|        }
  690|  24.3k|        else {
  691|  24.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.3k|        }
  693|  24.3k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  24.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.1k, False: 243]
  ------------------
 3858|  24.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.3k, False: 2.77k]
  |  Branch (3858:39): [True: 13.5k, False: 7.81k]
  |  Branch (3858:54): [True: 2.57k, False: 8.01k]
  |  Branch (3858:67): [True: 2.48k, False: 83]
  ------------------
 3859|  24.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.77k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  24.3k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.86k|        {
  662|  3.86k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.87M|    {
 3804|  1.87M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.87M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   672k|    {
 3904|   672k|        auto it = range.begin();
 3905|       |
 3906|   672k|        std::ptrdiff_t digits_count = 0;
 3907|   672k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   672k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 659k]
  |  |  ------------------
  ------------------
 3909|  12.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  12.4k|                scan_error::invalid_scanned_value,
 3911|  12.4k|                "Invalid hexadecimal floating-point value"));
 3912|  12.4k|        }
 3913|   659k|        else {
 3914|   659k|            digits_count += ranges::distance(it, *r);
 3915|   659k|            it = *r;
 3916|   659k|        }
 3917|       |
 3918|   659k|        m_integral_part_length = digits_count;
 3919|   659k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 88.9k, False: 570k]
  ------------------
 3920|   659k|                                             m_locale_options.decimal_point)) {
 3921|  88.9k|            it = *r;
 3922|  88.9k|        }
 3923|       |
 3924|   659k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 72.5k, False: 587k]
  ------------------
 3925|   659k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  72.5k|            digits_count += ranges::distance(it, *r);
 3927|  72.5k|            it = *r;
 3928|  72.5k|        }
 3929|       |
 3930|   659k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   659k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 659k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   659k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   659k|        return it;
 3938|   659k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.33M|    {
 3789|  1.33M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.33M]
  |  |  |  Branch (859:45): [True: 0, False: 1.33M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.33M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.33M|        return read_while1_code_unit(
 3798|  1.33M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.33M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.33M|    {
  754|  1.33M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  6.93M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.93M|              cvref<T> obj = *get<T>(fn);
  745|  6.93M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.93M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.93M|              }
  748|  6.93M|              else {
  749|  6.93M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.93M|              }
  751|  6.93M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  6.93M|    {
  684|  6.93M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.93M|            return static_cast<T*>(s.m_cp);
  686|  6.93M|        }
  687|  6.93M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.93M|            return static_cast<T*>(s.m_p);
  689|  6.93M|        }
  690|  6.93M|        else {
  691|  6.93M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.93M|        }
  693|  6.93M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  6.93M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.33M|        {
  662|  1.33M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.30M|    {
 3876|  2.30M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 269k, False: 2.03M]
  ------------------
 3877|   269k|            auto beg_exp_it = range.begin();
 3878|   269k|            auto it = *r;
 3879|       |
 3880|   269k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 268k, False: 514]
  ------------------
 3881|   269k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   268k|                it = r_sign->first;
 3883|   268k|            }
 3884|       |
 3885|   269k|            if (auto r_exp = read_while1_code_unit(
 3886|   269k|                    ranges::subrange{it, range.end()},
 3887|   269k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   269k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 266k]
  |  |  ------------------
  ------------------
 3889|  3.16k|                it = beg_exp_it;
 3890|  3.16k|            }
 3891|   266k|            else {
 3892|   266k|                it = *r_exp;
 3893|   266k|            }
 3894|       |
 3895|   269k|            return it;
 3896|   269k|        }
 3897|  2.03M|        return range.begin();
 3898|  2.30M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   269k|    {
  754|   269k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   877k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   877k|              cvref<T> obj = *get<T>(fn);
  745|   877k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   877k|                  obj(static_cast<decltype(args)>(args)...);
  747|   877k|              }
  748|   877k|              else {
  749|   877k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   877k|              }
  751|   877k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   877k|    {
  684|   877k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   877k|            return static_cast<T*>(s.m_cp);
  686|   877k|        }
  687|   877k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   877k|            return static_cast<T*>(s.m_p);
  689|   877k|        }
  690|   877k|        else {
  691|   877k|            return reinterpret_cast<T*>(s.m_fp);
  692|   877k|        }
  693|   877k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   877k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   269k|        {
  662|   269k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.94M|    {
 3944|  1.94M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.94M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.69M, False: 250k]
  |  Branch (3945:50): [True: 36.3k, False: 1.66M]
  ------------------
 3946|       |
 3947|  1.94M|        auto it = ranges::begin(range);
 3948|  1.94M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.94M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.94M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.0k, False: 1.87M]
  |  |  ------------------
  ------------------
 3952|  67.0k|            return r.transform_error(
 3953|  67.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  67.0k|                                              "Invalid floating-point value"));
 3955|  67.0k|        }
 3956|  1.87M|        else {
 3957|  1.87M|            digits_count += ranges::distance(it, *r);
 3958|  1.87M|            it = *r;
 3959|  1.87M|        }
 3960|       |
 3961|  1.87M|        m_integral_part_length = digits_count;
 3962|  1.87M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 326k, False: 1.55M]
  ------------------
 3963|  1.87M|                                             m_locale_options.decimal_point)) {
 3964|   326k|            it = *r;
 3965|   326k|        }
 3966|       |
 3967|  1.87M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 282k, False: 1.59M]
  ------------------
 3968|  1.87M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   282k|            digits_count += ranges::distance(it, *r);
 3970|   282k|            it = *r;
 3971|   282k|        }
 3972|       |
 3973|  1.87M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.87M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.87M|        auto beg_exp_it = it;
 3979|  1.87M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.64M, False: 231k]
  ------------------
 3980|  1.64M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.64M|        }
 3982|  1.87M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 35.2k, False: 1.84M]
  |  Branch (3982:29): [True: 18.6k, False: 16.6k]
  ------------------
 3983|  18.6k|            return unexpected_scan_error(
 3984|  18.6k|                scan_error::invalid_scanned_value,
 3985|  18.6k|                "No exponent given to scientific float");
 3986|  18.6k|        }
 3987|       |
 3988|  1.86M|        m_kind =
 3989|  1.86M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.59M, False: 265k]
  ------------------
 3990|       |
 3991|  1.86M|        return it;
 3992|  1.87M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.82M|    {
 3774|  3.82M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.82M]
  |  |  |  Branch (859:45): [True: 0, False: 3.82M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.82M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.82M|        return read_while1_code_unit(
 3783|  3.82M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.82M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.82M|    {
  754|  3.82M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  22.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.0M|              cvref<T> obj = *get<T>(fn);
  745|  22.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.0M|              }
  748|  22.0M|              else {
  749|  22.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.0M|              }
  751|  22.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  22.0M|    {
  684|  22.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.0M|            return static_cast<T*>(s.m_cp);
  686|  22.0M|        }
  687|  22.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.0M|            return static_cast<T*>(s.m_p);
  689|  22.0M|        }
  690|  22.0M|        else {
  691|  22.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.0M|        }
  693|  22.0M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  22.0M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.82M|        {
  662|  3.82M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.52M|    {
 1577|  2.52M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.52M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   453k|    {
  754|   453k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   453k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   453k|              cvref<T> obj = *get<T>(fn);
  745|   453k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   453k|                  obj(static_cast<decltype(args)>(args)...);
  747|   453k|              }
  748|   453k|              else {
  749|   453k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   453k|              }
  751|   453k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   453k|    {
  684|   453k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   453k|            return static_cast<T*>(s.m_cp);
  686|   453k|        }
  687|   453k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   453k|            return static_cast<T*>(s.m_p);
  689|   453k|        }
  690|   453k|        else {
  691|   453k|            return reinterpret_cast<T*>(s.m_fp);
  692|   453k|        }
  693|   453k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   453k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   453k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   453k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.18M|    {
 3665|  2.18M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.18M|        return read_source_impl(range);
 3671|  2.18M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   453k|        {
  662|   453k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   595k|    {
 4170|   595k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   595k|#if !SCN_DISABLE_LOCALE
 4173|   595k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 166k, False: 428k]
  ------------------
 4174|   166k|            return read_impl<Range>(
 4175|   166k|                range, rd,
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   166k|                },
 4179|   166k|                value, loc);
 4180|   166k|        }
 4181|   428k|#endif
 4182|       |
 4183|   428k|        return read_impl<Range>(
 4184|   428k|            range, rd,
 4185|   428k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   428k|                return r.read_source(SCN_FWD(args)...);
 4187|   428k|            },
 4188|   428k|            value);
 4189|   595k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   845k|    {
 4206|   845k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   845k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 827k]
  |  |  ------------------
  ------------------
 4208|  18.1k|            return unexpected(r.error());
 4209|  18.1k|        }
 4210|       |
 4211|   827k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   827k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   827k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   827k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   827k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.4k, False: 806k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  20.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  20.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  20.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  20.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  20.4k|    }                                                  \
  |  |  |  | 3671|   827k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   806k|        return ranges::next(range.begin(), n);
 4213|   827k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.68M|    {
  763|  2.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.68M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   166k|    {
  684|   166k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   166k|            return static_cast<T*>(s.m_cp);
  686|   166k|        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   166k|            return static_cast<T*>(s.m_p);
  689|   166k|        }
  690|   166k|        else {
  691|   166k|            return reinterpret_cast<T*>(s.m_fp);
  692|   166k|        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   166k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   537k|    {
 3679|   537k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   537k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   537k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   537k|        return read_source_impl(range);
 3685|   537k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.68M|    {
 3705|  2.68M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  2.68M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.68M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.68M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.68M|        auto it = sign_result.first;
 3708|  2.68M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.68M|        auto digits_begin = it;
 3711|  2.68M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.68M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.68M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.68M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  5.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.68M]
  |  |  |  Branch (859:45): [True: 0, False: 2.68M]
  |  |  |  Branch (859:45): [True: 0, False: 2.68M]
  |  |  ------------------
  ------------------
 3715|  2.68M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.68M|            else {
 3724|  2.68M|                auto cb = [&](const auto& rr)
 3725|  2.68M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.68M|                    auto res = read_all(rr);
 3727|  2.68M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.68M|                        return unexpected_scan_error(
 3729|  2.68M|                            scan_error::invalid_scanned_value,
 3730|  2.68M|                            "Invalid float value");
 3731|  2.68M|                    }
 3732|  2.68M|                    return res;
 3733|  2.68M|                };
 3734|  2.68M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  2.68M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  2.68M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 56.3k, False: 2.62M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  56.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  56.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  56.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  56.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  56.3k|    }                                                  \
  |  | 3671|  2.68M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.62M|            }
 3736|  2.68M|        }
 3737|  2.62M|        else {
 3738|  2.62M|            SCN_TRY_ASSIGN(
 3739|  2.62M|                it,
 3740|  2.62M|                do_read_source_impl(
 3741|  2.62M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.62M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.62M|        }
 3744|       |
 3745|  2.62M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.62M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.60M, False: 22.7k]
  |  Branch (3747:48): [True: 2.58M, False: 16.9k]
  ------------------
 3748|  2.62M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.48M, False: 95.9k]
  ------------------
 3749|  2.62M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.48M, False: 2.65k]
  ------------------
 3750|  2.48M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.48M|        }
 3752|       |
 3753|  2.62M|        handle_separators();
 3754|       |
 3755|  2.62M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.62M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.62M|        return it;
 3768|  2.62M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.68M|    {
 3811|  2.68M|        auto it = range.begin();
 3812|  2.68M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.64M, False: 39.6k]
  ------------------
 3813|  2.64M|            return unexpected(r.error());
 3814|  2.64M|        }
 3815|  39.6k|        else {
 3816|  39.6k|            it = *r;
 3817|  39.6k|        }
 3818|       |
 3819|  39.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  39.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  39.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.7k, False: 16.9k]
  ------------------
 3822|  22.7k|            m_kind = float_kind::inf_short;
 3823|  22.7k|            return it;
 3824|  22.7k|        }
 3825|  16.9k|        else {
 3826|  16.9k|            m_kind = float_kind::inf_long;
 3827|  16.9k|            return *r;
 3828|  16.9k|        }
 3829|  39.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.64M|    {
 3834|  2.64M|        auto it = range.begin();
 3835|  2.64M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.54M, False: 99.7k]
  ------------------
 3836|  2.54M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.54M|                scan_error::invalid_scanned_value,
 3838|  2.54M|                "Invalid floating-point NaN value"));
 3839|  2.54M|        }
 3840|  99.7k|        else {
 3841|  99.7k|            it = *r;
 3842|  99.7k|        }
 3843|       |
 3844|  99.7k|        if (auto r =
 3845|  99.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  99.7k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 95.9k, False: 3.80k]
  ------------------
 3847|  95.9k|            m_kind = float_kind::nan_simple;
 3848|  95.9k|            return it;
 3849|  95.9k|        }
 3850|  3.80k|        else {
 3851|  3.80k|            it = *r;
 3852|  3.80k|        }
 3853|       |
 3854|  3.80k|        auto payload_beg_it = it;
 3855|  3.80k|        it = read_while_code_unit(
 3856|  3.80k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.80k|                return is_ascii_char(ch) &&
 3858|  3.80k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.80k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.80k|            });
 3861|  3.80k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.80k|        m_kind = float_kind::nan_with_payload;
 3864|  3.80k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.14k]
  ------------------
 3865|  3.80k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.14k|                                     "Invalid floating-point NaN payload");
 3870|  3.80k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.80k|    {
  754|  3.80k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.7k|    {
  684|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.7k|            return static_cast<T*>(s.m_cp);
  686|  23.7k|        }
  687|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.7k|            return static_cast<T*>(s.m_p);
  689|  23.7k|        }
  690|  23.7k|        else {
  691|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.7k|        }
  693|  23.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.6k, False: 191]
  ------------------
 3858|  23.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.8k, False: 2.76k]
  |  Branch (3858:39): [True: 13.0k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.80k|        {
  662|  3.80k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.84M|    {
 3804|  1.84M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.84M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.44M|{
 1996|  1.44M|    auto it = read_while_code_unit(range, pred);
 1997|  1.44M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 594k, False: 854k]
  ------------------
 1998|   594k|        return unexpected(parse_error::error);
 1999|   594k|    }
 2000|   854k|    return it;
 2001|  1.44M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   446k|    {
 3876|   446k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 85.1k, False: 361k]
  ------------------
 3877|  85.1k|            auto beg_exp_it = range.begin();
 3878|  85.1k|            auto it = *r;
 3879|       |
 3880|  85.1k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 84.9k, False: 162]
  ------------------
 3881|  85.1k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  84.9k|                it = r_sign->first;
 3883|  84.9k|            }
 3884|       |
 3885|  85.1k|            if (auto r_exp = read_while1_code_unit(
 3886|  85.1k|                    ranges::subrange{it, range.end()},
 3887|  85.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  85.1k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 84.0k]
  |  |  ------------------
  ------------------
 3889|  1.10k|                it = beg_exp_it;
 3890|  1.10k|            }
 3891|  84.0k|            else {
 3892|  84.0k|                it = *r_exp;
 3893|  84.0k|            }
 3894|       |
 3895|  85.1k|            return it;
 3896|  85.1k|        }
 3897|   361k|        return range.begin();
 3898|   446k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  85.1k|    {
  754|  85.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   267k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   267k|              cvref<T> obj = *get<T>(fn);
  745|   267k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   267k|                  obj(static_cast<decltype(args)>(args)...);
  747|   267k|              }
  748|   267k|              else {
  749|   267k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   267k|              }
  751|   267k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   267k|    {
  684|   267k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   267k|            return static_cast<T*>(s.m_cp);
  686|   267k|        }
  687|   267k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   267k|            return static_cast<T*>(s.m_p);
  689|   267k|        }
  690|   267k|        else {
  691|   267k|            return reinterpret_cast<T*>(s.m_fp);
  692|   267k|        }
  693|   267k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   267k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  85.1k|        {
  662|  85.1k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   699k|    {
 3944|   699k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   699k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 462k, False: 236k]
  |  Branch (3945:50): [True: 35.8k, False: 427k]
  ------------------
 3946|       |
 3947|   699k|        auto it = ranges::begin(range);
 3948|   699k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   699k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   699k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.2k, False: 664k]
  |  |  ------------------
  ------------------
 3952|  35.2k|            return r.transform_error(
 3953|  35.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  35.2k|                                              "Invalid floating-point value"));
 3955|  35.2k|        }
 3956|   664k|        else {
 3957|   664k|            digits_count += ranges::distance(it, *r);
 3958|   664k|            it = *r;
 3959|   664k|        }
 3960|       |
 3961|   664k|        m_integral_part_length = digits_count;
 3962|   664k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 122k, False: 541k]
  ------------------
 3963|   664k|                                             m_locale_options.decimal_point)) {
 3964|   122k|            it = *r;
 3965|   122k|        }
 3966|       |
 3967|   664k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 106k, False: 557k]
  ------------------
 3968|   664k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   106k|            digits_count += ranges::distance(it, *r);
 3970|   106k|            it = *r;
 3971|   106k|        }
 3972|       |
 3973|   664k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 664k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   664k|        auto beg_exp_it = it;
 3979|   664k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 446k, False: 217k]
  ------------------
 3980|   446k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   446k|        }
 3982|   664k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 34.5k, False: 629k]
  |  Branch (3982:29): [True: 18.6k, False: 15.9k]
  ------------------
 3983|  18.6k|            return unexpected_scan_error(
 3984|  18.6k|                scan_error::invalid_scanned_value,
 3985|  18.6k|                "No exponent given to scientific float");
 3986|  18.6k|        }
 3987|       |
 3988|   645k|        m_kind =
 3989|   645k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 561k, False: 84.0k]
  ------------------
 3990|       |
 3991|   645k|        return it;
 3992|   664k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.36M|    {
 3774|  1.36M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.36M]
  |  |  |  Branch (859:45): [True: 0, False: 1.36M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.36M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.36M|        return read_while1_code_unit(
 3783|  1.36M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.36M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.36M|    {
  754|  1.36M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  8.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.21M|              cvref<T> obj = *get<T>(fn);
  745|  8.21M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.21M|              }
  748|  8.21M|              else {
  749|  8.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.21M|              }
  751|  8.21M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  8.21M|    {
  684|  8.21M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.21M|            return static_cast<T*>(s.m_cp);
  686|  8.21M|        }
  687|  8.21M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.21M|            return static_cast<T*>(s.m_p);
  689|  8.21M|        }
  690|  8.21M|        else {
  691|  8.21M|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.21M|        }
  693|  8.21M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  8.21M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.36M|        {
  662|  1.36M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.68M|    {
 4000|  2.68M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.68M|        const bool allowed_nonhex =
 4002|  2.68M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.68M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.68M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.64M, False: 39.6k]
  |  Branch (4005:45): [True: 0, False: 2.64M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.68M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 39.6k, False: 2.64M]
  ------------------
 4011|  39.6k|            return *r;
 4012|  39.6k|        }
 4013|       |
 4014|  2.64M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.54M, False: 98.5k]
  |  Branch (4014:45): [True: 1.14k, False: 2.54M]
  ------------------
 4015|  1.14k|            return unexpected(r.error());
 4016|  1.14k|        }
 4017|  2.63M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 98.5k, False: 2.54M]
  ------------------
 4018|  98.5k|            return *r;
 4019|  98.5k|        }
 4020|       |
 4021|  2.54M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.84M, False: 699k]
  |  Branch (4021:28): [True: 568k, False: 1.27M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   568k|            auto it = range.begin();
 4025|       |
 4026|   568k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 28.5k, False: 539k]
  ------------------
 4027|  28.5k|                m_kind = float_kind::hex_with_prefix;
 4028|  28.5k|                it = *r;
 4029|  28.5k|            }
 4030|   539k|            else {
 4031|   539k|                m_kind = float_kind::hex_without_prefix;
 4032|   539k|            }
 4033|       |
 4034|   568k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   568k|        }
 4036|  1.97M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 699k, False: 1.27M]
  |  Branch (4036:29): [True: 699k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   699k|            m_kind = float_kind::generic;
 4040|   699k|            return read_regular_float(range);
 4041|   699k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.27M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.3k, False: 1.20M]
  |  |  ------------------
  ------------------
 4047|  70.3k|            m_kind = float_kind::hex_with_prefix;
 4048|  70.3k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  70.3k|        }
 4050|       |
 4051|  1.20M|        m_kind = float_kind::generic;
 4052|  1.20M|        return read_regular(range);
 4053|  1.27M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.84M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.84M|                    auto res = read_all(rr);
 3727|  1.84M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32k, False: 1.84M]
  |  |  ------------------
  ------------------
 3728|  1.32k|                        return unexpected_scan_error(
 3729|  1.32k|                            scan_error::invalid_scanned_value,
 3730|  1.32k|                            "Invalid float value");
 3731|  1.32k|                    }
 3732|  1.84M|                    return res;
 3733|  1.84M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.84M|{
 1839|  1.84M|    return ranges::next(range.begin(), range.end());
 1840|  1.84M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.84M|    {
  313|  1.84M|        ranges::advance(x, bound);
  314|  1.84M|        return x;
  315|  1.84M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.84M|    {
  275|  1.84M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.84M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.84M|    {
  190|  1.84M|        i = std::move(bound);
  191|  1.84M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.48M|    {
 1577|  2.48M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.48M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.48M|    {
 1621|  2.48M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.48M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.48M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.48M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.48M|            m_storage.reset();
 1627|  2.48M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.48M|        }
 1629|  2.48M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.48M|                                          std::basic_string<CharT>>) {
 1631|  2.48M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.48M|            m_view = string_view_type{*m_storage};
 1633|  2.48M|        }
 1634|  2.48M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.48M|                                          typename detail::basic_scan_buffer<
 1636|  2.48M|                                              value_t>::forward_iterator> &&
 1637|  2.48M|                           ranges::common_range<Range>) {
 1638|  2.48M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.48M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.48M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.48M|                             detail::to_address(end_seg.end()))) {
 1642|  2.48M|                auto& str = m_storage.emplace();
 1643|  2.48M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.48M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.48M|                m_view = string_view_type{str};
 1646|  2.48M|                return;
 1647|  2.48M|            }
 1648|       |
 1649|  2.48M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.48M|                                                            end_seg.data());
 1651|  2.48M|            m_storage.reset();
 1652|  2.48M|        }
 1653|  2.48M|        else {
 1654|  2.48M|            auto& str = m_storage.emplace();
 1655|  2.48M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.48M|                str.reserve(range.size());
 1657|  2.48M|            }
 1658|  2.48M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.48M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.48M|                          std::back_inserter(str));
 1661|  2.48M|            }
 1662|  2.48M|            else {
 1663|  2.48M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.48M|                     ++it) {
 1665|  2.48M|                    str.push_back(*it);
 1666|  2.48M|                }
 1667|  2.48M|            }
 1668|  2.48M|            m_view = string_view_type{str};
 1669|  2.48M|        }
 1670|  2.48M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   428k|    {
  754|   428k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   428k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   428k|              cvref<T> obj = *get<T>(fn);
  745|   428k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   428k|                  obj(static_cast<decltype(args)>(args)...);
  747|   428k|              }
  748|   428k|              else {
  749|   428k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   428k|              }
  751|   428k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   428k|    {
  684|   428k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   428k|            return static_cast<T*>(s.m_cp);
  686|   428k|        }
  687|   428k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   428k|            return static_cast<T*>(s.m_p);
  689|   428k|        }
  690|   428k|        else {
  691|   428k|            return reinterpret_cast<T*>(s.m_fp);
  692|   428k|        }
  693|   428k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   428k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   428k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   428k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   428k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.14M|    {
 3665|  2.14M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.14M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.14M|        return read_source_impl(range);
 3671|  2.14M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   428k|        {
  662|   428k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   681k|    {
 6193|   681k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   681k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   681k|            auto rd = make_reader<T, char_type>();
 6198|   681k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   681k|                return unexpected(e);
 6200|   681k|            }
 6201|       |
 6202|   681k|            return impl(rd, range, value);
 6203|   681k|        }
 6204|   681k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   681k|            auto rd = make_reader<T, char_type>();
 6206|   681k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 681k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   681k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 681k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   681k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   681k|                return impl(rd, range, value);
 6213|   681k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   681k|        else {
 6221|   681k|            SCN_EXPECT(false);
 6222|   681k|            SCN_UNREACHABLE;
 6223|   681k|        }
 6224|   681k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   681k|    {
 6124|   681k|        const bool need_skipped_width =
 6125|   681k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 681k]
  |  Branch (6125:33): [True: 0, False: 681k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   681k|        auto it = rng.begin();
 6129|   681k|        std::ptrdiff_t prefix_width = 0;
 6130|   681k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 681k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   681k|        else {
 6138|   681k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   681k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   681k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   681k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.69k, False: 673k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.69k|    }                                                  \
  |  |  |  | 3671|   681k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   673k|            std::tie(it, prefix_width) = prefix_result;
 6140|   673k|        }
 6141|   673k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   673k|        std::ptrdiff_t value_width = 0;
 6145|   673k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 673k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   673k|        else {
 6161|   673k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   673k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   673k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 645k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  28.1k|    }                                                  \
  |  | 3671|   673k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   645k|                                             specs, value, loc));
 6163|       |
 6164|   645k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 645k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   645k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   645k|        std::ptrdiff_t postfix_width = 0;
 6173|   645k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 639k, False: 5.94k]
  ------------------
 6174|   639k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   639k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   639k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   639k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 639k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   639k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   639k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   639k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   639k|                                 value_width));
 6178|   639k|            std::tie(it, postfix_width) = postfix_result;
 6179|   639k|        }
 6180|       |
 6181|   645k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   645k|                                                 value_width, postfix_width);
 6183|   645k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 645k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   645k|        return it;
 6188|   645k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.79M|    {
 3691|  1.79M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.79M|        const std::ptrdiff_t sign_len =
 3694|  1.79M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 497k, False: 1.30M]
  ------------------
 3695|       |
 3696|  1.79M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.79M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.79M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.79M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.5k, False: 1.77M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  21.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  21.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  21.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  21.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  21.5k|    }                                                  \
  |  |  |  | 3671|  1.79M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.77M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.79M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   673k|    {
 4170|   673k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   673k|#if !SCN_DISABLE_LOCALE
 4173|   673k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 195k, False: 478k]
  ------------------
 4174|   195k|            return read_impl<Range>(
 4175|   195k|                range, rd,
 4176|   195k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   195k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   195k|                },
 4179|   195k|                value, loc);
 4180|   195k|        }
 4181|   478k|#endif
 4182|       |
 4183|   478k|        return read_impl<Range>(
 4184|   478k|            range, rd,
 4185|   478k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   478k|                return r.read_source(SCN_FWD(args)...);
 4187|   478k|            },
 4188|   478k|            value);
 4189|   673k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   938k|    {
 4206|   938k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   938k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.4k, False: 905k]
  |  |  ------------------
  ------------------
 4208|  33.4k|            return unexpected(r.error());
 4209|  33.4k|        }
 4210|       |
 4211|   905k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   905k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   905k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   905k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   905k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.82k, False: 902k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.82k|    }                                                  \
  |  |  |  | 3671|   905k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   902k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   902k|        return ranges::next(range.begin(), n);
 4213|   905k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   195k|    {
  754|   195k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|   195k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   195k|                  obj(static_cast<decltype(args)>(args)...);
  747|   195k|              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   195k|    {
  684|   195k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   195k|            return static_cast<T*>(s.m_cp);
  686|   195k|        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   195k|            return static_cast<T*>(s.m_p);
  689|   195k|        }
  690|   195k|        else {
  691|   195k|            return reinterpret_cast<T*>(s.m_fp);
  692|   195k|        }
  693|   195k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   195k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   195k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   195k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   195k|        {
  662|   195k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   478k|    {
  754|   478k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   478k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   478k|              cvref<T> obj = *get<T>(fn);
  745|   478k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   478k|                  obj(static_cast<decltype(args)>(args)...);
  747|   478k|              }
  748|   478k|              else {
  749|   478k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   478k|              }
  751|   478k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   478k|    {
  684|   478k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   478k|            return static_cast<T*>(s.m_cp);
  686|   478k|        }
  687|   478k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   478k|            return static_cast<T*>(s.m_p);
  689|   478k|        }
  690|   478k|        else {
  691|   478k|            return reinterpret_cast<T*>(s.m_fp);
  692|   478k|        }
  693|   478k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   478k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   478k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   478k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   478k|        {
  662|   478k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   635k|    {
 4170|   635k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   635k|#if !SCN_DISABLE_LOCALE
 4173|   635k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 184k, False: 451k]
  ------------------
 4174|   184k|            return read_impl<Range>(
 4175|   184k|                range, rd,
 4176|   184k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   184k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   184k|                },
 4179|   184k|                value, loc);
 4180|   184k|        }
 4181|   451k|#endif
 4182|       |
 4183|   451k|        return read_impl<Range>(
 4184|   451k|            range, rd,
 4185|   451k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   451k|                return r.read_source(SCN_FWD(args)...);
 4187|   451k|            },
 4188|   451k|            value);
 4189|   635k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   911k|    {
 4206|   911k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   911k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.8k, False: 893k]
  |  |  ------------------
  ------------------
 4208|  18.8k|            return unexpected(r.error());
 4209|  18.8k|        }
 4210|       |
 4211|   893k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   893k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   893k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   893k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 874k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.7k|    }                                                  \
  |  |  |  | 3671|   893k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   874k|        return ranges::next(range.begin(), n);
 4213|   893k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   184k|    {
  754|   184k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|   184k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   184k|                  obj(static_cast<decltype(args)>(args)...);
  747|   184k|              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   184k|    {
  684|   184k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   184k|            return static_cast<T*>(s.m_cp);
  686|   184k|        }
  687|   184k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   184k|            return static_cast<T*>(s.m_p);
  689|   184k|        }
  690|   184k|        else {
  691|   184k|            return reinterpret_cast<T*>(s.m_fp);
  692|   184k|        }
  693|   184k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   184k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   184k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   184k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   184k|        {
  662|   184k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   451k|    {
  754|   451k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   451k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   451k|              cvref<T> obj = *get<T>(fn);
  745|   451k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   451k|                  obj(static_cast<decltype(args)>(args)...);
  747|   451k|              }
  748|   451k|              else {
  749|   451k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   451k|              }
  751|   451k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   451k|    {
  684|   451k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   451k|            return static_cast<T*>(s.m_cp);
  686|   451k|        }
  687|   451k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   451k|            return static_cast<T*>(s.m_p);
  689|   451k|        }
  690|   451k|        else {
  691|   451k|            return reinterpret_cast<T*>(s.m_fp);
  692|   451k|        }
  693|   451k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   451k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   451k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   451k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   451k|        {
  662|   451k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   688k|    {
 6193|   688k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   688k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   688k|            auto rd = make_reader<T, char_type>();
 6198|   688k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   688k|                return unexpected(e);
 6200|   688k|            }
 6201|       |
 6202|   688k|            return impl(rd, range, value);
 6203|   688k|        }
 6204|   688k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   688k|            auto rd = make_reader<T, char_type>();
 6206|   688k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 688k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   688k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 688k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   688k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   688k|                return impl(rd, range, value);
 6213|   688k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   688k|        else {
 6221|   688k|            SCN_EXPECT(false);
 6222|   688k|            SCN_UNREACHABLE;
 6223|   688k|        }
 6224|   688k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   688k|    {
 6124|   688k|        const bool need_skipped_width =
 6125|   688k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 688k]
  |  Branch (6125:33): [True: 0, False: 688k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   688k|        auto it = rng.begin();
 6129|   688k|        std::ptrdiff_t prefix_width = 0;
 6130|   688k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 688k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   688k|        else {
 6138|   688k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   688k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   688k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   688k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.15k, False: 680k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.15k|    }                                                  \
  |  |  |  | 3671|   688k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   680k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   680k|            std::tie(it, prefix_width) = prefix_result;
 6140|   680k|        }
 6141|   680k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   680k|        std::ptrdiff_t value_width = 0;
 6145|   680k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 680k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   680k|        else {
 6161|   680k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   680k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   680k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.6k, False: 652k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  27.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  27.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  27.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  27.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  27.6k|    }                                                  \
  |  | 3671|   680k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   680k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   652k|                                             specs, value, loc));
 6163|       |
 6164|   652k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 652k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   652k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   652k|        std::ptrdiff_t postfix_width = 0;
 6173|   652k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 646k, False: 6.33k]
  ------------------
 6174|   646k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   646k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   646k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   646k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 646k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   646k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   646k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   646k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   646k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   646k|                                 value_width));
 6178|   646k|            std::tie(it, postfix_width) = postfix_result;
 6179|   646k|        }
 6180|       |
 6181|   652k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   652k|                                                 value_width, postfix_width);
 6183|   652k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 652k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   652k|        return it;
 6188|   652k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.81M|    {
 3691|  1.81M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.81M|        const std::ptrdiff_t sign_len =
 3694|  1.81M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 509k, False: 1.30M]
  ------------------
 3695|       |
 3696|  1.81M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.81M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.5k, False: 1.79M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.5k|    }                                                  \
  |  |  |  | 3671|  1.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.79M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.81M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   680k|    {
 4170|   680k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   680k|#if !SCN_DISABLE_LOCALE
 4173|   680k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 198k, False: 481k]
  ------------------
 4174|   198k|            return read_impl<Range>(
 4175|   198k|                range, rd,
 4176|   198k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   198k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   198k|                },
 4179|   198k|                value, loc);
 4180|   198k|        }
 4181|   481k|#endif
 4182|       |
 4183|   481k|        return read_impl<Range>(
 4184|   481k|            range, rd,
 4185|   481k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   481k|                return r.read_source(SCN_FWD(args)...);
 4187|   481k|            },
 4188|   481k|            value);
 4189|   680k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   948k|    {
 4206|   948k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   948k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 913k]
  |  |  ------------------
  ------------------
 4208|  34.8k|            return unexpected(r.error());
 4209|  34.8k|        }
 4210|       |
 4211|   913k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   913k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   913k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   913k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 878, False: 912k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    878|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    878|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    878|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    878|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    878|    }                                                  \
  |  |  |  | 3671|   913k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   912k|        return ranges::next(range.begin(), n);
 4213|   913k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   198k|    {
  754|   198k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   198k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   198k|              cvref<T> obj = *get<T>(fn);
  745|   198k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   198k|                  obj(static_cast<decltype(args)>(args)...);
  747|   198k|              }
  748|   198k|              else {
  749|   198k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   198k|              }
  751|   198k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   198k|    {
  684|   198k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   198k|            return static_cast<T*>(s.m_cp);
  686|   198k|        }
  687|   198k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   198k|            return static_cast<T*>(s.m_p);
  689|   198k|        }
  690|   198k|        else {
  691|   198k|            return reinterpret_cast<T*>(s.m_fp);
  692|   198k|        }
  693|   198k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   198k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   198k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   198k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   198k|        {
  662|   198k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   481k|    {
  754|   481k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   481k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   481k|              cvref<T> obj = *get<T>(fn);
  745|   481k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   481k|                  obj(static_cast<decltype(args)>(args)...);
  747|   481k|              }
  748|   481k|              else {
  749|   481k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   481k|              }
  751|   481k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   481k|    {
  684|   481k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   481k|            return static_cast<T*>(s.m_cp);
  686|   481k|        }
  687|   481k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   481k|            return static_cast<T*>(s.m_p);
  689|   481k|        }
  690|   481k|        else {
  691|   481k|            return reinterpret_cast<T*>(s.m_fp);
  692|   481k|        }
  693|   481k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   481k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   481k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   481k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   481k|        {
  662|   481k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   642k|    {
 4170|   642k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   642k|#if !SCN_DISABLE_LOCALE
 4173|   642k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 187k, False: 455k]
  ------------------
 4174|   187k|            return read_impl<Range>(
 4175|   187k|                range, rd,
 4176|   187k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   187k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   187k|                },
 4179|   187k|                value, loc);
 4180|   187k|        }
 4181|   455k|#endif
 4182|       |
 4183|   455k|        return read_impl<Range>(
 4184|   455k|            range, rd,
 4185|   455k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   455k|                return r.read_source(SCN_FWD(args)...);
 4187|   455k|            },
 4188|   455k|            value);
 4189|   642k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   923k|    {
 4206|   923k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   923k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.3k, False: 903k]
  |  |  ------------------
  ------------------
 4208|  19.3k|            return unexpected(r.error());
 4209|  19.3k|        }
 4210|       |
 4211|   903k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   903k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   903k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   903k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   903k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.6k, False: 886k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.6k|    }                                                  \
  |  |  |  | 3671|   903k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   886k|        return ranges::next(range.begin(), n);
 4213|   903k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   187k|    {
  754|   187k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|   187k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   187k|                  obj(static_cast<decltype(args)>(args)...);
  747|   187k|              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   187k|    {
  684|   187k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   187k|            return static_cast<T*>(s.m_cp);
  686|   187k|        }
  687|   187k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   187k|            return static_cast<T*>(s.m_p);
  689|   187k|        }
  690|   187k|        else {
  691|   187k|            return reinterpret_cast<T*>(s.m_fp);
  692|   187k|        }
  693|   187k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   187k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   187k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   187k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   187k|        {
  662|   187k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   455k|    {
  754|   455k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   455k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   455k|              cvref<T> obj = *get<T>(fn);
  745|   455k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   455k|                  obj(static_cast<decltype(args)>(args)...);
  747|   455k|              }
  748|   455k|              else {
  749|   455k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   455k|              }
  751|   455k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   455k|    {
  684|   455k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   455k|            return static_cast<T*>(s.m_cp);
  686|   455k|        }
  687|   455k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   455k|            return static_cast<T*>(s.m_p);
  689|   455k|        }
  690|   455k|        else {
  691|   455k|            return reinterpret_cast<T*>(s.m_fp);
  692|   455k|        }
  693|   455k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   455k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   455k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   455k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   455k|        {
  662|   455k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.78M|{
 1039|  2.78M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.78M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.78M|        return r;
 1042|  2.78M|    }
 1043|  2.78M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.78M|                           ranges::const_iterator_t<Range>,
 1045|  2.78M|                           typename detail::basic_scan_buffer<
 1046|  2.78M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.78M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.78M|            auto seg = r.begin().contiguous_segment();
 1049|  2.78M|            auto dist =
 1050|  2.78M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.78M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.78M|        }
 1053|  2.78M|        else {
 1054|  2.78M|            return r.begin().contiguous_segment();
 1055|  2.78M|        }
 1056|  2.78M|    }
 1057|  2.78M|    else {
 1058|  2.78M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.78M|    }
 1060|  2.78M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.46M|{
 2061|  2.46M|    auto it = range.begin();
 2062|  4.75M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.73M, False: 23.7k]
  ------------------
 2063|  4.73M|        const auto val =
 2064|  4.73M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.73M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.71M, False: 12.1k]
  |  |  ------------------
  ------------------
 2066|  4.71M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.71M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.71M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.43M, False: 2.27M]
  ------------------
 2069|  2.43M|                return it;
 2070|  2.43M|            }
 2071|  4.71M|        }
 2072|  2.29M|        it = val.iterator;
 2073|  2.29M|    }
 2074|       |
 2075|  23.7k|    return it;
 2076|  2.46M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.73M|{
 1899|  4.73M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.73M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.73M|    auto it = range.begin();
 1903|  4.73M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.73M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 4.71M]
  |  |  ------------------
  ------------------
 1906|  12.1k|        ++it;
 1907|  12.1k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  12.1k|        return {it, {}};
 1909|  12.1k|    }
 1910|       |
 1911|  4.71M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.65M, False: 67.3k]
  ------------------
 1912|  4.65M|        ++it;
 1913|  4.65M|        return {it, string_type(1, *range.begin())};
 1914|  4.65M|    }
 1915|       |
 1916|  67.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  67.3k|    return {it, string_type{range.begin(), it}};
 1918|  4.71M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  12.1k|{
 1155|  12.1k|    auto it = input.begin();
 1156|   140k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 138k, False: 1.71k]
  ------------------
 1157|   138k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.4k, False: 128k]
  ------------------
 1158|  10.4k|            break;
 1159|  10.4k|        }
 1160|   138k|    }
 1161|  12.1k|    return it;
 1162|  12.1k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  67.3k|    {
  283|  67.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  67.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  67.3k|    {
  252|  67.3k|        constexpr iter_difference_t<I> zero{0};
  253|  67.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|   205k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 139k, False: 66.2k]
  |  Branch (255:30): [True: 138k, False: 1.17k]
  ------------------
  256|   138k|            ++i;
  257|   138k|            ++counter;
  258|   138k|        }
  259|       |
  260|  67.3k|        return counter;
  261|  67.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.73M|    {
 1890|  4.73M|        return !codepoint.empty();
 1891|  4.73M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.46M|{
 2082|  2.46M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.46M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.78M|{
 2951|  2.78M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.78M, False: 0]
  ------------------
 2952|  2.78M|        auto it = read_while_classic_space(range);
 2953|  2.78M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.78M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.7k, False: 2.75M]
  |  |  ------------------
  ------------------
 2955|  23.7k|            return unexpected(e);
 2956|  23.7k|        }
 2957|       |
 2958|  2.75M|        return it;
 2959|  2.78M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.78M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.78M|{
 2117|  2.78M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.78M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.78M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.78M|        auto buf = make_contiguous_buffer(range);
 2121|  2.78M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.78M|        return ranges::next(range.begin(),
 2123|  2.78M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.78M|    }
 2125|  2.78M|    else {
 2126|  2.78M|        auto it = range.begin();
 2127|       |
 2128|  2.78M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.78M|            auto seg = get_contiguous_beginning(range);
 2130|  2.78M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.78M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 319k, False: 2.46M]
  ------------------
 2132|   319k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   319k|            }
 2134|  2.46M|            ranges::advance(it, seg.size());
 2135|  2.46M|        }
 2136|       |
 2137|  2.46M|        return read_while_code_point(
 2138|  2.46M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.78M|    }
 2140|  2.78M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.46M|    {
  754|  2.46M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.71M|              cvref<T> obj = *get<T>(fn);
  745|  4.71M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.71M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.71M|              }
  748|  4.71M|              else {
  749|  4.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.71M|              }
  751|  4.71M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.71M|    {
  684|  4.71M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.71M|            return static_cast<T*>(s.m_cp);
  686|  4.71M|        }
  687|  4.71M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.71M|            return static_cast<T*>(s.m_p);
  689|  4.71M|        }
  690|  4.71M|        else {
  691|  4.71M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.71M|        }
  693|  4.71M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.71M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.46M|        {
  662|  2.46M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   384k|{
  981|   384k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   384k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   384k|        return true;
  984|   384k|    }
  985|   384k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   384k|                           ranges::const_iterator_t<Range>,
  987|   384k|                           typename detail::basic_scan_buffer<
  988|   384k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   384k|        auto beg = r.begin();
  990|   384k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 384k, False: 0]
  ------------------
  991|   384k|            return false;
  992|   384k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   384k|    else {
 1006|   384k|        return false;
 1007|   384k|    }
 1008|   384k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.73M|    {
  763|  1.73M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.73M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   979k|{
 1857|   979k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   979k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   979k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   979k|        if (sz < count) {
 1862|   979k|            return unexpected(eof_error::eof);
 1863|   979k|        }
 1864|       |
 1865|   979k|        return ranges::next(range.begin(), count);
 1866|   979k|    }
 1867|   979k|    else {
 1868|   979k|        auto it = range.begin();
 1869|   979k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 568k, False: 411k]
  ------------------
 1870|   568k|            return ranges::next(it, count);
 1871|   568k|        }
 1872|       |
 1873|  1.56M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.20M, False: 359k]
  ------------------
 1874|  1.20M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.6k, False: 1.14M]
  ------------------
 1875|  51.6k|                return unexpected(eof_error::eof);
 1876|  51.6k|            }
 1877|  1.20M|        }
 1878|       |
 1879|   359k|        return it;
 1880|   411k|    }
 1881|   979k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   979k|{
 1095|   979k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   979k|        return r.size();
 1097|   979k|    }
 1098|   979k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   979k|                           ranges::const_iterator_t<Range>,
 1100|   979k|                           typename detail::basic_scan_buffer<
 1101|   979k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   979k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   979k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   979k|        }
 1105|   979k|        else {
 1106|   979k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 979k, False: 0]
  ------------------
 1107|   979k|                return static_cast<size_t>(
 1108|   979k|                    r.begin().parent()->chars_available() -
 1109|   979k|                    r.begin().position());
 1110|   979k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   979k|        }
 1113|   979k|    }
 1114|   979k|    else {
 1115|   979k|        return 0;
 1116|   979k|    }
 1117|   979k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   702k|    {
  754|   702k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   869k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   869k|              cvref<T> obj = *get<T>(fn);
  745|   869k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   869k|                  obj(static_cast<decltype(args)>(args)...);
  747|   869k|              }
  748|   869k|              else {
  749|   869k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   869k|              }
  751|   869k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   869k|    {
  684|   869k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   869k|            return static_cast<T*>(s.m_cp);
  686|   869k|        }
  687|   869k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   869k|            return static_cast<T*>(s.m_p);
  689|   869k|        }
  690|   869k|        else {
  691|   869k|            return reinterpret_cast<T*>(s.m_fp);
  692|   869k|        }
  693|   869k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   702k|        {
  662|   702k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   291k|    {
 6037|   291k|        const bool need_skipped_width =
 6038|   291k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 291k]
  |  Branch (6038:33): [True: 0, False: 291k]
  ------------------
 6039|   291k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   291k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 291k]
  ------------------
 6043|   291k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 291k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   291k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 291k, False: 0]
  |  Branch (6047:56): [True: 291k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   291k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 291k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   581k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.84k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.84k|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   581k|                            make_eof_scan_error));
 6058|       |
 6059|   581k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 289k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   289k|            return result_type{it, 0};
 6067|   581k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   291k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   494k|{
 1976|   494k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   494k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   494k|{
 1957|   494k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   494k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   494k|    }
 1960|   494k|    else {
 1961|   494k|        auto first = range.begin();
 1962|   617k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 615k, False: 1.51k]
  ------------------
 1963|   615k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 492k, False: 123k]
  ------------------
 1964|   492k|                return first;
 1965|   492k|            }
 1966|   615k|        }
 1967|  1.51k|        return first;
 1968|   494k|    }
 1969|   494k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   184k|    {
  108|   184k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   184k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   184k|    {
   94|   184k|        iter_difference_t<I> counter{0};
   95|   459k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 274k, False: 184k]
  ------------------
   96|   274k|            ++i;
   97|   274k|            ++counter;
   98|   274k|        }
   99|   184k|        return counter;
  100|   184k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   123k|    {
 1780|   123k|        auto stdloc = loc.get<std::locale>();
 1781|   123k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   123k|        grouping = numpunct.grouping();
 1783|   123k|        thousands_sep =
 1784|   123k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 123k]
  ------------------
 1785|   123k|        decimal_point = numpunct.decimal_point();
 1786|   123k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   123k|{
 1717|   123k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 123k, False: 0]
  ------------------
 1718|   123k|        return std::use_facet<Facet>(stdloc);
 1719|   123k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   123k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   583k|{
 1846|   583k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 582k]
  |  |  ------------------
  ------------------
 1847|  1.07k|        return unexpected(e);
 1848|  1.07k|    }
 1849|       |
 1850|   582k|    return ranges::next(range.begin());
 1851|   583k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.06M|{
  950|  1.06M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.53k, False: 1.05M]
  |  |  ------------------
  ------------------
  951|  3.53k|        return eof_error::eof;
  952|  3.53k|    }
  953|  1.05M|    return eof_error::good;
  954|  1.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.54M|{
  944|  1.54M|    return is_range_eof(r.begin(), r.end());
  945|  1.54M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.54M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.54M|    {
  937|  1.54M|        return begin == end;
  938|  1.54M|    }
  939|  1.54M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   582k|    {
  296|   582k|        ++x;
  297|   582k|        return x;
  298|   582k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   385k|{
 3141|   385k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   385k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 385k, False: 846]
  ------------------
 3143|   385k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 385k, False: 27]
  ------------------
 3144|   385k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   385k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   385k|    }
 3148|       |
 3149|    846|    auto& it = *r;
 3150|    846|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 747, False: 99]
  ------------------
 3151|    747|        return std::pair{it, sign_type::minus_sign};
 3152|    747|    }
 3153|     99|    return std::pair{it, sign_type::plus_sign};
 3154|    846|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   475k|{
 2272|   475k|    auto it = read_code_unit(range);
 2273|   475k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 518, False: 474k]
  |  |  ------------------
  ------------------
 2274|    518|        return unexpected(make_eof_parse_error(it.error()));
 2275|    518|    }
 2276|       |
 2277|   948k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 948k, False: 469k]
  ------------------
 2278|   948k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 4.90k, False: 944k]
  ------------------
 2279|  4.90k|            return *it;
 2280|  4.90k|        }
 2281|   948k|    }
 2282|       |
 2283|   469k|    return unexpected(parse_error::error);
 2284|   474k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   979k|{
 2231|   979k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   979k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   979k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   979k|        if (range.size() < str.size()) {
 2236|   979k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   979k|        }
 2238|   979k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   979k|            return unexpected(parse_error::error);
 2240|   979k|        }
 2241|   979k|        return ranges::next(range.begin(), str.size());
 2242|   979k|    }
 2243|   979k|    else {
 2244|   979k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   979k|            if (ch < 'A' || ch > 'Z') {
 2246|   979k|                return ch;
 2247|   979k|            }
 2248|   979k|            return static_cast<char_type>(ch +
 2249|   979k|                                          static_cast<char_type>('a' - 'A'));
 2250|   979k|        };
 2251|       |
 2252|   979k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   979k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   979k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   979k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   979k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.6k, False: 927k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  51.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  51.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  51.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  51.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  51.6k|    }                                                  \
  |  |  |  | 3671|   979k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   927k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   927k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   927k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   927k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 927k, False: 420]
  |  |  ------------------
  ------------------
 2257|   927k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   927k|                    return ascii_tolower(a) ==
 2259|   927k|                           static_cast<detail::char_t<Range>>(b);
 2260|   927k|                }))) {
 2261|   927k|            return unexpected(parse_error::error);
 2262|   927k|        }
 2263|       |
 2264|    420|        return it;
 2265|   927k|    }
 2266|   979k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   988k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   988k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 651k, False: 337k]
  |  Branch (2245:29): [True: 329k, False: 8.23k]
  ------------------
 2246|   980k|                return ch;
 2247|   980k|            }
 2248|  8.23k|            return static_cast<char_type>(ch +
 2249|  8.23k|                                          static_cast<char_type>('a' - 'A'));
 2250|   988k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   108k|{
 2146|   108k|    auto it = read_code_unit(range);
 2147|   108k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 557, False: 107k]
  |  |  ------------------
  ------------------
 2148|    557|        return unexpected(make_eof_parse_error(it.error()));
 2149|    557|    }
 2150|       |
 2151|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 129]
  |  |  ------------------
  ------------------
 2152|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   107k|        return unexpected(parse_error::error);
 2154|   107k|    }
 2155|       |
 2156|    129|    return *it;
 2157|   107k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   494k|{
 1996|   494k|    auto it = read_while_code_unit(range, pred);
 1997|   494k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 383k, False: 110k]
  ------------------
 1998|   383k|        return unexpected(parse_error::error);
 1999|   383k|    }
 2000|   110k|    return it;
 2001|   494k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   105k|    {
 1621|   105k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   105k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   105k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   105k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   105k|            m_storage.reset();
 1627|   105k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   105k|        }
 1629|   105k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   105k|                                          std::basic_string<CharT>>) {
 1631|   105k|            m_storage.emplace(SCN_FWD(range));
 1632|   105k|            m_view = string_view_type{*m_storage};
 1633|   105k|        }
 1634|   105k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   105k|                                          typename detail::basic_scan_buffer<
 1636|   105k|                                              value_t>::forward_iterator> &&
 1637|   105k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   105k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   105k|            auto end_seg = range.end().contiguous_segment();
 1640|   105k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.25k, False: 101k]
  |  |  ------------------
  ------------------
 1641|   105k|                             detail::to_address(end_seg.end()))) {
 1642|  4.25k|                auto& str = m_storage.emplace();
 1643|  4.25k|                str.reserve(range.end().position() - range.begin().position());
 1644|  4.25k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  4.25k|                m_view = string_view_type{str};
 1646|  4.25k|                return;
 1647|  4.25k|            }
 1648|       |
 1649|   101k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   101k|                                                            end_seg.data());
 1651|   101k|            m_storage.reset();
 1652|   101k|        }
 1653|   105k|        else {
 1654|   105k|            auto& str = m_storage.emplace();
 1655|   105k|            if constexpr (ranges::sized_range<Range>) {
 1656|   105k|                str.reserve(range.size());
 1657|   105k|            }
 1658|   105k|            if constexpr (ranges::common_range<Range>) {
 1659|   105k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   105k|                          std::back_inserter(str));
 1661|   105k|            }
 1662|   105k|            else {
 1663|   105k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   105k|                     ++it) {
 1665|   105k|                    str.push_back(*it);
 1666|   105k|                }
 1667|   105k|            }
 1668|   105k|            m_view = string_view_type{str};
 1669|   105k|        }
 1670|   105k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.18M|    {
 1582|  1.18M|        return m_view;
 1583|  1.18M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.52M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  76.2k|    {
 6079|  76.2k|        const bool need_skipped_width =
 6080|  76.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 76.2k]
  |  Branch (6080:33): [True: 0, False: 76.2k]
  ------------------
 6081|  76.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  76.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 76.2k]
  ------------------
 6084|  76.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 76.2k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  76.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 76.2k, False: 0]
  ------------------
 6093|  76.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 76.2k]
  ------------------
 6094|  76.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  76.2k|        return result_type{rng.begin(), 0};
 6118|  76.2k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   980k|{
 1857|   980k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   980k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   980k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   980k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   980k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   980k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 51.6k, False: 928k]
  ------------------
 1862|  51.6k|            return unexpected(eof_error::eof);
 1863|  51.6k|        }
 1864|       |
 1865|   928k|        return ranges::next(range.begin(), count);
 1866|   980k|    }
 1867|   980k|    else {
 1868|   980k|        auto it = range.begin();
 1869|   980k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   980k|            return ranges::next(it, count);
 1871|   980k|        }
 1872|       |
 1873|   980k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   980k|            if (it == range.end()) {
 1875|   980k|                return unexpected(eof_error::eof);
 1876|   980k|            }
 1877|   980k|        }
 1878|       |
 1879|   980k|        return it;
 1880|   980k|    }
 1881|   980k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   684k|{
 1899|   684k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   684k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   684k|    auto it = range.begin();
 1903|   684k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   684k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 684k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   684k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 684k, False: 0]
  ------------------
 1912|   684k|        ++it;
 1913|   684k|        return {it, string_type(1, *range.begin())};
 1914|   684k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   684k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.60M|{
  944|  1.60M|    return is_range_eof(r.begin(), r.end());
  945|  1.60M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.60M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.60M|    {
  937|  1.60M|        return begin == end;
  938|  1.60M|    }
  939|  1.60M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   215k|    {
  190|   215k|        i = std::move(bound);
  191|   215k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   684k|    {
 1890|   684k|        return !codepoint.empty();
 1891|   684k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   923k|{
  950|   923k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 920k]
  |  |  ------------------
  ------------------
  951|  2.76k|        return eof_error::eof;
  952|  2.76k|    }
  953|   920k|    return eof_error::good;
  954|   923k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   446k|{
 1846|   446k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 302, False: 445k]
  |  |  ------------------
  ------------------
 1847|    302|        return unexpected(e);
 1848|    302|    }
 1849|       |
 1850|   445k|    return ranges::next(range.begin());
 1851|   446k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   445k|    {
  296|   445k|        ++x;
  297|   445k|        return x;
  298|   445k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   383k|{
 3141|   383k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   383k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 383k, False: 546]
  ------------------
 3143|   383k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 383k, False: 12]
  ------------------
 3144|   383k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   383k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   383k|    }
 3148|       |
 3149|    546|    auto& it = *r;
 3150|    546|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 477, False: 69]
  ------------------
 3151|    477|        return std::pair{it, sign_type::minus_sign};
 3152|    477|    }
 3153|     69|    return std::pair{it, sign_type::plus_sign};
 3154|    546|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   405k|{
 2272|   405k|    auto it = read_code_unit(range);
 2273|   405k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 405k]
  |  |  ------------------
  ------------------
 2274|    124|        return unexpected(make_eof_parse_error(it.error()));
 2275|    124|    }
 2276|       |
 2277|   810k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 810k, False: 403k]
  ------------------
 2278|   810k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.15k, False: 808k]
  ------------------
 2279|  2.15k|            return *it;
 2280|  2.15k|        }
 2281|   810k|    }
 2282|       |
 2283|   403k|    return unexpected(parse_error::error);
 2284|   405k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   980k|{
 2231|   980k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   980k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   980k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   980k|        if (range.size() < str.size()) {
 2236|   980k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   980k|        }
 2238|   980k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   980k|            return unexpected(parse_error::error);
 2240|   980k|        }
 2241|   980k|        return ranges::next(range.begin(), str.size());
 2242|   980k|    }
 2243|   980k|    else {
 2244|   980k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   980k|            if (ch < 'A' || ch > 'Z') {
 2246|   980k|                return ch;
 2247|   980k|            }
 2248|   980k|            return static_cast<char_type>(ch +
 2249|   980k|                                          static_cast<char_type>('a' - 'A'));
 2250|   980k|        };
 2251|       |
 2252|   980k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   980k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   980k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   980k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   980k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.6k, False: 928k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  51.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  51.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  51.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  51.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  51.6k|    }                                                  \
  |  |  |  | 3671|   980k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   928k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   928k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   928k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   928k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   928k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 928k, False: 420]
  |  |  ------------------
  ------------------
 2257|   928k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   928k|                    return ascii_tolower(a) ==
 2259|   928k|                           static_cast<detail::char_t<Range>>(b);
 2260|   928k|                }))) {
 2261|   928k|            return unexpected(parse_error::error);
 2262|   928k|        }
 2263|       |
 2264|    420|        return it;
 2265|   928k|    }
 2266|   980k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   989k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   989k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 651k, False: 338k]
  |  Branch (2245:29): [True: 329k, False: 8.23k]
  ------------------
 2246|   981k|                return ch;
 2247|   981k|            }
 2248|  8.23k|            return static_cast<char_type>(ch +
 2249|  8.23k|                                          static_cast<char_type>('a' - 'A'));
 2250|   989k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  40.7k|{
 2146|  40.7k|    auto it = read_code_unit(range);
 2147|  40.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 40.5k]
  |  |  ------------------
  ------------------
 2148|    178|        return unexpected(make_eof_parse_error(it.error()));
 2149|    178|    }
 2150|       |
 2151|  40.5k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.5k, False: 54]
  |  |  ------------------
  ------------------
 2152|  40.5k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  40.5k|        return unexpected(parse_error::error);
 2154|  40.5k|    }
 2155|       |
 2156|     54|    return *it;
 2157|  40.5k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   208k|{
 1976|   208k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   208k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   208k|{
 1957|   208k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   208k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   208k|    }
 1960|   208k|    else {
 1961|   208k|        auto first = range.begin();
 1962|   208k|        for (; first != range.end(); ++first) {
 1963|   208k|            if (pred(*first)) {
 1964|   208k|                return first;
 1965|   208k|            }
 1966|   208k|        }
 1967|   208k|        return first;
 1968|   208k|    }
 1969|   208k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   384k|{
 2951|   384k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 384k, False: 0]
  ------------------
 2952|   384k|        auto it = read_while_classic_space(range);
 2953|   384k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   384k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.28k, False: 382k]
  |  |  ------------------
  ------------------
 2955|  2.28k|            return unexpected(e);
 2956|  2.28k|        }
 2957|       |
 2958|   382k|        return it;
 2959|   384k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   384k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   384k|{
 2117|   384k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   384k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   384k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   384k|        auto buf = make_contiguous_buffer(range);
 2121|   384k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   384k|        return ranges::next(range.begin(),
 2123|   384k|                            ranges::distance(buf.view().begin(), it));
 2124|   384k|    }
 2125|   384k|    else {
 2126|   384k|        auto it = range.begin();
 2127|       |
 2128|   384k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   384k|            auto seg = get_contiguous_beginning(range);
 2130|   384k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   384k|                seg_it != seg.end()) {
 2132|   384k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   384k|            }
 2134|   384k|            ranges::advance(it, seg.size());
 2135|   384k|        }
 2136|       |
 2137|   384k|        return read_while_code_point(
 2138|   384k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   384k|    }
 2140|   384k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   384k|{
 2082|   384k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   384k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   480k|{
 2061|   480k|    auto it = range.begin();
 2062|   749k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 684k, False: 64.4k]
  ------------------
 2063|   684k|        const auto val =
 2064|   684k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   684k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   684k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 684k, False: 0]
  |  |  ------------------
  ------------------
 2066|   684k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   684k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   684k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 416k, False: 268k]
  ------------------
 2069|   416k|                return it;
 2070|   416k|            }
 2071|   684k|        }
 2072|   268k|        it = val.iterator;
 2073|   268k|    }
 2074|       |
 2075|  64.4k|    return it;
 2076|   480k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   384k|    {
  754|   384k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   482k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   482k|              cvref<T> obj = *get<T>(fn);
  745|   482k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   482k|                  obj(static_cast<decltype(args)>(args)...);
  747|   482k|              }
  748|   482k|              else {
  749|   482k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   482k|              }
  751|   482k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   482k|    {
  684|   482k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   482k|            return static_cast<T*>(s.m_cp);
  686|   482k|        }
  687|   482k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   482k|            return static_cast<T*>(s.m_p);
  689|   482k|        }
  690|   482k|        else {
  691|   482k|            return reinterpret_cast<T*>(s.m_fp);
  692|   482k|        }
  693|   482k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   482k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   384k|        {
  662|   384k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   673k|    {
  304|   673k|        ranges::advance(x, n);
  305|   673k|        return x;
  306|   673k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   673k|    {
  268|   673k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   673k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   673k|    {
  181|  2.28M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.61M, False: 673k]
  ------------------
  182|  1.61M|            ++i;
  183|  1.61M|        }
  184|   673k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  96.9k|    {
 6193|  96.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  96.9k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  96.9k|            auto rd = make_reader<T, char_type>();
 6198|  96.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  96.9k|                return unexpected(e);
 6200|  96.9k|            }
 6201|       |
 6202|  96.9k|            return impl(rd, range, value);
 6203|  96.9k|        }
 6204|  96.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  96.9k|            auto rd = make_reader<T, char_type>();
 6206|  96.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.9k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  96.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 96.9k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  96.9k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  96.9k|                return impl(rd, range, value);
 6213|  96.9k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  96.9k|        else {
 6221|  96.9k|            SCN_EXPECT(false);
 6222|  96.9k|            SCN_UNREACHABLE;
 6223|  96.9k|        }
 6224|  96.9k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   583k|    {
 3040|   583k|        reader_error_handler eh{};
 3041|   583k|        get_derived().check_specs_impl(specs, eh);
 3042|   583k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 583k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   583k|        return {};
 3046|   583k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   583k|    {
 3051|   583k|        return static_cast<Derived&>(*this);
 3052|   583k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   583k|    {
 4145|   583k|        detail::check_float_type_specs(specs, eh);
 4146|   583k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  96.9k|    {
 6124|  96.9k|        const bool need_skipped_width =
 6125|  96.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 96.9k]
  |  Branch (6125:33): [True: 0, False: 96.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  96.9k|        auto it = rng.begin();
 6129|  96.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  96.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 96.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  96.9k|        else {
 6138|  96.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  96.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 588, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    588|    }                                                  \
  |  |  |  | 3671|  96.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.3k|        }
 6141|  96.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.3k|        std::ptrdiff_t value_width = 0;
 6145|  96.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.3k|        else {
 6161|  96.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 71.0k, False: 25.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  71.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  71.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  71.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  71.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  71.0k|    }                                                  \
  |  | 3671|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.3k|                                             specs, value, loc));
 6163|       |
 6164|  25.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.2k, False: 150]
  ------------------
 6174|  25.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.2k|                                 value_width));
 6178|  25.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.2k|        }
 6180|       |
 6181|  25.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.3k|                                                 value_width, postfix_width);
 6183|  25.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.3k|        return it;
 6188|  25.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   921k|    {
 3035|   921k|        return true;
 3036|   921k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   579k|    {
 4217|   579k|        unsigned options{};
 4218|   579k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 123k, False: 456k]
  ------------------
 4219|   123k|            options |= float_reader_base::allow_thsep;
 4220|   123k|        }
 4221|       |
 4222|   579k|        SCN_GCC_COMPAT_PUSH
 4223|   579k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   579k|        switch (specs.type) {
 4226|   123k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 123k, False: 456k]
  ------------------
 4227|   123k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  86.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 86.1k, False: 493k]
  ------------------
 4230|  86.1k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   123k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 123k, False: 455k]
  ------------------
 4233|   123k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   123k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 123k, False: 456k]
  ------------------
 4236|   123k|                return options | float_reader_base::allow_scientific |
 4237|   123k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   123k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 123k, False: 456k]
  ------------------
 4240|   123k|                return options | float_reader_base::allow_scientific |
 4241|   123k|                       float_reader_base::allow_fixed |
 4242|   123k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 579k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   579k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   579k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   579k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   579k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   764k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.52M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   119k|    {
 3691|   119k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   119k|        const std::ptrdiff_t sign_len =
 3694|   119k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 114, False: 119k]
  ------------------
 3695|       |
 3696|   119k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50.2k, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  50.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  50.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  50.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  50.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  50.2k|    }                                                  \
  |  |  |  | 3671|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  69.5k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   119k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   360k|    {
 4057|   360k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 360k, False: 0]
  ------------------
 4058|   360k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 360k, False: 0]
  ------------------
 4059|   360k|            return;
 4060|   360k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   236k|    {
 1587|   236k|        return m_storage.has_value();
 1588|   236k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   137k|    {
 1592|   137k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   137k|        return *m_storage;
 1594|   137k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  96.3k|    {
 4170|  96.3k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.3k|#if !SCN_DISABLE_LOCALE
 4173|  96.3k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.4k, False: 75.9k]
  ------------------
 4174|  20.4k|            return read_impl<Range>(
 4175|  20.4k|                range, rd,
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.4k|                },
 4179|  20.4k|                value, loc);
 4180|  20.4k|        }
 4181|  75.9k|#endif
 4182|       |
 4183|  75.9k|        return read_impl<Range>(
 4184|  75.9k|            range, rd,
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.9k|            },
 4188|  75.9k|            value);
 4189|  96.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.7k, False: 35.2k]
  |  |  ------------------
  ------------------
 4208|  91.7k|            return unexpected(r.error());
 4209|  91.7k|        }
 4210|       |
 4211|  35.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  35.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 507, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    507|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    507|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    507|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    507|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    507|    }                                                  \
  |  |  |  | 3671|  35.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  34.7k|        return ranges::next(range.begin(), n);
 4213|  35.2k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   381k|    {
  763|   381k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   381k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  61.4k|    {
 3679|  61.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  61.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  61.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 61.4k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  61.4k|        return read_source_impl(range);
 3685|  61.4k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   381k|    {
 3705|   381k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   381k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   381k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   381k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 381k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   381k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   381k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   381k|        auto it = sign_result.first;
 3708|   381k|        m_sign = sign_result.second;
 3709|       |
 3710|   381k|        auto digits_begin = it;
 3711|   381k|        auto r = ranges::subrange{it, range.end()};
 3712|   381k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   381k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   381k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   381k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   381k|                SCN_TRY_ASSIGN(
 3717|   381k|                    it,
 3718|   381k|                    do_read_source_impl(
 3719|   381k|                        r,
 3720|   381k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   381k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   381k|            }
 3723|   381k|            else {
 3724|   381k|                auto cb = [&](const auto& rr)
 3725|   381k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   381k|                    auto res = read_all(rr);
 3727|   381k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   381k|                        return unexpected_scan_error(
 3729|   381k|                            scan_error::invalid_scanned_value,
 3730|   381k|                            "Invalid float value");
 3731|   381k|                    }
 3732|   381k|                    return res;
 3733|   381k|                };
 3734|   381k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   381k|            }
 3736|   381k|        }
 3737|   381k|        else {
 3738|   381k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   381k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   381k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 275k, False: 105k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   275k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   275k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   275k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   275k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   275k|    }                                                  \
  |  | 3671|   381k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   105k|                it,
 3740|   105k|                do_read_source_impl(
 3741|   105k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   105k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   105k|        }
 3744|       |
 3745|   105k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   105k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 105k, False: 0]
  |  Branch (3747:48): [True: 105k, False: 0]
  ------------------
 3748|   105k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 105k, False: 0]
  ------------------
 3749|   105k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 105k, False: 0]
  ------------------
 3750|   105k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   105k|        }
 3752|       |
 3753|   105k|        handle_separators();
 3754|       |
 3755|   105k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 105k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   105k|        return it;
 3768|   105k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   381k|    {
 4000|   381k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   381k|        const bool allowed_nonhex =
 4002|   381k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   381k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   381k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 381k, False: 0]
  |  Branch (4005:45): [True: 0, False: 381k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   381k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 381k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   381k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 381k, False: 0]
  |  Branch (4014:45): [True: 0, False: 381k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   381k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 381k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   381k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 215k, False: 166k]
  |  Branch (4021:28): [True: 61.8k, False: 153k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  61.8k|            auto it = range.begin();
 4025|       |
 4026|  61.8k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 61.7k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  61.7k|            else {
 4031|  61.7k|                m_kind = float_kind::hex_without_prefix;
 4032|  61.7k|            }
 4033|       |
 4034|  61.8k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  61.8k|        }
 4036|   320k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 166k, False: 153k]
  |  Branch (4036:29): [True: 166k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   166k|            m_kind = float_kind::generic;
 4040|   166k|            return read_regular_float(range);
 4041|   166k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   153k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 153k]
  |  |  ------------------
  ------------------
 4047|    300|            m_kind = float_kind::hex_with_prefix;
 4048|    300|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    300|        }
 4050|       |
 4051|   153k|        m_kind = float_kind::generic;
 4052|   153k|        return read_regular(range);
 4053|   153k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   381k|    {
 3811|   381k|        auto it = range.begin();
 3812|   381k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 381k, False: 0]
  ------------------
 3813|   381k|            return unexpected(r.error());
 3814|   381k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   381k|    {
 3834|   381k|        auto it = range.begin();
 3835|   381k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 381k, False: 0]
  ------------------
 3836|   381k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   381k|                scan_error::invalid_scanned_value,
 3838|   381k|                "Invalid floating-point NaN value"));
 3839|   381k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   215k|    {
 3804|   215k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   215k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  62.1k|    {
 3904|  62.1k|        auto it = range.begin();
 3905|       |
 3906|  62.1k|        std::ptrdiff_t digits_count = 0;
 3907|  62.1k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  62.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.4k, False: 19.7k]
  |  |  ------------------
  ------------------
 3909|  42.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  42.4k|                scan_error::invalid_scanned_value,
 3911|  42.4k|                "Invalid hexadecimal floating-point value"));
 3912|  42.4k|        }
 3913|  19.7k|        else {
 3914|  19.7k|            digits_count += ranges::distance(it, *r);
 3915|  19.7k|            it = *r;
 3916|  19.7k|        }
 3917|       |
 3918|  19.7k|        m_integral_part_length = digits_count;
 3919|  19.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 30, False: 19.6k]
  ------------------
 3920|  19.7k|                                             m_locale_options.decimal_point)) {
 3921|     30|            it = *r;
 3922|     30|        }
 3923|       |
 3924|  19.7k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 19.7k]
  ------------------
 3925|  19.7k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  19.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  19.7k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  19.7k|        return it;
 3938|  19.7k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  81.9k|    {
 3789|  81.9k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.9k]
  |  |  |  Branch (859:45): [True: 0, False: 81.9k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  81.9k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  81.9k|        return read_while1_code_unit(
 3798|  81.9k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  81.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  81.9k|    {
  754|  81.9k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   104k|    {
  684|   104k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   104k|            return static_cast<T*>(s.m_cp);
  686|   104k|        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   104k|            return static_cast<T*>(s.m_p);
  689|   104k|        }
  690|   104k|        else {
  691|   104k|            return reinterpret_cast<T*>(s.m_fp);
  692|   104k|        }
  693|   104k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   104k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  81.9k|        {
  662|  81.9k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  89.1k|    {
 3876|  89.1k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 4.06k, False: 85.0k]
  ------------------
 3877|  4.06k|            auto beg_exp_it = range.begin();
 3878|  4.06k|            auto it = *r;
 3879|       |
 3880|  4.06k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 4.03k, False: 27]
  ------------------
 3881|  4.06k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  4.03k|                it = r_sign->first;
 3883|  4.03k|            }
 3884|       |
 3885|  4.06k|            if (auto r_exp = read_while1_code_unit(
 3886|  4.06k|                    ranges::subrange{it, range.end()},
 3887|  4.06k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  4.06k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  4.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.39k, False: 2.66k]
  |  |  ------------------
  ------------------
 3889|  1.39k|                it = beg_exp_it;
 3890|  1.39k|            }
 3891|  2.66k|            else {
 3892|  2.66k|                it = *r_exp;
 3893|  2.66k|            }
 3894|       |
 3895|  4.06k|            return it;
 3896|  4.06k|        }
 3897|  85.0k|        return range.begin();
 3898|  89.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  4.06k|    {
  754|  4.06k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  9.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.48k|              cvref<T> obj = *get<T>(fn);
  745|  9.48k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.48k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.48k|              }
  748|  9.48k|              else {
  749|  9.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.48k|              }
  751|  9.48k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  9.48k|    {
  684|  9.48k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.48k|            return static_cast<T*>(s.m_cp);
  686|  9.48k|        }
  687|  9.48k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.48k|            return static_cast<T*>(s.m_p);
  689|  9.48k|        }
  690|  9.48k|        else {
  691|  9.48k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.48k|        }
  693|  9.48k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  9.48k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  4.06k|        {
  662|  4.06k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   319k|    {
 3944|   319k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   319k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 258k, False: 61.6k]
  |  Branch (3945:50): [True: 43.0k, False: 214k]
  ------------------
 3946|       |
 3947|   319k|        auto it = ranges::begin(range);
 3948|   319k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   319k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   319k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 231k, False: 88.4k]
  |  |  ------------------
  ------------------
 3952|   231k|            return r.transform_error(
 3953|   231k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   231k|                                              "Invalid floating-point value"));
 3955|   231k|        }
 3956|  88.4k|        else {
 3957|  88.4k|            digits_count += ranges::distance(it, *r);
 3958|  88.4k|            it = *r;
 3959|  88.4k|        }
 3960|       |
 3961|  88.4k|        m_integral_part_length = digits_count;
 3962|  88.4k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 99, False: 88.3k]
  ------------------
 3963|  88.4k|                                             m_locale_options.decimal_point)) {
 3964|     99|            it = *r;
 3965|     99|        }
 3966|       |
 3967|  88.4k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 88.4k]
  ------------------
 3968|  88.4k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  88.4k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 88.4k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  88.4k|        auto beg_exp_it = it;
 3979|  88.4k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 69.4k, False: 19.0k]
  ------------------
 3980|  69.4k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  69.4k|        }
 3982|  88.4k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.55k, False: 85.8k]
  |  Branch (3982:29): [True: 2.16k, False: 384]
  ------------------
 3983|  2.16k|            return unexpected_scan_error(
 3984|  2.16k|                scan_error::invalid_scanned_value,
 3985|  2.16k|                "No exponent given to scientific float");
 3986|  2.16k|        }
 3987|       |
 3988|  86.2k|        m_kind =
 3989|  86.2k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 83.6k, False: 2.56k]
  ------------------
 3990|       |
 3991|  86.2k|        return it;
 3992|  88.4k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   408k|    {
 3774|   408k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  |  Branch (859:45): [True: 0, False: 408k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   408k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   408k|        return read_while1_code_unit(
 3783|   408k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   408k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   408k|    {
  754|   408k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   501k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   501k|              cvref<T> obj = *get<T>(fn);
  745|   501k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   501k|                  obj(static_cast<decltype(args)>(args)...);
  747|   501k|              }
  748|   501k|              else {
  749|   501k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   501k|              }
  751|   501k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   501k|    {
  684|   501k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   501k|            return static_cast<T*>(s.m_cp);
  686|   501k|        }
  687|   501k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   501k|            return static_cast<T*>(s.m_p);
  689|   501k|        }
  690|   501k|        else {
  691|   501k|            return reinterpret_cast<T*>(s.m_fp);
  692|   501k|        }
  693|   501k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   501k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   408k|        {
  662|   408k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   105k|    {
 1577|   105k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   105k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  75.9k|    {
  754|  75.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  75.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.9k|              cvref<T> obj = *get<T>(fn);
  745|  75.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.9k|              }
  748|  75.9k|              else {
  749|  75.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.9k|              }
  751|  75.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.9k|    {
  684|  75.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.9k|            return static_cast<T*>(s.m_cp);
  686|  75.9k|        }
  687|  75.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.9k|            return static_cast<T*>(s.m_p);
  689|  75.9k|        }
  690|  75.9k|        else {
  691|  75.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.9k|        }
  693|  75.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   320k|    {
 3665|   320k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   320k|        return read_source_impl(range);
 3671|   320k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  75.9k|        {
  662|  75.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  96.4k|    {
 4170|  96.4k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.4k|#if !SCN_DISABLE_LOCALE
 4173|  96.4k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.4k, False: 75.9k]
  ------------------
 4174|  20.4k|            return read_impl<Range>(
 4175|  20.4k|                range, rd,
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.4k|                },
 4179|  20.4k|                value, loc);
 4180|  20.4k|        }
 4181|  75.9k|#endif
 4182|       |
 4183|  75.9k|        return read_impl<Range>(
 4184|  75.9k|            range, rd,
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.9k|            },
 4188|  75.9k|            value);
 4189|  96.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5k, False: 84.5k]
  |  |  ------------------
  ------------------
 4208|  42.5k|            return unexpected(r.error());
 4209|  42.5k|        }
 4210|       |
 4211|  84.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  84.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  84.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  84.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.7k, False: 34.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.7k|    }                                                  \
  |  |  |  | 3671|  84.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  34.8k|        return ranges::next(range.begin(), n);
 4213|  84.5k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   382k|    {
  763|   382k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   382k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  61.5k|    {
 3679|  61.5k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  61.5k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  61.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 61.5k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  61.5k|        return read_source_impl(range);
 3685|  61.5k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   382k|    {
 3705|   382k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   382k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   382k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   382k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   382k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   382k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   382k|        auto it = sign_result.first;
 3708|   382k|        m_sign = sign_result.second;
 3709|       |
 3710|   382k|        auto digits_begin = it;
 3711|   382k|        auto r = ranges::subrange{it, range.end()};
 3712|   382k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   382k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   382k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 382k]
  |  |  |  Branch (859:45): [True: 0, False: 382k]
  |  |  |  Branch (859:45): [True: 0, False: 382k]
  |  |  ------------------
  ------------------
 3715|   382k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   382k|            else {
 3724|   382k|                auto cb = [&](const auto& rr)
 3725|   382k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   382k|                    auto res = read_all(rr);
 3727|   382k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   382k|                        return unexpected_scan_error(
 3729|   382k|                            scan_error::invalid_scanned_value,
 3730|   382k|                            "Invalid float value");
 3731|   382k|                    }
 3732|   382k|                    return res;
 3733|   382k|                };
 3734|   382k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   382k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   382k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 127k, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   127k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   127k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   127k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   127k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   127k|    }                                                  \
  |  | 3671|   382k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   254k|            }
 3736|   382k|        }
 3737|   254k|        else {
 3738|   254k|            SCN_TRY_ASSIGN(
 3739|   254k|                it,
 3740|   254k|                do_read_source_impl(
 3741|   254k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   254k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   254k|        }
 3744|       |
 3745|   254k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   254k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 254k, False: 0]
  |  Branch (3747:48): [True: 254k, False: 0]
  ------------------
 3748|   254k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 254k, False: 0]
  ------------------
 3749|   254k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 254k, False: 0]
  ------------------
 3750|   254k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   254k|        }
 3752|       |
 3753|   254k|        handle_separators();
 3754|       |
 3755|   254k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 254k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   254k|        return it;
 3768|   254k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   382k|    {
 3811|   382k|        auto it = range.begin();
 3812|   382k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 382k, False: 0]
  ------------------
 3813|   382k|            return unexpected(r.error());
 3814|   382k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   382k|    {
 3834|   382k|        auto it = range.begin();
 3835|   382k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 382k, False: 0]
  ------------------
 3836|   382k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   382k|                scan_error::invalid_scanned_value,
 3838|   382k|                "Invalid floating-point NaN value"));
 3839|   382k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   215k|    {
 3804|   215k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   215k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   208k|{
 1996|   208k|    auto it = read_while_code_unit(range, pred);
 1997|   208k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 166k, False: 41.7k]
  ------------------
 1998|   166k|        return unexpected(parse_error::error);
 1999|   166k|    }
 2000|  41.7k|    return it;
 2001|   208k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  21.7k|    {
 3876|  21.7k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.60k, False: 20.1k]
  ------------------
 3877|  1.60k|            auto beg_exp_it = range.begin();
 3878|  1.60k|            auto it = *r;
 3879|       |
 3880|  1.60k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 1.59k, False: 12]
  ------------------
 3881|  1.60k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  1.59k|                it = r_sign->first;
 3883|  1.59k|            }
 3884|       |
 3885|  1.60k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.60k|                    ranges::subrange{it, range.end()},
 3887|  1.60k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.60k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 596, False: 1.00k]
  |  |  ------------------
  ------------------
 3889|    596|                it = beg_exp_it;
 3890|    596|            }
 3891|  1.00k|            else {
 3892|  1.00k|                it = *r_exp;
 3893|  1.00k|            }
 3894|       |
 3895|  1.60k|            return it;
 3896|  1.60k|        }
 3897|  20.1k|        return range.begin();
 3898|  21.7k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.60k|    {
  754|  1.60k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  3.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.59k|              cvref<T> obj = *get<T>(fn);
  745|  3.59k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.59k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.59k|              }
  748|  3.59k|              else {
  749|  3.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.59k|              }
  751|  3.59k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  3.59k|    {
  684|  3.59k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.59k|            return static_cast<T*>(s.m_cp);
  686|  3.59k|        }
  687|  3.59k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.59k|            return static_cast<T*>(s.m_p);
  689|  3.59k|        }
  690|  3.59k|        else {
  691|  3.59k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.59k|        }
  693|  3.59k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  3.59k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.60k|        {
  662|  1.60k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   166k|    {
 3944|   166k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   166k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 104k, False: 61.6k]
  |  Branch (3945:50): [True: 43.0k, False: 61.5k]
  ------------------
 3946|       |
 3947|   166k|        auto it = ranges::begin(range);
 3948|   166k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   166k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   166k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 40.7k]
  |  |  ------------------
  ------------------
 3952|   125k|            return r.transform_error(
 3953|   125k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   125k|                                              "Invalid floating-point value"));
 3955|   125k|        }
 3956|  40.7k|        else {
 3957|  40.7k|            digits_count += ranges::distance(it, *r);
 3958|  40.7k|            it = *r;
 3959|  40.7k|        }
 3960|       |
 3961|  40.7k|        m_integral_part_length = digits_count;
 3962|  40.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 54, False: 40.7k]
  ------------------
 3963|  40.7k|                                             m_locale_options.decimal_point)) {
 3964|     54|            it = *r;
 3965|     54|        }
 3966|       |
 3967|  40.7k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 40.7k]
  ------------------
 3968|  40.7k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  40.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.7k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  40.7k|        auto beg_exp_it = it;
 3979|  40.7k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 21.7k, False: 19.0k]
  ------------------
 3980|  21.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  21.7k|        }
 3982|  40.7k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.55k, False: 38.2k]
  |  Branch (3982:29): [True: 2.16k, False: 384]
  ------------------
 3983|  2.16k|            return unexpected_scan_error(
 3984|  2.16k|                scan_error::invalid_scanned_value,
 3985|  2.16k|                "No exponent given to scientific float");
 3986|  2.16k|        }
 3987|       |
 3988|  38.5k|        m_kind =
 3989|  38.5k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 37.5k, False: 1.00k]
  ------------------
 3990|       |
 3991|  38.5k|        return it;
 3992|  40.7k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   207k|    {
 3774|   207k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  |  Branch (859:45): [True: 0, False: 207k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   207k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   207k|        return read_while1_code_unit(
 3783|   207k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   207k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   250k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   250k|              cvref<T> obj = *get<T>(fn);
  745|   250k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   250k|                  obj(static_cast<decltype(args)>(args)...);
  747|   250k|              }
  748|   250k|              else {
  749|   250k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   250k|              }
  751|   250k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   250k|    {
  684|   250k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   250k|            return static_cast<T*>(s.m_cp);
  686|   250k|        }
  687|   250k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   250k|            return static_cast<T*>(s.m_p);
  689|   250k|        }
  690|   250k|        else {
  691|   250k|            return reinterpret_cast<T*>(s.m_fp);
  692|   250k|        }
  693|   250k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   250k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   382k|    {
 4000|   382k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   382k|        const bool allowed_nonhex =
 4002|   382k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   382k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   382k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 382k, False: 0]
  |  Branch (4005:45): [True: 0, False: 382k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   382k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 382k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   382k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 382k, False: 0]
  |  Branch (4014:45): [True: 0, False: 382k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   382k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 382k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   382k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 215k, False: 166k]
  |  Branch (4021:28): [True: 61.9k, False: 153k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  61.9k|            auto it = range.begin();
 4025|       |
 4026|  61.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 61.8k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  61.8k|            else {
 4031|  61.8k|                m_kind = float_kind::hex_without_prefix;
 4032|  61.8k|            }
 4033|       |
 4034|  61.9k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  61.9k|        }
 4036|   320k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 166k, False: 153k]
  |  Branch (4036:29): [True: 166k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   166k|            m_kind = float_kind::generic;
 4040|   166k|            return read_regular_float(range);
 4041|   166k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   153k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 153k]
  |  |  ------------------
  ------------------
 4047|    300|            m_kind = float_kind::hex_with_prefix;
 4048|    300|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    300|        }
 4050|       |
 4051|   153k|        m_kind = float_kind::generic;
 4052|   153k|        return read_regular(range);
 4053|   153k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   215k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   215k|                    auto res = read_all(rr);
 3727|   215k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 215k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   215k|                    return res;
 3733|   215k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   215k|{
 1839|   215k|    return ranges::next(range.begin(), range.end());
 1840|   215k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   215k|    {
  313|   215k|        ranges::advance(x, bound);
  314|   215k|        return x;
  315|   215k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   215k|    {
  275|   215k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   215k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   254k|    {
 1577|   254k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   254k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   254k|    {
 1621|   254k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   254k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   254k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   254k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   254k|            m_storage.reset();
 1627|   254k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   254k|        }
 1629|   254k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   254k|                                          std::basic_string<CharT>>) {
 1631|   254k|            m_storage.emplace(SCN_FWD(range));
 1632|   254k|            m_view = string_view_type{*m_storage};
 1633|   254k|        }
 1634|   254k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   254k|                                          typename detail::basic_scan_buffer<
 1636|   254k|                                              value_t>::forward_iterator> &&
 1637|   254k|                           ranges::common_range<Range>) {
 1638|   254k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   254k|            auto end_seg = range.end().contiguous_segment();
 1640|   254k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   254k|                             detail::to_address(end_seg.end()))) {
 1642|   254k|                auto& str = m_storage.emplace();
 1643|   254k|                str.reserve(range.end().position() - range.begin().position());
 1644|   254k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   254k|                m_view = string_view_type{str};
 1646|   254k|                return;
 1647|   254k|            }
 1648|       |
 1649|   254k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   254k|                                                            end_seg.data());
 1651|   254k|            m_storage.reset();
 1652|   254k|        }
 1653|   254k|        else {
 1654|   254k|            auto& str = m_storage.emplace();
 1655|   254k|            if constexpr (ranges::sized_range<Range>) {
 1656|   254k|                str.reserve(range.size());
 1657|   254k|            }
 1658|   254k|            if constexpr (ranges::common_range<Range>) {
 1659|   254k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   254k|                          std::back_inserter(str));
 1661|   254k|            }
 1662|   254k|            else {
 1663|   254k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   254k|                     ++it) {
 1665|   254k|                    str.push_back(*it);
 1666|   254k|                }
 1667|   254k|            }
 1668|   254k|            m_view = string_view_type{str};
 1669|   254k|        }
 1670|   254k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  75.9k|    {
  754|  75.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  75.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.9k|              cvref<T> obj = *get<T>(fn);
  745|  75.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.9k|              }
  748|  75.9k|              else {
  749|  75.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.9k|              }
  751|  75.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.9k|    {
  684|  75.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.9k|            return static_cast<T*>(s.m_cp);
  686|  75.9k|        }
  687|  75.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.9k|            return static_cast<T*>(s.m_p);
  689|  75.9k|        }
  690|  75.9k|        else {
  691|  75.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.9k|        }
  693|  75.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   320k|    {
 3665|   320k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   320k|        return read_source_impl(range);
 3671|   320k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  75.9k|        {
  662|  75.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  97.1k|    {
 6193|  97.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.1k|            auto rd = make_reader<T, char_type>();
 6198|  97.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  97.1k|                return unexpected(e);
 6200|  97.1k|            }
 6201|       |
 6202|  97.1k|            return impl(rd, range, value);
 6203|  97.1k|        }
 6204|  97.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  97.1k|            auto rd = make_reader<T, char_type>();
 6206|  97.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.1k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  97.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 97.1k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  97.1k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  97.1k|                return impl(rd, range, value);
 6213|  97.1k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  97.1k|        else {
 6221|  97.1k|            SCN_EXPECT(false);
 6222|  97.1k|            SCN_UNREACHABLE;
 6223|  97.1k|        }
 6224|  97.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  97.1k|    {
 6124|  97.1k|        const bool need_skipped_width =
 6125|  97.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.1k]
  |  Branch (6125:33): [True: 0, False: 97.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.1k|        auto it = rng.begin();
 6129|  97.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.1k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.1k|        else {
 6138|  97.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 620, False: 96.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    620|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    620|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    620|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    620|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    620|    }                                                  \
  |  |  |  | 3671|  97.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.5k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.5k|        }
 6141|  96.5k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.5k|        std::ptrdiff_t value_width = 0;
 6145|  96.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.5k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.5k|        else {
 6161|  96.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.9k, False: 25.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  70.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  70.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  70.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  70.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  70.9k|    }                                                  \
  |  | 3671|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.5k|                                             specs, value, loc));
 6163|       |
 6164|  25.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.3k, False: 160]
  ------------------
 6174|  25.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.3k|                                 value_width));
 6178|  25.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.3k|        }
 6180|       |
 6181|  25.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.5k|                                                 value_width, postfix_width);
 6183|  25.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.5k|        return it;
 6188|  25.5k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   120k|    {
 3691|   120k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   120k|        const std::ptrdiff_t sign_len =
 3694|   120k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 114, False: 119k]
  ------------------
 3695|       |
 3696|   120k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.9k, False: 70.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.9k|    }                                                  \
  |  |  |  | 3671|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  70.0k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   120k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  96.5k|    {
 4170|  96.5k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.5k|#if !SCN_DISABLE_LOCALE
 4173|  96.5k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.4k, False: 76.0k]
  ------------------
 4174|  20.4k|            return read_impl<Range>(
 4175|  20.4k|                range, rd,
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.4k|                },
 4179|  20.4k|                value, loc);
 4180|  20.4k|        }
 4181|  76.0k|#endif
 4182|       |
 4183|  76.0k|        return read_impl<Range>(
 4184|  76.0k|            range, rd,
 4185|  76.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.0k|            },
 4188|  76.0k|            value);
 4189|  96.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.9k, False: 35.2k]
  |  |  ------------------
  ------------------
 4208|  91.9k|            return unexpected(r.error());
 4209|  91.9k|        }
 4210|       |
 4211|  35.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  35.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    284|    }                                                  \
  |  |  |  | 3671|  35.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  35.0k|        return ranges::next(range.begin(), n);
 4213|  35.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  20.4k|    {
  754|  20.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|  20.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.4k|              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|  20.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.4k|            return static_cast<T*>(s.m_cp);
  686|  20.4k|        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|  20.4k|        }
  690|  20.4k|        else {
  691|  20.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.4k|        }
  693|  20.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  20.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.4k|        {
  662|  20.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  76.0k|    {
  754|  76.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  76.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.0k|              cvref<T> obj = *get<T>(fn);
  745|  76.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.0k|              }
  748|  76.0k|              else {
  749|  76.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.0k|              }
  751|  76.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.0k|    {
  684|  76.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.0k|            return static_cast<T*>(s.m_cp);
  686|  76.0k|        }
  687|  76.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.0k|            return static_cast<T*>(s.m_p);
  689|  76.0k|        }
  690|  76.0k|        else {
  691|  76.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.0k|        }
  693|  76.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  76.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  76.0k|        {
  662|  76.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  96.5k|    {
 4170|  96.5k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.5k|#if !SCN_DISABLE_LOCALE
 4173|  96.5k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.5k, False: 76.0k]
  ------------------
 4174|  20.5k|            return read_impl<Range>(
 4175|  20.5k|                range, rd,
 4176|  20.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.5k|                },
 4179|  20.5k|                value, loc);
 4180|  20.5k|        }
 4181|  76.0k|#endif
 4182|       |
 4183|  76.0k|        return read_impl<Range>(
 4184|  76.0k|            range, rd,
 4185|  76.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.0k|            },
 4188|  76.0k|            value);
 4189|  96.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5k, False: 84.7k]
  |  |  ------------------
  ------------------
 4208|  42.5k|            return unexpected(r.error());
 4209|  42.5k|        }
 4210|       |
 4211|  84.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  84.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  84.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  84.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 35.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.6k|    }                                                  \
  |  |  |  | 3671|  84.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  35.0k|        return ranges::next(range.begin(), n);
 4213|  84.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  20.5k|    {
  754|  20.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.5k|              cvref<T> obj = *get<T>(fn);
  745|  20.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.5k|              }
  748|  20.5k|              else {
  749|  20.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.5k|              }
  751|  20.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.5k|    {
  684|  20.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.5k|            return static_cast<T*>(s.m_cp);
  686|  20.5k|        }
  687|  20.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.5k|            return static_cast<T*>(s.m_p);
  689|  20.5k|        }
  690|  20.5k|        else {
  691|  20.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.5k|        }
  693|  20.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  20.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.5k|        {
  662|  20.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  76.0k|    {
  754|  76.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  76.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.0k|              cvref<T> obj = *get<T>(fn);
  745|  76.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.0k|              }
  748|  76.0k|              else {
  749|  76.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.0k|              }
  751|  76.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.0k|    {
  684|  76.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.0k|            return static_cast<T*>(s.m_cp);
  686|  76.0k|        }
  687|  76.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.0k|            return static_cast<T*>(s.m_p);
  689|  76.0k|        }
  690|  76.0k|        else {
  691|  76.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.0k|        }
  693|  76.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  76.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  76.0k|        {
  662|  76.0k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  97.4k|    {
 6193|  97.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.4k|            auto rd = make_reader<T, char_type>();
 6198|  97.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  97.4k|                return unexpected(e);
 6200|  97.4k|            }
 6201|       |
 6202|  97.4k|            return impl(rd, range, value);
 6203|  97.4k|        }
 6204|  97.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  97.4k|            auto rd = make_reader<T, char_type>();
 6206|  97.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.4k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  97.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 97.4k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  97.4k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  97.4k|                return impl(rd, range, value);
 6213|  97.4k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  97.4k|        else {
 6221|  97.4k|            SCN_EXPECT(false);
 6222|  97.4k|            SCN_UNREACHABLE;
 6223|  97.4k|        }
 6224|  97.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  97.4k|    {
 6124|  97.4k|        const bool need_skipped_width =
 6125|  97.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.4k]
  |  Branch (6125:33): [True: 0, False: 97.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.4k|        auto it = rng.begin();
 6129|  97.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.4k|        else {
 6138|  97.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 632, False: 96.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    632|    }                                                  \
  |  |  |  | 3671|  97.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.7k|        }
 6141|  96.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.7k|        std::ptrdiff_t value_width = 0;
 6145|  96.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.7k|        else {
 6161|  96.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.9k, False: 25.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  70.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  70.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  70.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  70.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  70.9k|    }                                                  \
  |  | 3671|  96.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.8k|                                             specs, value, loc));
 6163|       |
 6164|  25.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.6k, False: 166]
  ------------------
 6174|  25.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.6k|                                 value_width));
 6178|  25.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.6k|        }
 6180|       |
 6181|  25.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.8k|                                                 value_width, postfix_width);
 6183|  25.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.8k|        return it;
 6188|  25.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   120k|    {
 3691|   120k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   120k|        const std::ptrdiff_t sign_len =
 3694|   120k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 114, False: 120k]
  ------------------
 3695|       |
 3696|   120k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.6k, False: 70.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.6k|    }                                                  \
  |  |  |  | 3671|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  70.9k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   120k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  96.7k|    {
 4170|  96.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.7k|#if !SCN_DISABLE_LOCALE
 4173|  96.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.5k, False: 76.1k]
  ------------------
 4174|  20.5k|            return read_impl<Range>(
 4175|  20.5k|                range, rd,
 4176|  20.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.5k|                },
 4179|  20.5k|                value, loc);
 4180|  20.5k|        }
 4181|  76.1k|#endif
 4182|       |
 4183|  76.1k|        return read_impl<Range>(
 4184|  76.1k|            range, rd,
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.1k|            },
 4188|  76.1k|            value);
 4189|  96.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.1k, False: 35.4k]
  |  |  ------------------
  ------------------
 4208|  92.1k|            return unexpected(r.error());
 4209|  92.1k|        }
 4210|       |
 4211|  35.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  35.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 53, False: 35.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     53|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     53|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     53|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     53|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     53|    }                                                  \
  |  |  |  | 3671|  35.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  35.4k|        return ranges::next(range.begin(), n);
 4213|  35.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  20.5k|    {
  754|  20.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.5k|              cvref<T> obj = *get<T>(fn);
  745|  20.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.5k|              }
  748|  20.5k|              else {
  749|  20.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.5k|              }
  751|  20.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.5k|    {
  684|  20.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.5k|            return static_cast<T*>(s.m_cp);
  686|  20.5k|        }
  687|  20.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.5k|            return static_cast<T*>(s.m_p);
  689|  20.5k|        }
  690|  20.5k|        else {
  691|  20.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.5k|        }
  693|  20.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  20.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.5k|        {
  662|  20.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  76.1k|    {
  754|  76.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|  76.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.1k|              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.1k|    {
  684|  76.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.1k|            return static_cast<T*>(s.m_cp);
  686|  76.1k|        }
  687|  76.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.1k|            return static_cast<T*>(s.m_p);
  689|  76.1k|        }
  690|  76.1k|        else {
  691|  76.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.1k|        }
  693|  76.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  76.1k|        {
  662|  76.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  96.8k|    {
 4170|  96.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.8k|#if !SCN_DISABLE_LOCALE
 4173|  96.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.6k, False: 76.2k]
  ------------------
 4174|  20.6k|            return read_impl<Range>(
 4175|  20.6k|                range, rd,
 4176|  20.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.6k|                },
 4179|  20.6k|                value, loc);
 4180|  20.6k|        }
 4181|  76.2k|#endif
 4182|       |
 4183|  76.2k|        return read_impl<Range>(
 4184|  76.2k|            range, rd,
 4185|  76.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.2k|            },
 4188|  76.2k|            value);
 4189|  96.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   127k|    {
 4206|   127k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 85.0k]
  |  |  ------------------
  ------------------
 4208|  42.6k|            return unexpected(r.error());
 4209|  42.6k|        }
 4210|       |
 4211|  85.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.5k, False: 35.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.5k|    }                                                  \
  |  |  |  | 3671|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  35.5k|        return ranges::next(range.begin(), n);
 4213|  85.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  20.6k|    {
  754|  20.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.6k|              cvref<T> obj = *get<T>(fn);
  745|  20.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.6k|              }
  748|  20.6k|              else {
  749|  20.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.6k|              }
  751|  20.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.6k|    {
  684|  20.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.6k|            return static_cast<T*>(s.m_cp);
  686|  20.6k|        }
  687|  20.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.6k|            return static_cast<T*>(s.m_p);
  689|  20.6k|        }
  690|  20.6k|        else {
  691|  20.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.6k|        }
  693|  20.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  20.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.6k|        {
  662|  20.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  76.2k|    {
  754|  76.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  76.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.2k|              cvref<T> obj = *get<T>(fn);
  745|  76.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.2k|              }
  748|  76.2k|              else {
  749|  76.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.2k|              }
  751|  76.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.2k|    {
  684|  76.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.2k|            return static_cast<T*>(s.m_cp);
  686|  76.2k|        }
  687|  76.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.2k|            return static_cast<T*>(s.m_p);
  689|  76.2k|        }
  690|  76.2k|        else {
  691|  76.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.2k|        }
  693|  76.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  76.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  76.2k|        {
  662|  76.2k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   384k|{
 2061|   384k|    auto it = range.begin();
 2062|   484k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 482k, False: 2.28k]
  ------------------
 2063|   482k|        const auto val =
 2064|   482k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   482k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   482k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 482k, False: 0]
  |  |  ------------------
  ------------------
 2066|   482k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   482k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   482k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 381k, False: 100k]
  ------------------
 2069|   381k|                return it;
 2070|   381k|            }
 2071|   482k|        }
 2072|   100k|        it = val.iterator;
 2073|   100k|    }
 2074|       |
 2075|  2.28k|    return it;
 2076|   384k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   482k|{
 1899|   482k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   482k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   482k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   482k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   482k|    auto it = range.begin();
 1903|   482k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   482k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   482k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 482k, False: 0]
  ------------------
 1912|   482k|        ++it;
 1913|   482k|        return {it, string_type(1, *range.begin())};
 1914|   482k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   482k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   482k|    {
 1890|   482k|        return !codepoint.empty();
 1891|   482k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   384k|{
 2082|   384k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   384k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   384k|{
 2951|   384k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 384k, False: 0]
  ------------------
 2952|   384k|        auto it = read_while_classic_space(range);
 2953|   384k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   384k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.28k, False: 381k]
  |  |  ------------------
  ------------------
 2955|  2.28k|            return unexpected(e);
 2956|  2.28k|        }
 2957|       |
 2958|   381k|        return it;
 2959|   384k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   384k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   384k|{
 2117|   384k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   384k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   384k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   384k|        auto buf = make_contiguous_buffer(range);
 2121|   384k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   384k|        return ranges::next(range.begin(),
 2123|   384k|                            ranges::distance(buf.view().begin(), it));
 2124|   384k|    }
 2125|   384k|    else {
 2126|   384k|        auto it = range.begin();
 2127|       |
 2128|   384k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   384k|            auto seg = get_contiguous_beginning(range);
 2130|   384k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   384k|                seg_it != seg.end()) {
 2132|   384k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   384k|            }
 2134|   384k|            ranges::advance(it, seg.size());
 2135|   384k|        }
 2136|       |
 2137|   384k|        return read_while_code_point(
 2138|   384k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   384k|    }
 2140|   384k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   384k|    {
  754|   384k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   482k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   482k|              cvref<T> obj = *get<T>(fn);
  745|   482k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   482k|                  obj(static_cast<decltype(args)>(args)...);
  747|   482k|              }
  748|   482k|              else {
  749|   482k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   482k|              }
  751|   482k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   482k|    {
  684|   482k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   482k|            return static_cast<T*>(s.m_cp);
  686|   482k|        }
  687|   482k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   482k|            return static_cast<T*>(s.m_p);
  689|   482k|        }
  690|   482k|        else {
  691|   482k|            return reinterpret_cast<T*>(s.m_fp);
  692|   482k|        }
  693|   482k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   482k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   384k|        {
  662|   384k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.44M|{
 2088|  2.44M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.44M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.44M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.44M|        auto buf = make_contiguous_buffer(range);
 2092|  2.44M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.44M|        return ranges::next(range.begin(),
 2094|  2.44M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.44M|    }
 2096|  2.44M|    else {
 2097|  2.44M|        auto it = range.begin();
 2098|       |
 2099|  2.44M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.44M|            auto seg = get_contiguous_beginning(range);
 2101|  2.44M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.44M|                seg_it != seg.end()) {
 2103|  2.44M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.44M|            }
 2105|  2.44M|            ranges::advance(it, seg.size());
 2106|  2.44M|        }
 2107|       |
 2108|  2.44M|        return read_until_code_point(
 2109|  2.44M|            ranges::subrange{it, range.end()},
 2110|  2.44M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.44M|    }
 2112|  2.44M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.44M|{
 1683|  2.44M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.44M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.44M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.44M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.44M|    }
 1688|  2.44M|    else {
 1689|  2.44M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.44M|    }
 1691|  2.44M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.44M|    {
 1490|  2.44M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.44M|    {
 1577|  2.44M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.44M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.44M|    {
 1621|  2.44M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.44M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.44M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.44M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.44M|            m_storage.reset();
 1627|  2.44M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.44M|        }
 1629|  2.44M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.44M|                                          std::basic_string<CharT>>) {
 1631|  2.44M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.44M|            m_view = string_view_type{*m_storage};
 1633|  2.44M|        }
 1634|  2.44M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.44M|                                          typename detail::basic_scan_buffer<
 1636|  2.44M|                                              value_t>::forward_iterator> &&
 1637|  2.44M|                           ranges::common_range<Range>) {
 1638|  2.44M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.44M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.44M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.44M|                             detail::to_address(end_seg.end()))) {
 1642|  2.44M|                auto& str = m_storage.emplace();
 1643|  2.44M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.44M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.44M|                m_view = string_view_type{str};
 1646|  2.44M|                return;
 1647|  2.44M|            }
 1648|       |
 1649|  2.44M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.44M|                                                            end_seg.data());
 1651|  2.44M|            m_storage.reset();
 1652|  2.44M|        }
 1653|  2.44M|        else {
 1654|  2.44M|            auto& str = m_storage.emplace();
 1655|  2.44M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.44M|                str.reserve(range.size());
 1657|  2.44M|            }
 1658|  2.44M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.44M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.44M|                          std::back_inserter(str));
 1661|  2.44M|            }
 1662|  2.44M|            else {
 1663|  2.44M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.44M|                     ++it) {
 1665|  2.44M|                    str.push_back(*it);
 1666|  2.44M|                }
 1667|  2.44M|            }
 1668|  2.44M|            m_view = string_view_type{str};
 1669|  2.44M|        }
 1670|  2.44M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.66M|    {
 4100|  1.66M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 186k, False: 1.48M]
  ------------------
 4101|   186k|            return std::copysign(value, T{-1.0});
 4102|   186k|        }
 4103|  1.48M|        return std::copysign(value, T{1.0});
 4104|  1.66M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  96.2k|{
 2088|  96.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  96.2k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  96.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  96.2k|        auto buf = make_contiguous_buffer(range);
 2092|  96.2k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  96.2k|        return ranges::next(range.begin(),
 2094|  96.2k|                            ranges::distance(buf.view().begin(), it));
 2095|  96.2k|    }
 2096|  96.2k|    else {
 2097|  96.2k|        auto it = range.begin();
 2098|       |
 2099|  96.2k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  96.2k|            auto seg = get_contiguous_beginning(range);
 2101|  96.2k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  96.2k|                seg_it != seg.end()) {
 2103|  96.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  96.2k|            }
 2105|  96.2k|            ranges::advance(it, seg.size());
 2106|  96.2k|        }
 2107|       |
 2108|  96.2k|        return read_until_code_point(
 2109|  96.2k|            ranges::subrange{it, range.end()},
 2110|  96.2k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  96.2k|    }
 2112|  96.2k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  96.2k|    {
  754|  96.2k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   202k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   202k|              cvref<T> obj = *get<T>(fn);
  745|   202k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   202k|                  obj(static_cast<decltype(args)>(args)...);
  747|   202k|              }
  748|   202k|              else {
  749|   202k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   202k|              }
  751|   202k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   202k|    {
  684|   202k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   202k|            return static_cast<T*>(s.m_cp);
  686|   202k|        }
  687|   202k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   202k|            return static_cast<T*>(s.m_p);
  689|   202k|        }
  690|   202k|        else {
  691|   202k|            return reinterpret_cast<T*>(s.m_fp);
  692|   202k|        }
  693|   202k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   202k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  96.2k|        {
  662|  96.2k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  96.2k|    {
 1577|  96.2k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  96.2k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  96.2k|    {
 1621|  96.2k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  96.2k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  96.2k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  96.2k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  96.2k|            m_storage.reset();
 1627|  96.2k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  96.2k|        }
 1629|  96.2k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  96.2k|                                          std::basic_string<CharT>>) {
 1631|  96.2k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  96.2k|            m_view = string_view_type{*m_storage};
 1633|  96.2k|        }
 1634|  96.2k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  96.2k|                                          typename detail::basic_scan_buffer<
 1636|  96.2k|                                              value_t>::forward_iterator> &&
 1637|  96.2k|                           ranges::common_range<Range>) {
 1638|  96.2k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  96.2k|            auto end_seg = range.end().contiguous_segment();
 1640|  96.2k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  96.2k|                             detail::to_address(end_seg.end()))) {
 1642|  96.2k|                auto& str = m_storage.emplace();
 1643|  96.2k|                str.reserve(range.end().position() - range.begin().position());
 1644|  96.2k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  96.2k|                m_view = string_view_type{str};
 1646|  96.2k|                return;
 1647|  96.2k|            }
 1648|       |
 1649|  96.2k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  96.2k|                                                            end_seg.data());
 1651|  96.2k|            m_storage.reset();
 1652|  96.2k|        }
 1653|  96.2k|        else {
 1654|  96.2k|            auto& str = m_storage.emplace();
 1655|  96.2k|            if constexpr (ranges::sized_range<Range>) {
 1656|  96.2k|                str.reserve(range.size());
 1657|  96.2k|            }
 1658|  96.2k|            if constexpr (ranges::common_range<Range>) {
 1659|  96.2k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  96.2k|                          std::back_inserter(str));
 1661|  96.2k|            }
 1662|  96.2k|            else {
 1663|  96.2k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  96.2k|                     ++it) {
 1665|  96.2k|                    str.push_back(*it);
 1666|  96.2k|                }
 1667|  96.2k|            }
 1668|  96.2k|            m_view = string_view_type{str};
 1669|  96.2k|        }
 1670|  96.2k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   119k|    {
 4100|   119k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 106, False: 119k]
  ------------------
 4101|    106|            return std::copysign(value, T{-1.0});
 4102|    106|        }
 4103|   119k|        return std::copysign(value, T{1.0});
 4104|   119k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.79M|    {
 4100|  1.79M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 199k, False: 1.59M]
  ------------------
 4101|   199k|            return std::copysign(value, T{-1.0});
 4102|   199k|        }
 4103|  1.59M|        return std::copysign(value, T{1.0});
 4104|  1.79M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   120k|    {
 4100|   120k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 106, False: 119k]
  ------------------
 4101|    106|            return std::copysign(value, T{-1.0});
 4102|    106|        }
 4103|   119k|        return std::copysign(value, T{1.0});
 4104|   120k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.81M|    {
 4100|  1.81M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 205k, False: 1.61M]
  ------------------
 4101|   205k|            return std::copysign(value, T{-1.0});
 4102|   205k|        }
 4103|  1.61M|        return std::copysign(value, T{1.0});
 4104|  1.81M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   120k|    {
 4100|   120k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 106, False: 120k]
  ------------------
 4101|    106|            return std::copysign(value, T{-1.0});
 4102|    106|        }
 4103|   120k|        return std::copysign(value, T{1.0});
 4104|   120k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   814k|{
 5795|   814k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   814k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.24k, False: 807k]
  |  |  ------------------
  ------------------
 5796|  6.24k|        return unexpected(e);
 5797|  6.24k|    }
 5798|       |
 5799|   807k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 807k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   807k|    return skip_classic_whitespace(range);
 5804|   807k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   252k|    {
 5871|   252k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   252k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   252k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   252k|            auto rd = make_reader<T, char_type>();
 5876|   252k|            return impl(rd, range, value);
 5877|   252k|        }
 5878|   252k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   252k|            auto rd = make_reader<T, char_type>();
 5880|   252k|            if (!is_segment_contiguous(range)) {
 5881|   252k|                return impl(rd, range, value);
 5882|   252k|            }
 5883|   252k|            auto crange = get_as_contiguous(range);
 5884|   252k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   252k|            return ranges::next(range.begin(),
 5886|   252k|                                ranges::distance(crange.begin(), it));
 5887|   252k|        }
 5888|   252k|        else {
 5889|   252k|            SCN_EXPECT(false);
 5890|   252k|            SCN_UNREACHABLE;
 5891|   252k|        }
 5892|   252k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   252k|    {
 5863|   252k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.20k, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.20k|    }                                                  \
  |  |  |  | 3671|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   250k|                        .transform_error(make_eof_scan_error));
 5865|   250k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   252k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   250k|    {
 4152|   250k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   250k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   250k|        float_reader<CharT> rd{};
 4155|   250k|        return read_impl<Range>(
 4156|   250k|            range, rd,
 4157|   250k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   250k|                return r.read_source(SCN_FWD(args)...);
 4159|   250k|            },
 4160|   250k|            value);
 4161|   250k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.58M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.76M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   250k|    {
  754|   250k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   250k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   250k|              cvref<T> obj = *get<T>(fn);
  745|   250k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   250k|                  obj(static_cast<decltype(args)>(args)...);
  747|   250k|              }
  748|   250k|              else {
  749|   250k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   250k|              }
  751|   250k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   250k|    {
  684|   250k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   250k|            return static_cast<T*>(s.m_cp);
  686|   250k|        }
  687|   250k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   250k|            return static_cast<T*>(s.m_p);
  689|   250k|        }
  690|   250k|        else {
  691|   250k|            return reinterpret_cast<T*>(s.m_fp);
  692|   250k|        }
  693|   250k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   250k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   250k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   250k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   250k|        {
  662|   250k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   278k|    {
 5871|   278k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   278k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   278k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   278k|            auto rd = make_reader<T, char_type>();
 5876|   278k|            return impl(rd, range, value);
 5877|   278k|        }
 5878|   278k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   278k|            auto rd = make_reader<T, char_type>();
 5880|   278k|            if (!is_segment_contiguous(range)) {
 5881|   278k|                return impl(rd, range, value);
 5882|   278k|            }
 5883|   278k|            auto crange = get_as_contiguous(range);
 5884|   278k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   278k|            return ranges::next(range.begin(),
 5886|   278k|                                ranges::distance(crange.begin(), it));
 5887|   278k|        }
 5888|   278k|        else {
 5889|   278k|            SCN_EXPECT(false);
 5890|   278k|            SCN_UNREACHABLE;
 5891|   278k|        }
 5892|   278k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   278k|    {
 5863|   278k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.53k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.53k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   276k|                        .transform_error(make_eof_scan_error));
 5865|   276k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   278k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   276k|    {
 4152|   276k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   276k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   276k|        float_reader<CharT> rd{};
 4155|   276k|        return read_impl<Range>(
 4156|   276k|            range, rd,
 4157|   276k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   276k|                return r.read_source(SCN_FWD(args)...);
 4159|   276k|            },
 4160|   276k|            value);
 4161|   276k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   276k|    {
  754|   276k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   276k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   276k|              cvref<T> obj = *get<T>(fn);
  745|   276k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   276k|                  obj(static_cast<decltype(args)>(args)...);
  747|   276k|              }
  748|   276k|              else {
  749|   276k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   276k|              }
  751|   276k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   276k|    {
  684|   276k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   276k|            return static_cast<T*>(s.m_cp);
  686|   276k|        }
  687|   276k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   276k|            return static_cast<T*>(s.m_p);
  689|   276k|        }
  690|   276k|        else {
  691|   276k|            return reinterpret_cast<T*>(s.m_fp);
  692|   276k|        }
  693|   276k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   276k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   276k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   276k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   276k|        {
  662|   276k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   283k|    {
 5871|   283k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   283k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   283k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   283k|            auto rd = make_reader<T, char_type>();
 5876|   283k|            return impl(rd, range, value);
 5877|   283k|        }
 5878|   283k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   283k|            auto rd = make_reader<T, char_type>();
 5880|   283k|            if (!is_segment_contiguous(range)) {
 5881|   283k|                return impl(rd, range, value);
 5882|   283k|            }
 5883|   283k|            auto crange = get_as_contiguous(range);
 5884|   283k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   283k|            return ranges::next(range.begin(),
 5886|   283k|                                ranges::distance(crange.begin(), it));
 5887|   283k|        }
 5888|   283k|        else {
 5889|   283k|            SCN_EXPECT(false);
 5890|   283k|            SCN_UNREACHABLE;
 5891|   283k|        }
 5892|   283k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   283k|    {
 5863|   283k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   280k|                        .transform_error(make_eof_scan_error));
 5865|   280k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   283k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   280k|    {
 4152|   280k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   280k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   280k|        float_reader<CharT> rd{};
 4155|   280k|        return read_impl<Range>(
 4156|   280k|            range, rd,
 4157|   280k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   280k|                return r.read_source(SCN_FWD(args)...);
 4159|   280k|            },
 4160|   280k|            value);
 4161|   280k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   280k|    {
  754|   280k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   280k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   280k|              cvref<T> obj = *get<T>(fn);
  745|   280k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   280k|                  obj(static_cast<decltype(args)>(args)...);
  747|   280k|              }
  748|   280k|              else {
  749|   280k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   280k|              }
  751|   280k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   280k|    {
  684|   280k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   280k|            return static_cast<T*>(s.m_cp);
  686|   280k|        }
  687|   280k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   280k|            return static_cast<T*>(s.m_p);
  689|   280k|        }
  690|   280k|        else {
  691|   280k|            return reinterpret_cast<T*>(s.m_fp);
  692|   280k|        }
  693|   280k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   280k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   280k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   280k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   280k|        {
  662|   280k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   782k|{
 5795|   782k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   782k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.29k, False: 775k]
  |  |  ------------------
  ------------------
 5796|  6.29k|        return unexpected(e);
 5797|  6.29k|    }
 5798|       |
 5799|   775k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 775k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   775k|    return skip_classic_whitespace(range);
 5804|   775k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   243k|    {
 5871|   243k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   243k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   243k|            auto rd = make_reader<T, char_type>();
 5876|   243k|            return impl(rd, range, value);
 5877|   243k|        }
 5878|   243k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   243k|            auto rd = make_reader<T, char_type>();
 5880|   243k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 243k, False: 0]
  ------------------
 5881|   243k|                return impl(rd, range, value);
 5882|   243k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   243k|        else {
 5889|   243k|            SCN_EXPECT(false);
 5890|   243k|            SCN_UNREACHABLE;
 5891|   243k|        }
 5892|   243k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   243k|    {
 5863|   243k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.19k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.19k|    }                                                  \
  |  |  |  | 3671|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   240k|                        .transform_error(make_eof_scan_error));
 5865|   240k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   243k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   240k|    {
 4152|   240k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   240k|        float_reader<CharT> rd{};
 4155|   240k|        return read_impl<Range>(
 4156|   240k|            range, rd,
 4157|   240k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   240k|                return r.read_source(SCN_FWD(args)...);
 4159|   240k|            },
 4160|   240k|            value);
 4161|   240k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   240k|    {
  754|   240k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   240k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   240k|              cvref<T> obj = *get<T>(fn);
  745|   240k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   240k|                  obj(static_cast<decltype(args)>(args)...);
  747|   240k|              }
  748|   240k|              else {
  749|   240k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   240k|              }
  751|   240k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   240k|    {
  684|   240k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   240k|            return static_cast<T*>(s.m_cp);
  686|   240k|        }
  687|   240k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   240k|            return static_cast<T*>(s.m_p);
  689|   240k|        }
  690|   240k|        else {
  691|   240k|            return reinterpret_cast<T*>(s.m_fp);
  692|   240k|        }
  693|   240k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   240k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   240k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   240k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   240k|        {
  662|   240k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   267k|    {
 5871|   267k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   267k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   267k|            auto rd = make_reader<T, char_type>();
 5876|   267k|            return impl(rd, range, value);
 5877|   267k|        }
 5878|   267k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   267k|            auto rd = make_reader<T, char_type>();
 5880|   267k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 267k, False: 0]
  ------------------
 5881|   267k|                return impl(rd, range, value);
 5882|   267k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   267k|        else {
 5889|   267k|            SCN_EXPECT(false);
 5890|   267k|            SCN_UNREACHABLE;
 5891|   267k|        }
 5892|   267k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   267k|    {
 5863|   267k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.52k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.52k|    }                                                  \
  |  |  |  | 3671|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   265k|                        .transform_error(make_eof_scan_error));
 5865|   265k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   267k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   265k|    {
 4152|   265k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   265k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   265k|        float_reader<CharT> rd{};
 4155|   265k|        return read_impl<Range>(
 4156|   265k|            range, rd,
 4157|   265k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   265k|                return r.read_source(SCN_FWD(args)...);
 4159|   265k|            },
 4160|   265k|            value);
 4161|   265k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   265k|    {
  754|   265k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   265k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   265k|              cvref<T> obj = *get<T>(fn);
  745|   265k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   265k|                  obj(static_cast<decltype(args)>(args)...);
  747|   265k|              }
  748|   265k|              else {
  749|   265k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   265k|              }
  751|   265k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   265k|    {
  684|   265k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   265k|            return static_cast<T*>(s.m_cp);
  686|   265k|        }
  687|   265k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   265k|            return static_cast<T*>(s.m_p);
  689|   265k|        }
  690|   265k|        else {
  691|   265k|            return reinterpret_cast<T*>(s.m_fp);
  692|   265k|        }
  693|   265k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   265k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   265k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   265k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   265k|        {
  662|   265k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   271k|    {
 5871|   271k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   271k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   271k|            auto rd = make_reader<T, char_type>();
 5876|   271k|            return impl(rd, range, value);
 5877|   271k|        }
 5878|   271k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   271k|            auto rd = make_reader<T, char_type>();
 5880|   271k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 271k, False: 0]
  ------------------
 5881|   271k|                return impl(rd, range, value);
 5882|   271k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   271k|        else {
 5889|   271k|            SCN_EXPECT(false);
 5890|   271k|            SCN_UNREACHABLE;
 5891|   271k|        }
 5892|   271k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   271k|    {
 5863|   271k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.68k|    }                                                  \
  |  |  |  | 3671|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   268k|                        .transform_error(make_eof_scan_error));
 5865|   268k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   271k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   268k|    {
 4152|   268k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   268k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   268k|        float_reader<CharT> rd{};
 4155|   268k|        return read_impl<Range>(
 4156|   268k|            range, rd,
 4157|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   268k|                return r.read_source(SCN_FWD(args)...);
 4159|   268k|            },
 4160|   268k|            value);
 4161|   268k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   268k|    {
  754|   268k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|   268k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   268k|                  obj(static_cast<decltype(args)>(args)...);
  747|   268k|              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   268k|    {
  684|   268k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   268k|            return static_cast<T*>(s.m_cp);
  686|   268k|        }
  687|   268k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   268k|            return static_cast<T*>(s.m_p);
  689|   268k|        }
  690|   268k|        else {
  691|   268k|            return reinterpret_cast<T*>(s.m_fp);
  692|   268k|        }
  693|   268k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   268k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   268k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   268k|        {
  662|   268k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.89M|    {
 2879|  1.89M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.57M|    {
 2883|  5.57M|        return m_current;
 2884|  5.57M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.67M|    {
 2888|  3.67M|        return m_range.end();
 2889|  3.67M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.78M|    {
 2903|  1.78M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.78M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.78M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.78M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.78M|        }
 2909|  1.78M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.78M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.89M|    {
 2893|  1.89M|        return ranges::subrange{begin(), end()};
 2894|  1.89M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.89M|    {
 6037|  1.89M|        const bool need_skipped_width =
 6038|  1.89M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.89M]
  |  Branch (6038:33): [True: 0, False: 1.89M]
  ------------------
 6039|  1.89M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.89M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.89M]
  ------------------
 6043|  1.89M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.89M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.89M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.89M, False: 0]
  |  Branch (6047:56): [True: 1.89M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.89M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.89M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.76M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.89M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.89M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.89M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.9k, False: 1.87M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.9k|    }                                                  \
  |  |  |  | 3671|  1.89M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.76M|                            make_eof_scan_error));
 6058|       |
 6059|  3.76M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.87M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.87M|            return result_type{it, 0};
 6067|  3.76M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.89M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.76M|    {
 6079|  1.76M|        const bool need_skipped_width =
 6080|  1.76M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.76M]
  |  Branch (6080:33): [True: 0, False: 1.76M]
  ------------------
 6081|  1.76M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.76M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.76M]
  ------------------
 6084|  1.76M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.76M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.76M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.76M, False: 0]
  ------------------
 6093|  1.76M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.76M]
  ------------------
 6094|  1.76M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.76M|        return result_type{rng.begin(), 0};
 6118|  1.76M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   601k|    {
 6193|   601k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   601k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   601k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   601k|            auto rd = make_reader<T, char_type>();
 6198|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 601k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   601k|            return impl(rd, range, value);
 6203|   601k|        }
 6204|   601k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   601k|            auto rd = make_reader<T, char_type>();
 6206|   601k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   601k|                return unexpected(e);
 6208|   601k|            }
 6209|       |
 6210|   601k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   601k|                specs.width != 0) {
 6212|   601k|                return impl(rd, range, value);
 6213|   601k|            }
 6214|       |
 6215|   601k|            auto crange = get_as_contiguous(range);
 6216|   601k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   601k|            return ranges::next(range.begin(),
 6218|   601k|                                ranges::distance(crange.begin(), it));
 6219|   601k|        }
 6220|   601k|        else {
 6221|   601k|            SCN_EXPECT(false);
 6222|   601k|            SCN_UNREACHABLE;
 6223|   601k|        }
 6224|   601k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   601k|    {
 6124|   601k|        const bool need_skipped_width =
 6125|   601k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 601k]
  |  Branch (6125:33): [True: 0, False: 601k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   601k|        auto it = rng.begin();
 6129|   601k|        std::ptrdiff_t prefix_width = 0;
 6130|   601k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 601k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   601k|        else {
 6138|   601k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.73k, False: 595k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.73k|    }                                                  \
  |  |  |  | 3671|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   595k|            std::tie(it, prefix_width) = prefix_result;
 6140|   595k|        }
 6141|   595k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   595k|        std::ptrdiff_t value_width = 0;
 6145|   595k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 595k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   595k|        else {
 6161|   595k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 30.0k, False: 565k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  30.0k|    }                                                  \
  |  | 3671|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   565k|                                             specs, value, loc));
 6163|       |
 6164|   565k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 565k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   565k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   565k|        std::ptrdiff_t postfix_width = 0;
 6173|   565k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 560k, False: 4.77k]
  ------------------
 6174|   560k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   560k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   560k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   560k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   560k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 560k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   560k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   560k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   560k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   560k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   560k|                                 value_width));
 6178|   560k|            std::tie(it, postfix_width) = postfix_result;
 6179|   560k|        }
 6180|       |
 6181|   565k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   565k|                                                 value_width, postfix_width);
 6183|   565k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 565k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   565k|        return it;
 6188|   565k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   642k|    {
 6193|   642k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   642k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   642k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   642k|            auto rd = make_reader<T, char_type>();
 6198|   642k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 642k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   642k|            return impl(rd, range, value);
 6203|   642k|        }
 6204|   642k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   642k|            auto rd = make_reader<T, char_type>();
 6206|   642k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   642k|                return unexpected(e);
 6208|   642k|            }
 6209|       |
 6210|   642k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   642k|                specs.width != 0) {
 6212|   642k|                return impl(rd, range, value);
 6213|   642k|            }
 6214|       |
 6215|   642k|            auto crange = get_as_contiguous(range);
 6216|   642k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   642k|            return ranges::next(range.begin(),
 6218|   642k|                                ranges::distance(crange.begin(), it));
 6219|   642k|        }
 6220|   642k|        else {
 6221|   642k|            SCN_EXPECT(false);
 6222|   642k|            SCN_UNREACHABLE;
 6223|   642k|        }
 6224|   642k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   642k|    {
 6124|   642k|        const bool need_skipped_width =
 6125|   642k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 642k]
  |  Branch (6125:33): [True: 0, False: 642k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   642k|        auto it = rng.begin();
 6129|   642k|        std::ptrdiff_t prefix_width = 0;
 6130|   642k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 642k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   642k|        else {
 6138|   642k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   642k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   642k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   642k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.41k, False: 635k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.41k|    }                                                  \
  |  |  |  | 3671|   642k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   635k|            std::tie(it, prefix_width) = prefix_result;
 6140|   635k|        }
 6141|   635k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   635k|        std::ptrdiff_t value_width = 0;
 6145|   635k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 635k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   635k|        else {
 6161|   635k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   635k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   635k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.3k, False: 606k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  29.3k|    }                                                  \
  |  | 3671|   635k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   606k|                                             specs, value, loc));
 6163|       |
 6164|   606k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 606k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   606k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   606k|        std::ptrdiff_t postfix_width = 0;
 6173|   606k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 601k, False: 5.33k]
  ------------------
 6174|   601k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 601k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   601k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   601k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   601k|                                 value_width));
 6178|   601k|            std::tie(it, postfix_width) = postfix_result;
 6179|   601k|        }
 6180|       |
 6181|   606k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   606k|                                                 value_width, postfix_width);
 6183|   606k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 606k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   606k|        return it;
 6188|   606k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   649k|    {
 6193|   649k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   649k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   649k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   649k|            auto rd = make_reader<T, char_type>();
 6198|   649k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 649k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   649k|            return impl(rd, range, value);
 6203|   649k|        }
 6204|   649k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   649k|            auto rd = make_reader<T, char_type>();
 6206|   649k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   649k|                return unexpected(e);
 6208|   649k|            }
 6209|       |
 6210|   649k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   649k|                specs.width != 0) {
 6212|   649k|                return impl(rd, range, value);
 6213|   649k|            }
 6214|       |
 6215|   649k|            auto crange = get_as_contiguous(range);
 6216|   649k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   649k|            return ranges::next(range.begin(),
 6218|   649k|                                ranges::distance(crange.begin(), it));
 6219|   649k|        }
 6220|   649k|        else {
 6221|   649k|            SCN_EXPECT(false);
 6222|   649k|            SCN_UNREACHABLE;
 6223|   649k|        }
 6224|   649k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   649k|    {
 6124|   649k|        const bool need_skipped_width =
 6125|   649k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 649k]
  |  Branch (6125:33): [True: 0, False: 649k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   649k|        auto it = rng.begin();
 6129|   649k|        std::ptrdiff_t prefix_width = 0;
 6130|   649k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 649k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   649k|        else {
 6138|   649k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   649k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   649k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   649k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.76k, False: 642k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.76k|    }                                                  \
  |  |  |  | 3671|   649k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   642k|            std::tie(it, prefix_width) = prefix_result;
 6140|   642k|        }
 6141|   642k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   642k|        std::ptrdiff_t value_width = 0;
 6145|   642k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 642k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   642k|        else {
 6161|   642k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   642k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   642k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 29.0k, False: 613k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  29.0k|    }                                                  \
  |  | 3671|   642k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   613k|                                             specs, value, loc));
 6163|       |
 6164|   613k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 613k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   613k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   613k|        std::ptrdiff_t postfix_width = 0;
 6173|   613k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 607k, False: 5.65k]
  ------------------
 6174|   607k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   607k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   607k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   607k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 607k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   607k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   607k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   607k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   607k|                                 value_width));
 6178|   607k|            std::tie(it, postfix_width) = postfix_result;
 6179|   607k|        }
 6180|       |
 6181|   613k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   613k|                                                 value_width, postfix_width);
 6183|   613k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 613k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   613k|        return it;
 6188|   613k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  92.9k|{
 5795|  92.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177, False: 92.7k]
  |  |  ------------------
  ------------------
 5796|    177|        return unexpected(e);
 5797|    177|    }
 5798|       |
 5799|  92.7k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 92.7k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  92.7k|    return skip_classic_whitespace(range);
 5804|  92.7k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  30.8k|    {
 5871|  30.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  30.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.8k|            auto rd = make_reader<T, char_type>();
 5876|  30.8k|            return impl(rd, range, value);
 5877|  30.8k|        }
 5878|  30.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  30.8k|            auto rd = make_reader<T, char_type>();
 5880|  30.8k|            if (!is_segment_contiguous(range)) {
 5881|  30.8k|                return impl(rd, range, value);
 5882|  30.8k|            }
 5883|  30.8k|            auto crange = get_as_contiguous(range);
 5884|  30.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  30.8k|            return ranges::next(range.begin(),
 5886|  30.8k|                                ranges::distance(crange.begin(), it));
 5887|  30.8k|        }
 5888|  30.8k|        else {
 5889|  30.8k|            SCN_EXPECT(false);
 5890|  30.8k|            SCN_UNREACHABLE;
 5891|  30.8k|        }
 5892|  30.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  30.8k|    {
 5863|  30.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.6k|                        .transform_error(make_eof_scan_error));
 5865|  30.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  30.6k|    {
 4152|  30.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.6k|        float_reader<CharT> rd{};
 4155|  30.6k|        return read_impl<Range>(
 4156|  30.6k|            range, rd,
 4157|  30.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.6k|            },
 4160|  30.6k|            value);
 4161|  30.6k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   184k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  30.6k|    {
  754|  30.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  30.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.6k|              cvref<T> obj = *get<T>(fn);
  745|  30.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.6k|              }
  748|  30.6k|              else {
  749|  30.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.6k|              }
  751|  30.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.6k|    {
  684|  30.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.6k|            return static_cast<T*>(s.m_cp);
  686|  30.6k|        }
  687|  30.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.6k|            return static_cast<T*>(s.m_p);
  689|  30.6k|        }
  690|  30.6k|        else {
  691|  30.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.6k|        }
  693|  30.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  30.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  30.6k|        {
  662|  30.6k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  30.9k|    {
 5871|  30.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  30.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.9k|            auto rd = make_reader<T, char_type>();
 5876|  30.9k|            return impl(rd, range, value);
 5877|  30.9k|        }
 5878|  30.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  30.9k|            auto rd = make_reader<T, char_type>();
 5880|  30.9k|            if (!is_segment_contiguous(range)) {
 5881|  30.9k|                return impl(rd, range, value);
 5882|  30.9k|            }
 5883|  30.9k|            auto crange = get_as_contiguous(range);
 5884|  30.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  30.9k|            return ranges::next(range.begin(),
 5886|  30.9k|                                ranges::distance(crange.begin(), it));
 5887|  30.9k|        }
 5888|  30.9k|        else {
 5889|  30.9k|            SCN_EXPECT(false);
 5890|  30.9k|            SCN_UNREACHABLE;
 5891|  30.9k|        }
 5892|  30.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  30.9k|    {
 5863|  30.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 210, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    210|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    210|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    210|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    210|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    210|    }                                                  \
  |  |  |  | 3671|  30.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.7k|                        .transform_error(make_eof_scan_error));
 5865|  30.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  30.7k|    {
 4152|  30.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.7k|        float_reader<CharT> rd{};
 4155|  30.7k|        return read_impl<Range>(
 4156|  30.7k|            range, rd,
 4157|  30.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.7k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.7k|            },
 4160|  30.7k|            value);
 4161|  30.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  30.7k|    {
  754|  30.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  30.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.7k|              cvref<T> obj = *get<T>(fn);
  745|  30.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.7k|              }
  748|  30.7k|              else {
  749|  30.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.7k|              }
  751|  30.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.7k|    {
  684|  30.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.7k|            return static_cast<T*>(s.m_cp);
  686|  30.7k|        }
  687|  30.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.7k|            return static_cast<T*>(s.m_p);
  689|  30.7k|        }
  690|  30.7k|        else {
  691|  30.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.7k|        }
  693|  30.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  30.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  30.7k|        {
  662|  30.7k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  31.1k|    {
 5871|  31.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  31.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  31.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  31.1k|            auto rd = make_reader<T, char_type>();
 5876|  31.1k|            return impl(rd, range, value);
 5877|  31.1k|        }
 5878|  31.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  31.1k|            auto rd = make_reader<T, char_type>();
 5880|  31.1k|            if (!is_segment_contiguous(range)) {
 5881|  31.1k|                return impl(rd, range, value);
 5882|  31.1k|            }
 5883|  31.1k|            auto crange = get_as_contiguous(range);
 5884|  31.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  31.1k|            return ranges::next(range.begin(),
 5886|  31.1k|                                ranges::distance(crange.begin(), it));
 5887|  31.1k|        }
 5888|  31.1k|        else {
 5889|  31.1k|            SCN_EXPECT(false);
 5890|  31.1k|            SCN_UNREACHABLE;
 5891|  31.1k|        }
 5892|  31.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  31.1k|    {
 5863|  31.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 30.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    216|    }                                                  \
  |  |  |  | 3671|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.9k|                        .transform_error(make_eof_scan_error));
 5865|  30.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  31.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  30.9k|    {
 4152|  30.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.9k|        float_reader<CharT> rd{};
 4155|  30.9k|        return read_impl<Range>(
 4156|  30.9k|            range, rd,
 4157|  30.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.9k|            },
 4160|  30.9k|            value);
 4161|  30.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  30.9k|    {
  754|  30.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.9k|              cvref<T> obj = *get<T>(fn);
  745|  30.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.9k|              }
  748|  30.9k|              else {
  749|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.9k|              }
  751|  30.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.9k|    {
  684|  30.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.9k|            return static_cast<T*>(s.m_cp);
  686|  30.9k|        }
  687|  30.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.9k|            return static_cast<T*>(s.m_p);
  689|  30.9k|        }
  690|  30.9k|        else {
  691|  30.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.9k|        }
  693|  30.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  30.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  30.9k|        {
  662|  30.9k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   291k|    {
 2879|   291k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   660k|    {
 2883|   660k|        return m_current;
 2884|   660k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   368k|    {
 2888|   368k|        return m_range.end();
 2889|   368k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  76.8k|    {
 2903|  76.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  76.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  76.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 76.8k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  76.8k|        }
 2909|  76.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  76.8k|    static_cast<    \
  |  |  929|  76.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  76.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   291k|    {
 2893|   291k|        return ranges::subrange{begin(), end()};
 2894|   291k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   291k|    {
 6037|   291k|        const bool need_skipped_width =
 6038|   291k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 291k]
  |  Branch (6038:33): [True: 0, False: 291k]
  ------------------
 6039|   291k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   291k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 291k]
  ------------------
 6043|   291k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 291k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   291k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 291k, False: 0]
  |  Branch (6047:56): [True: 291k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   291k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 291k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   581k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.84k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.84k|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   581k|                            make_eof_scan_error));
 6058|       |
 6059|   581k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 289k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   289k|            return result_type{it, 0};
 6067|   581k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   291k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  76.4k|    {
 6079|  76.4k|        const bool need_skipped_width =
 6080|  76.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 76.4k]
  |  Branch (6080:33): [True: 0, False: 76.4k]
  ------------------
 6081|  76.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  76.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 76.4k]
  ------------------
 6084|  76.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 76.4k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  76.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 76.4k, False: 0]
  ------------------
 6093|  76.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 76.4k]
  ------------------
 6094|  76.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  76.4k|        return result_type{rng.begin(), 0};
 6118|  76.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|  97.0k|    {
 6193|  97.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  97.0k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.0k|            auto rd = make_reader<T, char_type>();
 6198|  97.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.0k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  97.0k|            return impl(rd, range, value);
 6203|  97.0k|        }
 6204|  97.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  97.0k|            auto rd = make_reader<T, char_type>();
 6206|  97.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  97.0k|                return unexpected(e);
 6208|  97.0k|            }
 6209|       |
 6210|  97.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  97.0k|                specs.width != 0) {
 6212|  97.0k|                return impl(rd, range, value);
 6213|  97.0k|            }
 6214|       |
 6215|  97.0k|            auto crange = get_as_contiguous(range);
 6216|  97.0k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  97.0k|            return ranges::next(range.begin(),
 6218|  97.0k|                                ranges::distance(crange.begin(), it));
 6219|  97.0k|        }
 6220|  97.0k|        else {
 6221|  97.0k|            SCN_EXPECT(false);
 6222|  97.0k|            SCN_UNREACHABLE;
 6223|  97.0k|        }
 6224|  97.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  97.0k|    {
 6124|  97.0k|        const bool need_skipped_width =
 6125|  97.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.0k]
  |  Branch (6125:33): [True: 0, False: 97.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.0k|        auto it = rng.begin();
 6129|  97.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.0k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.0k|        else {
 6138|  97.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 588, False: 96.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    588|    }                                                  \
  |  |  |  | 3671|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.4k|        }
 6141|  96.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.4k|        std::ptrdiff_t value_width = 0;
 6145|  96.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.4k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.4k|        else {
 6161|  96.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 71.0k, False: 25.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  71.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  71.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  71.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  71.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  71.0k|    }                                                  \
  |  | 3671|  96.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.4k|                                             specs, value, loc));
 6163|       |
 6164|  25.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.2k, False: 150]
  ------------------
 6174|  25.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.2k|                                 value_width));
 6178|  25.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.2k|        }
 6180|       |
 6181|  25.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.4k|                                                 value_width, postfix_width);
 6183|  25.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.4k|        return it;
 6188|  25.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  97.2k|    {
 6193|  97.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  97.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.2k|            auto rd = make_reader<T, char_type>();
 6198|  97.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  97.2k|            return impl(rd, range, value);
 6203|  97.2k|        }
 6204|  97.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  97.2k|            auto rd = make_reader<T, char_type>();
 6206|  97.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  97.2k|                return unexpected(e);
 6208|  97.2k|            }
 6209|       |
 6210|  97.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  97.2k|                specs.width != 0) {
 6212|  97.2k|                return impl(rd, range, value);
 6213|  97.2k|            }
 6214|       |
 6215|  97.2k|            auto crange = get_as_contiguous(range);
 6216|  97.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  97.2k|            return ranges::next(range.begin(),
 6218|  97.2k|                                ranges::distance(crange.begin(), it));
 6219|  97.2k|        }
 6220|  97.2k|        else {
 6221|  97.2k|            SCN_EXPECT(false);
 6222|  97.2k|            SCN_UNREACHABLE;
 6223|  97.2k|        }
 6224|  97.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  97.2k|    {
 6124|  97.2k|        const bool need_skipped_width =
 6125|  97.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.2k]
  |  Branch (6125:33): [True: 0, False: 97.2k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.2k|        auto it = rng.begin();
 6129|  97.2k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.2k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.2k|        else {
 6138|  97.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 620, False: 96.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    620|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    620|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    620|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    620|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    620|    }                                                  \
  |  |  |  | 3671|  97.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.5k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.5k|        }
 6141|  96.5k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.5k|        std::ptrdiff_t value_width = 0;
 6145|  96.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.5k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.5k|        else {
 6161|  96.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.9k, False: 25.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  70.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  70.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  70.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  70.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  70.9k|    }                                                  \
  |  | 3671|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.6k|                                             specs, value, loc));
 6163|       |
 6164|  25.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.4k, False: 160]
  ------------------
 6174|  25.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.4k|                                 value_width));
 6178|  25.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.4k|        }
 6180|       |
 6181|  25.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.6k|                                                 value_width, postfix_width);
 6183|  25.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.6k|        return it;
 6188|  25.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|  97.4k|    {
 6193|  97.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  97.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.4k|            auto rd = make_reader<T, char_type>();
 6198|  97.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.4k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  97.4k|            return impl(rd, range, value);
 6203|  97.4k|        }
 6204|  97.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  97.4k|            auto rd = make_reader<T, char_type>();
 6206|  97.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  97.4k|                return unexpected(e);
 6208|  97.4k|            }
 6209|       |
 6210|  97.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  97.4k|                specs.width != 0) {
 6212|  97.4k|                return impl(rd, range, value);
 6213|  97.4k|            }
 6214|       |
 6215|  97.4k|            auto crange = get_as_contiguous(range);
 6216|  97.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  97.4k|            return ranges::next(range.begin(),
 6218|  97.4k|                                ranges::distance(crange.begin(), it));
 6219|  97.4k|        }
 6220|  97.4k|        else {
 6221|  97.4k|            SCN_EXPECT(false);
 6222|  97.4k|            SCN_UNREACHABLE;
 6223|  97.4k|        }
 6224|  97.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  97.4k|    {
 6124|  97.4k|        const bool need_skipped_width =
 6125|  97.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.4k]
  |  Branch (6125:33): [True: 0, False: 97.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.4k|        auto it = rng.begin();
 6129|  97.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.4k|        else {
 6138|  97.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 632, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    632|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    632|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    632|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    632|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    632|    }                                                  \
  |  |  |  | 3671|  97.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.8k|        }
 6141|  96.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.8k|        std::ptrdiff_t value_width = 0;
 6145|  96.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.8k|        else {
 6161|  96.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.9k, False: 25.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  70.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  70.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  70.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  70.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  70.9k|    }                                                  \
  |  | 3671|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  25.8k|                                             specs, value, loc));
 6163|       |
 6164|  25.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 25.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  25.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  25.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  25.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 25.6k, False: 166]
  ------------------
 6174|  25.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  25.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  25.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  25.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  25.6k|                                 value_width));
 6178|  25.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  25.6k|        }
 6180|       |
 6181|  25.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  25.8k|                                                 value_width, postfix_width);
 6183|  25.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 25.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  25.8k|        return it;
 6188|  25.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  92.8k|{
 5795|  92.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177, False: 92.6k]
  |  |  ------------------
  ------------------
 5796|    177|        return unexpected(e);
 5797|    177|    }
 5798|       |
 5799|  92.6k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 92.6k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  92.6k|    return skip_classic_whitespace(range);
 5804|  92.6k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  30.8k|    {
 5871|  30.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.8k|            auto rd = make_reader<T, char_type>();
 5876|  30.8k|            return impl(rd, range, value);
 5877|  30.8k|        }
 5878|  30.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  30.8k|            auto rd = make_reader<T, char_type>();
 5880|  30.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 30.8k, False: 0]
  ------------------
 5881|  30.8k|                return impl(rd, range, value);
 5882|  30.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  30.8k|        else {
 5889|  30.8k|            SCN_EXPECT(false);
 5890|  30.8k|            SCN_UNREACHABLE;
 5891|  30.8k|        }
 5892|  30.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  30.8k|    {
 5863|  30.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.6k|                        .transform_error(make_eof_scan_error));
 5865|  30.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  30.6k|    {
 4152|  30.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.6k|        float_reader<CharT> rd{};
 4155|  30.6k|        return read_impl<Range>(
 4156|  30.6k|            range, rd,
 4157|  30.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.6k|            },
 4160|  30.6k|            value);
 4161|  30.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  30.6k|    {
  754|  30.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  30.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.6k|              cvref<T> obj = *get<T>(fn);
  745|  30.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.6k|              }
  748|  30.6k|              else {
  749|  30.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.6k|              }
  751|  30.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.6k|    {
  684|  30.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.6k|            return static_cast<T*>(s.m_cp);
  686|  30.6k|        }
  687|  30.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.6k|            return static_cast<T*>(s.m_p);
  689|  30.6k|        }
  690|  30.6k|        else {
  691|  30.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.6k|        }
  693|  30.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  30.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  30.6k|        {
  662|  30.6k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  30.9k|    {
 5871|  30.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.9k|            auto rd = make_reader<T, char_type>();
 5876|  30.9k|            return impl(rd, range, value);
 5877|  30.9k|        }
 5878|  30.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  30.9k|            auto rd = make_reader<T, char_type>();
 5880|  30.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 30.9k, False: 0]
  ------------------
 5881|  30.9k|                return impl(rd, range, value);
 5882|  30.9k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  30.9k|        else {
 5889|  30.9k|            SCN_EXPECT(false);
 5890|  30.9k|            SCN_UNREACHABLE;
 5891|  30.9k|        }
 5892|  30.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  30.9k|    {
 5863|  30.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 210, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    210|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    210|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    210|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    210|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    210|    }                                                  \
  |  |  |  | 3671|  30.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.7k|                        .transform_error(make_eof_scan_error));
 5865|  30.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  30.7k|    {
 4152|  30.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.7k|        float_reader<CharT> rd{};
 4155|  30.7k|        return read_impl<Range>(
 4156|  30.7k|            range, rd,
 4157|  30.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.7k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.7k|            },
 4160|  30.7k|            value);
 4161|  30.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  30.7k|    {
  754|  30.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  30.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.7k|              cvref<T> obj = *get<T>(fn);
  745|  30.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.7k|              }
  748|  30.7k|              else {
  749|  30.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.7k|              }
  751|  30.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.7k|    {
  684|  30.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.7k|            return static_cast<T*>(s.m_cp);
  686|  30.7k|        }
  687|  30.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.7k|            return static_cast<T*>(s.m_p);
  689|  30.7k|        }
  690|  30.7k|        else {
  691|  30.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.7k|        }
  693|  30.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  30.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  30.7k|        {
  662|  30.7k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  31.0k|    {
 5871|  31.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  31.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  31.0k|            auto rd = make_reader<T, char_type>();
 5876|  31.0k|            return impl(rd, range, value);
 5877|  31.0k|        }
 5878|  31.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  31.0k|            auto rd = make_reader<T, char_type>();
 5880|  31.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 31.0k, False: 0]
  ------------------
 5881|  31.0k|                return impl(rd, range, value);
 5882|  31.0k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  31.0k|        else {
 5889|  31.0k|            SCN_EXPECT(false);
 5890|  31.0k|            SCN_UNREACHABLE;
 5891|  31.0k|        }
 5892|  31.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  31.0k|    {
 5863|  31.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    216|    }                                                  \
  |  |  |  | 3671|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.8k|                        .transform_error(make_eof_scan_error));
 5865|  30.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  31.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  30.8k|    {
 4152|  30.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.8k|        float_reader<CharT> rd{};
 4155|  30.8k|        return read_impl<Range>(
 4156|  30.8k|            range, rd,
 4157|  30.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.8k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.8k|            },
 4160|  30.8k|            value);
 4161|  30.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  30.8k|    {
  754|  30.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  30.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.8k|              cvref<T> obj = *get<T>(fn);
  745|  30.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.8k|              }
  748|  30.8k|              else {
  749|  30.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.8k|              }
  751|  30.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.8k|    {
  684|  30.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.8k|            return static_cast<T*>(s.m_cp);
  686|  30.8k|        }
  687|  30.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.8k|            return static_cast<T*>(s.m_p);
  689|  30.8k|        }
  690|  30.8k|        else {
  691|  30.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.8k|        }
  693|  30.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  30.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  30.8k|        {
  662|  30.8k|        }

LLVMFuzzerTestOneInput:
   54|  3.58k|{
   55|  3.58k|    scn::fuzz::run(data, size);
   56|  3.58k|    return 0;
   57|  3.58k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.58k|{
   33|  3.58k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.58k]
  |  Branch (33:35): [True: 0, False: 3.58k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.58k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.58k|    const auto& f =
   40|  3.58k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.58k|    do_basic_run(sv, f);
   42|       |
   43|  3.58k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.58k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.58k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.58k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.58k, False: 0]
  ------------------
   47|  3.58k|        do_basic_run(wsv_transcode, wf);
   48|  3.58k|    }
   49|  3.58k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.58k|{
   25|  3.58k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.58k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.58k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.58k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.58k|{
   25|  3.58k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.58k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.58k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.58k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  7.16k|{
   25|  7.16k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  7.16k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  7.16k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  7.16k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  7.16k|{
   25|  7.16k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  7.16k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  7.16k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  7.16k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.58k|{
   52|  3.58k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.58k|    string_buffer.resize(size);
   56|  3.58k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.58k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.58k|    const auto wsv_reinterpret_size =
   61|  3.58k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 73, False: 3.50k]
  ------------------
   62|  3.58k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.58k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.58k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.58k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.58k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.58k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.58k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.58k|{
  122|  3.58k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.58k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.58k|    buf.resize(sizeof...(Args));
  125|  3.58k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.58k|    return buf;
  127|  3.58k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.58k|{
  108|  3.58k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.58k|        return format_string_view_buffer;
  110|  3.58k|    }
  111|  3.58k|    else {
  112|  3.58k|        return wformat_string_view_buffer;
  113|  3.58k|    }
  114|  3.58k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.58k|{
  185|  3.58k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.58k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.58k|                                   format_strings);
  188|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   384k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   384k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   384k|            auto result = scn::scan<T>(
  139|   384k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   384k|                scn::runtime_format(f));
  141|   384k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 363k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   363k|            it = result->begin();
  145|   363k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   384k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   384k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   384k|            auto result = scn::scan<T>(
  154|   384k|                global_locale,
  155|   384k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   384k|                scn::runtime_format(f));
  157|   384k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 363k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   363k|            it = result->begin();
  161|   363k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  84.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  84.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  84.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  84.0k|            auto result = scn::scan_value<T>(
  170|  84.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  84.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 80.5k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  80.5k|            it = result->begin();
  175|  80.5k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   414k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   414k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   414k|            auto result = scn::scan<T>(
  139|   414k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   414k|                scn::runtime_format(f));
  141|   414k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 392k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   392k|            it = result->begin();
  145|   392k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   414k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   414k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   414k|            auto result = scn::scan<T>(
  154|   414k|                global_locale,
  155|   414k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   414k|                scn::runtime_format(f));
  157|   414k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 392k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   392k|            it = result->begin();
  161|   392k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  92.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  92.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  92.8k|            auto result = scn::scan_value<T>(
  170|  92.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  92.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 89.2k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  89.2k|            it = result->begin();
  175|  89.2k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   419k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   419k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   419k|            auto result = scn::scan<T>(
  139|   419k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   419k|                scn::runtime_format(f));
  141|   419k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 397k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   397k|            it = result->begin();
  145|   397k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   419k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   419k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   419k|            auto result = scn::scan<T>(
  154|   419k|                global_locale,
  155|   419k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   419k|                scn::runtime_format(f));
  157|   419k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 397k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   397k|            it = result->begin();
  161|   397k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  94.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  94.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  94.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  94.4k|            auto result = scn::scan_value<T>(
  170|  94.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  94.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 90.8k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  90.8k|            it = result->begin();
  175|  90.8k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   399k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   399k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   399k|            auto result = scn::scan<T>(
  139|   399k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   399k|                scn::runtime_format(f));
  141|   399k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 378k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   378k|            it = result->begin();
  145|   378k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   399k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   399k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   399k|            auto result = scn::scan<T>(
  154|   399k|                global_locale,
  155|   399k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   399k|                scn::runtime_format(f));
  157|   399k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 378k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   378k|            it = result->begin();
  161|   378k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  81.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  81.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  81.0k|            auto result = scn::scan_value<T>(
  170|  81.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  81.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 77.4k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  77.4k|            it = result->begin();
  175|  77.4k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   429k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   429k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   429k|            auto result = scn::scan<T>(
  139|   429k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   429k|                scn::runtime_format(f));
  141|   429k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 408k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   408k|            it = result->begin();
  145|   408k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   429k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   429k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   429k|            auto result = scn::scan<T>(
  154|   429k|                global_locale,
  155|   429k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   429k|                scn::runtime_format(f));
  157|   429k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 408k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   408k|            it = result->begin();
  161|   408k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  89.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  89.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  89.2k|            auto result = scn::scan_value<T>(
  170|  89.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  89.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 85.7k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  85.7k|            it = result->begin();
  175|  85.7k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.58k|{
  133|       |    // Regular scan
  134|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 21.4k, False: 3.58k]
  ------------------
  135|  21.4k|        auto it = scn::ranges::begin(source);
  136|   434k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   434k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   434k|            auto result = scn::scan<T>(
  139|   434k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   434k|                scn::runtime_format(f));
  141|   434k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 21.4k, False: 413k]
  ------------------
  142|  21.4k|                break;
  143|  21.4k|            }
  144|   413k|            it = result->begin();
  145|   413k|        }
  146|  21.4k|    }
  147|       |
  148|       |    // scan localized
  149|  21.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 21.4k, False: 3.58k]
  ------------------
  150|  21.4k|        auto it = scn::ranges::begin(source);
  151|   434k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   434k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   434k|            auto result = scn::scan<T>(
  154|   434k|                global_locale,
  155|   434k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   434k|                scn::runtime_format(f));
  157|   434k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 21.4k, False: 413k]
  ------------------
  158|  21.4k|                break;
  159|  21.4k|            }
  160|   413k|            it = result->begin();
  161|   413k|        }
  162|  21.4k|    }
  163|       |
  164|       |    // scan_value
  165|  3.58k|    {
  166|  3.58k|        auto it = scn::ranges::begin(source);
  167|  90.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  90.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  90.3k|            auto result = scn::scan_value<T>(
  170|  90.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  90.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.58k, False: 86.7k]
  ------------------
  172|  3.58k|                break;
  173|  3.58k|            }
  174|  86.7k|            it = result->begin();
  175|  86.7k|        }
  176|  3.58k|    }
  177|  3.58k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.58k|{
   90|  3.58k|    using char_type = ranges::range_value_t<Source>;
   91|  3.58k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.58k|    deque.clear();
   93|  3.58k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.58k|              std::back_inserter(deque));
   95|  3.58k|    return deque;
   96|  3.58k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.58k|{
   79|  3.58k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.58k|        return noncontiguous_buffer;
   81|  3.58k|    }
   82|  3.58k|    else {
   83|  3.58k|        return wnoncontiguous_buffer;
   84|  3.58k|    }
   85|  3.58k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.58k|{
  122|  3.58k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.58k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.58k|    buf.resize(sizeof...(Args));
  125|  3.58k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.58k|    return buf;
  127|  3.58k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.58k|{
  108|  3.58k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.58k|        return format_string_view_buffer;
  110|  3.58k|    }
  111|  3.58k|    else {
  112|  3.58k|        return wformat_string_view_buffer;
  113|  3.58k|    }
  114|  3.58k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  7.16k|{
  185|  7.16k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  7.16k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  7.16k|                                   format_strings);
  188|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  58.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.8k|            auto result = scn::scan<T>(
  139|  58.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.8k|                scn::runtime_format(f));
  141|  58.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 15.8k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  15.8k|            it = result->begin();
  145|  15.8k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  58.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.8k|            auto result = scn::scan<T>(
  154|  58.8k|                global_locale,
  155|  58.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.8k|                scn::runtime_format(f));
  157|  58.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 15.8k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  15.8k|            it = result->begin();
  161|  15.8k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.2k|            auto result = scn::scan_value<T>(
  170|  10.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.12k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.12k|            it = result->begin();
  175|  3.12k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  58.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.9k|            auto result = scn::scan<T>(
  139|  58.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.9k|                scn::runtime_format(f));
  141|  58.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 15.9k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  15.9k|            it = result->begin();
  145|  15.9k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  58.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.9k|            auto result = scn::scan<T>(
  154|  58.9k|                global_locale,
  155|  58.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.9k|                scn::runtime_format(f));
  157|  58.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 15.9k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  15.9k|            it = result->begin();
  161|  15.9k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.3k|            auto result = scn::scan_value<T>(
  170|  10.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.16k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.16k|            it = result->begin();
  175|  3.16k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  59.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.1k|            auto result = scn::scan<T>(
  139|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.1k|                scn::runtime_format(f));
  141|  59.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 16.1k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  16.1k|            it = result->begin();
  145|  16.1k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  59.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.1k|            auto result = scn::scan<T>(
  154|  59.1k|                global_locale,
  155|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.1k|                scn::runtime_format(f));
  157|  59.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 16.1k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  16.1k|            it = result->begin();
  161|  16.1k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.3k|            auto result = scn::scan_value<T>(
  170|  10.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.21k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.21k|            it = result->begin();
  175|  3.21k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  58.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.7k|            auto result = scn::scan<T>(
  139|  58.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.7k|                scn::runtime_format(f));
  141|  58.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 15.8k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  15.8k|            it = result->begin();
  145|  15.8k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  58.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.7k|            auto result = scn::scan<T>(
  154|  58.7k|                global_locale,
  155|  58.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.7k|                scn::runtime_format(f));
  157|  58.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 15.8k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  15.8k|            it = result->begin();
  161|  15.8k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.2k|            auto result = scn::scan_value<T>(
  170|  10.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.11k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.11k|            it = result->begin();
  175|  3.11k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  58.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  58.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  58.8k|            auto result = scn::scan<T>(
  139|  58.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  58.8k|                scn::runtime_format(f));
  141|  58.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 15.9k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  15.9k|            it = result->begin();
  145|  15.9k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  58.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  58.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  58.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  58.8k|            auto result = scn::scan<T>(
  154|  58.8k|                global_locale,
  155|  58.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  58.8k|                scn::runtime_format(f));
  157|  58.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 15.9k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  15.9k|            it = result->begin();
  161|  15.9k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.3k|            auto result = scn::scan_value<T>(
  170|  10.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.14k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.14k|            it = result->begin();
  175|  3.14k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  7.16k|{
  133|       |    // Regular scan
  134|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 42.9k, False: 7.16k]
  ------------------
  135|  42.9k|        auto it = scn::ranges::begin(source);
  136|  59.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.0k|            auto result = scn::scan<T>(
  139|  59.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.0k|                scn::runtime_format(f));
  141|  59.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 42.9k, False: 16.1k]
  ------------------
  142|  42.9k|                break;
  143|  42.9k|            }
  144|  16.1k|            it = result->begin();
  145|  16.1k|        }
  146|  42.9k|    }
  147|       |
  148|       |    // scan localized
  149|  42.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 42.9k, False: 7.16k]
  ------------------
  150|  42.9k|        auto it = scn::ranges::begin(source);
  151|  59.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.0k|            auto result = scn::scan<T>(
  154|  59.0k|                global_locale,
  155|  59.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.0k|                scn::runtime_format(f));
  157|  59.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 42.9k, False: 16.1k]
  ------------------
  158|  42.9k|                break;
  159|  42.9k|            }
  160|  16.1k|            it = result->begin();
  161|  16.1k|        }
  162|  42.9k|    }
  163|       |
  164|       |    // scan_value
  165|  7.16k|    {
  166|  7.16k|        auto it = scn::ranges::begin(source);
  167|  10.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.3k|            auto result = scn::scan_value<T>(
  170|  10.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 7.16k, False: 3.20k]
  ------------------
  172|  7.16k|                break;
  173|  7.16k|            }
  174|  3.20k|            it = result->begin();
  175|  3.20k|        }
  176|  7.16k|    }
  177|  7.16k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  7.16k|{
   90|  7.16k|    using char_type = ranges::range_value_t<Source>;
   91|  7.16k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  7.16k|    deque.clear();
   93|  7.16k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  7.16k|              std::back_inserter(deque));
   95|  7.16k|    return deque;
   96|  7.16k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  7.16k|{
   79|  7.16k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  7.16k|        return noncontiguous_buffer;
   81|  7.16k|    }
   82|  7.16k|    else {
   83|  7.16k|        return wnoncontiguous_buffer;
   84|  7.16k|    }
   85|  7.16k|}

