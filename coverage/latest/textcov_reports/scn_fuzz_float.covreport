_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.01M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.01M|  chars_format const fmt = options.format;
  277|  2.01M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.01M|  parsed_number_string_t<UC> answer;
  280|  2.01M|  answer.valid = false;
  281|  2.01M|  answer.too_many_digits = false;
  282|  2.01M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.01M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.01M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.01M|  UC const * const start_digits = p;
  303|       |
  304|  2.01M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  12.0M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 11.0M, False: 964k]
  |  Branch (306:25): [True: 9.99M, False: 1.05M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  9.99M|    i = 10 * i +
  310|  9.99M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  9.99M|    ++p;
  312|  9.99M|  }
  313|  2.01M|  UC const * const end_of_integer_part = p;
  314|  2.01M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.01M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.01M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.01M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.01M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.01M|  int64_t exponent = 0;
  324|  2.01M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.05M, False: 964k]
  |  Branch (324:49): [True: 341k, False: 711k]
  ------------------
  325|  2.01M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 341k, False: 1.67M]
  ------------------
  326|   341k|    ++p;
  327|   341k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   341k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.36M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.17M, False: 198k]
  |  Branch (332:27): [True: 1.02M, False: 142k]
  ------------------
  333|  1.02M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.02M|      ++p;
  335|  1.02M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.02M|    }
  337|   341k|    exponent = before - p;
  338|   341k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   341k|    digit_count -= exponent;
  340|   341k|  }
  341|  2.01M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.01M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.01M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.01M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.01M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.01M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.01M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.77M, False: 242k]
  ------------------
  352|  2.01M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 854k, False: 921k]
  ------------------
  353|  2.01M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 228k, False: 626k]
  |  Branch (353:29): [True: 78.0k, False: 548k]
  ------------------
  354|  2.01M|       ||
  355|  2.01M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.71M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.71M]
  ------------------
  356|  1.71M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.71M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   306k|    UC const * location_of_e = p;
  359|   306k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 228k, False: 78.0k]
  |  Branch (359:28): [True: 78.0k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   306k|      ++p;
  361|   306k|    }
  362|   306k|    bool neg_exp = false;
  363|   306k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 305k, False: 205]
  |  Branch (363:24): [True: 20.5k, False: 285k]
  ------------------
  364|  20.5k|      neg_exp = true;
  365|  20.5k|      ++p;
  366|   285k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 285k, False: 205]
  |  Branch (366:31): [True: 56.2k, False: 229k]
  ------------------
  367|  56.2k|      ++p;
  368|  56.2k|    }
  369|   306k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 245, False: 305k]
  |  Branch (369:24): [True: 835, False: 305k]
  ------------------
  370|  1.08k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.08k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.08k|      p = location_of_e;
  376|   305k|    } else {
  377|   978k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 774k, False: 204k]
  |  Branch (377:29): [True: 673k, False: 100k]
  ------------------
  378|   673k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   673k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 634k, False: 39.1k]
  ------------------
  380|   634k|          exp_number = 10 * exp_number + digit;
  381|   634k|        }
  382|   673k|        ++p;
  383|   673k|      }
  384|   305k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 20.5k, False: 284k]
  ------------------
  385|   305k|      exponent += exp_number;
  386|   305k|    }
  387|  1.71M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.71M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.46M, False: 242k]
  |  Branch (389:44): [True: 0, False: 1.46M]
  ------------------
  390|  1.71M|  }
  391|  2.01M|  answer.lastmatch = p;
  392|  2.01M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.01M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 318k, False: 1.69M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   318k|    UC const * start = start_digits;
  405|  3.08M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.06M, False: 14.4k]
  |  Branch (405:32): [True: 2.70M, False: 367k]
  |  Branch (405:53): [True: 63.7k, False: 303k]
  ------------------
  406|  2.76M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.70M, False: 63.7k]
  ------------------
  407|  2.76M|      start++;
  408|  2.76M|    }
  409|       |
  410|   318k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 267k, False: 50.6k]
  ------------------
  411|   267k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   267k|      i = 0;
  416|   267k|      p = answer.integer.ptr;
  417|   267k|      UC const* int_end = p + answer.integer.len();
  418|   267k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.67M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.58M, False: 89.8k]
  |  Branch (419:54): [True: 3.41M, False: 177k]
  ------------------
  420|  3.41M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.41M|        ++p;
  422|  3.41M|      }
  423|   267k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 89.8k, False: 177k]
  ------------------
  424|  89.8k|        exponent = end_of_integer_part - p + exp_number;
  425|  89.8k|      }
  426|   177k|      else { // We have a value with a fractional component.
  427|   177k|        p = answer.fraction.ptr;
  428|   177k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.49M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.31M, False: 177k]
  |  Branch (429:56): [True: 3.31M, False: 0]
  ------------------
  430|  3.31M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.31M|          ++p;
  432|  3.31M|        }
  433|   177k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   177k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   267k|    }
  437|   318k|  }
  438|  2.01M|  answer.exponent = exponent;
  439|  2.01M|  answer.mantissa = i;
  440|  2.01M|  return answer;
  441|  2.01M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  13.2M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  13.2M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 347k, False: 12.9M]
  |  Branch (36:27): [True: 950k, False: 12.0M]
  ------------------
   37|  13.2M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   341k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.41M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.19M, False: 218k]
  |  Branch (249:43): [True: 1.07M, False: 123k]
  ------------------
  250|  1.07M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.07M|    p += 8;
  252|  1.07M|  }
  253|   341k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.19M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.19M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.19M|     0x8080808080808080));
  172|  1.19M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.67M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.67M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.67M|  uint64_t val;
   63|  2.67M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.67M|  return val;
   69|  2.67M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.48M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.48M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.48M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.48M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.48M|  val -= 0x3030303030303030;
  151|  1.48M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.48M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.48M|  return uint32_t(val);
  154|  1.48M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   412k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   412k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   412k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   412k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   412k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  46.6k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  46.6k|  chars_format const fmt = options.format;
  277|  46.6k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  46.6k|  parsed_number_string_t<UC> answer;
  280|  46.6k|  answer.valid = false;
  281|  46.6k|  answer.too_many_digits = false;
  282|  46.6k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  46.6k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 46.6k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  46.6k|  UC const * const start_digits = p;
  303|       |
  304|  46.6k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  95.2k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 62.4k, False: 32.7k]
  |  Branch (306:25): [True: 48.5k, False: 13.8k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  48.5k|    i = 10 * i +
  310|  48.5k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  48.5k|    ++p;
  312|  48.5k|  }
  313|  46.6k|  UC const * const end_of_integer_part = p;
  314|  46.6k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  46.6k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  46.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  46.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 46.6k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  46.6k|  int64_t exponent = 0;
  324|  46.6k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 13.8k, False: 32.7k]
  |  Branch (324:49): [True: 0, False: 13.8k]
  ------------------
  325|  46.6k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 0, False: 46.6k]
  ------------------
  326|      0|    ++p;
  327|      0|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|      0|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 0, False: 0]
  |  Branch (332:27): [True: 0, False: 0]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|      0|    exponent = before - p;
  338|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|      0|    digit_count -= exponent;
  340|      0|  }
  341|  46.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  46.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 46.6k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  46.6k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 46.6k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  46.6k|  int64_t exp_number = 0;            // explicit exponential part
  351|  46.6k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 36.3k, False: 10.3k]
  ------------------
  352|  46.6k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 13.8k, False: 22.4k]
  ------------------
  353|  46.6k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 13.8k]
  |  Branch (353:29): [True: 1.85k, False: 11.9k]
  ------------------
  354|  46.6k|       ||
  355|  46.6k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  44.7k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 44.7k]
  ------------------
  356|  44.7k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  44.7k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  1.90k|    UC const * location_of_e = p;
  359|  1.90k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 1.85k]
  |  Branch (359:28): [True: 1.85k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  1.90k|      ++p;
  361|  1.90k|    }
  362|  1.90k|    bool neg_exp = false;
  363|  1.90k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 1.89k, False: 10]
  |  Branch (363:24): [True: 164, False: 1.73k]
  ------------------
  364|    164|      neg_exp = true;
  365|    164|      ++p;
  366|  1.74k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 1.73k, False: 10]
  |  Branch (366:31): [True: 0, False: 1.73k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  1.90k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 1.89k]
  |  Branch (369:24): [True: 330, False: 1.56k]
  ------------------
  370|    340|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 340]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    340|      p = location_of_e;
  376|  1.56k|    } else {
  377|  4.94k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 3.79k, False: 1.14k]
  |  Branch (377:29): [True: 3.37k, False: 420]
  ------------------
  378|  3.37k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  3.37k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 3.37k, False: 0]
  ------------------
  380|  3.37k|          exp_number = 10 * exp_number + digit;
  381|  3.37k|        }
  382|  3.37k|        ++p;
  383|  3.37k|      }
  384|  1.56k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 144, False: 1.42k]
  ------------------
  385|  1.56k|      exponent += exp_number;
  386|  1.56k|    }
  387|  44.7k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  44.7k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 34.4k, False: 10.3k]
  |  Branch (389:44): [True: 0, False: 34.4k]
  ------------------
  390|  44.7k|  }
  391|  46.6k|  answer.lastmatch = p;
  392|  46.6k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  46.6k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 46.6k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  46.6k|  answer.exponent = exponent;
  439|  46.6k|  answer.mantissa = i;
  440|  46.6k|  return answer;
  441|  46.6k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  68.1k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  68.1k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 14.4k, False: 53.7k]
  |  Branch (36:27): [True: 190, False: 53.5k]
  ------------------
   37|  68.1k|}

_ZN10fast_float6bigintC2Ev:
  412|  88.5k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   196k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   318k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   318k|    return small_mul(vec, y);
  565|   318k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   489k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   489k|  limb carry = 0;
  284|  2.44M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.95M, False: 489k]
  ------------------
  285|  1.95M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.95M|  }
  287|   489k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 320k, False: 169k]
  ------------------
  288|   320k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   320k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 320k]
  |  |  ------------------
  ------------------
  289|   320k|  }
  290|   489k|  return true;
  291|   489k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.27M|  constexpr size_t len() const noexcept {
   77|  4.27M|    return length;
   78|  4.27M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.95M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.95M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.95M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.95M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.95M|  carry = limb(z >> limb_bits);
  235|  1.95M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.95M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.16M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.16M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.16M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.16M|    return data[index];
   60|  5.16M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   428k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   428k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 428k, False: 0]
  ------------------
   93|   428k|      push_unchecked(value);
   94|   428k|      return true;
   95|   428k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   428k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   526k|  constexpr size_t capacity() const noexcept {
   83|   526k|    return size;
   84|   526k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   502k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   502k|    data[length] = value;
   88|   502k|    length++;
   89|   502k|  }
_ZN10fast_float6bigint3addEm:
  567|   318k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   318k|    return small_add(vec, y);
  569|   318k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   318k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   318k|  return small_add_from(vec, y, 0);
  277|   318k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   318k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   318k|  size_t index = start;
  259|   318k|  limb carry = y;
  260|   318k|  bool overflow;
  261|   468k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 238k, False: 230k]
  |  Branch (261:24): [True: 149k, False: 88.5k]
  ------------------
  262|   149k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   149k|    carry = limb(overflow);
  264|   149k|    index += 1;
  265|   149k|  }
  266|   318k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 88.5k, False: 230k]
  ------------------
  267|  88.5k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  88.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 88.5k]
  |  |  ------------------
  ------------------
  268|  88.5k|  }
  269|   318k|  return true;
  270|   318k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   537k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   537k|  limb z;
  211|       |// gcc and clang
  212|   537k|#if defined(__has_builtin)
  213|   537k|  #if __has_builtin(__builtin_add_overflow)
  214|   537k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   537k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   537k|      return z;
  217|   537k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   537k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.8k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.8k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
  611|  14.8k|    return pow2(exp);
  612|  14.8k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  88.5k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  88.5k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  88.5k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  97.0k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.47k, False: 88.5k]
  ------------------
  582|  8.47k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.47k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.47k]
  |  |  ------------------
  ------------------
  583|  8.47k|      exp -= large_step;
  584|  8.47k|    }
  585|  88.5k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  88.5k|    uint32_t small_step = 27;
  587|  88.5k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   147k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 59.0k, False: 88.5k]
  ------------------
  593|  59.0k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  59.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 59.0k]
  |  |  ------------------
  ------------------
  594|  59.0k|      exp -= small_step;
  595|  59.0k|    }
  596|  88.5k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 69.3k, False: 19.1k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  69.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  69.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 69.3k]
  |  |  ------------------
  ------------------
  601|  69.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  69.3k|      );
  603|  69.3k|    }
  604|       |
  605|  88.5k|    return true;
  606|  88.5k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.47k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.47k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.47k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.47k|  } else {
  368|  8.47k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.47k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.47k]
  |  |  ------------------
  ------------------
  369|  8.47k|  }
  370|  8.47k|  return true;
  371|  8.47k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.47k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.47k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.47k|  stackvec<size> z(xs);
  338|  8.47k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.47k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.47k, False: 0]
  ------------------
  341|  8.47k|    limb y0 = y[0];
  342|  8.47k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.47k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.47k]
  |  |  ------------------
  ------------------
  343|  42.3k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 33.9k, False: 8.47k]
  ------------------
  344|  33.9k|      limb yi = y[index];
  345|  33.9k|      stackvec<size> zi;
  346|  33.9k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 33.9k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  33.9k|        zi.set_len(0);
  349|  33.9k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  33.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.9k]
  |  |  ------------------
  ------------------
  350|  33.9k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  33.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.9k]
  |  |  ------------------
  ------------------
  351|  33.9k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  33.9k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  33.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.9k]
  |  |  ------------------
  ------------------
  353|  33.9k|      }
  354|  33.9k|    }
  355|  8.47k|  }
  356|       |
  357|  8.47k|  x.normalize();
  358|  8.47k|  return true;
  359|  8.47k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.47k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.47k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.47k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.47k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   131k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   131k|    length = uint16_t(len);
   75|   131k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  42.3k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  42.3k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 42.3k, False: 0]
  ------------------
  108|  42.3k|      extend_unchecked(s);
  109|  42.3k|      return true;
  110|  42.3k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  42.3k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  42.3k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  42.3k|    limb* ptr = data + length;
  102|  42.3k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  42.3k|    set_len(len() + s.len());
  104|  42.3k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  33.9k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  33.9k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 33.9k]
  |  Branch (300:26): [True: 33.5k, False: 348]
  ------------------
  301|  33.5k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  33.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.5k]
  |  |  ------------------
  ------------------
  302|  33.5k|  }
  303|       |
  304|  33.9k|  bool carry = false;
  305|   315k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 281k, False: 33.9k]
  ------------------
  306|   281k|    limb xi = x[index + start];
  307|   281k|    limb yi = y[index];
  308|   281k|    bool c1 = false;
  309|   281k|    bool c2 = false;
  310|   281k|    xi = scalar_add(xi, yi, c1);
  311|   281k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 106k, False: 175k]
  ------------------
  312|   106k|      xi = scalar_add(xi, 1, c2);
  313|   106k|    }
  314|   281k|    x[index + start] = xi;
  315|   281k|    carry = c1 | c2;
  316|   281k|  }
  317|       |
  318|       |  // handle overflow
  319|  33.9k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 33.9k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  33.9k|  return true;
  323|  33.9k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  33.5k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  33.5k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 33.5k]
  ------------------
  132|      0|      return false;
  133|  33.5k|    } else {
  134|  33.5k|      resize_unchecked(new_len, value);
  135|  33.5k|      return true;
  136|  33.5k|    }
  137|  33.5k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  33.5k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  33.5k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 33.5k, False: 0]
  ------------------
  120|  33.5k|      size_t count = new_len - len();
  121|  33.5k|      limb* first = data + len();
  122|  33.5k|      limb* last = first + count;
  123|  33.5k|      ::std::fill(first, last, value);
  124|  33.5k|      set_len(new_len);
  125|  33.5k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  33.5k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  82.1k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  82.1k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 82.1k, False: 0]
  |  Branch (152:25): [True: 0, False: 82.1k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  82.1k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   125k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   125k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   125k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   125k|    size_t rindex = length - index - 1;
   69|   125k|    return data[rindex];
   70|   125k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  88.3k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  88.3k|    return shl(exp);
  574|  88.3k|  }
_ZN10fast_float6bigint3shlEm:
  530|  88.3k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  88.3k|    size_t rem = n % limb_bits;
  532|  88.3k|    size_t div = n / limb_bits;
  533|  88.3k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 73.2k, False: 15.0k]
  ------------------
  534|  73.2k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  73.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 73.2k]
  |  |  ------------------
  ------------------
  535|  73.2k|    }
  536|  88.3k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 21.5k, False: 66.8k]
  ------------------
  537|  21.5k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  21.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
  538|  21.5k|    }
  539|  88.3k|    return true;
  540|  88.3k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  73.2k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  73.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  73.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  73.2k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  73.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  73.2k|    size_t shl = n;
  493|  73.2k|    size_t shr = limb_bits - shl;
  494|  73.2k|    limb prev = 0;
  495|   270k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 197k, False: 73.2k]
  ------------------
  496|   197k|      limb xi = vec[index];
  497|   197k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   197k|      prev = xi;
  499|   197k|    }
  500|       |
  501|  73.2k|    limb carry = prev >> shr;
  502|  73.2k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 19.7k, False: 53.5k]
  ------------------
  503|  19.7k|      return vec.try_push(carry);
  504|  19.7k|    }
  505|  53.5k|    return true;
  506|  73.2k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  21.5k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  21.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  21.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  21.5k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 21.5k]
  ------------------
  512|      0|      return false;
  513|  21.5k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 21.5k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  21.5k|      limb* dst = vec.data + n;
  516|  21.5k|      const limb* src = vec.data;
  517|  21.5k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  21.5k|      limb* first = vec.data;
  520|  21.5k|      limb* last = first + n;
  521|  21.5k|      ::std::fill(first, last, 0);
  522|  21.5k|      vec.set_len(n + vec.len());
  523|  21.5k|      return true;
  524|  21.5k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  21.5k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  36.4k|  constexpr bool is_empty() const noexcept {
   80|  36.4k|    return length == 0;
   81|  36.4k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.8k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.8k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.8k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.8k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.8k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 12.9k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  12.9k|    } else {
  437|  12.9k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  12.9k|      truncated |= vec.nonzero(2);
  439|  12.9k|      return result;
  440|  12.9k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.8k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  12.9k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  12.9k|  int shl = leading_zeroes(r0);
  174|  12.9k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 12.9k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  12.9k|  } else {
  178|  12.9k|    int shr = 64 - shl;
  179|  12.9k|    truncated = (r1 << shl) != 0;
  180|  12.9k|    return (r0 << shl) | (r1 >> shr);
  181|  12.9k|  }
  182|  12.9k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  12.9k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.0k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 782, False: 12.2k]
  ------------------
  143|    782|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 728, False: 54]
  ------------------
  144|    728|        return true;
  145|    728|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.2k|    return false;
  149|  12.9k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.8k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.8k|    int lz = ctlz();
  560|  14.8k|    return int(limb_bits * vec.len()) - lz;
  561|  14.8k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.8k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.8k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.8k]
  ------------------
  545|      0|      return 0;
  546|  14.8k|    } else {
  547|  14.8k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.8k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.8k|    }
  555|  14.8k|  }
_ZN10fast_float6bigintC2Em:
  418|  73.6k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  73.6k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  73.6k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  73.6k|    vec.normalize();
  426|  73.6k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  73.6k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  73.6k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 73.6k]
  ------------------
  464|      0|      return 1;
  465|  73.6k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 73.6k]
  ------------------
  466|      0|      return -1;
  467|  73.6k|    } else {
  468|   145k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 137k, False: 8.88k]
  ------------------
  469|   137k|        limb xi = vec[index - 1];
  470|   137k|        limb yi = other.vec[index - 1];
  471|   137k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.1k, False: 125k]
  ------------------
  472|  11.1k|          return 1;
  473|   125k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 53.6k, False: 72.3k]
  ------------------
  474|  53.6k|          return -1;
  475|  53.6k|        }
  476|   137k|      }
  477|  8.88k|      return 0;
  478|  73.6k|    }
  479|  73.6k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   274k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   274k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   274k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   274k|    return data[index];
   64|   274k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   406k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   406k|  adjusted_mantissa answer;
   96|   406k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 12.0k, False: 394k]
  |  Branch (96:19): [True: 1.77k, False: 392k]
  ------------------
   97|  13.7k|    answer.power2 = 0;
   98|  13.7k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  13.7k|    return answer;
  101|  13.7k|  }
  102|   392k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.45k, False: 384k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.45k|    answer.power2 = binary::infinite_power();
  105|  8.45k|    answer.mantissa = 0;
  106|  8.45k|    return answer;
  107|  8.45k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   384k|  int lz = leading_zeroes(w);
  112|   384k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   384k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   384k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   384k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   384k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   384k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 830, False: 383k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    830|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 794]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    794|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    794|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    794|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    794|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 794, False: 0]
  ------------------
  156|    794|    return answer;
  157|    830|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   383k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 141k, False: 242k]
  |  Branch (162:30): [True: 140k, False: 956]
  |  Branch (162:77): [True: 123k, False: 16.4k]
  ------------------
  163|   383k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 24.0k, False: 99.7k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  24.0k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.2k, False: 12.7k]
  ------------------
  168|  11.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.2k|    }
  170|  24.0k|  }
  171|       |
  172|   383k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   383k|  answer.mantissa >>= 1;
  174|   383k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.4k, False: 368k]
  ------------------
  175|  14.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.4k|    answer.power2++; // undo previous addition
  177|  14.4k|  }
  178|       |
  179|   383k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   383k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.67k, False: 380k]
  ------------------
  181|  2.67k|    answer.power2 = binary::infinite_power();
  182|  2.67k|    answer.mantissa = 0;
  183|  2.67k|  }
  184|   383k|  return answer;
  185|   384k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   420k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   420k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   420k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   420k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   420k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   420k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   420k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 65.0k, False: 355k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  65.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  65.0k|    firstproduct.low += secondproduct.high;
   35|  65.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 52.4k, False: 12.6k]
  ------------------
   36|  52.4k|      firstproduct.high++;
   37|  52.4k|    }
   38|  65.0k|  }
   39|   420k|  return firstproduct;
   40|   420k|}
_ZN10fast_float6detail5powerEi:
   58|   841k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   841k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   841k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  36.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  36.7k|  int lz = leading_zeroes(w);
   82|  36.7k|  w <<= lz;
   83|  36.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  36.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  36.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  36.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  36.7k|  int hilz = int(w >> 63) ^ 1;
   69|  36.7k|  adjusted_mantissa answer;
   70|  36.7k|  answer.mantissa = w << hilz;
   71|  36.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  36.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  36.7k|  return answer;
   74|  36.7k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   379k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   379k|  adjusted_mantissa answer;
   96|   379k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 6.77k, False: 373k]
  |  Branch (96:19): [True: 354, False: 372k]
  ------------------
   97|  7.12k|    answer.power2 = 0;
   98|  7.12k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.12k|    return answer;
  101|  7.12k|  }
  102|   372k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.22k, False: 368k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.22k|    answer.power2 = binary::infinite_power();
  105|  4.22k|    answer.mantissa = 0;
  106|  4.22k|    return answer;
  107|  4.22k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   368k|  int lz = leading_zeroes(w);
  112|   368k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   368k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   368k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   368k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   368k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   368k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.1k, False: 355k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.1k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 13.0k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.0k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.0k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.0k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.0k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.0k, False: 0]
  ------------------
  156|  13.0k|    return answer;
  157|  13.1k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   355k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 107k, False: 247k]
  |  Branch (162:30): [True: 65.4k, False: 42.4k]
  |  Branch (162:77): [True: 57.7k, False: 7.78k]
  ------------------
  163|   355k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 21.2k, False: 36.4k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  21.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.4k, False: 6.82k]
  ------------------
  168|  14.4k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.4k|    }
  170|  21.2k|  }
  171|       |
  172|   355k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   355k|  answer.mantissa >>= 1;
  174|   355k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.5k, False: 343k]
  ------------------
  175|  11.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.5k|    answer.power2++; // undo previous addition
  177|  11.5k|  }
  178|       |
  179|   355k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   355k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 256, False: 355k]
  ------------------
  181|    256|    answer.power2 = binary::infinite_power();
  182|    256|    answer.mantissa = 0;
  183|    256|  }
  184|   355k|  return answer;
  185|   368k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   420k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   420k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   420k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   420k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   420k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   420k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   420k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 105k, False: 314k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   105k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   105k|    firstproduct.low += secondproduct.high;
   35|   105k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.8k, False: 56.6k]
  ------------------
   36|  48.8k|      firstproduct.high++;
   37|  48.8k|    }
   38|   105k|  }
   39|   420k|  return firstproduct;
   40|   420k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  51.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  51.7k|  int lz = leading_zeroes(w);
   82|  51.7k|  w <<= lz;
   83|  51.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  51.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  51.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  51.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  51.7k|  int hilz = int(w >> 63) ^ 1;
   69|  51.7k|  adjusted_mantissa answer;
   70|  51.7k|  answer.mantissa = w << hilz;
   71|  51.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  51.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  51.7k|  return answer;
   74|  51.7k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  36.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  36.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  36.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  36.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  36.7k|  size_t digits = 0;
  413|  36.7k|  bigint bigmant;
  414|  36.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  36.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  36.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 35.8k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  35.8k|  } else {
  420|  35.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  35.8k|  }
  422|  36.7k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  88.5k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  88.5k|  uint64_t mantissa = num.mantissa;
   30|  88.5k|  int32_t exponent = int32_t(num.exponent);
   31|   442k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 354k, False: 88.5k]
  ------------------
   32|   354k|    mantissa /= 10000;
   33|   354k|    exponent += 4;
   34|   354k|  }
   35|   177k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 88.5k, False: 88.5k]
  ------------------
   36|  88.5k|    mantissa /= 100;
   37|  88.5k|    exponent += 2;
   38|  88.5k|  }
   39|  88.5k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 88.5k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  88.5k|  return exponent;
   44|  88.5k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  88.5k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  88.5k|  size_t counter = 0;
  245|  88.5k|  digits = 0;
  246|  88.5k|  limb value = 0;
  247|  88.5k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  88.5k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  88.5k|  UC const * p = num.integer.ptr;
  255|  88.5k|  UC const * pend = p + num.integer.len();
  256|  88.5k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   193k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 105k, False: 88.1k]
  ------------------
  259|   198k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 119k, False: 78.9k]
  |  Branch (259:45): [True: 93.4k, False: 26.4k]
  |  Branch (259:70): [True: 93.0k, False: 408]
  ------------------
  260|  93.0k|      parse_eight_digits(p, value, counter, digits);
  261|  93.0k|    }
  262|   392k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 360k, False: 32.7k]
  |  Branch (262:30): [True: 287k, False: 72.6k]
  |  Branch (262:43): [True: 287k, False: 408]
  ------------------
  263|   287k|      parse_one_digit(p, value, counter, digits);
  264|   287k|    }
  265|   105k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 408, False: 105k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    408|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    408|      bool truncated = is_truncated(p, pend);
  269|    408|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 376, False: 32]
  ------------------
  270|    376|        truncated |= is_truncated(num.fraction);
  271|    376|      }
  272|    408|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 220, False: 188]
  ------------------
  273|    220|        round_up_bigint(result, digits);
  274|    220|      }
  275|    408|      return;
  276|   105k|    } else {
  277|   105k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   105k|      counter = 0;
  279|   105k|      value = 0;
  280|   105k|    }
  281|   105k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  88.1k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 74.2k, False: 13.8k]
  ------------------
  285|  74.2k|    p = num.fraction.ptr;
  286|  74.2k|    pend = p + num.fraction.len();
  287|  74.2k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.4k, False: 58.7k]
  ------------------
  288|  15.4k|      skip_zeros(p, pend);
  289|  15.4k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   277k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 209k, False: 67.9k]
  ------------------
  292|   528k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 440k, False: 88.5k]
  |  Branch (292:47): [True: 321k, False: 118k]
  |  Branch (292:72): [True: 319k, False: 1.85k]
  ------------------
  293|   319k|        parse_eight_digits(p, value, counter, digits);
  294|   319k|      }
  295|   869k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 731k, False: 137k]
  |  Branch (295:32): [True: 664k, False: 67.2k]
  |  Branch (295:45): [True: 659k, False: 4.14k]
  ------------------
  296|   659k|        parse_one_digit(p, value, counter, digits);
  297|   659k|      }
  298|   209k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 6.25k, False: 203k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  6.25k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  6.25k|        bool truncated = is_truncated(p, pend);
  302|  6.25k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.28k, False: 2.97k]
  ------------------
  303|  3.28k|          round_up_bigint(result, digits);
  304|  3.28k|        }
  305|  6.25k|        return;
  306|   203k|      } else {
  307|   203k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   203k|        counter = 0;
  309|   203k|        value = 0;
  310|   203k|      }
  311|   209k|    }
  312|  74.2k|  }
  313|       |
  314|  81.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 81.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  81.8k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   103k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   103k|  uint64_t val;
  161|   174k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 125k, False: 48.6k]
  ------------------
  162|   125k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   125k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 55.3k, False: 70.1k]
  ------------------
  164|  55.3k|      break;
  165|  55.3k|    }
  166|  70.1k|    first += int_cmp_len<UC>();
  167|  70.1k|  }
  168|   254k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 239k, False: 15.4k]
  ------------------
  169|   239k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 88.5k, False: 150k]
  ------------------
  170|  88.5k|      break;
  171|  88.5k|    }
  172|   150k|    first++;
  173|   150k|  }
  174|   103k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   412k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   412k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   412k|  p += 8;
  210|   412k|  counter += 8;
  211|   412k|  count += 8;
  212|   412k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   946k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   946k|  value = value * 10 + limb(*p - UC('0'));
  218|   946k|  p++;
  219|   946k|  counter++;
  220|   946k|  count++;
  221|   946k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   318k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   318k|  big.mul(power);
  226|   318k|  big.add(value);
  227|   318k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  7.03k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  7.03k|  uint64_t val;
  183|  17.7k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.2k, False: 5.52k]
  ------------------
  184|  12.2k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.2k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.50k, False: 10.7k]
  ------------------
  186|  1.50k|      return true;
  187|  1.50k|    }
  188|  10.7k|    first += int_cmp_len<UC>();
  189|  10.7k|  }
  190|  9.14k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 5.68k, False: 3.46k]
  ------------------
  191|  5.68k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.06k, False: 3.61k]
  ------------------
  192|  2.06k|      return true;
  193|  2.06k|    }
  194|  3.61k|    ++first;
  195|  3.61k|  }
  196|  3.46k|  return false;
  197|  5.52k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    376|bool is_truncated(span<const UC> s) noexcept {
  201|    376|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    376|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.50k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.50k|  add_native(big, 10, 1);
  234|  3.50k|  count++;
  235|  3.50k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  35.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  35.8k|  bigint& real_digits = bigmant;
  347|  35.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  35.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  35.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  35.8k|  T b;
  354|  35.8k|  to_float(false, am_b, b);
  355|  35.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  35.8k|  bigint theor_digits(theor.mantissa);
  357|  35.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  35.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  35.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  35.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 35.8k, False: 0]
  ------------------
  363|  35.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  35.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  35.8k|  }
  365|  35.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 35.8k, False: 0]
  ------------------
  366|  35.8k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  35.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  35.8k|  int ord = real_digits.compare(theor_digits);
  373|  35.8k|  adjusted_mantissa answer = am;
  374|  35.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.8k|      (void)_;  // not needed, since we've done our comparison
  377|  35.8k|      (void)__; // not needed, since we've done our comparison
  378|  35.8k|      if (ord > 0) {
  379|  35.8k|        return true;
  380|  35.8k|      } else if (ord < 0) {
  381|  35.8k|        return false;
  382|  35.8k|      } else {
  383|  35.8k|        return is_odd;
  384|  35.8k|      }
  385|  35.8k|    });
  386|  35.8k|  });
  387|       |
  388|  35.8k|  return answer;
  389|  35.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  35.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  35.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  73.6k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  73.6k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 73.6k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  73.6k|  } else {
  153|  73.6k|    am.mantissa >>= shift;
  154|  73.6k|  }
  155|  73.6k|  am.power2 += shift;
  156|  73.6k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  35.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  35.8k|  adjusted_mantissa am = to_extended(value);
   84|  35.8k|  am.mantissa <<= 1;
   85|  35.8k|  am.mantissa += 1;
   86|  35.8k|  am.power2 -= 1;
   87|  35.8k|  return am;
   88|  35.8k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  35.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  35.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  35.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  35.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  35.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  35.8k|  adjusted_mantissa am;
   56|  35.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  35.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  35.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  35.8k|#endif
   63|  35.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 35.8k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  35.8k|  } else {
   68|       |    // normal
   69|  35.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  35.8k|    am.power2 -= bias;
   71|  35.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  35.8k|  }
   73|       |
   74|  35.8k|  return am;
   75|  35.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  35.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  35.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.8k|      (void)_;  // not needed, since we've done our comparison
  377|  35.8k|      (void)__; // not needed, since we've done our comparison
  378|  35.8k|      if (ord > 0) {
  379|  35.8k|        return true;
  380|  35.8k|      } else if (ord < 0) {
  381|  35.8k|        return false;
  382|  35.8k|      } else {
  383|  35.8k|        return is_odd;
  384|  35.8k|      }
  385|  35.8k|    });
  386|  35.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  35.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  35.8k|  const uint64_t mask
  125|  35.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 35.8k]
  ------------------
  126|  35.8k|    ? UINT64_MAX
  127|  35.8k|    : (uint64_t(1) << shift) - 1;
  128|  35.8k|  const uint64_t halfway
  129|  35.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 35.8k]
  ------------------
  130|  35.8k|    ? 0
  131|  35.8k|    : uint64_t(1) << (shift - 1);
  132|  35.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  35.8k|  bool is_above = truncated_bits > halfway;
  134|  35.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  35.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 35.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  35.8k|  } else {
  140|  35.8k|    am.mantissa >>= shift;
  141|  35.8k|  }
  142|  35.8k|  am.power2 += shift;
  143|       |
  144|  35.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  35.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  35.8k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  35.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.8k|      (void)_;  // not needed, since we've done our comparison
  377|  35.8k|      (void)__; // not needed, since we've done our comparison
  378|  35.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 536, False: 35.3k]
  ------------------
  379|    536|        return true;
  380|  35.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 27.4k, False: 7.89k]
  ------------------
  381|  27.4k|        return false;
  382|  27.4k|      } else {
  383|  7.89k|        return is_odd;
  384|  7.89k|      }
  385|  35.8k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  51.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  51.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  51.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  51.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  51.7k|  size_t digits = 0;
  413|  51.7k|  bigint bigmant;
  414|  51.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  51.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  51.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 13.9k, False: 37.8k]
  ------------------
  418|  13.9k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.8k|  } else {
  420|  37.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.8k|  }
  422|  51.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  13.9k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  13.9k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  13.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  13.9k|  adjusted_mantissa answer;
  324|  13.9k|  bool truncated;
  325|  13.9k|  answer.mantissa = bigmant.hi64(truncated);
  326|  13.9k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  13.9k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  13.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.9k|    });
  333|  13.9k|  });
  334|       |
  335|  13.9k|  return answer;
  336|  13.9k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  13.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 12.9k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.9k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  13.9k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.9k|    });
  333|  13.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  13.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  13.9k|  const uint64_t mask
  125|  13.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 13.9k]
  ------------------
  126|  13.9k|    ? UINT64_MAX
  127|  13.9k|    : (uint64_t(1) << shift) - 1;
  128|  13.9k|  const uint64_t halfway
  129|  13.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 13.9k]
  ------------------
  130|  13.9k|    ? 0
  131|  13.9k|    : uint64_t(1) << (shift - 1);
  132|  13.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  13.9k|  bool is_above = truncated_bits > halfway;
  134|  13.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  13.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 13.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  13.9k|  } else {
  140|  13.9k|    am.mantissa >>= shift;
  141|  13.9k|  }
  142|  13.9k|  am.power2 += shift;
  143|       |
  144|  13.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  13.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  13.9k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  13.9k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.9k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 12.8k]
  |  Branch (331:27): [True: 11.9k, False: 912]
  |  Branch (331:41): [True: 3.82k, False: 8.08k]
  |  Branch (331:56): [True: 354, False: 8.64k]
  |  Branch (331:66): [True: 80, False: 274]
  ------------------
  332|  13.9k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.8k|  bigint& real_digits = bigmant;
  347|  37.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.8k|  T b;
  354|  37.8k|  to_float(false, am_b, b);
  355|  37.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.8k|  bigint theor_digits(theor.mantissa);
  357|  37.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.8k, False: 0]
  ------------------
  363|  37.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.8k|  }
  365|  37.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 4.93k, False: 32.8k]
  ------------------
  366|  4.93k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  4.93k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  32.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 32.7k, False: 130]
  ------------------
  368|  32.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  32.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  32.7k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.8k|  int ord = real_digits.compare(theor_digits);
  373|  37.8k|  adjusted_mantissa answer = am;
  374|  37.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.8k|      (void)_;  // not needed, since we've done our comparison
  377|  37.8k|      (void)__; // not needed, since we've done our comparison
  378|  37.8k|      if (ord > 0) {
  379|  37.8k|        return true;
  380|  37.8k|      } else if (ord < 0) {
  381|  37.8k|        return false;
  382|  37.8k|      } else {
  383|  37.8k|        return is_odd;
  384|  37.8k|      }
  385|  37.8k|    });
  386|  37.8k|  });
  387|       |
  388|  37.8k|  return answer;
  389|  37.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 158, False: 37.6k]
  ------------------
   96|       |    // have a denormal float
   97|    158|    int32_t shift = -am.power2 + 1;
   98|    158|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    158|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 158, False: 0]
  ------------------
  101|    158|    return;
  102|    158|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.8k|  adjusted_mantissa am = to_extended(value);
   84|  37.8k|  am.mantissa <<= 1;
   85|  37.8k|  am.mantissa += 1;
   86|  37.8k|  am.power2 -= 1;
   87|  37.8k|  return am;
   88|  37.8k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.8k|  adjusted_mantissa am;
   56|  37.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.8k|#endif
   63|  37.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 158, False: 37.6k]
  ------------------
   64|       |    // denormal
   65|    158|    am.power2 = 1 - bias;
   66|    158|    am.mantissa = bits & mantissa_mask;
   67|  37.6k|  } else {
   68|       |    // normal
   69|  37.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.6k|    am.power2 -= bias;
   71|  37.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.6k|  }
   73|       |
   74|  37.8k|  return am;
   75|  37.8k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 158, False: 37.6k]
  ------------------
   96|       |    // have a denormal float
   97|    158|    int32_t shift = -am.power2 + 1;
   98|    158|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    158|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 158, False: 0]
  ------------------
  101|    158|    return;
  102|    158|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 104, False: 37.5k]
  ------------------
  109|    104|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    104|    am.power2++;
  111|    104|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.8k|      (void)_;  // not needed, since we've done our comparison
  377|  37.8k|      (void)__; // not needed, since we've done our comparison
  378|  37.8k|      if (ord > 0) {
  379|  37.8k|        return true;
  380|  37.8k|      } else if (ord < 0) {
  381|  37.8k|        return false;
  382|  37.8k|      } else {
  383|  37.8k|        return is_odd;
  384|  37.8k|      }
  385|  37.8k|    });
  386|  37.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.8k|  const uint64_t mask
  125|  37.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.8k]
  ------------------
  126|  37.8k|    ? UINT64_MAX
  127|  37.8k|    : (uint64_t(1) << shift) - 1;
  128|  37.8k|  const uint64_t halfway
  129|  37.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.8k]
  ------------------
  130|  37.8k|    ? 0
  131|  37.8k|    : uint64_t(1) << (shift - 1);
  132|  37.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.8k|  bool is_above = truncated_bits > halfway;
  134|  37.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.8k|  } else {
  140|  37.8k|    am.mantissa >>= shift;
  141|  37.8k|  }
  142|  37.8k|  am.power2 += shift;
  143|       |
  144|  37.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.8k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.8k|      (void)_;  // not needed, since we've done our comparison
  377|  37.8k|      (void)__; // not needed, since we've done our comparison
  378|  37.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.6k, False: 27.1k]
  ------------------
  379|  10.6k|        return true;
  380|  27.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.1k, False: 988]
  ------------------
  381|  26.1k|        return false;
  382|  26.1k|      } else {
  383|    988|        return is_odd;
  384|    988|      }
  385|  37.8k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.03M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.35M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   608k|  constexpr size_t len() const noexcept {
  238|   608k|    return length;
  239|   608k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   987k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   987k|  return -10;
  469|   987k|#endif
  470|   987k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   924k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   924k|  return 10;
  517|   924k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   773k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   773k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   773k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.60M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.60M|  return 23;
  477|  2.60M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   708k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   708k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   708k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   963k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   394k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   394k|  return -65;
  568|   394k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   392k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   392k|  return 38;
  559|   392k|}
_ZN10fast_float14leading_zeroesEm:
  268|   870k|int leading_zeroes(uint64_t input_num) {
  269|   870k|  assert(input_num > 0);
  270|   870k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   870k|  return __builtin_clzll(input_num);
  285|   870k|#endif
  286|   870k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.01M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.01M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.01M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.01M|  answer.low = uint64_t(r);
  337|  1.01M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.01M|  return answer;
  342|  1.01M|}
_ZN10fast_float8value128C2Ev:
  251|  1.01M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   457k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   457k|  return -127;
  500|   457k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   141k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   141k|  return -17;
  493|   141k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   140k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   140k|  return 10;
  485|   140k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   267k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   267k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 88.5k, False: 179k]
  |  Branch (352:38): [True: 0, False: 179k]
  ------------------
  353|   267k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  36.7k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  36.7k|  return 114;
  575|  36.7k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   272k|{
  650|   272k|    return sizeof(uint64_t) / sizeof(UC);
  651|   272k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   137k|{
  644|   137k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   137k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   137k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   139k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   569k|  constexpr size_t len() const noexcept {
  238|   569k|    return length;
  239|   569k|  }
_ZNK10fast_float4spanImEixEm:
  241|   324k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   324k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   324k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   324k|    return ptr[index];
  244|   324k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   314k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   314k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   314k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   314k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   314k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   314k|  ::memcpy(&value, &word, sizeof(T));
  615|   314k|#endif
  616|   314k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   314k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   743k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   743k|  return 0xFF;
  507|   743k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.01M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  93.2k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  46.6k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  46.6k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.07M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.07M|  return -22;
  461|  1.07M|#endif
  462|  1.07M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.04M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.04M|  return 22;
  514|  1.04M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   856k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   856k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   856k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.66M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.66M|  return 52;
  474|  2.66M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   837k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   837k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   837k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   373k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   373k|  return -342;
  564|   373k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   372k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   372k|  return 308;
  555|   372k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   472k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   472k|  return -1023;
  497|   472k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   107k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   107k|  return -4;
  489|   107k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  65.4k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  65.4k|  return 23;
  481|  65.4k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  51.7k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  51.7k|  return 769;
  572|  51.7k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   278k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   278k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   278k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   278k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   278k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   278k|  ::memcpy(&value, &word, sizeof(T));
  615|   278k|#endif
  616|   278k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   278k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   688k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   688k|  return 0x7FF;
  504|   688k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   963k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   963k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   963k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   963k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   963k|    return from_chars_advanced(first, last, value, options);
  143|   963k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   963k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   963k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   963k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   963k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   963k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 963k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   963k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   963k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 963k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   963k|  answer.ec = std::errc(); // be optimistic
  221|   963k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   963k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 901k, False: 62.0k]
  |  Branch (227:69): [True: 833k, False: 67.7k]
  |  Branch (227:131): [True: 750k, False: 82.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   750k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 750k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   750k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 685k, False: 65.0k]
  ------------------
  239|   685k|        value = T(pns.mantissa);
  240|   685k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 10.9k, False: 675k]
  ------------------
  241|   675k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   685k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 685k]
  ------------------
  243|   685k|        return answer;
  244|   685k|      }
  245|   750k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   750k|  }
  262|   277k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   277k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 128k, False: 149k]
  |  Branch (263:29): [True: 128k, False: 0]
  ------------------
  264|   128k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 36.7k, False: 91.3k]
  ------------------
  265|  36.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  36.7k|    }
  267|   128k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   277k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 36.7k, False: 241k]
  ------------------
  271|   277k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   277k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 265k, False: 12.0k]
  |  Branch (273:29): [True: 19.1k, False: 246k]
  |  Branch (273:49): [True: 1.47k, False: 17.6k]
  |  Branch (273:68): [True: 7.86k, False: 268k]
  ------------------
  274|  9.33k|    answer.ec = std::errc::result_out_of_range;
  275|  9.33k|  }
  276|   277k|  return answer;
  277|   963k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.62M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.62M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.62M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.62M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.62M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.62M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  23.3k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  23.3k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  23.3k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  23.3k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  23.3k|    return from_chars_advanced(first, last, value, options);
  143|  23.3k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  23.3k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  23.3k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  23.3k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  23.3k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  23.3k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 23.3k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  23.3k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  23.3k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 23.3k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  23.3k|  answer.ec = std::errc(); // be optimistic
  221|  23.3k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  23.3k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 23.2k, False: 54]
  |  Branch (227:69): [True: 22.7k, False: 482]
  |  Branch (227:131): [True: 22.7k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  22.7k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 22.7k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  22.7k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 22.7k, False: 0]
  ------------------
  239|  22.7k|        value = T(pns.mantissa);
  240|  22.7k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 22.7k]
  ------------------
  241|  22.7k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  22.7k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 22.7k]
  ------------------
  243|  22.7k|        return answer;
  244|  22.7k|      }
  245|  22.7k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  22.7k|  }
  262|    536|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    536|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 536]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    536|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 536]
  ------------------
  271|    536|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    536|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 518, False: 18]
  |  Branch (273:29): [True: 504, False: 14]
  |  Branch (273:49): [True: 54, False: 450]
  |  Branch (273:68): [True: 450, False: 32]
  ------------------
  274|    504|    answer.ec = std::errc::result_out_of_range;
  275|    504|  }
  276|    536|  return answer;
  277|  23.3k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.05M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.05M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.05M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.05M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.05M|    return from_chars_advanced(first, last, value, options);
  143|  1.05M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.05M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.05M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.05M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.05M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.05M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.05M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.05M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.05M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.05M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.05M|  answer.ec = std::errc(); // be optimistic
  221|  1.05M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.05M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.01M, False: 34.9k]
  |  Branch (227:69): [True: 948k, False: 70.7k]
  |  Branch (227:131): [True: 833k, False: 115k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   833k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 833k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   833k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 814k, False: 18.5k]
  ------------------
  239|   814k|        value = T(pns.mantissa);
  240|   814k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 42.9k, False: 771k]
  ------------------
  241|   771k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   814k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 814k]
  ------------------
  243|   814k|        return answer;
  244|   814k|      }
  245|   833k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   833k|  }
  262|   239k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   239k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 139k, False: 100k]
  |  Branch (263:29): [True: 139k, False: 0]
  ------------------
  264|   139k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 51.7k, False: 87.7k]
  ------------------
  265|  51.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  51.7k|    }
  267|   139k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   239k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 51.7k, False: 187k]
  ------------------
  271|   239k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   239k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 232k, False: 6.75k]
  |  Branch (273:29): [True: 10.5k, False: 222k]
  |  Branch (273:49): [True: 412, False: 10.1k]
  |  Branch (273:68): [True: 3.71k, False: 235k]
  ------------------
  274|  4.12k|    answer.ec = std::errc::result_out_of_range;
  275|  4.12k|  }
  276|   239k|  return answer;
  277|  1.05M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  23.3k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  23.3k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  23.3k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  23.3k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  23.3k|    return from_chars_advanced(first, last, value, options);
  143|  23.3k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  23.3k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  23.3k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  23.3k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  23.3k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  23.3k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 23.3k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  23.3k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  23.3k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 23.3k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  23.3k|  answer.ec = std::errc(); // be optimistic
  221|  23.3k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  23.3k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 23.2k, False: 54]
  |  Branch (227:69): [True: 22.8k, False: 468]
  |  Branch (227:131): [True: 22.8k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  22.8k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 22.8k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  22.8k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 22.8k, False: 0]
  ------------------
  239|  22.8k|        value = T(pns.mantissa);
  240|  22.8k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 22.7k]
  ------------------
  241|  22.7k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  22.8k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 22.8k]
  ------------------
  243|  22.8k|        return answer;
  244|  22.8k|      }
  245|  22.8k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  22.8k|  }
  262|    522|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    522|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 522]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    522|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 522]
  ------------------
  271|    522|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    522|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 504, False: 18]
  |  Branch (273:29): [True: 286, False: 218]
  |  Branch (273:49): [True: 0, False: 286]
  |  Branch (273:68): [True: 286, False: 236]
  ------------------
  274|    286|    answer.ec = std::errc::result_out_of_range;
  275|    286|  }
  276|    522|  return answer;
  277|  23.3k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.86M|{
 3778|  5.86M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.86M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.86M|    }
 3781|  5.86M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.86M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.86M|    }
 3784|  5.86M|    else {
 3785|       |        // utf-32
 3786|  5.86M|        static_assert(sizeof(U) == 4);
 3787|  5.86M|        SCN_UNUSED(ch);
 3788|  5.86M|        return 1;
 3789|  5.86M|    }
 3790|  5.86M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.86M|{
 3742|  5.86M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.86M|    SCN_GCC_COMPAT_PUSH
 3745|  5.86M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.86M|    constexpr char lengths[] =
 3747|  5.86M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.86M|        "\1\1\1\1\1\1\1\1"
 3749|  5.86M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.86M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.86M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.86M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.86M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.86M|    SCN_GCC_COMPAT_POP
 3756|  5.86M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.58M|{
 3984|  5.58M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.58M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.58M|    }
 3987|  5.58M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.58M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.58M|    }
 3990|  5.58M|    else {
 3991|  5.58M|        SCN_EXPECT(input.size() == 1);
 3992|  5.58M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.58M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.58M|            return invalid_code_point;
 3995|  5.58M|        }
 3996|  5.58M|        return cp;
 3997|  5.58M|    }
 3998|  5.58M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.58M|{
 3797|  5.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.58M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.58M|    };
 3802|       |
 3803|  5.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 5.33M, False: 251k]
  ------------------
 3804|  5.33M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 831, False: 5.33M]
  ------------------
 3805|    831|            SCN_UNLIKELY_ATTR
 3806|    831|            return invalid_code_point;
 3807|    831|        }
 3808|  5.33M|        return static_cast<char32_t>(input[0]);
 3809|  5.33M|    }
 3810|       |
 3811|   251k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 221k, False: 29.7k]
  ------------------
 3812|   221k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 133, False: 221k]
  ------------------
 3813|    133|            SCN_UNLIKELY_ATTR
 3814|    133|            return invalid_code_point;
 3815|    133|        }
 3816|   221k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 51.5k, False: 169k]
  ------------------
 3817|  51.5k|            SCN_UNLIKELY_ATTR
 3818|  51.5k|            return invalid_code_point;
 3819|  51.5k|        }
 3820|       |
 3821|   169k|        char32_t cp{};
 3822|   169k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   169k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   169k|        return cp;
 3825|   221k|    }
 3826|       |
 3827|  29.7k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 13.3k, False: 16.3k]
  ------------------
 3828|  13.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 89, False: 13.3k]
  ------------------
 3829|     89|            SCN_UNLIKELY_ATTR
 3830|     89|            return invalid_code_point;
 3831|     89|        }
 3832|  13.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 6.23k, False: 7.06k]
  ------------------
 3833|  13.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 964, False: 6.09k]
  ------------------
 3834|  7.20k|            SCN_UNLIKELY_ATTR
 3835|  7.20k|            return invalid_code_point;
 3836|  7.20k|        }
 3837|       |
 3838|  6.09k|        char32_t cp{};
 3839|  6.09k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  6.09k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  6.09k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  6.09k|        return cp;
 3843|  13.3k|    }
 3844|       |
 3845|  16.3k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 16.3k, False: 0]
  ------------------
 3846|  16.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 16.3k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  16.3k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 2.26k, False: 14.1k]
  ------------------
 3851|  2.26k|            SCN_UNLIKELY_ATTR
 3852|  2.26k|            return invalid_code_point;
 3853|  2.26k|        }
 3854|  14.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 3.14k, False: 10.9k]
  ------------------
 3855|  14.1k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 722, False: 10.2k]
  ------------------
 3856|  14.1k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 1.71k, False: 8.53k]
  ------------------
 3857|  5.58k|            SCN_UNLIKELY_ATTR
 3858|  5.58k|            return invalid_code_point;
 3859|  5.58k|        }
 3860|       |
 3861|  8.53k|        char32_t cp{};
 3862|  8.53k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  8.53k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  8.53k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  8.53k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  8.53k|        return cp;
 3867|  14.1k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   277k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   277k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   277k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  12.1M|{
 3670|  12.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  12.1M|                                          decltype(first), decltype(last)> &&
 3672|  12.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  12.1M|        return {first, last};
 3674|  12.1M|    }
 3675|  12.1M|    else {
 3676|  12.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  12.1M|                                       to_address(first), to_address(last)))};
 3678|  12.1M|    }
 3679|  12.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  37.0M|{
  322|  37.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  37.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  37.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  41.1M|{
  302|  41.1M|    return p;
  303|  41.1M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  18.0M|{
 3701|  18.0M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  18.0M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  18.0M|                      decltype(it)> &&
 3704|  18.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  18.0M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  18.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  18.0M|        return it;
 3707|  18.0M|    }
 3708|  18.0M|    else {
 3709|  18.0M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  18.0M|    }
 3711|  18.0M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   116k|    {
 2695|   116k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   116k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   116k|    {
 2676|   116k|        return decay_copy(t.begin());
 2677|   116k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  22.6M|{
 1920|  22.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  22.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  22.6M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   330k|{
 8828|   330k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   330k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   330k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   330k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5356|  1.32M|{
 5357|  1.32M|    detail::check_scan_arg_types<Args...>();
 5358|  1.32M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.32M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5095|  1.64M|{
 5096|  1.64M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.64M|                  "Scan argument types must be default constructible");
 5098|  1.64M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.64M|                  "Scan argument types must be Destructible");
 5100|  1.64M|    static_assert(
 5101|  1.64M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.64M|        "Scan argument types must not be references");
 5103|  1.64M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5309|  1.32M|    {
 5310|  1.32M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.32M|    {
 5321|  1.32M|        return {detail::make_arg<
 5322|  1.32M|            kind, Context,
 5323|  1.32M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.32M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.32M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|  1.32M|{
 5131|  1.32M|    return make_value<Context>(value).ref_value;
 5132|  1.32M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5080|  1.46M|{
 5081|  1.46M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.46M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.46M|                                  needs_context_tag>) {
 5085|  1.46M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.46M|    }
 5087|  1.46M|    else {
 5088|  1.46M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.46M|            value, context_tag<Context>{}));
 5090|  1.46M|    }
 5091|  1.46M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4919|  1.46M|    {                                                                        \
 4920|  1.46M|        return val;                                                          \
 4921|  1.46M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5049|  1.64M|{
 5050|  1.64M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.64M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.64M|    constexpr bool scannable_char =
 5054|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.64M|    static_assert(scannable_char,
 5056|  1.64M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.64M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.64M|    constexpr bool scannable_const =
 5060|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.64M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.64M|    constexpr bool scannable_disabled =
 5064|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.64M|    static_assert(scannable_disabled,
 5066|  1.64M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.64M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.64M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.64M|    static_assert(
 5071|  1.64M|        scannable,
 5072|  1.64M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.64M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.64M|    return arg_value{arg};
 5076|  1.64M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4862|  1.64M|    {
 4863|  1.64M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  1.04M|{
 8615|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  1.04M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  1.04M|{
 8552|  1.04M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.04M|    auto result = vscan_impl(buffer, format, args);
 8555|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.5k, False: 996k]
  |  |  ------------------
  ------------------
 8556|  52.5k|        return unexpected(result.error());
 8557|  52.5k|    }
 8558|   996k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|  2.33M|{
 4681|  2.33M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.33M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.33M|                  "\n"
 4685|  2.33M|                  "Unsupported range type given as input to a scanning "
 4686|  2.33M|                  "function.\n"
 4687|  2.33M|                  "A range needs to have a character type (value type) "
 4688|  2.33M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.33M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.33M|                  "to be included.\n"
 4691|  2.33M|                  "See the scnlib documentation for more details.");
 4692|  2.33M|    static_assert(
 4693|  2.33M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.33M|        "\n"
 4695|  2.33M|        "Unsupported range type given as input to a scanning "
 4696|  2.33M|        "function.\n"
 4697|  2.33M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.33M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.33M|        "not supported.");
 4700|  2.33M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.33M|                  "\n"
 4702|  2.33M|                  "Unsupported range type given as input to a scanning "
 4703|  2.33M|                  "function.\n"
 4704|  2.33M|                  "file_marker_found cannot be used as an "
 4705|  2.33M|                  "source range type to scn::scan.\n"
 4706|  2.33M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.33M|                  "and do not provide an explicit source range, "
 4708|  2.33M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.33M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.33M|                  "\n"
 4711|  2.33M|                  "Unsupported range type given as input to a scanning "
 4712|  2.33M|                  "function.\n"
 4713|  2.33M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.33M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.33M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.33M|                  "\n"
 4717|  2.33M|                  "Unsupported range type given as input to a scanning "
 4718|  2.33M|                  "function.\n"
 4719|  2.33M|                  "A range needs to model forward_range and have a valid "
 4720|  2.33M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.33M|                  "Examples of scannable ranges are std::string, "
 4722|  2.33M|                  "std::string_view, "
 4723|  2.33M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.33M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.33M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.33M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  2.33M|{
 4620|  2.33M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  2.33M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  2.33M|    }
 4623|  2.33M|    else {
 4624|  2.33M|        return invalid_char_type{};
 4625|  2.33M|    }
 4626|  2.33M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.33M|    {
 2826|  2.33M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.33M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.33M|    {
 2807|  2.33M|        return t.data();
 2808|  2.33M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|  2.33M|    {
 3202|  2.33M|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 21.3k, False: 2.31M]
  ------------------
 3203|  2.33M|                   ? nullptr
 3204|  2.33M|                   : std::addressof(*ranges::begin(derived()));
 3205|  2.33M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  2.33M|    {
 2976|  2.33M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  2.33M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  2.33M|    {
 2949|  2.33M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  2.33M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|  12.9M|    {
 3310|  12.9M|        return m_iterator == m_sentinel;
 3311|  12.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|  4.64M|    {
 3156|  4.64M|        return static_cast<const D&>(*this);
 3157|  4.64M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.53M|    {
 2695|  4.53M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.53M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.53M|    {
 2676|  4.53M|        return decay_copy(t.begin());
 2677|  4.53M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  54.9M|    {
 3301|  54.9M|        return m_iterator;
 3302|  54.9M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  2.33M|    {
 2901|  2.33M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  2.33M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  2.33M|    {
 2867|  2.33M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  2.33M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|  7.11M|{
 1920|  7.11M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  7.11M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|  13.0M|    {
 3317|  13.0M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  13.0M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|  17.1M|    {
 1569|  17.1M|        return has_value();
 1570|  17.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  33.9M|    {
  481|  33.9M|        return m_has_value;
  482|  33.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|  1.03M|    {
 1575|  1.03M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.03M|        return this->get_unexpected().error();
 1577|  1.03M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.03M|    {
  464|  1.03M|        return m_unexpected;
  465|  1.03M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  7.98M|    {
  357|  7.98M|        return m_unexpected;
  358|  7.98M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  3.90M|    {
  343|  3.90M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.90M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  3.90M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   113k|    {
 1447|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   113k|    {
  443|   113k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  9.44M|    {
  352|  9.44M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  9.44M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.33M|    {
 1148|  2.33M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  2.21M|{
 5884|  2.21M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.21M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.21M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.21M|    }
 5888|  2.21M|    else {
 5889|  2.21M|        auto it = ranges::begin(source);
 5890|  2.21M|        while (n > 0) {
 5891|  2.21M|            --n;
 5892|  2.21M|            ++it;
 5893|  2.21M|        }
 5894|  2.21M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.21M|    }
 5896|  2.21M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  13.4M|    {
 2695|  13.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  13.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  13.4M|    {
 2676|  13.4M|        return decay_copy(t.begin());
 2677|  13.4M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|  2.21M|{
 5871|  2.21M|    return ranges::end(source);
 5872|  2.21M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.21M|    {
 2752|  2.21M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.21M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.21M|    {
 2734|  2.21M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.21M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  27.6M|    {
 3305|  27.6M|        return m_sentinel;
 3306|  27.6M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  6.75M|    {
 1624|  6.75M|        return value();
 1625|  6.75M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  15.7M|    {
 1598|  15.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  15.7M|        return this->get_value();
 1600|  15.7M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  15.7M|    {
  447|  15.7M|        return m_value;
  448|  15.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.21M|    {
 1401|  2.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.21M|    {
  433|  2.21M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   661k|    {
 7936|   661k|        return m_str;
 7937|   661k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.32M|    {
 5387|  1.32M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5339|  1.32M|    {
 5340|  1.32M|        return m_argptrs;
 5341|  1.32M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  4.19M|    {
 5439|  4.19M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   661k|{
 8781|   661k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 626k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   626k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   626k|    static_cast<    \
  |  |  929|   626k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   626k|    static_cast<    \
  |  |  929|   626k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   661k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  2.33M|    {
 1569|  2.33M|        return has_value();
 1570|  2.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.66M|    {
  481|  4.66M|        return m_has_value;
  482|  4.66M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|   113k|    {
 1575|   113k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   113k|        return this->get_unexpected().error();
 1577|   113k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   113k|    {
  464|   113k|        return m_unexpected;
  465|   113k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   733k|    {
 1148|   733k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  1.99M|    {
 1624|  1.99M|        return value();
 1625|  1.99M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.21M|    {
 1598|  2.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.21M|        return this->get_value();
 1600|  2.21M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.21M|    {
  447|  2.21M|        return m_value;
  448|  2.21M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|   695k|    {
 5791|   695k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  2.21M|    {
 5642|  2.21M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5576|  1.41M|    {
 5577|  1.41M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   695k|    {
 1401|   695k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   695k|    {
  433|   695k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5334|  1.32M|    {
 5335|  1.32M|        return m_args;
 5336|  1.32M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.33M|    {
 2752|  2.33M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.33M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.33M|    {
 2734|  2.33M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.33M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  22.0M|    {
 3287|  22.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  4.19M|{
 7652|  4.19M|    return s;
 7653|  4.19M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  4.19M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   661k|    {
 7932|   661k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   733k|    {
 1569|   733k|        return has_value();
 1570|   733k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.42M|    {
  481|  1.42M|        return m_has_value;
  482|  1.42M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|   695k|    {
 1644|   695k|        return &value();
 1645|   695k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   695k|    {
 1598|   695k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   695k|        return this->get_value();
 1600|   695k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   695k|    {
  447|   695k|        return m_value;
  448|   695k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|  2.21M|    {
 5659|  2.21M|        return ranges::begin(m_range);
 5660|  2.21M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   330k|{
 8895|   330k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   330k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   330k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   330k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  1.04M|{
 8633|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  1.04M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  1.04M|{
 8568|  1.04M|#if !SCN_DISABLE_LOCALE
 8569|  1.04M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.5k, False: 996k]
  |  |  ------------------
  ------------------
 8576|  52.5k|        return unexpected(result.error());
 8577|  52.5k|    }
 8578|   996k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.04M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  72.5k|{
 8934|  72.5k|    T value;
 8935|  72.5k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  72.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  72.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  72.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  72.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  72.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  69.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  72.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|   139k|{
 5116|   139k|    check_scan_arg_types<T>();
 5117|       |
 5118|   139k|    basic_scan_arg<Context> arg;
 5119|   139k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   139k|    arg.m_value = make_value<Context>(value);
 5121|   139k|    return arg;
 5122|   139k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  4.65M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  5.19M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   234k|{
 8646|   234k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   234k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   234k|{
 8592|   234k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   234k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.76k, False: 225k]
  |  |  ------------------
  ------------------
 8596|  8.76k|        return unexpected(result.error());
 8597|  8.76k|    }
 8598|   225k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   234k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   225k|    {
 1634|   225k|        return std::move(value());
 1635|   225k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   357k|{
 8828|   357k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   357k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   357k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   357k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  1.42M|{
 5357|  1.42M|    detail::check_scan_arg_types<Args...>();
 5358|  1.42M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.42M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  1.76M|{
 5096|  1.76M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.76M|                  "Scan argument types must be default constructible");
 5098|  1.76M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.76M|                  "Scan argument types must be Destructible");
 5100|  1.76M|    static_assert(
 5101|  1.76M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.76M|        "Scan argument types must not be references");
 5103|  1.76M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  1.42M|    {
 5310|  1.42M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.42M|    {
 5321|  1.42M|        return {detail::make_arg<
 5322|  1.42M|            kind, Context,
 5323|  1.42M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.42M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.42M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  1.42M|{
 5131|  1.42M|    return make_value<Context>(value).ref_value;
 5132|  1.42M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  1.58M|{
 5081|  1.58M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.58M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.58M|                                  needs_context_tag>) {
 5085|  1.58M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.58M|    }
 5087|  1.58M|    else {
 5088|  1.58M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.58M|            value, context_tag<Context>{}));
 5090|  1.58M|    }
 5091|  1.58M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  1.58M|    {                                                                        \
 4920|  1.58M|        return val;                                                          \
 4921|  1.58M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  1.76M|{
 5050|  1.76M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.76M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.76M|    constexpr bool scannable_char =
 5054|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.76M|    static_assert(scannable_char,
 5056|  1.76M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.76M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.76M|    constexpr bool scannable_const =
 5060|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.76M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.76M|    constexpr bool scannable_disabled =
 5064|  1.76M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.76M|    static_assert(scannable_disabled,
 5066|  1.76M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.76M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.76M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.76M|    static_assert(
 5071|  1.76M|        scannable,
 5072|  1.76M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.76M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.76M|    return arg_value{arg};
 5076|  1.76M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  1.76M|    {
 4863|  1.76M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   714k|    {
 7936|   714k|        return m_str;
 7937|   714k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.42M|    {
 5387|  1.42M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  1.42M|    {
 5340|  1.42M|        return m_argptrs;
 5341|  1.42M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   714k|{
 8781|   714k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   714k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 679k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   679k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   679k|    static_cast<    \
  |  |  929|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   679k|    static_cast<    \
  |  |  929|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   714k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   794k|    {
 1148|   794k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|   756k|    {
 5791|   756k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5576|  1.53M|    {
 5577|  1.53M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   756k|    {
 1401|   756k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   756k|    {
  433|   756k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  1.42M|    {
 5335|  1.42M|        return m_args;
 5336|  1.42M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   714k|    {
 7932|   714k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   794k|    {
 1569|   794k|        return has_value();
 1570|   794k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.55M|    {
  481|  1.55M|        return m_has_value;
  482|  1.55M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|   756k|    {
 1644|   756k|        return &value();
 1645|   756k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   756k|    {
 1598|   756k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   756k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   756k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   756k|        return this->get_value();
 1600|   756k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   756k|    {
  447|   756k|        return m_value;
  448|   756k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   357k|{
 8895|   357k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   357k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   357k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   357k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  80.3k|{
 8934|  80.3k|    T value;
 8935|  80.3k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  80.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  80.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  80.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  80.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 77.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  80.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  77.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  80.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|   155k|{
 5116|   155k|    check_scan_arg_types<T>();
 5117|       |
 5118|   155k|    basic_scan_arg<Context> arg;
 5119|   155k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   155k|    arg.m_value = make_value<Context>(value);
 5121|   155k|    return arg;
 5122|   155k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   361k|{
 8828|   361k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   361k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   361k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5356|  1.44M|{
 5357|  1.44M|    detail::check_scan_arg_types<Args...>();
 5358|  1.44M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.44M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5095|  1.78M|{
 5096|  1.78M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.78M|                  "Scan argument types must be default constructible");
 5098|  1.78M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.78M|                  "Scan argument types must be Destructible");
 5100|  1.78M|    static_assert(
 5101|  1.78M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.78M|        "Scan argument types must not be references");
 5103|  1.78M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5309|  1.44M|    {
 5310|  1.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.44M|    {
 5321|  1.44M|        return {detail::make_arg<
 5322|  1.44M|            kind, Context,
 5323|  1.44M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.44M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.44M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|  1.44M|{
 5131|  1.44M|    return make_value<Context>(value).ref_value;
 5132|  1.44M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5080|  1.60M|{
 5081|  1.60M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.60M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.60M|                                  needs_context_tag>) {
 5085|  1.60M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.60M|    }
 5087|  1.60M|    else {
 5088|  1.60M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.60M|            value, context_tag<Context>{}));
 5090|  1.60M|    }
 5091|  1.60M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4919|  1.60M|    {                                                                        \
 4920|  1.60M|        return val;                                                          \
 4921|  1.60M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5049|  1.78M|{
 5050|  1.78M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.78M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.78M|    constexpr bool scannable_char =
 5054|  1.78M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.78M|    static_assert(scannable_char,
 5056|  1.78M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.78M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.78M|    constexpr bool scannable_const =
 5060|  1.78M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.78M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.78M|    constexpr bool scannable_disabled =
 5064|  1.78M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.78M|    static_assert(scannable_disabled,
 5066|  1.78M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.78M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.78M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.78M|    static_assert(
 5071|  1.78M|        scannable,
 5072|  1.78M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.78M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.78M|    return arg_value{arg};
 5076|  1.78M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4862|  1.78M|    {
 4863|  1.78M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   723k|    {
 7936|   723k|        return m_str;
 7937|   723k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.44M|    {
 5387|  1.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5339|  1.44M|    {
 5340|  1.44M|        return m_argptrs;
 5341|  1.44M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   723k|{
 8781|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 688k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   688k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   688k|    static_cast<    \
  |  |  929|   688k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   688k|    static_cast<    \
  |  |  929|   688k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   723k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   805k|    {
 1148|   805k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|   767k|    {
 5791|   767k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5576|  1.55M|    {
 5577|  1.55M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   767k|    {
 1401|   767k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   767k|    {
  433|   767k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5334|  1.44M|    {
 5335|  1.44M|        return m_args;
 5336|  1.44M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   723k|    {
 7932|   723k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   805k|    {
 1569|   805k|        return has_value();
 1570|   805k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.57M|    {
  481|  1.57M|        return m_has_value;
  482|  1.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|   767k|    {
 1644|   767k|        return &value();
 1645|   767k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   767k|    {
 1598|   767k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   767k|        return this->get_value();
 1600|   767k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   767k|    {
  447|   767k|        return m_value;
  448|   767k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   361k|{
 8895|   361k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   361k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   361k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  81.8k|{
 8934|  81.8k|    T value;
 8935|  81.8k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  81.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  81.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  81.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  81.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 78.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  81.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  78.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.9k|    static_cast<    \
  |  |  929|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.9k|    static_cast<    \
  |  |  929|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  81.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|   157k|{
 5116|   157k|    check_scan_arg_types<T>();
 5117|       |
 5118|   157k|    basic_scan_arg<Context> arg;
 5119|   157k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   157k|    arg.m_value = make_value<Context>(value);
 5121|   157k|    return arg;
 5122|   157k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   113k|    {
 2695|   113k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   113k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   113k|    {
 2676|   113k|        return decay_copy(t.begin());
 2677|   113k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  41.1M|{
 1920|  41.1M|    return SCN_FWD(t);
  ------------------
  |  |  930|  41.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  41.1M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   330k|{
 8828|   330k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   330k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   330k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   330k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  1.04M|{
 8615|  1.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  1.04M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  1.04M|{
 8552|  1.04M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.04M|    auto result = vscan_impl(buffer, format, args);
 8555|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.5k, False: 996k]
  |  |  ------------------
  ------------------
 8556|  52.5k|        return unexpected(result.error());
 8557|  52.5k|    }
 8558|   996k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.04M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|  2.31M|{
 4681|  2.31M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.31M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.31M|                  "\n"
 4685|  2.31M|                  "Unsupported range type given as input to a scanning "
 4686|  2.31M|                  "function.\n"
 4687|  2.31M|                  "A range needs to have a character type (value type) "
 4688|  2.31M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.31M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.31M|                  "to be included.\n"
 4691|  2.31M|                  "See the scnlib documentation for more details.");
 4692|  2.31M|    static_assert(
 4693|  2.31M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.31M|        "\n"
 4695|  2.31M|        "Unsupported range type given as input to a scanning "
 4696|  2.31M|        "function.\n"
 4697|  2.31M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.31M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.31M|        "not supported.");
 4700|  2.31M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.31M|                  "\n"
 4702|  2.31M|                  "Unsupported range type given as input to a scanning "
 4703|  2.31M|                  "function.\n"
 4704|  2.31M|                  "file_marker_found cannot be used as an "
 4705|  2.31M|                  "source range type to scn::scan.\n"
 4706|  2.31M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.31M|                  "and do not provide an explicit source range, "
 4708|  2.31M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.31M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.31M|                  "\n"
 4711|  2.31M|                  "Unsupported range type given as input to a scanning "
 4712|  2.31M|                  "function.\n"
 4713|  2.31M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.31M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.31M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.31M|                  "\n"
 4717|  2.31M|                  "Unsupported range type given as input to a scanning "
 4718|  2.31M|                  "function.\n"
 4719|  2.31M|                  "A range needs to model forward_range and have a valid "
 4720|  2.31M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.31M|                  "Examples of scannable ranges are std::string, "
 4722|  2.31M|                  "std::string_view, "
 4723|  2.31M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.31M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.31M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.31M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  2.31M|{
 4651|  2.31M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  2.31M|        return file_marker_found{};
 4653|  2.31M|    }
 4654|  2.31M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  2.31M|        if constexpr (ranges::range<Range>) {
 4656|  2.31M|            return insufficient_range{};
 4657|  2.31M|        }
 4658|  2.31M|        else {
 4659|  2.31M|            return invalid_input_range{};
 4660|  2.31M|        }
 4661|  2.31M|    }
 4662|  2.31M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  2.31M|        return invalid_char_type{};
 4664|  2.31M|    }
 4665|  2.31M|    else {
 4666|  2.31M|        return make_forward_scan_buffer(r);
 4667|  2.31M|    }
 4668|  2.31M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|  2.31M|{
 4485|  2.31M|    return basic_scan_forward_buffer_impl(range);
 4486|  2.31M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  2.31M|    {
 4378|  2.31M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|  2.31M|    {
 4353|  2.31M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|  2.31M|    {
 4122|  2.31M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|  2.31M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.52M|    {
 2695|  4.52M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.52M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.52M|    {
 2676|  4.52M|        return decay_copy(t.begin());
 2677|  4.52M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|  6.72M|    {
 3301|  6.72M|        return m_iterator;
 3302|  6.72M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  29.8M|    {
 4382|  29.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 409k, False: 29.4M]
  ------------------
 4383|   409k|            return false;
 4384|   409k|        }
 4385|  29.4M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 27.1M, False: 2.29M]
  ------------------
 4386|  27.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  27.1M|                                          this->m_current_view.begin(),
 4388|  27.1M|                                          this->m_current_view.end());
 4389|  27.1M|        }
 4390|  29.4M|        m_latest = *m_cursor;
 4391|  29.4M|        ++m_cursor;
 4392|  29.4M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  29.4M|        return true;
 4394|  29.8M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  29.8M|    {
 2752|  29.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  29.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  29.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  29.8M|    {
 2734|  29.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  29.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  29.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  32.0M|    {
 3305|  32.0M|        return m_sentinel;
 3306|  32.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|  2.31M|    {
 4042|  2.31M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.31M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  2.31M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   113k|    {
 1447|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   113k|    {
  443|   113k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.31M|    {
 1148|  2.31M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  2.20M|{
 5884|  2.20M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.20M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.20M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.20M|    }
 5888|  2.20M|    else {
 5889|  2.20M|        auto it = ranges::begin(source);
 5890|  2.20M|        while (n > 0) {
 5891|  2.20M|            --n;
 5892|  2.20M|            ++it;
 5893|  2.20M|        }
 5894|  2.20M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.20M|    }
 5896|  2.20M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.20M|    {
 2695|  2.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.20M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.20M|    {
 2676|  2.20M|        return decay_copy(t.begin());
 2677|  2.20M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|  2.20M|{
 5871|  2.20M|    return ranges::end(source);
 5872|  2.20M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.20M|    {
 2752|  2.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.20M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.20M|    {
 2734|  2.20M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.20M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  2.20M|    {
 1401|  2.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.20M|    {
  433|  2.20M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   661k|    {
 7936|   661k|        return m_str;
 7937|   661k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   661k|{
 8781|   661k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 626k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   626k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   626k|    static_cast<    \
  |  |  929|   626k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   626k|    static_cast<    \
  |  |  929|   626k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   661k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  2.31M|    {
 1569|  2.31M|        return has_value();
 1570|  2.31M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.63M|    {
  481|  4.63M|        return m_has_value;
  482|  4.63M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   113k|    {
 1575|   113k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   113k|        return this->get_unexpected().error();
 1577|   113k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   113k|    {
  464|   113k|        return m_unexpected;
  465|   113k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   728k|    {
 1148|   728k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  1.99M|    {
 1624|  1.99M|        return value();
 1625|  1.99M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  2.20M|    {
 1598|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.20M|        return this->get_value();
 1600|  2.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.20M|    {
  447|  2.20M|        return m_value;
  448|  2.20M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|   690k|    {
 5791|   690k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|  2.20M|    {
 5642|  2.20M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   690k|    {
 1401|   690k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   690k|    {
  433|   690k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.31M|    {
 2752|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.31M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.31M|    {
 2734|  2.31M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.31M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  4.52M|    {
 3287|  4.52M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   661k|    {
 7932|   661k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   728k|    {
 1569|   728k|        return has_value();
 1570|   728k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.41M|    {
  481|  1.41M|        return m_has_value;
  482|  1.41M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|   690k|    {
 1644|   690k|        return &value();
 1645|   690k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   690k|    {
 1598|   690k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   690k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   690k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   690k|        return this->get_value();
 1600|   690k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   690k|    {
  447|   690k|        return m_value;
  448|   690k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|  2.20M|    {
 5659|  2.20M|        return ranges::begin(m_range);
 5660|  2.20M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   330k|{
 8895|   330k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   330k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   330k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   330k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  1.04M|{
 8633|  1.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  1.04M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  1.04M|{
 8568|  1.04M|#if !SCN_DISABLE_LOCALE
 8569|  1.04M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.5k, False: 996k]
  |  |  ------------------
  ------------------
 8576|  52.5k|        return unexpected(result.error());
 8577|  52.5k|    }
 8578|   996k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   996k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.04M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  67.4k|{
 8934|  67.4k|    T value;
 8935|  67.4k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  67.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  67.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  67.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  67.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 64.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  67.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  64.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  67.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   218k|{
 8646|   218k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   218k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   218k|{
 8592|   218k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   218k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   218k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.76k, False: 209k]
  |  |  ------------------
  ------------------
 8596|  8.76k|        return unexpected(result.error());
 8597|  8.76k|    }
 8598|   209k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   218k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|   209k|    {
 1634|   209k|        return std::move(value());
 1635|   209k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   357k|{
 8828|   357k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   357k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   357k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   357k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   714k|    {
 7936|   714k|        return m_str;
 7937|   714k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   714k|{
 8781|   714k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   714k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 679k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   679k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   679k|    static_cast<    \
  |  |  929|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   679k|    static_cast<    \
  |  |  929|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   714k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   789k|    {
 1148|   789k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|   751k|    {
 5791|   751k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   751k|    {
 1401|   751k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   751k|    {
  433|   751k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   714k|    {
 7932|   714k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   789k|    {
 1569|   789k|        return has_value();
 1570|   789k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.54M|    {
  481|  1.54M|        return m_has_value;
  482|  1.54M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|   751k|    {
 1644|   751k|        return &value();
 1645|   751k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   751k|    {
 1598|   751k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   751k|        return this->get_value();
 1600|   751k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   751k|    {
  447|   751k|        return m_value;
  448|   751k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   357k|{
 8895|   357k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   357k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   357k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   357k|    static_cast<    \
  |  |  929|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   357k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  74.9k|{
 8934|  74.9k|    T value;
 8935|  74.9k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  74.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  74.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  74.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  74.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 72.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  74.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  72.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  74.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   361k|{
 8828|   361k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   361k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   361k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   723k|    {
 7936|   723k|        return m_str;
 7937|   723k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   723k|{
 8781|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 687k]
  |  |  ------------------
  ------------------
 8782|  35.0k|        return unexpected(result.error());
 8783|  35.0k|    }
 8784|   687k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   687k|    static_cast<    \
  |  |  929|   687k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   687k|    static_cast<    \
  |  |  929|   687k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   723k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  37.9k|    {
 1447|  37.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  37.9k|    {
  443|  37.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   798k|    {
 1148|   798k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|   761k|    {
 5791|   761k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   761k|    {
 1401|   761k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   761k|    {
  433|   761k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   723k|    {
 7932|   723k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   798k|    {
 1569|   798k|        return has_value();
 1570|   798k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.55M|    {
  481|  1.55M|        return m_has_value;
  482|  1.55M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|   761k|    {
 1644|   761k|        return &value();
 1645|   761k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   761k|    {
 1598|   761k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   761k|        return this->get_value();
 1600|   761k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   761k|    {
  447|   761k|        return m_value;
  448|   761k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   361k|{
 8895|   361k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   361k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   361k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  75.9k|{
 8934|  75.9k|    T value;
 8935|  75.9k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  75.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.92k, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.92k|    }                                                  \
  |  |  |  | 3642|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  73.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  75.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   233k|    {
 2695|   233k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   233k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   233k|    {
 2676|   233k|        return decay_copy(t.begin());
 2677|   233k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  1.19M|{
 1920|  1.19M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.19M|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5356|   165k|{
 5357|   165k|    detail::check_scan_arg_types<Args...>();
 5358|   165k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   165k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5309|   165k|    {
 5310|   165k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   165k|    {
 5321|   165k|        return {detail::make_arg<
 5322|   165k|            kind, Context,
 5323|   165k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   165k|                                 typename Context::char_type>::value>(args)...};
 5325|   165k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|   165k|{
 5131|   165k|    return make_value<Context>(value).ref_value;
 5132|   165k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5080|   180k|{
 5081|   180k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   180k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   180k|                                  needs_context_tag>) {
 5085|   180k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   180k|    }
 5087|   180k|    else {
 5088|   180k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   180k|            value, context_tag<Context>{}));
 5090|   180k|    }
 5091|   180k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4919|   180k|    {                                                                        \
 4920|   180k|        return val;                                                          \
 4921|   180k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   124k|{
 8552|   124k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   124k|    auto result = vscan_impl(buffer, format, args);
 8555|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 19.4k]
  |  |  ------------------
  ------------------
 8556|   105k|        return unexpected(result.error());
 8557|   105k|    }
 8558|  19.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   124k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|   270k|{
 4681|   270k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   270k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   270k|                  "\n"
 4685|   270k|                  "Unsupported range type given as input to a scanning "
 4686|   270k|                  "function.\n"
 4687|   270k|                  "A range needs to have a character type (value type) "
 4688|   270k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   270k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   270k|                  "to be included.\n"
 4691|   270k|                  "See the scnlib documentation for more details.");
 4692|   270k|    static_assert(
 4693|   270k|        !std::is_same_v<T, custom_char_traits>,
 4694|   270k|        "\n"
 4695|   270k|        "Unsupported range type given as input to a scanning "
 4696|   270k|        "function.\n"
 4697|   270k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   270k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   270k|        "not supported.");
 4700|   270k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   270k|                  "\n"
 4702|   270k|                  "Unsupported range type given as input to a scanning "
 4703|   270k|                  "function.\n"
 4704|   270k|                  "file_marker_found cannot be used as an "
 4705|   270k|                  "source range type to scn::scan.\n"
 4706|   270k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   270k|                  "and do not provide an explicit source range, "
 4708|   270k|                  "or use scn::scan with a FILE* directly.");
 4709|   270k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   270k|                  "\n"
 4711|   270k|                  "Unsupported range type given as input to a scanning "
 4712|   270k|                  "function.\n"
 4713|   270k|                  "In order to be scannable, a range needs to satisfy "
 4714|   270k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   270k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   270k|                  "\n"
 4717|   270k|                  "Unsupported range type given as input to a scanning "
 4718|   270k|                  "function.\n"
 4719|   270k|                  "A range needs to model forward_range and have a valid "
 4720|   270k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   270k|                  "Examples of scannable ranges are std::string, "
 4722|   270k|                  "std::string_view, "
 4723|   270k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   270k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   270k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   270k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   270k|{
 4620|   270k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   270k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   270k|    }
 4623|   270k|    else {
 4624|   270k|        return invalid_char_type{};
 4625|   270k|    }
 4626|   270k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   270k|    {
 2826|   270k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   270k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   270k|    {
 2807|   270k|        return t.data();
 2808|   270k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|   270k|    {
 3202|   270k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 399, False: 270k]
  ------------------
 3203|   270k|                   ? nullptr
 3204|   270k|                   : std::addressof(*ranges::begin(derived()));
 3205|   270k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   270k|    {
 2976|   270k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   270k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   270k|    {
 2949|   270k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   270k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|   434k|    {
 3310|   434k|        return m_iterator == m_sentinel;
 3311|   434k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|   540k|    {
 3156|   540k|        return static_cast<const D&>(*this);
 3157|   540k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   312k|    {
 2695|   312k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   312k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   312k|    {
 2676|   312k|        return decay_copy(t.begin());
 2677|   312k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  6.86M|    {
 3301|  6.86M|        return m_iterator;
 3302|  6.86M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   270k|    {
 2901|   270k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   270k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   270k|    {
 2867|   270k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   270k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  1.12M|    {
 3317|  1.12M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  1.12M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   227k|    {
 1447|   227k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   227k|    {
  443|   227k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   270k|    {
 1148|   270k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  42.6k|{
 5884|  42.6k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  42.6k|                      ranges::iterator_t<SourceRange>>) {
 5886|  42.6k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  42.6k|    }
 5888|  42.6k|    else {
 5889|  42.6k|        auto it = ranges::begin(source);
 5890|  42.6k|        while (n > 0) {
 5891|  42.6k|            --n;
 5892|  42.6k|            ++it;
 5893|  42.6k|        }
 5894|  42.6k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  42.6k|    }
 5896|  42.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   326k|    {
 2695|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   326k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   326k|    {
 2676|   326k|        return decay_copy(t.begin());
 2677|   326k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5870|  42.6k|{
 5871|  42.6k|    return ranges::end(source);
 5872|  42.6k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  42.6k|    {
 2752|  42.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  42.6k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  42.6k|    {
 2734|  42.6k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  42.6k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  3.46M|    {
 3305|  3.46M|        return m_sentinel;
 3306|  3.46M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  42.6k|    {
 1401|  42.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  42.6k|    {
  433|  42.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  82.9k|    {
 7936|  82.9k|        return m_str;
 7937|  82.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   165k|    {
 5387|   165k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5339|   165k|    {
 5340|   165k|        return m_argptrs;
 5341|   165k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   498k|    {
 5439|   498k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  82.9k|{
 8781|  82.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 12.8k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  12.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  82.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   270k|    {
 1569|   270k|        return has_value();
 1570|   270k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   541k|    {
  481|   541k|        return m_has_value;
  482|   541k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   227k|    {
 1575|   227k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   227k|        return this->get_unexpected().error();
 1577|   227k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   227k|    {
  464|   227k|        return m_unexpected;
  465|   227k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.0k|    {
 1148|  90.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  38.8k|    {
 1624|  38.8k|        return value();
 1625|  38.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  42.6k|    {
 1598|  42.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  42.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  42.6k|        return this->get_value();
 1600|  42.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  42.6k|    {
  447|  42.6k|        return m_value;
  448|  42.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|  14.1k|    {
 5791|  14.1k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|  42.6k|    {
 5642|  42.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  14.1k|    {
 1401|  14.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  14.1k|    {
  433|  14.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5334|   165k|    {
 5335|   165k|        return m_args;
 5336|   165k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   276k|    {
 2752|   276k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   276k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   276k|    {
 2734|   276k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   276k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.42M|    {
 3287|  2.42M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   498k|{
 7657|   498k|    return s;
 7658|   498k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   498k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  82.9k|    {
 7932|  82.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  90.0k|    {
 1569|  90.0k|        return has_value();
 1570|  90.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|  14.1k|    {
 1644|  14.1k|        return &value();
 1645|  14.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  14.1k|    {
 1598|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.1k|        return this->get_value();
 1600|  14.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.1k|    {
  447|  14.1k|        return m_value;
  448|  14.1k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5658|  42.6k|    {
 5659|  42.6k|        return ranges::begin(m_range);
 5660|  42.6k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   124k|{
 8568|   124k|#if !SCN_DISABLE_LOCALE
 8569|   124k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   124k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   124k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   124k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 19.4k]
  |  |  ------------------
  ------------------
 8576|   105k|        return unexpected(result.error());
 8577|   105k|    }
 8578|  19.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   124k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|  14.2k|{
 5116|  14.2k|    check_scan_arg_types<T>();
 5117|       |
 5118|  14.2k|    basic_scan_arg<Context> arg;
 5119|  14.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  14.2k|    arg.m_value = make_value<Context>(value);
 5121|  14.2k|    return arg;
 5122|  14.2k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|   541k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  21.3k|{
 8592|  21.3k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  21.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 3.83k]
  |  |  ------------------
  ------------------
 8596|  17.5k|        return unexpected(result.error());
 8597|  17.5k|    }
 8598|  3.83k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  21.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.83k|    {
 1634|  3.83k|        return std::move(value());
 1635|  3.83k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|   166k|{
 5357|   166k|    detail::check_scan_arg_types<Args...>();
 5358|   166k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   166k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|   166k|    {
 5310|   166k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   166k|    {
 5321|   166k|        return {detail::make_arg<
 5322|   166k|            kind, Context,
 5323|   166k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   166k|                                 typename Context::char_type>::value>(args)...};
 5325|   166k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|   166k|{
 5131|   166k|    return make_value<Context>(value).ref_value;
 5132|   166k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|   180k|{
 5081|   180k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   180k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   180k|                                  needs_context_tag>) {
 5085|   180k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   180k|    }
 5087|   180k|    else {
 5088|   180k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   180k|            value, context_tag<Context>{}));
 5090|   180k|    }
 5091|   180k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|   180k|    {                                                                        \
 4920|   180k|        return val;                                                          \
 4921|   180k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  83.0k|    {
 7936|  83.0k|        return m_str;
 7937|  83.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   166k|    {
 5387|   166k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|   166k|    {
 5340|   166k|        return m_argptrs;
 5341|   166k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  83.0k|{
 8781|  83.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 12.9k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  12.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  83.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.1k|    {
 1148|  90.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|  14.2k|    {
 5791|  14.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  14.2k|    {
 1401|  14.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  14.2k|    {
  433|  14.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|   166k|    {
 5335|   166k|        return m_args;
 5336|   166k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  83.0k|    {
 7932|  83.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  90.1k|    {
 1569|  90.1k|        return has_value();
 1570|  90.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|  14.2k|    {
 1644|  14.2k|        return &value();
 1645|  14.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  14.2k|    {
 1598|  14.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.2k|        return this->get_value();
 1600|  14.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.2k|    {
  447|  14.2k|        return m_value;
  448|  14.2k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|  14.2k|{
 5116|  14.2k|    check_scan_arg_types<T>();
 5117|       |
 5118|  14.2k|    basic_scan_arg<Context> arg;
 5119|  14.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  14.2k|    arg.m_value = make_value<Context>(value);
 5121|  14.2k|    return arg;
 5122|  14.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5356|   166k|{
 5357|   166k|    detail::check_scan_arg_types<Args...>();
 5358|   166k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   166k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5309|   166k|    {
 5310|   166k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   166k|    {
 5321|   166k|        return {detail::make_arg<
 5322|   166k|            kind, Context,
 5323|   166k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   166k|                                 typename Context::char_type>::value>(args)...};
 5325|   166k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|   166k|{
 5131|   166k|    return make_value<Context>(value).ref_value;
 5132|   166k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5080|   180k|{
 5081|   180k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   180k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   180k|                                  needs_context_tag>) {
 5085|   180k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   180k|    }
 5087|   180k|    else {
 5088|   180k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   180k|            value, context_tag<Context>{}));
 5090|   180k|    }
 5091|   180k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4919|   180k|    {                                                                        \
 4920|   180k|        return val;                                                          \
 4921|   180k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  83.1k|    {
 7936|  83.1k|        return m_str;
 7937|  83.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   166k|    {
 5387|   166k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5339|   166k|    {
 5340|   166k|        return m_argptrs;
 5341|   166k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  83.1k|{
 8781|  83.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 13.0k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  13.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  83.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.3k|    {
 1148|  90.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|  14.3k|    {
 5791|  14.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  14.3k|    {
 1401|  14.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  14.3k|    {
  433|  14.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5334|   166k|    {
 5335|   166k|        return m_args;
 5336|   166k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  83.1k|    {
 7932|  83.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  90.3k|    {
 1569|  90.3k|        return has_value();
 1570|  90.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|  14.3k|    {
 1644|  14.3k|        return &value();
 1645|  14.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  14.3k|    {
 1598|  14.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.3k|        return this->get_value();
 1600|  14.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.3k|    {
  447|  14.3k|        return m_value;
  448|  14.3k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|  14.2k|{
 5116|  14.2k|    check_scan_arg_types<T>();
 5117|       |
 5118|  14.2k|    basic_scan_arg<Context> arg;
 5119|  14.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  14.2k|    arg.m_value = make_value<Context>(value);
 5121|  14.2k|    return arg;
 5122|  14.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   227k|    {
 2695|   227k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   227k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   227k|    {
 2676|   227k|        return decay_copy(t.begin());
 2677|   227k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|  2.09M|{
 1920|  2.09M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.09M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|   124k|{
 8552|   124k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   124k|    auto result = vscan_impl(buffer, format, args);
 8555|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 19.3k]
  |  |  ------------------
  ------------------
 8556|   105k|        return unexpected(result.error());
 8557|   105k|    }
 8558|  19.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   124k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|   270k|{
 4681|   270k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   270k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   270k|                  "\n"
 4685|   270k|                  "Unsupported range type given as input to a scanning "
 4686|   270k|                  "function.\n"
 4687|   270k|                  "A range needs to have a character type (value type) "
 4688|   270k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   270k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   270k|                  "to be included.\n"
 4691|   270k|                  "See the scnlib documentation for more details.");
 4692|   270k|    static_assert(
 4693|   270k|        !std::is_same_v<T, custom_char_traits>,
 4694|   270k|        "\n"
 4695|   270k|        "Unsupported range type given as input to a scanning "
 4696|   270k|        "function.\n"
 4697|   270k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   270k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   270k|        "not supported.");
 4700|   270k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   270k|                  "\n"
 4702|   270k|                  "Unsupported range type given as input to a scanning "
 4703|   270k|                  "function.\n"
 4704|   270k|                  "file_marker_found cannot be used as an "
 4705|   270k|                  "source range type to scn::scan.\n"
 4706|   270k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   270k|                  "and do not provide an explicit source range, "
 4708|   270k|                  "or use scn::scan with a FILE* directly.");
 4709|   270k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   270k|                  "\n"
 4711|   270k|                  "Unsupported range type given as input to a scanning "
 4712|   270k|                  "function.\n"
 4713|   270k|                  "In order to be scannable, a range needs to satisfy "
 4714|   270k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   270k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   270k|                  "\n"
 4717|   270k|                  "Unsupported range type given as input to a scanning "
 4718|   270k|                  "function.\n"
 4719|   270k|                  "A range needs to model forward_range and have a valid "
 4720|   270k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   270k|                  "Examples of scannable ranges are std::string, "
 4722|   270k|                  "std::string_view, "
 4723|   270k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   270k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   270k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   270k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   270k|{
 4651|   270k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   270k|        return file_marker_found{};
 4653|   270k|    }
 4654|   270k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   270k|        if constexpr (ranges::range<Range>) {
 4656|   270k|            return insufficient_range{};
 4657|   270k|        }
 4658|   270k|        else {
 4659|   270k|            return invalid_input_range{};
 4660|   270k|        }
 4661|   270k|    }
 4662|   270k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   270k|        return invalid_char_type{};
 4664|   270k|    }
 4665|   270k|    else {
 4666|   270k|        return make_forward_scan_buffer(r);
 4667|   270k|    }
 4668|   270k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|   270k|{
 4485|   270k|    return basic_scan_forward_buffer_impl(range);
 4486|   270k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   270k|    {
 4378|   270k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|   270k|    {
 4353|   270k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|   270k|    {
 4122|   270k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|   270k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   312k|    {
 2695|   312k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   312k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   312k|    {
 2676|   312k|        return decay_copy(t.begin());
 2677|   312k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|   355k|    {
 3301|   355k|        return m_iterator;
 3302|   355k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|  1.20M|    {
 4382|  1.20M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 143k, False: 1.05M]
  ------------------
 4383|   143k|            return false;
 4384|   143k|        }
 4385|  1.05M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 788k, False: 270k]
  ------------------
 4386|   788k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|   788k|                                          this->m_current_view.begin(),
 4388|   788k|                                          this->m_current_view.end());
 4389|   788k|        }
 4390|  1.05M|        m_latest = *m_cursor;
 4391|  1.05M|        ++m_cursor;
 4392|  1.05M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  1.05M|        return true;
 4394|  1.20M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.20M|    {
 2752|  1.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.20M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.20M|    {
 2734|  1.20M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.20M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|  1.24M|    {
 3305|  1.24M|        return m_sentinel;
 3306|  1.24M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|   270k|    {
 4042|   270k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   270k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   270k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   227k|    {
 1447|   227k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   227k|    {
  443|   227k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   270k|    {
 1148|   270k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  42.5k|{
 5884|  42.5k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  42.5k|                      ranges::iterator_t<SourceRange>>) {
 5886|  42.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  42.5k|    }
 5888|  42.5k|    else {
 5889|  42.5k|        auto it = ranges::begin(source);
 5890|  42.5k|        while (n > 0) {
 5891|  42.5k|            --n;
 5892|  42.5k|            ++it;
 5893|  42.5k|        }
 5894|  42.5k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  42.5k|    }
 5896|  42.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  42.5k|    {
 2695|  42.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  42.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  42.5k|    {
 2676|  42.5k|        return decay_copy(t.begin());
 2677|  42.5k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5870|  42.5k|{
 5871|  42.5k|    return ranges::end(source);
 5872|  42.5k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  42.5k|    {
 2752|  42.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  42.5k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  42.5k|    {
 2734|  42.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  42.5k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  42.5k|    {
 1401|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  42.5k|    {
  433|  42.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  82.9k|    {
 7936|  82.9k|        return m_str;
 7937|  82.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  82.9k|{
 8781|  82.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 12.8k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  12.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  82.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   270k|    {
 1569|   270k|        return has_value();
 1570|   270k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   540k|    {
  481|   540k|        return m_has_value;
  482|   540k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   227k|    {
 1575|   227k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   227k|        return this->get_unexpected().error();
 1577|   227k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   227k|    {
  464|   227k|        return m_unexpected;
  465|   227k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.0k|    {
 1148|  90.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  38.7k|    {
 1624|  38.7k|        return value();
 1625|  38.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  42.5k|    {
 1598|  42.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  42.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  42.5k|        return this->get_value();
 1600|  42.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  42.5k|    {
  447|  42.5k|        return m_value;
  448|  42.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|  14.0k|    {
 5791|  14.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5641|  42.5k|    {
 5642|  42.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  14.0k|    {
 1401|  14.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  14.0k|    {
  433|  14.0k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   270k|    {
 2752|   270k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   270k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   270k|    {
 2734|   270k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   270k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   312k|    {
 3287|   312k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  82.9k|    {
 7932|  82.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  90.0k|    {
 1569|  90.0k|        return has_value();
 1570|  90.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|  14.0k|    {
 1644|  14.0k|        return &value();
 1645|  14.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  14.0k|    {
 1598|  14.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.0k|        return this->get_value();
 1600|  14.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.0k|    {
  447|  14.0k|        return m_value;
  448|  14.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5658|  42.5k|    {
 5659|  42.5k|        return ranges::begin(m_range);
 5660|  42.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|   124k|{
 8568|   124k|#if !SCN_DISABLE_LOCALE
 8569|   124k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   124k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   124k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   124k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 19.3k]
  |  |  ------------------
  ------------------
 8576|   105k|        return unexpected(result.error());
 8577|   105k|    }
 8578|  19.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   124k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  21.3k|{
 8592|  21.3k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  21.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  21.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 3.82k]
  |  |  ------------------
  ------------------
 8596|  17.5k|        return unexpected(result.error());
 8597|  17.5k|    }
 8598|  3.82k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  21.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  3.82k|    {
 1634|  3.82k|        return std::move(value());
 1635|  3.82k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  83.0k|    {
 7936|  83.0k|        return m_str;
 7937|  83.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  83.0k|{
 8781|  83.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 12.8k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  12.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  12.8k|    static_cast<    \
  |  |  929|  12.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  83.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.1k|    {
 1148|  90.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|  14.1k|    {
 5791|  14.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  14.1k|    {
 1401|  14.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  14.1k|    {
  433|  14.1k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  83.0k|    {
 7932|  83.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  90.1k|    {
 1569|  90.1k|        return has_value();
 1570|  90.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|  14.1k|    {
 1644|  14.1k|        return &value();
 1645|  14.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  14.1k|    {
 1598|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.1k|        return this->get_value();
 1600|  14.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.1k|    {
  447|  14.1k|        return m_value;
  448|  14.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  83.1k|    {
 7936|  83.1k|        return m_str;
 7937|  83.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  83.1k|{
 8781|  83.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.1k, False: 13.0k]
  |  |  ------------------
  ------------------
 8782|  70.1k|        return unexpected(result.error());
 8783|  70.1k|    }
 8784|  13.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.0k|    static_cast<    \
  |  |  929|  13.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  83.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  75.9k|    {
 1447|  75.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  75.9k|    {
  443|  75.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.2k|    {
 1148|  90.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|  14.3k|    {
 5791|  14.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  14.3k|    {
 1401|  14.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  14.3k|    {
  433|  14.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  83.1k|    {
 7932|  83.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  90.2k|    {
 1569|  90.2k|        return has_value();
 1570|  90.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   104k|    {
  481|   104k|        return m_has_value;
  482|   104k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|  14.3k|    {
 1644|  14.3k|        return &value();
 1645|  14.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  14.3k|    {
 1598|  14.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.3k|        return this->get_value();
 1600|  14.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.3k|    {
  447|  14.3k|        return m_value;
  448|  14.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|  5.55M|    {
 3539|  5.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|  5.55M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  23.9M|    {
 3545|  23.9M|        return m_code == good;
 3546|  23.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|   525k|    {
 3556|   525k|        return m_code;
 3557|   525k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|   103M|    {
 3301|   103M|        return m_iterator;
 3302|   103M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  8.87M|    {
 3301|  8.87M|        return m_iterator;
 3302|  8.87M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  3.70M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|  1.03M|    {
 6233|  1.03M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.03M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|  1.03M|            m_specs.localized = true;
 6235|  1.03M|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|  1.03M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  2.66M|    {
 6264|  2.66M|        m_specs.type = type;
 6265|  2.66M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  3.70M|    {
 6337|  3.70M|        return static_cast<bool>(m_error);
 6338|  3.70M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|   525k|{
 3580|   525k|    return a.code() == b;
 3581|   525k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|   525k|{
 3584|   525k|    return !(a == b);
 3585|   525k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  1.03M|{
 7024|  1.03M|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 1.03M]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 1.03M]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 1.03M]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 1.03M]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 1.03M]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 1.03M]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 1.03M]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 1.03M]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 1.03M]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 1.03M]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 1.03M]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 1.03M]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 1.03M]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 1.03M]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 1.03M]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 1.03M]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|   321k|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 321k, False: 712k]
  ------------------
 7052|   674k|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 353k, False: 681k]
  ------------------
 7053|  1.03M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 359k, False: 674k]
  ------------------
 7054|  1.03M|            return arg_type_category::floating;
 7055|       |
 7056|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 0, False: 1.03M]
  ------------------
 7057|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 0, False: 1.03M]
  ------------------
 7058|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 0, False: 1.03M]
  ------------------
 7059|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 0, False: 1.03M]
  ------------------
 7060|      0|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 1.03M]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.03M]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  1.03M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  1.03M|            SCN_CLANG_POP
 7071|  1.03M|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  1.03M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  4.50M|    {
 2867|  4.50M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  4.50M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2900|  4.50M|    {
 2901|  4.50M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  4.50M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2923|  4.50M|    {
 2924|  4.50M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|  4.50M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2932|  4.50M|    {
 2933|  4.50M|        return fn::impl(std::forward<T>(t));
 2934|  4.50M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3624|  1.30k|{
 3625|  1.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.30k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  2.27k|{
 3625|  2.27k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.27k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3624|  32.2k|{
 3625|  32.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  32.2k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  3.70M|{
 7154|  3.70M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 2.66M, False: 1.03M]
  ------------------
 7155|  3.70M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 0, False: 2.66M]
  ------------------
 7156|  2.66M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 0, False: 2.66M]
  ------------------
 7157|      0|        SCN_UNLIKELY_ATTR
 7158|      0|        return handler.on_error("Invalid type specifier for float type");
 7159|      0|    }
 7160|  3.70M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|   673M|    {
 4166|   673M|        return m_end == nullptr;
 4167|   673M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  1.79M|{
 3686|  1.79M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  1.79M|                                          const CharT*, const CharT*>) {
 3688|  1.79M|        return {first, last};
 3689|  1.79M|    }
 3690|  1.79M|    else {
 3691|  1.79M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  1.79M|    }
 3693|  1.79M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|  8.80M|    {
 4182|  8.80M|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 8.80M]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  8.80M|        return parent()->get_segment_starting_at(position());
 4188|  8.80M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|   375M|    {
 4176|   375M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   375M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   375M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|   375M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|   375M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|  8.80M|    {
 4072|  8.80M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87M, False: 4.93M]
  |  |  ------------------
  ------------------
 4073|  8.80M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  3.87M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  3.87M|        }
 4076|  4.93M|        const auto start = pos - m_putback_buffer.size();
 4077|  4.93M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  4.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  4.93M|        return m_current_view.substr(start);
 4079|  4.93M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4170|  6.13M|    {
 4171|  6.13M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|  6.13M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|  6.13M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|  16.1M|    {
 4161|  16.1M|        return m_position;
 4162|  16.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|  6.95M|    {
 4094|  6.95M|        return m_is_contiguous;
 4095|  6.95M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|  25.3M|    {
 4166|  25.3M|        return m_end == nullptr;
 4167|  25.3M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  40.4k|{
 3686|  40.4k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  40.4k|                                          const CharT*, const CharT*>) {
 3688|  40.4k|        return {first, last};
 3689|  40.4k|    }
 3690|  40.4k|    else {
 3691|  40.4k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  40.4k|    }
 3693|  40.4k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|   356k|    {
 4182|   356k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 356k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   356k|        return parent()->get_segment_starting_at(position());
 4188|   356k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|  13.7M|    {
 4176|  13.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  13.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  13.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  13.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|   356k|    {
 4072|   356k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.8k, False: 273k]
  |  |  ------------------
  ------------------
 4073|   356k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  82.8k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  82.8k|        }
 4076|   273k|        const auto start = pos - m_putback_buffer.size();
 4077|   273k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   273k|        return m_current_view.substr(start);
 4079|   273k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4170|   685k|    {
 4171|   685k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   685k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   685k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|   685k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|   685k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|  1.05M|    {
 4161|  1.05M|        return m_position;
 4162|  1.05M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|   811k|    {
 4094|   811k|        return m_is_contiguous;
 4095|   811k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  21.2M|    {
 3151|  21.2M|        return static_cast<D&>(*this);
 3152|  21.2M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  10.6M|    {
 2949|  10.6M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  10.6M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  10.6M|    {
 2976|  10.6M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  10.6M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|  10.6M|    {
 3192|  10.6M|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 18.3k, False: 10.5M]
  ------------------
 3193|  10.6M|                   ? nullptr
 3194|  10.6M|                   : std::addressof(*ranges::begin(derived()));
 3195|  10.6M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|   328k|    {
 3151|   328k|        return static_cast<D&>(*this);
 3152|   328k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   164k|    {
 2949|   164k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   164k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   164k|    {
 2976|   164k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   164k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|   164k|    {
 3192|   164k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 164k]
  ------------------
 3193|   164k|                   ? nullptr
 3194|   164k|                   : std::addressof(*ranges::begin(derived()));
 3195|   164k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  1.66M|    {
 8130|  1.66M|        return ranges::subrange{begin(), end()};
 8131|  1.66M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|  4.89M|    {
 8114|  4.89M|        return m_current;
 8115|  4.89M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  1.66M|    {
 8122|  1.66M|        return ranges::default_sentinel;
 8123|  1.66M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  25.6M|    {
 3287|  25.6M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|  7.94M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.31M|    {
 1808|  2.31M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.31M|                                            std::forward<F>(f));
 1810|  2.31M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  2.31M|{
 1294|  2.31M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.31M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.31M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.31M|            return result(*std::forward<Exp>(exp));
 1298|  2.31M|        }
 1299|       |
 1300|  2.31M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.31M|        return result(unexpect, monostate{});
 1302|  2.31M|    }
 1303|  2.31M|    else {
 1304|  2.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.28M, False: 27.9k]
  |  |  ------------------
  ------------------
 1306|  2.31M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.31M|                   : result(unexpect,
 1308|  27.9k|                            trivial_invoke(std::forward<F>(f),
 1309|  27.9k|                                           std::forward<Exp>(exp).error()));
 1310|  2.31M|    }
 1311|  2.31M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  24.8M|    {
  481|  24.8M|        return m_has_value;
  482|  24.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  8.37M|    {
 1634|  8.37M|        return std::move(value());
 1635|  8.37M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  9.68M|    {
 1598|  9.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  9.68M|        return this->get_value();
 1600|  9.68M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  9.68M|    {
  447|  9.68M|        return m_value;
  448|  9.68M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  8.87M|    {
 1401|  8.87M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.87M|    {
  433|  8.87M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.1M|    {
 1148|  13.1M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|  57.4k|{
 1182|  57.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  57.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  79.1k|    {
 1585|  79.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  79.1k|        return std::move(this->get_unexpected().error());
 1587|  79.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   107k|    {
  464|   107k|        return m_unexpected;
  465|   107k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   480k|    {
  357|   480k|        return m_unexpected;
  358|   480k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.24M|    {
 1457|  2.24M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.52M|    {
  443|  2.52M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|   206k|    {
 8130|   206k|        return ranges::subrange{begin(), end()};
 8131|   206k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|   443k|    {
 8114|   443k|        return m_current;
 8115|   443k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|   206k|    {
 8122|   206k|        return ranges::default_sentinel;
 8123|   206k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  2.06M|    {
 3287|  2.06M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   270k|    {
 1808|   270k|        return detail::transform_error_impl(std::move(*this),
 1809|   270k|                                            std::forward<F>(f));
 1810|   270k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   270k|{
 1294|   270k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   270k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   270k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   270k|            return result(*std::forward<Exp>(exp));
 1298|   270k|        }
 1299|       |
 1300|   270k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   270k|        return result(unexpect, monostate{});
 1302|   270k|    }
 1303|   270k|    else {
 1304|   270k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   270k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   270k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268k, False: 2.03k]
  |  |  ------------------
  ------------------
 1306|   270k|                   ? result(*std::forward<Exp>(exp))
 1307|   270k|                   : result(unexpect,
 1308|  2.03k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.03k|                                           std::forward<Exp>(exp).error()));
 1310|   270k|    }
 1311|   270k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.26M|    {
  481|  2.26M|        return m_has_value;
  482|  2.26M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   906k|    {
 1634|   906k|        return std::move(value());
 1635|   906k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   908k|    {
 1598|   908k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   908k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   908k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   908k|        return this->get_value();
 1600|   908k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   908k|    {
  447|   908k|        return m_value;
  448|   908k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   396k|    {
 1401|   396k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   396k|    {
  433|   396k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.55M|    {
 1148|  1.55M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  49.5k|    {
 1585|  49.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  49.5k|        return std::move(this->get_unexpected().error());
 1587|  49.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  50.2k|    {
  464|  50.2k|        return m_unexpected;
  465|  50.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|   494k|    {
 1457|   494k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.12M|    {
  443|  1.12M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   192k|    {
  343|   192k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   192k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   192k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   246k|    {
 1447|   246k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.47M|    {
  443|  2.47M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.1M|    {
 1148|  13.1M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  9.01M|    {
 1401|  9.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  9.01M|    {
  433|  9.01M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|  15.4M|    {
 1569|  15.4M|        return has_value();
 1570|  15.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  24.1M|    {
  481|  24.1M|        return m_has_value;
  482|  24.1M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|   299k|    {
 1575|   299k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   299k|        return this->get_unexpected().error();
 1577|   299k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   299k|    {
  464|   299k|        return m_unexpected;
  465|   299k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  6.79M|    {
 1634|  6.79M|        return std::move(value());
 1635|  6.79M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  8.42M|    {
 1598|  8.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.42M|        return this->get_value();
 1600|  8.42M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  8.42M|    {
  447|  8.42M|        return m_value;
  448|  8.42M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   507k|    {
 1447|   507k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   881k|    {
  443|   881k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.55M|    {
 1148|  1.55M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   639k|    {
 1401|   639k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   639k|    {
  433|   639k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  1.82M|    {
 1569|  1.82M|        return has_value();
 1570|  1.82M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  2.93M|    {
  481|  2.93M|        return m_has_value;
  482|  2.93M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|   612k|    {
 1575|   612k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   612k|        return this->get_unexpected().error();
 1577|   612k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   612k|    {
  464|   612k|        return m_unexpected;
  465|   612k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   475k|    {
 1634|   475k|        return std::move(value());
 1635|   475k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   506k|    {
 1598|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   506k|        return this->get_value();
 1600|   506k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   506k|    {
  447|   506k|        return m_value;
  448|   506k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.33M|    {
 1808|  2.33M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.33M|                                            std::forward<F>(f));
 1810|  2.33M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.33M|{
 1294|  2.33M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.33M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.33M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.33M|            return result(*std::forward<Exp>(exp));
 1298|  2.33M|        }
 1299|       |
 1300|  2.33M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.33M|        return result(unexpect, monostate{});
 1302|  2.33M|    }
 1303|  2.33M|    else {
 1304|  2.33M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.33M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.30M, False: 25.4k]
  |  |  ------------------
  ------------------
 1306|  2.33M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.33M|                   : result(unexpect,
 1308|  25.4k|                            trivial_invoke(std::forward<F>(f),
 1309|  25.4k|                                           std::forward<Exp>(exp).error()));
 1310|  2.33M|    }
 1311|  2.33M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  8.98M|    {
  481|  8.98M|        return m_has_value;
  482|  8.98M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  2.30M|    {
 1634|  2.30M|        return std::move(value());
 1635|  2.30M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  3.19M|    {
 1598|  3.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.19M|        return this->get_value();
 1600|  3.19M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.19M|    {
  447|  3.19M|        return m_value;
  448|  3.19M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|  25.4k|    {
 1585|  25.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  25.4k|        return std::move(this->get_unexpected().error());
 1587|  25.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  32.3k|    {
  464|  32.3k|        return m_unexpected;
  465|  32.3k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.23M|    {
 1457|  2.23M|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|  16.4M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   275k|    {
 1447|   275k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  56.5M|    {
 4210|  56.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  56.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  56.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 56.5M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  56.5M|        auto res = read_at_position();
 4219|  56.5M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  56.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  56.5M|        return parent()->get_character_at(m_position);
 4221|  56.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|   220M|    {
 4275|   220M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   220M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   220M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|   220M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 220M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|   220M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   220M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190M, False: 29.8M]
  |  |  ------------------
  ------------------
 4282|   190M|            return true;
 4283|   190M|        }
 4284|       |
 4285|  59.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 29.8M, False: 29.4M]
  ------------------
 4286|  29.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 409k, False: 29.4M]
  ------------------
 4287|   409k|                return false;
 4288|   409k|            }
 4289|  29.8M|        }
 4290|  29.4M|        return true;
 4291|  29.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|   285M|    {
 4052|   285M|        return m_putback_buffer.size() + m_current_view.size();
 4053|   285M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  56.5M|    {
 4083|  56.5M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  56.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.3M, False: 21.2M]
  |  |  ------------------
  ------------------
 4084|  56.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  35.3M|            return m_putback_buffer[pos];
 4086|  35.3M|        }
 4087|  21.2M|        const auto start = pos - m_putback_buffer.size();
 4088|  21.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  21.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  21.2M|        return m_current_view[start];
 4090|  21.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|   113M|    {
 4196|   113M|        ++m_position;
 4197|   113M|        (void)read_at_position();
 4198|   113M|        return *this;
 4199|   113M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  53.9M|    {
 4245|  53.9M|        return !(lhs == rhs);
 4246|  53.9M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  60.0M|    {
 4240|  60.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 60.0M, False: 0]
  |  Branch (4240:46): [True: 7.77M, False: 52.2M]
  ------------------
 4241|  60.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  20.5M|    {
 4251|  20.5M|        return x.is_at_end();
 4252|  20.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  50.9M|    {
 4295|  50.9M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 50.9M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  50.9M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 50.9M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  50.9M|        return !read_at_position();
 4302|  50.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  14.9M|    {
 1401|  14.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  14.9M|    {
  433|  14.9M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  15.0M|    {
 1148|  15.0M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   146k|    {
  343|   146k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   146k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   107k|    {
 1447|   107k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   107k|    {
  443|   107k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   240k|    {
  352|   240k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   240k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|  6.63M|    {
 1569|  6.63M|        return has_value();
 1570|  6.63M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.31M|    {
 1624|  1.31M|        return value();
 1625|  1.31M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  93.7k|    {
  343|  93.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  93.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  93.7k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  20.8k|    {
 1447|  20.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  20.8k|    {
  443|  20.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.22M|    {
 1148|  3.22M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  3.19M|    {
 1401|  3.19M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.19M|    {
  433|  3.19M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  3.22M|    {
 1569|  3.22M|        return has_value();
 1570|  3.22M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.44M|    {
  481|  6.44M|        return m_has_value;
  482|  6.44M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  20.8k|    {
 1575|  20.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  20.8k|        return this->get_unexpected().error();
 1577|  20.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  20.8k|    {
  464|  20.8k|        return m_unexpected;
  465|  20.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.19M|    {
 1634|  3.19M|        return std::move(value());
 1635|  3.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.19M|    {
 1598|  3.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.19M|        return this->get_value();
 1600|  3.19M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.19M|    {
  447|  3.19M|        return m_value;
  448|  3.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  72.6M|    {
 3305|  72.6M|        return m_sentinel;
 3306|  72.6M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  91.8k|    {
  343|  91.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  91.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  91.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  19.8M|    {
  357|  19.8M|        return m_unexpected;
  358|  19.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.44M|    {
  352|  5.44M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.44M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  24.2M|    {
  343|  24.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  24.2M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  24.2M|    {
  357|  24.2M|        return m_unexpected;
  358|  24.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  24.2M|    {
  352|  24.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  24.2M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|   146k|{
 1182|   146k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|   146k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.20M|    {
  343|  5.20M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.20M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|  28.5k|    {
 1575|  28.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  28.5k|        return this->get_unexpected().error();
 1577|  28.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.33M|    {
 1447|  2.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.38M|    {
  443|  2.38M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  25.7M|    {
 1148|  25.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  1.32M|    {
 1401|  1.32M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.32M|    {
  433|  1.32M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  13.0M|    {
 1447|  13.0M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  13.0M|    {
  443|  13.0M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  27.9M|    {
 1569|  27.9M|        return has_value();
 1570|  27.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  49.1M|    {
  481|  49.1M|        return m_has_value;
  482|  49.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  6.32M|    {
 1575|  6.32M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.32M|        return this->get_unexpected().error();
 1577|  6.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.32M|    {
  464|  6.32M|        return m_unexpected;
  465|  6.32M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|  2.52M|    {
 1401|  2.52M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.52M|    {
  433|  2.52M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.52M|    {
 1148|  2.52M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    491|    {
 1447|    491|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    491|    {
  443|    491|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  6.57M|    {
 1624|  6.57M|        return value();
 1625|  6.57M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|  12.6M|    {
 1598|  12.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  12.6M|        return this->get_value();
 1600|  12.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  12.6M|    {
  447|  12.6M|        return m_value;
  448|  12.6M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|   240k|    {
 1569|   240k|        return has_value();
 1570|   240k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.05M|    {
  481|  5.05M|        return m_has_value;
  482|  5.05M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.28M|    {
 1634|  2.28M|        return std::move(value());
 1635|  2.28M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.52M|    {
 1598|  2.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.52M|        return this->get_value();
 1600|  2.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.52M|    {
  447|  2.52M|        return m_value;
  448|  2.52M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  6.13M|    {
 1808|  6.13M|        return detail::transform_error_impl(std::move(*this),
 1809|  6.13M|                                            std::forward<F>(f));
 1810|  6.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  6.13M|{
 1294|  6.13M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.13M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.13M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.13M|            return result(*std::forward<Exp>(exp));
 1298|  6.13M|        }
 1299|       |
 1300|  6.13M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.13M|        return result(unexpect, monostate{});
 1302|  6.13M|    }
 1303|  6.13M|    else {
 1304|  6.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.08M, False: 51.2k]
  |  |  ------------------
  ------------------
 1306|  6.13M|                   ? result(*std::forward<Exp>(exp))
 1307|  6.13M|                   : result(unexpect,
 1308|  51.2k|                            trivial_invoke(std::forward<F>(f),
 1309|  51.2k|                                           std::forward<Exp>(exp).error()));
 1310|  6.13M|    }
 1311|  6.13M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|  8.95M|    {
 1401|  8.95M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.95M|    {
  433|  8.95M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  51.2k|    {
 1457|  51.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.08M|    {
 1634|  6.08M|        return std::move(value());
 1635|  6.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|  2.67M|    {
 3301|  2.67M|        return m_iterator;
 3302|  2.67M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|  2.67M|    {
 3305|  2.67M|        return m_sentinel;
 3306|  2.67M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  15.3M|    {
 1569|  15.3M|        return has_value();
 1570|  15.3M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  24.0M|    {
  481|  24.0M|        return m_has_value;
  482|  24.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   364k|    {
 1575|   364k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   364k|        return this->get_unexpected().error();
 1577|   364k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   364k|    {
  464|   364k|        return m_unexpected;
  465|   364k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.70M|    {
 1634|  6.70M|        return std::move(value());
 1635|  6.70M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  8.36M|    {
 1598|  8.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.36M|        return this->get_value();
 1600|  8.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.36M|    {
  447|  8.36M|        return m_value;
  448|  8.36M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.17M|{
  322|  4.17M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.17M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  2.08M|    {
 3287|  2.08M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  30.4M|    {
 4262|  30.4M|        return !x.is_at_end();
 4263|  30.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  1.70M|    {
 1401|  1.70M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.70M|    {
  433|  1.70M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  32.3k|    {
 1447|  32.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  32.3k|    {
  443|  32.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  5.76M|    {
 1148|  5.76M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  5.72M|    {
 1401|  5.72M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.72M|    {
  433|  5.72M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  3.42M|    {
 1569|  3.42M|        return has_value();
 1570|  3.42M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|   884k|    {
 1624|   884k|        return value();
 1625|   884k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  18.2k|    {
 1447|  18.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.2k|    {
  443|  18.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.15M|    {
 1148|  3.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  3.13M|    {
 1401|  3.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.13M|    {
  433|  3.13M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  3.15M|    {
 1569|  3.15M|        return has_value();
 1570|  3.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.31M|    {
  481|  6.31M|        return m_has_value;
  482|  6.31M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|  18.2k|    {
 1575|  18.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  18.2k|        return this->get_unexpected().error();
 1577|  18.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.2k|    {
  464|  18.2k|        return m_unexpected;
  465|  18.2k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  3.13M|    {
 1634|  3.13M|        return std::move(value());
 1635|  3.13M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  3.13M|    {
 1598|  3.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.13M|        return this->get_value();
 1600|  3.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.13M|    {
  447|  3.13M|        return m_value;
  448|  3.13M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1574|  6.87k|    {
 1575|  6.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.87k|        return this->get_unexpected().error();
 1577|  6.87k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  2.33M|    {
 1447|  2.33M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.33M|    {
  443|  2.33M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.1M|    {
 1148|  13.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|   900k|    {
 1401|   900k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   900k|    {
  433|   900k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  8.95M|    {
 1447|  8.95M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  8.95M|    {
  443|  8.95M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  15.4M|    {
 1569|  15.4M|        return has_value();
 1570|  15.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  26.3M|    {
  481|  26.3M|        return m_has_value;
  482|  26.3M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  6.16M|    {
 1575|  6.16M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.16M|        return this->get_unexpected().error();
 1577|  6.16M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.16M|    {
  464|  6.16M|        return m_unexpected;
  465|  6.16M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  2.38M|    {
 1401|  2.38M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.38M|    {
  433|  2.38M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.38M|    {
 1148|  2.38M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|    156|    {
 1447|    156|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  2.53M|    {
 1624|  2.53M|        return value();
 1625|  2.53M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  2.53M|    {
 1598|  2.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.53M|        return this->get_value();
 1600|  2.53M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.53M|    {
  447|  2.53M|        return m_value;
  448|  2.53M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  77.6k|    {
 1569|  77.6k|        return has_value();
 1570|  77.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.77M|    {
  481|  4.77M|        return m_has_value;
  482|  4.77M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.30M|    {
 1634|  2.30M|        return std::move(value());
 1635|  2.30M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.38M|    {
 1598|  2.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.38M|        return this->get_value();
 1600|  2.38M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.38M|    {
  447|  2.38M|        return m_value;
  448|  2.38M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   983k|    {
 1401|   983k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   983k|    {
  433|   983k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  4.46M|    {
 2826|  4.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  4.46M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  4.46M|    {
 2807|  4.46M|        return t.data();
 2808|  4.46M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  1.67M|    {
 1401|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.67M|    {
  433|  1.67M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|  1.03M|    {
 1447|  1.03M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.03M|    {
  443|  1.03M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.5M|    {
 1148|  14.5M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  13.2M|    {
 1401|  13.2M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  13.2M|    {
  433|  13.2M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1633|  9.01M|    {
 1634|  9.01M|        return std::move(value());
 1635|  9.01M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  5.29M|{
 1182|  5.29M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  5.29M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|  2.28M|    {
 1808|  2.28M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.28M|                                            std::forward<F>(f));
 1810|  2.28M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  2.28M|{
 1294|  2.28M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.28M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.28M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.28M|            return result(*std::forward<Exp>(exp));
 1298|  2.28M|        }
 1299|       |
 1300|  2.28M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.28M|        return result(unexpect, monostate{});
 1302|  2.28M|    }
 1303|  2.28M|    else {
 1304|  2.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.28M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.28M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.28M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.28M|    }
 1311|  2.28M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  2.28M|    {
 1401|  2.28M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.28M|    {
  433|  2.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.28M|    {
 1148|  2.28M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.28M|    {
 1569|  2.28M|        return has_value();
 1570|  2.28M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.57M|    {
  481|  4.57M|        return m_has_value;
  482|  4.57M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.28M|    {
 1634|  2.28M|        return std::move(value());
 1635|  2.28M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.28M|    {
 1598|  2.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.28M|        return this->get_value();
 1600|  2.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.28M|    {
  447|  2.28M|        return m_value;
  448|  2.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|  2.22M|    {
 1794|  2.22M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.22M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|  2.22M|{
 1294|  2.22M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.22M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.22M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.22M|            return result(*std::forward<Exp>(exp));
 1298|  2.22M|        }
 1299|       |
 1300|  2.22M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.22M|        return result(unexpect, monostate{});
 1302|  2.22M|    }
 1303|  2.22M|    else {
 1304|  2.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1306|  2.22M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.22M|                   : result(unexpect,
 1308|  2.22M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.22M|                                           std::forward<Exp>(exp).error()));
 1310|  2.22M|    }
 1311|  2.22M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.66M|    {
 1624|  1.66M|        return value();
 1625|  1.66M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|   561k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|   239k|    {
 1644|   239k|        return &value();
 1645|   239k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|  1.59M|    {
 2695|  1.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.59M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|  1.59M|    {
 2676|  1.59M|        return decay_copy(t.begin());
 2677|  1.59M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|  1.59M|{
 1920|  1.59M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.59M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|   997k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  2.30M|    {
 1808|  2.30M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.30M|                                            std::forward<F>(f));
 1810|  2.30M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  2.30M|{
 1294|  2.30M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.30M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.30M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.30M|            return result(*std::forward<Exp>(exp));
 1298|  2.30M|        }
 1299|       |
 1300|  2.30M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.30M|        return result(unexpect, monostate{});
 1302|  2.30M|    }
 1303|  2.30M|    else {
 1304|  2.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.30M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.30M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.30M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.30M|    }
 1311|  2.30M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.30M|    {
 1401|  2.30M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.30M|    {
  433|  2.30M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.30M|    {
 1148|  2.30M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.30M|    {
 1569|  2.30M|        return has_value();
 1570|  2.30M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.61M|    {
  481|  4.61M|        return m_has_value;
  482|  4.61M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.30M|    {
 1634|  2.30M|        return std::move(value());
 1635|  2.30M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.30M|    {
 1598|  2.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.30M|        return this->get_value();
 1600|  2.30M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.30M|    {
  447|  2.30M|        return m_value;
  448|  2.30M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|  2.20M|    {
 1794|  2.20M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.20M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  2.20M|{
 1294|  2.20M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.20M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.20M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.20M|            return result(*std::forward<Exp>(exp));
 1298|  2.20M|        }
 1299|       |
 1300|  2.20M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.20M|        return result(unexpect, monostate{});
 1302|  2.20M|    }
 1303|  2.20M|    else {
 1304|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1306|  2.20M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.20M|                   : result(unexpect,
 1308|  2.20M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.20M|                                           std::forward<Exp>(exp).error()));
 1310|  2.20M|    }
 1311|  2.20M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  2.20M|    {
 3619|  2.20M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.63M|    {
 1624|  1.63M|        return value();
 1625|  1.63M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|  77.5k|    {
 1644|  77.5k|        return &value();
 1645|  77.5k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|  2.22M|    {
 3619|  2.22M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   628k|    {
 1447|   628k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|  2.30M|    {
 4210|  2.30M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  2.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 2.30M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  2.30M|        auto res = read_at_position();
 4219|  2.30M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  2.30M|        return parent()->get_character_at(m_position);
 4221|  2.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  7.59M|    {
 4275|  7.59M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  7.59M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 7.59M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  7.59M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  7.59M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.39M, False: 1.20M]
  |  |  ------------------
  ------------------
 4282|  6.39M|            return true;
 4283|  6.39M|        }
 4284|       |
 4285|  2.26M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 1.20M, False: 1.05M]
  ------------------
 4286|  1.20M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 143k, False: 1.05M]
  ------------------
 4287|   143k|                return false;
 4288|   143k|            }
 4289|  1.20M|        }
 4290|  1.05M|        return true;
 4291|  1.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  10.5M|    {
 4052|  10.5M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  10.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|  2.30M|    {
 4083|  2.30M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93M, False: 368k]
  |  |  ------------------
  ------------------
 4084|  2.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.93M|            return m_putback_buffer[pos];
 4086|  1.93M|        }
 4087|   368k|        const auto start = pos - m_putback_buffer.size();
 4088|   368k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|   368k|        return m_current_view[start];
 4090|   368k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|  2.73M|    {
 4196|  2.73M|        ++m_position;
 4197|  2.73M|        (void)read_at_position();
 4198|  2.73M|        return *this;
 4199|  2.73M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|   855k|    {
 4245|   855k|        return !(lhs == rhs);
 4246|   855k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|  1.20M|    {
 4240|  1.20M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 1.20M, False: 0]
  |  Branch (4240:46): [True: 382k, False: 824k]
  ------------------
 4241|  1.20M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.84M|    {
 4251|  1.84M|        return x.is_at_end();
 4252|  1.84M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|  2.55M|    {
 4295|  2.55M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 2.55M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  2.55M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 2.55M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  2.55M|        return !read_at_position();
 4302|  2.55M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   695k|{
 3778|   695k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   695k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   695k|    }
 3781|   695k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   695k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   695k|    }
 3784|   695k|    else {
 3785|       |        // utf-32
 3786|   695k|        static_assert(sizeof(U) == 4);
 3787|   695k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   695k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   695k|        return 1;
 3789|   695k|    }
 3790|   695k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  1.25M|    {
 1401|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.25M|    {
  433|  1.25M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.30M|    {
 1148|  1.30M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  50.2k|    {
 1447|  50.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  50.2k|    {
  443|  50.2k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|   351k|    {
 1569|   351k|        return has_value();
 1570|   351k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  2.44k|    {
 1624|  2.44k|        return value();
 1625|  2.44k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   695k|{
 3984|   695k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   695k|        return decode_utf8_code_point_exhaustive(input);
 3986|   695k|    }
 3987|   695k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   695k|        return decode_utf16_code_point_exhaustive(input);
 3989|   695k|    }
 3990|   695k|    else {
 3991|   695k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   695k|        auto cp = static_cast<char32_t>(input.front());
 3993|   695k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224k, False: 470k]
  |  |  ------------------
  ------------------
 3994|   224k|            return invalid_code_point;
 3995|   224k|        }
 3996|   470k|        return cp;
 3997|   695k|    }
 3998|   695k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.53k|    {
 1447|  1.53k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.53k|    {
  443|  1.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   237k|    {
 1148|   237k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   235k|    {
 1401|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   235k|    {
  433|   235k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   237k|    {
 1569|   237k|        return has_value();
 1570|   237k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   474k|    {
  481|   474k|        return m_has_value;
  482|   474k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.53k|    {
 1575|  1.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.53k|        return this->get_unexpected().error();
 1577|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.53k|    {
  464|  1.53k|        return m_unexpected;
  465|  1.53k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   235k|    {
 1634|   235k|        return std::move(value());
 1635|   235k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   235k|    {
 1598|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   235k|        return this->get_value();
 1600|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   235k|    {
  447|   235k|        return m_value;
  448|   235k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  4.14M|    {
 3305|  4.14M|        return m_sentinel;
 3306|  4.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|    711|    {
 1575|    711|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    711|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    711|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    711|        return this->get_unexpected().error();
 1577|    711|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   316k|    {
 1447|   316k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   364k|    {
  443|   364k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.30M|    {
 1148|  2.30M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  2.44k|    {
 1401|  2.44k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  2.44k|    {
  433|  2.44k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  1.25M|    {
 1447|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.25M|    {
  443|  1.25M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  2.57M|    {
 1569|  2.57M|        return has_value();
 1570|  2.57M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.87M|    {
  481|  4.87M|        return m_has_value;
  482|  4.87M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  1.07M|    {
 1575|  1.07M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.07M|        return this->get_unexpected().error();
 1577|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.07M|    {
  464|  1.07M|        return m_unexpected;
  465|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|   270k|    {
 1401|   270k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   270k|    {
  433|   270k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   270k|    {
 1148|   270k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|     27|    {
 1447|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  92.0k|    {
 1624|  92.0k|        return value();
 1625|  92.0k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|   729k|    {
 1598|   729k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   729k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   729k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   729k|        return this->get_value();
 1600|   729k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   729k|    {
  447|   729k|        return m_value;
  448|   729k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|  2.11k|    {
 1569|  2.11k|        return has_value();
 1570|  2.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   541k|    {
  481|   541k|        return m_has_value;
  482|   541k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|   268k|    {
 1634|   268k|        return std::move(value());
 1635|   268k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|   270k|    {
 1598|   270k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   270k|        return this->get_value();
 1600|   270k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   270k|    {
  447|   270k|        return m_value;
  448|   270k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   685k|    {
 1808|   685k|        return detail::transform_error_impl(std::move(*this),
 1809|   685k|                                            std::forward<F>(f));
 1810|   685k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   685k|{
 1294|   685k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   685k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   685k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   685k|            return result(*std::forward<Exp>(exp));
 1298|   685k|        }
 1299|       |
 1300|   685k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   685k|        return result(unexpect, monostate{});
 1302|   685k|    }
 1303|   685k|    else {
 1304|   685k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   685k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   685k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 637k, False: 47.5k]
  |  |  ------------------
  ------------------
 1306|   685k|                   ? result(*std::forward<Exp>(exp))
 1307|   685k|                   : result(unexpect,
 1308|  47.5k|                            trivial_invoke(std::forward<F>(f),
 1309|  47.5k|                                           std::forward<Exp>(exp).error()));
 1310|   685k|    }
 1311|   685k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|   683k|    {
 1401|   683k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   683k|    {
  433|   683k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  47.5k|    {
 1457|  47.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|   637k|    {
 1634|   637k|        return std::move(value());
 1635|   637k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3300|  48.0k|    {
 3301|  48.0k|        return m_iterator;
 3302|  48.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3304|  48.0k|    {
 3305|  48.0k|        return m_sentinel;
 3306|  48.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  1.81M|    {
 1569|  1.81M|        return has_value();
 1570|  1.81M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.05M|    {
  481|  3.05M|        return m_has_value;
  482|  3.05M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   854k|    {
 1575|   854k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   854k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   854k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   854k|        return this->get_unexpected().error();
 1577|   854k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   854k|    {
  464|   854k|        return m_unexpected;
  465|   854k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   353k|    {
 1634|   353k|        return std::move(value());
 1635|   353k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   385k|    {
 1598|   385k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   385k|        return this->get_value();
 1600|   385k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   385k|    {
  447|   385k|        return m_value;
  448|   385k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  86.0k|{
  302|  86.0k|    return p;
  303|  86.0k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  86.0k|{
  322|  86.0k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  86.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  86.0k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  43.0k|    {
 3287|  43.0k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|   705k|    {
 4262|   705k|        return !x.is_at_end();
 4263|   705k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  31.0k|    {
 1401|  31.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  31.0k|    {
  433|  31.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  49.8k|    {
 1447|  49.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  49.8k|    {
  443|  49.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.25M|    {
 1148|  1.25M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  1.20M|    {
 1401|  1.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.20M|    {
  433|  1.20M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|   295k|    {
 1569|   295k|        return has_value();
 1570|   295k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.20M|    {
  481|  2.20M|        return m_has_value;
  482|  2.20M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.11k|    {
 1624|  1.11k|        return value();
 1625|  1.11k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   907k|    {
 1598|   907k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   907k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   907k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   907k|        return this->get_value();
 1600|   907k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   907k|    {
  447|   907k|        return m_value;
  448|   907k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  1.53k|    {
 1447|  1.53k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.53k|    {
  443|  1.53k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   237k|    {
 1148|   237k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   235k|    {
 1401|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   235k|    {
  433|   235k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   270k|    {
 1808|   270k|        return detail::transform_error_impl(std::move(*this),
 1809|   270k|                                            std::forward<F>(f));
 1810|   270k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   270k|{
 1294|   270k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   270k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   270k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   270k|            return result(*std::forward<Exp>(exp));
 1298|   270k|        }
 1299|       |
 1300|   270k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   270k|        return result(unexpect, monostate{});
 1302|   270k|    }
 1303|   270k|    else {
 1304|   270k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   270k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   270k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268k, False: 2.03k]
  |  |  ------------------
  ------------------
 1306|   270k|                   ? result(*std::forward<Exp>(exp))
 1307|   270k|                   : result(unexpect,
 1308|  2.03k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.03k|                                           std::forward<Exp>(exp).error()));
 1310|   270k|    }
 1311|   270k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   906k|    {
 1634|   906k|        return std::move(value());
 1635|   906k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|  49.5k|    {
 1585|  49.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  49.5k|        return std::move(this->get_unexpected().error());
 1587|  49.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  49.8k|    {
  464|  49.8k|        return m_unexpected;
  465|  49.8k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|   373k|    {
 1457|   373k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|   237k|    {
 1569|   237k|        return has_value();
 1570|   237k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   474k|    {
  481|   474k|        return m_has_value;
  482|   474k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1574|  1.53k|    {
 1575|  1.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.53k|        return this->get_unexpected().error();
 1577|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.53k|    {
  464|  1.53k|        return m_unexpected;
  465|  1.53k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   235k|    {
 1634|   235k|        return std::move(value());
 1635|   235k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   235k|    {
 1598|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   235k|        return this->get_value();
 1600|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   235k|    {
  447|   235k|        return m_value;
  448|   235k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1574|    240|    {
 1575|    240|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    240|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    240|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    240|        return this->get_unexpected().error();
 1577|    240|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|   316k|    {
 1447|   316k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   363k|    {
  443|   363k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.07M|    {
 1148|  2.07M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|  1.11k|    {
 1401|  1.11k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.11k|    {
  433|  1.11k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  1.05M|    {
 1447|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.05M|    {
  443|  1.05M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  2.34M|    {
 1569|  2.34M|        return has_value();
 1570|  2.34M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.34M|    {
  481|  4.34M|        return m_has_value;
  482|  4.34M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|   957k|    {
 1575|   957k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   957k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   957k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   957k|        return this->get_unexpected().error();
 1577|   957k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   957k|    {
  464|   957k|        return m_unexpected;
  465|   957k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|   269k|    {
 1401|   269k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   269k|    {
  433|   269k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   269k|    {
 1148|   269k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|     12|    {
 1447|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  35.4k|    {
 1624|  35.4k|        return value();
 1625|  35.4k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|   673k|    {
 1598|   673k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   673k|        return this->get_value();
 1600|   673k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   673k|    {
  447|   673k|        return m_value;
  448|   673k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|    890|    {
 1569|    890|        return has_value();
 1570|    890|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   538k|    {
  481|   538k|        return m_has_value;
  482|   538k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|   268k|    {
 1634|   268k|        return std::move(value());
 1635|   268k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|   269k|    {
 1598|   269k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   269k|        return this->get_value();
 1600|   269k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   269k|    {
  447|   269k|        return m_value;
  448|   269k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   685k|    {
 1808|   685k|        return detail::transform_error_impl(std::move(*this),
 1809|   685k|                                            std::forward<F>(f));
 1810|   685k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   685k|{
 1294|   685k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   685k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   685k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   685k|            return result(*std::forward<Exp>(exp));
 1298|   685k|        }
 1299|       |
 1300|   685k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   685k|        return result(unexpect, monostate{});
 1302|   685k|    }
 1303|   685k|    else {
 1304|   685k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   685k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   685k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 638k, False: 47.5k]
  |  |  ------------------
  ------------------
 1306|   685k|                   ? result(*std::forward<Exp>(exp))
 1307|   685k|                   : result(unexpect,
 1308|  47.5k|                            trivial_invoke(std::forward<F>(f),
 1309|  47.5k|                                           std::forward<Exp>(exp).error()));
 1310|   685k|    }
 1311|   685k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   655k|    {
 1401|   655k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   655k|    {
  433|   655k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|  47.5k|    {
 1457|  47.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|   638k|    {
 1634|   638k|        return std::move(value());
 1635|   638k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   164k|    {
 2826|   164k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   164k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   164k|    {
 2807|   164k|        return t.data();
 2808|   164k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  31.1k|    {
 1401|  31.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  31.1k|    {
  433|  31.1k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|   268k|    {
 1808|   268k|        return detail::transform_error_impl(std::move(*this),
 1809|   268k|                                            std::forward<F>(f));
 1810|   268k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|   268k|{
 1294|   268k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   268k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   268k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   268k|            return result(*std::forward<Exp>(exp));
 1298|   268k|        }
 1299|       |
 1300|   268k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   268k|        return result(unexpect, monostate{});
 1302|   268k|    }
 1303|   268k|    else {
 1304|   268k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   268k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   268k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268k, False: 0]
  |  |  ------------------
  ------------------
 1306|   268k|                   ? result(*std::forward<Exp>(exp))
 1307|   268k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   268k|    }
 1311|   268k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   268k|    {
 1401|   268k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   268k|    {
  433|   268k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   268k|    {
 1148|   268k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   268k|    {
 1569|   268k|        return has_value();
 1570|   268k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   536k|    {
  481|   536k|        return m_has_value;
  482|   536k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|   268k|    {
 1634|   268k|        return std::move(value());
 1635|   268k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   268k|    {
 1598|   268k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   268k|        return this->get_value();
 1600|   268k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   268k|    {
  447|   268k|        return m_value;
  448|   268k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|   492k|    {
 1794|   492k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   492k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|   492k|{
 1294|   492k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   492k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   492k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   492k|            return result(*std::forward<Exp>(exp));
 1298|   492k|        }
 1299|       |
 1300|   492k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   492k|        return result(unexpect, monostate{});
 1302|   492k|    }
 1303|   492k|    else {
 1304|   492k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   492k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   492k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 1306|   492k|                   ? result(*std::forward<Exp>(exp))
 1307|   492k|                   : result(unexpect,
 1308|   492k|                            trivial_invoke(std::forward<F>(f),
 1309|   492k|                                           std::forward<Exp>(exp).error()));
 1310|   492k|    }
 1311|   492k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  31.0k|    {
 1624|  31.0k|        return value();
 1625|  31.0k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|  2.09k|    {
 1644|  2.09k|        return &value();
 1645|  2.09k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|   225k|    {
 2695|   225k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   225k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|   225k|    {
 2676|   225k|        return decay_copy(t.begin());
 2677|   225k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|   225k|{
 1920|   225k|    return SCN_FWD(t);
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   225k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|   105k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|   268k|    {
 1808|   268k|        return detail::transform_error_impl(std::move(*this),
 1809|   268k|                                            std::forward<F>(f));
 1810|   268k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|   268k|{
 1294|   268k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   268k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   268k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   268k|            return result(*std::forward<Exp>(exp));
 1298|   268k|        }
 1299|       |
 1300|   268k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   268k|        return result(unexpect, monostate{});
 1302|   268k|    }
 1303|   268k|    else {
 1304|   268k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   268k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   268k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 268k, False: 0]
  |  |  ------------------
  ------------------
 1306|   268k|                   ? result(*std::forward<Exp>(exp))
 1307|   268k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   268k|    }
 1311|   268k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   268k|    {
 1401|   268k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   268k|    {
  433|   268k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   268k|    {
 1148|   268k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   268k|    {
 1569|   268k|        return has_value();
 1570|   268k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   537k|    {
  481|   537k|        return m_has_value;
  482|   537k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   268k|    {
 1634|   268k|        return std::move(value());
 1635|   268k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   268k|    {
 1598|   268k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   268k|        return this->get_value();
 1600|   268k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   268k|    {
  447|   268k|        return m_value;
  448|   268k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|   371k|    {
 1794|   371k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   371k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|   371k|{
 1294|   371k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   371k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   371k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   371k|            return result(*std::forward<Exp>(exp));
 1298|   371k|        }
 1299|       |
 1300|   371k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   371k|        return result(unexpect, monostate{});
 1302|   371k|    }
 1303|   371k|    else {
 1304|   371k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   371k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   371k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 371k]
  |  |  ------------------
  ------------------
 1306|   371k|                   ? result(*std::forward<Exp>(exp))
 1307|   371k|                   : result(unexpect,
 1308|   371k|                            trivial_invoke(std::forward<F>(f),
 1309|   371k|                                           std::forward<Exp>(exp).error()));
 1310|   371k|    }
 1311|   371k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|   371k|    {
 3619|   371k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  31.1k|    {
 1624|  31.1k|        return value();
 1625|  31.1k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|    878|    {
 1644|    878|        return &value();
 1645|    878|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|   492k|    {
 3619|   492k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1400|   250k|    {
 1401|   250k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   250k|    {
  433|   250k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|   156k|{
 3625|   156k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|   156k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.06M|    {
 2826|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.06M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.06M|    {
 2807|  2.06M|        return t.data();
 2808|  2.06M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  4.19M|    {
 5427|  4.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  4.19M|        return static_cast<std::size_t>(m_desc &
 5432|  4.19M|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  4.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|  8.39M|    {
 5452|  8.39M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  8.39M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  4.19M|    {
 5395|  4.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  4.19M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  4.19M|        const auto t = type(id);
 5407|  4.19M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.19M]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  4.19M|        basic_scan_arg<Context> arg;
 5412|  4.19M|        arg.m_type = t;
 5413|  4.19M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 4.19M, False: 0]
  ------------------
 5414|  4.19M|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  4.19M|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  4.19M|        return arg;
 5420|  4.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  4.19M|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  4.19M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  4.19M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  4.19M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  4.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  4.19M|    {
 5456|  4.19M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  4.19M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|  7.94M|    {
 5208|  7.94M|        return m_type != detail::arg_type::none_type;
 5209|  7.94M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   704k|{
 8378|   704k|#define SCN_VISIT(Type)                                         \
 8379|   704k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   704k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   704k|    }                                                           \
 8382|   704k|    else {                                                      \
 8383|   704k|        return vis(monostate_val);                              \
 8384|   704k|    }
 8385|       |
 8386|   704k|    monostate monostate_val{};
 8387|       |
 8388|   704k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 704k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 704k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 704k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 704k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 704k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 704k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 704k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 704k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 704k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 704k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 704k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 704k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 704k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 704k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 704k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   217k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 217k, False: 486k]
  ------------------
 8420|   217k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   217k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   217k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   217k|    }                                                           \
  |  | 8382|   217k|    else {                                                      \
  |  | 8383|   217k|        return vis(monostate_val);                              \
  |  | 8384|   217k|    }
  ------------------
 8421|   241k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 241k, False: 463k]
  ------------------
 8422|   241k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   241k|    }                                                           \
  |  | 8382|   241k|    else {                                                      \
  |  | 8383|   241k|        return vis(monostate_val);                              \
  |  | 8384|   241k|    }
  ------------------
 8423|   245k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 245k, False: 458k]
  ------------------
 8424|   245k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   245k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   245k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   245k|    }                                                           \
  |  | 8382|   245k|    else {                                                      \
  |  | 8383|   245k|        return vis(monostate_val);                              \
  |  | 8384|   245k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 704k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 704k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 704k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 704k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 704k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 704k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 704k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 704k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 704k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   704k|            SCN_CLANG_POP
 8456|   704k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  3.29M|    {
 5506|  3.29M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  1.66M|    {
 8099|  1.66M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  3.29M|    {
 8017|  3.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|  2.31M|{
 4315|  2.31M|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 2.31M]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  2.31M|    return ranges::subrange{forward_iterator{this, 0},
 4320|  2.31M|                            ranges::default_sentinel};
 4321|  2.31M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|  2.31M|    {
 4148|  2.31M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  2.31M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  2.31M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   655k|{
 8378|   655k|#define SCN_VISIT(Type)                                         \
 8379|   655k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   655k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   655k|    }                                                           \
 8382|   655k|    else {                                                      \
 8383|   655k|        return vis(monostate_val);                              \
 8384|   655k|    }
 8385|       |
 8386|   655k|    monostate monostate_val{};
 8387|       |
 8388|   655k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 655k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 655k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 655k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 655k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 655k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 655k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 655k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 655k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 655k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 655k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 655k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 655k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 655k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 655k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 655k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   202k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 202k, False: 452k]
  ------------------
 8420|   202k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   202k|    }                                                           \
  |  | 8382|   202k|    else {                                                      \
  |  | 8383|   202k|        return vis(monostate_val);                              \
  |  | 8384|   202k|    }
  ------------------
 8421|   224k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 224k, False: 430k]
  ------------------
 8422|   224k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   224k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   224k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   224k|    }                                                           \
  |  | 8382|   224k|    else {                                                      \
  |  | 8383|   224k|        return vis(monostate_val);                              \
  |  | 8384|   224k|    }
  ------------------
 8423|   227k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 227k, False: 427k]
  ------------------
 8424|   227k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   227k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   227k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   227k|    }                                                           \
  |  | 8382|   227k|    else {                                                      \
  |  | 8383|   227k|        return vis(monostate_val);                              \
  |  | 8384|   227k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 655k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 655k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 655k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 655k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 655k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 655k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 655k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 655k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 655k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   655k|            SCN_CLANG_POP
 8456|   655k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.62M|{
 7005|  1.62M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.62M|    handler.check_args_exhausted();
 7007|  1.62M|    return handler.get_error();
 7008|  1.62M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.62M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.62M|    auto begin = format.data();
 6974|  1.62M|    auto it = begin;
 6975|  1.62M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  3.17M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.62M, False: 1.54M]
  ------------------
 6978|  1.62M|        const auto ch = *it++;
 6979|  1.62M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.62M, False: 0]
  ------------------
 6980|  1.62M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.62M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.62M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 87.6k, False: 1.54M]
  ------------------
 6984|  87.6k|                return;
 6985|  87.6k|            }
 6986|  1.62M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.62M|    }
 6997|       |
 6998|  1.54M|    handler.on_literal_text(begin, end);
 6999|  1.54M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  1.62M|{
 6903|  1.62M|    struct id_adapter {
 6904|  1.62M|        constexpr void operator()()
 6905|  1.62M|        {
 6906|  1.62M|            arg_id = handler.on_arg_id();
 6907|  1.62M|        }
 6908|  1.62M|        constexpr void operator()(std::size_t id)
 6909|  1.62M|        {
 6910|  1.62M|            arg_id = handler.on_arg_id(id);
 6911|  1.62M|        }
 6912|       |
 6913|  1.62M|        constexpr void on_error(const char* msg)
 6914|  1.62M|        {
 6915|  1.62M|            SCN_UNLIKELY_ATTR
 6916|  1.62M|            handler.on_error(msg);
 6917|  1.62M|        }
 6918|       |
 6919|  1.62M|        Handler& handler;
 6920|  1.62M|        std::size_t arg_id;
 6921|  1.62M|    };
 6922|       |
 6923|  1.62M|    ++begin;
 6924|  1.62M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.62M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.62M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.62M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.62M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.62M|    else {
 6936|  1.62M|        auto adapter = id_adapter{handler, 0};
 6937|  1.62M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.62M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.62M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.62M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.62M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.62M, False: 0]
  ------------------
 6948|  1.62M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.62M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.62M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  |  Branch (859:45): [True: 0, False: 1.62M]
  |  |  |  Branch (859:45): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.62M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.62M|    }
 6964|  1.62M|    return begin + 1;
 6965|  1.62M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  3.29M|    {
 8000|  3.29M|        return m_args.get(id);
 8001|  3.29M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  3.29M|    {
 8010|  3.29M|        return m_locale;
 8011|  3.29M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  3.29M|    {
 5527|  3.29M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.29M]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  3.29M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  3.29M|        do_check_arg_id(id);
 5535|  3.29M|        return id;
 5536|  3.29M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  3.29M|{
 6015|  3.29M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  3.29M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  3.29M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.62M|{
 6404|  1.62M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.62M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.62M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.62M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.62M|    handler();
 6410|  1.62M|    return begin;
 6411|  1.62M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.62M|        {
 6906|  1.62M|            arg_id = handler.on_arg_id();
 6907|  1.62M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|  6.58M|    {
 5213|  6.58M|        return m_type;
 5214|  6.58M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  3.29M|    {
 5522|  3.29M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  3.29M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|  6.58M|    {
 5511|  6.58M|        return m_format.data();
 5512|  6.58M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  1.62M|    {
 7083|  1.62M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.62M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  1.62M|{
 6819|  1.62M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.62M|        if (*begin == CharT{'['}) {
 6821|  1.62M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.62M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.62M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.62M|                return begin;
 6827|  1.62M|            }
 6828|  1.62M|            handler.on_character_set_string(set);
 6829|  1.62M|            return begin;
 6830|  1.62M|        }
 6831|  1.62M|        if (*begin == CharT{'/'}) {
 6832|  1.62M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.62M|        }
 6834|  1.62M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.62M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.62M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.62M|            return begin;
 6838|  1.62M|        }
 6839|  1.62M|        handler.on_type(type);
 6840|  1.62M|        return begin;
 6841|  1.62M|    };
 6842|       |
 6843|  1.62M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.62M, False: 0]
  |  Branch (6843:28): [True: 1.62M, False: 0]
  ------------------
 6844|  1.62M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.62M, False: 0]
  |  Branch (6844:36): [True: 1.15M, False: 469k]
  ------------------
 6845|  1.15M|        return do_presentation();
 6846|  1.15M|    }
 6847|       |
 6848|   469k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   469k|    begin = parse_align(begin, end, handler);
 6854|   469k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   469k|    begin = parse_width(begin, end, handler);
 6860|   469k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   469k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 469k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   469k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 469k, False: 0]
  ------------------
 6879|   469k|        handler.on_localized();
 6880|   469k|        ++begin;
 6881|   469k|    }
 6882|   469k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   469k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 469k, False: 0]
  |  Branch (6887:25): [True: 0, False: 469k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   469k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   469k|    return begin;
 6896|   469k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  3.29M|{
 6468|  3.29M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 2.34M, False: 948k]
  |  Branch (6468:33): [True: 2.34M, False: 0]
  ------------------
 6469|  3.29M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 948k, False: 0]
  |  Branch (6469:33): [True: 948k, False: 0]
  ------------------
 6470|  3.29M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  1.15M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.15M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.15M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.15M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.15M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.15M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.15M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.15M|        handler.on_type(type);
 6840|  1.15M|        return begin;
 6841|  1.15M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  2.34M|{
 6416|  2.34M|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 2.34M]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 2.34M]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 2.34M]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 2.34M]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 2.34M]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 2.34M]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 2.34M]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 2.34M]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 2.34M]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 2.34M]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  1.06M|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 1.06M, False: 1.27M]
  ------------------
 6435|  1.06M|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 2.34M]
  ------------------
 6436|  1.06M|            return presentation_type::float_hex;
 6437|  65.1k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 65.1k, False: 2.27M]
  ------------------
 6438|  65.1k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 2.34M]
  ------------------
 6439|  65.1k|            return presentation_type::float_scientific;
 6440|   413k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 413k, False: 1.92M]
  ------------------
 6441|   413k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 2.34M]
  ------------------
 6442|   413k|            return presentation_type::float_fixed;
 6443|   798k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 798k, False: 1.54M]
  ------------------
 6444|   798k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 2.34M]
  ------------------
 6445|   798k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 2.34M]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 2.34M]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 2.34M]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.34M]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 2.34M]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.34M]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 2.34M]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|  2.34M|    }
 6463|  2.34M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|   469k|{
 6493|   469k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   469k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   469k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   469k|    auto check_align = [](wchar_t ch) {
 6496|   469k|        switch (ch) {
 6497|   469k|            case L'<':
 6498|   469k|                return align_type::left;
 6499|   469k|            case L'>':
 6500|   469k|                return align_type::right;
 6501|   469k|            case L'^':
 6502|   469k|                return align_type::center;
 6503|   469k|            default:
 6504|   469k|                return align_type::none;
 6505|   469k|        }
 6506|   469k|    };
 6507|       |
 6508|   469k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   469k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  |  Branch (859:45): [True: 0, False: 469k]
  |  |  |  Branch (859:45): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6510|   469k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   469k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   469k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   469k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   469k|    const auto begin_before_fill = begin;
 6520|   469k|    begin += potential_fill_len;
 6521|       |
 6522|   469k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 469k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   469k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   469k|    const auto begin_after_fill = begin;
 6528|   469k|    ++begin;
 6529|       |
 6530|   469k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 469k, False: 0]
  ------------------
 6531|   469k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   469k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 469k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   469k|    }
 6539|       |
 6540|   469k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 469k, False: 0]
  ------------------
 6541|   469k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 469k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   469k|        return begin_before_fill;
 6546|   469k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   469k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|   948k|{
 6475|   948k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   948k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   948k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|   948k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|   948k|        return 1;
 6478|   948k|    }
 6479|   948k|    else {
 6480|   948k|        const auto lengths =
 6481|   948k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|   948k|            "\3\4";
 6483|   948k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|   948k|        return len;
 6485|   948k|    }
 6486|   948k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   938k|    auto check_align = [](wchar_t ch) {
 6496|   938k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 938k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 938k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 938k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   938k|            default:
  ------------------
  |  Branch (6503:13): [True: 938k, False: 0]
  ------------------
 6504|   938k|                return align_type::none;
 6505|   938k|        }
 6506|   938k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|   469k|{
 6558|   469k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   469k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   469k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   469k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 469k, False: 0]
  |  Branch (6560:33): [True: 0, False: 469k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   469k|    return begin;
 6571|   469k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|   469k|    {
 7088|   469k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   469k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 469k, False: 0]
  ------------------
 7090|   469k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 469k, False: 0]
  ------------------
 7091|   469k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 469k]
  ------------------
 7092|   469k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   469k|        Handler::on_localized();
 7100|   469k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.62M|{
 8378|  1.62M|#define SCN_VISIT(Type)                                         \
 8379|  1.62M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.62M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.62M|    }                                                           \
 8382|  1.62M|    else {                                                      \
 8383|  1.62M|        return vis(monostate_val);                              \
 8384|  1.62M|    }
 8385|       |
 8386|  1.62M|    monostate monostate_val{};
 8387|       |
 8388|  1.62M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.62M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.62M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.62M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.62M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.62M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.62M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.62M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.62M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.62M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.62M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.62M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.62M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.62M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.62M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.62M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   516k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 516k, False: 1.11M]
  ------------------
 8420|   516k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   516k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   516k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   516k|    }                                                           \
  |  | 8382|   516k|    else {                                                      \
  |  | 8383|   516k|        return vis(monostate_val);                              \
  |  | 8384|   516k|    }
  ------------------
 8421|   553k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 553k, False: 1.07M]
  ------------------
 8422|   553k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   553k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   553k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   553k|    }                                                           \
  |  | 8382|   553k|    else {                                                      \
  |  | 8383|   553k|        return vis(monostate_val);                              \
  |  | 8384|   553k|    }
  ------------------
 8423|   559k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 559k, False: 1.06M]
  ------------------
 8424|   559k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   559k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   559k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   559k|    }                                                           \
  |  | 8382|   559k|    else {                                                      \
  |  | 8383|   559k|        return vis(monostate_val);                              \
  |  | 8384|   559k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.62M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.62M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.62M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.62M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.62M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.62M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.62M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.62M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.62M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.62M|            SCN_CLANG_POP
 8456|  1.62M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.66M|{
 7005|  1.66M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.66M|    handler.check_args_exhausted();
 7007|  1.66M|    return handler.get_error();
 7008|  1.66M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.66M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.66M|    auto begin = format.data();
 6974|  1.66M|    auto it = begin;
 6975|  1.66M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  3.23M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.66M, False: 1.57M]
  ------------------
 6978|  1.66M|        const auto ch = *it++;
 6979|  1.66M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.66M, False: 0]
  ------------------
 6980|  1.66M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.66M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.66M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 87.6k, False: 1.57M]
  ------------------
 6984|  87.6k|                return;
 6985|  87.6k|            }
 6986|  1.66M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.66M|    }
 6997|       |
 6998|  1.57M|    handler.on_literal_text(begin, end);
 6999|  1.57M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  1.57M|    {
 8136|  1.57M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.57M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  1.66M|{
 6903|  1.66M|    struct id_adapter {
 6904|  1.66M|        constexpr void operator()()
 6905|  1.66M|        {
 6906|  1.66M|            arg_id = handler.on_arg_id();
 6907|  1.66M|        }
 6908|  1.66M|        constexpr void operator()(std::size_t id)
 6909|  1.66M|        {
 6910|  1.66M|            arg_id = handler.on_arg_id(id);
 6911|  1.66M|        }
 6912|       |
 6913|  1.66M|        constexpr void on_error(const char* msg)
 6914|  1.66M|        {
 6915|  1.66M|            SCN_UNLIKELY_ATTR
 6916|  1.66M|            handler.on_error(msg);
 6917|  1.66M|        }
 6918|       |
 6919|  1.66M|        Handler& handler;
 6920|  1.66M|        std::size_t arg_id;
 6921|  1.66M|    };
 6922|       |
 6923|  1.66M|    ++begin;
 6924|  1.66M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.66M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.66M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.66M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.66M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.66M|    else {
 6936|  1.66M|        auto adapter = id_adapter{handler, 0};
 6937|  1.66M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.66M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.66M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.66M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.66M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.66M, False: 0]
  ------------------
 6948|  1.66M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.66M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.66M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.66M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.66M|    }
 6964|  1.66M|    return begin + 1;
 6965|  1.66M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.66M|{
 6404|  1.66M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.66M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.66M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.66M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.66M|    handler();
 6410|  1.66M|    return begin;
 6411|  1.66M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.66M|        {
 6906|  1.66M|            arg_id = handler.on_arg_id();
 6907|  1.66M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  1.66M|    {
 7083|  1.66M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.66M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  1.66M|{
 6819|  1.66M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.66M|        if (*begin == CharT{'['}) {
 6821|  1.66M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.66M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.66M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.66M|                return begin;
 6827|  1.66M|            }
 6828|  1.66M|            handler.on_character_set_string(set);
 6829|  1.66M|            return begin;
 6830|  1.66M|        }
 6831|  1.66M|        if (*begin == CharT{'/'}) {
 6832|  1.66M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.66M|        }
 6834|  1.66M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.66M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.66M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.66M|            return begin;
 6838|  1.66M|        }
 6839|  1.66M|        handler.on_type(type);
 6840|  1.66M|        return begin;
 6841|  1.66M|    };
 6842|       |
 6843|  1.66M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.66M, False: 0]
  |  Branch (6843:28): [True: 1.66M, False: 0]
  ------------------
 6844|  1.66M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.66M, False: 0]
  |  Branch (6844:36): [True: 1.18M, False: 479k]
  ------------------
 6845|  1.18M|        return do_presentation();
 6846|  1.18M|    }
 6847|       |
 6848|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   479k|    begin = parse_align(begin, end, handler);
 6854|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   479k|    begin = parse_width(begin, end, handler);
 6860|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   479k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 479k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   479k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 479k, False: 0]
  ------------------
 6879|   479k|        handler.on_localized();
 6880|   479k|        ++begin;
 6881|   479k|    }
 6882|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   479k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 479k, False: 0]
  |  Branch (6887:25): [True: 0, False: 479k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   479k|    return begin;
 6896|   479k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  1.18M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.18M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.18M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.18M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.18M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.18M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.18M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.18M|        handler.on_type(type);
 6840|  1.18M|        return begin;
 6841|  1.18M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|   479k|{
 6493|   479k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   479k|    auto check_align = [](wchar_t ch) {
 6496|   479k|        switch (ch) {
 6497|   479k|            case L'<':
 6498|   479k|                return align_type::left;
 6499|   479k|            case L'>':
 6500|   479k|                return align_type::right;
 6501|   479k|            case L'^':
 6502|   479k|                return align_type::center;
 6503|   479k|            default:
 6504|   479k|                return align_type::none;
 6505|   479k|        }
 6506|   479k|    };
 6507|       |
 6508|   479k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   479k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   958k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6510|   479k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   479k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   479k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   479k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   479k|    const auto begin_before_fill = begin;
 6520|   479k|    begin += potential_fill_len;
 6521|       |
 6522|   479k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 479k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   479k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   479k|    const auto begin_after_fill = begin;
 6528|   479k|    ++begin;
 6529|       |
 6530|   479k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 479k, False: 0]
  ------------------
 6531|   479k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   479k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 479k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   479k|    }
 6539|       |
 6540|   479k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 479k, False: 0]
  ------------------
 6541|   479k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 479k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   479k|        return begin_before_fill;
 6546|   479k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   479k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|   958k|    auto check_align = [](wchar_t ch) {
 6496|   958k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 958k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 958k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 958k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   958k|            default:
  ------------------
  |  Branch (6503:13): [True: 958k, False: 0]
  ------------------
 6504|   958k|                return align_type::none;
 6505|   958k|        }
 6506|   958k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|   479k|{
 6558|   479k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   479k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 479k, False: 0]
  |  Branch (6560:33): [True: 0, False: 479k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   479k|    return begin;
 6571|   479k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|   479k|    {
 7088|   479k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   479k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 479k, False: 0]
  ------------------
 7090|   479k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 479k, False: 0]
  ------------------
 7091|   479k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 479k]
  ------------------
 7092|   479k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   479k|        Handler::on_localized();
 7100|   479k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.66M|{
 8378|  1.66M|#define SCN_VISIT(Type)                                         \
 8379|  1.66M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.66M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.66M|    }                                                           \
 8382|  1.66M|    else {                                                      \
 8383|  1.66M|        return vis(monostate_val);                              \
 8384|  1.66M|    }
 8385|       |
 8386|  1.66M|    monostate monostate_val{};
 8387|       |
 8388|  1.66M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.66M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.66M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.66M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.66M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.66M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.66M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.66M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.66M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.66M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.66M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.66M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.66M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.66M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.66M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.66M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   526k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 526k, False: 1.13M]
  ------------------
 8420|   526k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   526k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   526k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   526k|    }                                                           \
  |  | 8382|   526k|    else {                                                      \
  |  | 8383|   526k|        return vis(monostate_val);                              \
  |  | 8384|   526k|    }
  ------------------
 8421|   564k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 564k, False: 1.09M]
  ------------------
 8422|   564k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   564k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   564k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   564k|    }                                                           \
  |  | 8382|   564k|    else {                                                      \
  |  | 8383|   564k|        return vis(monostate_val);                              \
  |  | 8384|   564k|    }
  ------------------
 8423|   571k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 571k, False: 1.09M]
  ------------------
 8424|   571k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   571k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   571k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   571k|    }                                                           \
  |  | 8382|   571k|    else {                                                      \
  |  | 8383|   571k|        return vis(monostate_val);                              \
  |  | 8384|   571k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.66M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.66M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.66M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.66M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.66M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.66M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.66M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.66M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.66M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.66M|            SCN_CLANG_POP
 8456|  1.66M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|   113k|    {
 4047|   113k|        sync(0);
 4048|   113k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   498k|    {
 5427|   498k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   498k|        return static_cast<std::size_t>(m_desc &
 5432|   498k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   498k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   996k|    {
 5452|   996k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   996k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|   498k|    {
 5395|   498k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   498k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   498k|        const auto t = type(id);
 5407|   498k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   498k|        basic_scan_arg<Context> arg;
 5412|   498k|        arg.m_type = t;
 5413|   498k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 498k, False: 0]
  ------------------
 5414|   498k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   498k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   498k|        return arg;
 5420|   498k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|   498k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   498k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   498k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   498k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   498k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|   498k|    {
 5456|   498k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   498k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|   953k|    {
 5208|   953k|        return m_type != detail::arg_type::none_type;
 5209|   953k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  64.1k|{
 8378|  64.1k|#define SCN_VISIT(Type)                                         \
 8379|  64.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  64.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  64.1k|    }                                                           \
 8382|  64.1k|    else {                                                      \
 8383|  64.1k|        return vis(monostate_val);                              \
 8384|  64.1k|    }
 8385|       |
 8386|  64.1k|    monostate monostate_val{};
 8387|       |
 8388|  64.1k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 64.1k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 64.1k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 64.1k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 64.1k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 64.1k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 64.1k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 64.1k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 64.1k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 64.1k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 64.1k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 64.1k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 64.1k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 64.1k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 64.1k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 64.1k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  21.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 21.3k, False: 42.7k]
  ------------------
 8420|  21.3k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.3k|    }                                                           \
  |  | 8382|  21.3k|    else {                                                      \
  |  | 8383|  21.3k|        return vis(monostate_val);                              \
  |  | 8384|  21.3k|    }
  ------------------
 8421|  21.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 21.3k, False: 42.7k]
  ------------------
 8422|  21.3k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.3k|    }                                                           \
  |  | 8382|  21.3k|    else {                                                      \
  |  | 8383|  21.3k|        return vis(monostate_val);                              \
  |  | 8384|  21.3k|    }
  ------------------
 8423|  21.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 21.4k, False: 42.6k]
  ------------------
 8424|  21.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  21.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.4k|    }                                                           \
  |  | 8382|  21.4k|    else {                                                      \
  |  | 8383|  21.4k|        return vis(monostate_val);                              \
  |  | 8384|  21.4k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 64.1k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 64.1k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 64.1k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 64.1k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 64.1k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 64.1k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 64.1k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 64.1k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 64.1k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  64.1k|            SCN_CLANG_POP
 8456|  64.1k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   412k|    {
 5506|   412k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|   206k|    {
 8099|   206k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   412k|    {
 8017|   412k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   206k|{
 7005|   206k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   206k|    handler.check_args_exhausted();
 7007|   206k|    return handler.get_error();
 7008|   206k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   206k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   206k|    auto begin = format.data();
 6974|   206k|    auto it = begin;
 6975|   206k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   237k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 206k, False: 31.1k]
  ------------------
 6978|   206k|        const auto ch = *it++;
 6979|   206k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 206k, False: 0]
  ------------------
 6980|   206k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   206k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   206k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 175k, False: 31.1k]
  ------------------
 6984|   175k|                return;
 6985|   175k|            }
 6986|   206k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   206k|    }
 6997|       |
 6998|  31.1k|    handler.on_literal_text(begin, end);
 6999|  31.1k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|   206k|{
 6903|   206k|    struct id_adapter {
 6904|   206k|        constexpr void operator()()
 6905|   206k|        {
 6906|   206k|            arg_id = handler.on_arg_id();
 6907|   206k|        }
 6908|   206k|        constexpr void operator()(std::size_t id)
 6909|   206k|        {
 6910|   206k|            arg_id = handler.on_arg_id(id);
 6911|   206k|        }
 6912|       |
 6913|   206k|        constexpr void on_error(const char* msg)
 6914|   206k|        {
 6915|   206k|            SCN_UNLIKELY_ATTR
 6916|   206k|            handler.on_error(msg);
 6917|   206k|        }
 6918|       |
 6919|   206k|        Handler& handler;
 6920|   206k|        std::size_t arg_id;
 6921|   206k|    };
 6922|       |
 6923|   206k|    ++begin;
 6924|   206k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   206k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 206k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   206k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 206k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   206k|    else {
 6936|   206k|        auto adapter = id_adapter{handler, 0};
 6937|   206k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   206k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   206k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 206k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   206k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 206k, False: 0]
  ------------------
 6948|   206k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   206k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   206k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  |  Branch (859:45): [True: 0, False: 206k]
  |  |  |  Branch (859:45): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   206k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   206k|    }
 6964|   206k|    return begin + 1;
 6965|   206k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|   412k|    {
 8000|   412k|        return m_args.get(id);
 8001|   412k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|   412k|    {
 8010|   412k|        return m_locale;
 8011|   412k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|   412k|    {
 5527|   412k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   412k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   412k|        do_check_arg_id(id);
 5535|   412k|        return id;
 5536|   412k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|   412k|{
 6015|   412k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   412k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   412k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   206k|{
 6404|   206k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   206k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 206k, False: 0]
  |  Branch (6405:26): [True: 0, False: 206k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   206k|    handler();
 6410|   206k|    return begin;
 6411|   206k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   206k|        {
 6906|   206k|            arg_id = handler.on_arg_id();
 6907|   206k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|   825k|    {
 5213|   825k|        return m_type;
 5214|   825k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|   412k|    {
 5522|   412k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   412k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|   270k|{
 4315|   270k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 270k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   270k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   270k|                            ranges::default_sentinel};
 4321|   270k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|   270k|    {
 4148|   270k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   270k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   270k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|   825k|    {
 5511|   825k|        return m_format.data();
 5512|   825k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   206k|    {
 7083|   206k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   206k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|   206k|{
 6819|   206k|    auto do_presentation = [&]() -> const CharT* {
 6820|   206k|        if (*begin == CharT{'['}) {
 6821|   206k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   206k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   206k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   206k|                return begin;
 6827|   206k|            }
 6828|   206k|            handler.on_character_set_string(set);
 6829|   206k|            return begin;
 6830|   206k|        }
 6831|   206k|        if (*begin == CharT{'/'}) {
 6832|   206k|            return parse_presentation_regex(begin, end, handler);
 6833|   206k|        }
 6834|   206k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   206k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   206k|            handler.on_error("Invalid type specifier in format string");
 6837|   206k|            return begin;
 6838|   206k|        }
 6839|   206k|        handler.on_type(type);
 6840|   206k|        return begin;
 6841|   206k|    };
 6842|       |
 6843|   206k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 206k, False: 0]
  |  Branch (6843:28): [True: 206k, False: 0]
  ------------------
 6844|   206k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 206k, False: 0]
  |  Branch (6844:36): [True: 163k, False: 42.7k]
  ------------------
 6845|   163k|        return do_presentation();
 6846|   163k|    }
 6847|       |
 6848|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  42.7k|    begin = parse_align(begin, end, handler);
 6854|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  42.7k|    begin = parse_width(begin, end, handler);
 6860|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  42.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 42.7k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  42.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 42.7k, False: 0]
  ------------------
 6879|  42.7k|        handler.on_localized();
 6880|  42.7k|        ++begin;
 6881|  42.7k|    }
 6882|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  42.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 42.7k, False: 0]
  |  Branch (6887:25): [True: 0, False: 42.7k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  42.7k|    return begin;
 6896|  42.7k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|   412k|{
 6468|   412k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 327k, False: 85.4k]
  |  Branch (6468:33): [True: 327k, False: 0]
  ------------------
 6469|   412k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 85.4k, False: 0]
  |  Branch (6469:33): [True: 85.4k, False: 0]
  ------------------
 6470|   412k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|   163k|    auto do_presentation = [&]() -> const CharT* {
 6820|   163k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 163k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   163k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 163k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   163k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   163k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   163k|        handler.on_type(type);
 6840|   163k|        return begin;
 6841|   163k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|   327k|{
 6416|   327k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 327k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 327k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 327k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 327k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 327k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 327k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 327k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 327k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 327k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 327k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  85.9k|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 85.9k, False: 241k]
  ------------------
 6435|  85.9k|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 327k]
  ------------------
 6436|  85.9k|            return presentation_type::float_hex;
 6437|  70.4k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 70.4k, False: 257k]
  ------------------
 6438|  70.4k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 327k]
  ------------------
 6439|  70.4k|            return presentation_type::float_scientific;
 6440|  85.5k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 85.5k, False: 241k]
  ------------------
 6441|  85.5k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 327k]
  ------------------
 6442|  85.5k|            return presentation_type::float_fixed;
 6443|  85.4k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 85.4k, False: 241k]
  ------------------
 6444|  85.4k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 327k]
  ------------------
 6445|  85.4k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 327k]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 327k]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 327k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 327k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 327k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 327k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 327k]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|   327k|    }
 6463|   327k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  42.7k|{
 6493|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  42.7k|    auto check_align = [](wchar_t ch) {
 6496|  42.7k|        switch (ch) {
 6497|  42.7k|            case L'<':
 6498|  42.7k|                return align_type::left;
 6499|  42.7k|            case L'>':
 6500|  42.7k|                return align_type::right;
 6501|  42.7k|            case L'^':
 6502|  42.7k|                return align_type::center;
 6503|  42.7k|            default:
 6504|  42.7k|                return align_type::none;
 6505|  42.7k|        }
 6506|  42.7k|    };
 6507|       |
 6508|  42.7k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  42.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  |  Branch (859:45): [True: 0, False: 42.7k]
  |  |  |  Branch (859:45): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6510|  42.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  42.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  42.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  42.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  42.7k|    const auto begin_before_fill = begin;
 6520|  42.7k|    begin += potential_fill_len;
 6521|       |
 6522|  42.7k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 42.7k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  42.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  42.7k|    const auto begin_after_fill = begin;
 6528|  42.7k|    ++begin;
 6529|       |
 6530|  42.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 42.7k, False: 0]
  ------------------
 6531|  42.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  42.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 42.7k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  42.7k|    }
 6539|       |
 6540|  42.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 42.7k, False: 0]
  ------------------
 6541|  42.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 42.7k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  42.7k|        return begin_before_fill;
 6546|  42.7k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  42.7k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  85.4k|{
 6475|  85.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  85.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  85.4k|        return 1;
 6478|  85.4k|    }
 6479|  85.4k|    else {
 6480|  85.4k|        const auto lengths =
 6481|  85.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  85.4k|            "\3\4";
 6483|  85.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  85.4k|        return len;
 6485|  85.4k|    }
 6486|  85.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  85.4k|    auto check_align = [](wchar_t ch) {
 6496|  85.4k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 85.4k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 85.4k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 85.4k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  85.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 85.4k, False: 0]
  ------------------
 6504|  85.4k|                return align_type::none;
 6505|  85.4k|        }
 6506|  85.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  42.7k|{
 6558|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  42.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 42.7k, False: 0]
  |  Branch (6560:33): [True: 0, False: 42.7k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  42.7k|    return begin;
 6571|  42.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|  42.7k|    {
 7088|  42.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  42.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 42.7k, False: 0]
  ------------------
 7090|  42.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 42.7k, False: 0]
  ------------------
 7091|  42.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 42.7k]
  ------------------
 7092|  42.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  42.7k|        Handler::on_localized();
 7100|  42.7k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   206k|{
 8378|   206k|#define SCN_VISIT(Type)                                         \
 8379|   206k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   206k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   206k|    }                                                           \
 8382|   206k|    else {                                                      \
 8383|   206k|        return vis(monostate_val);                              \
 8384|   206k|    }
 8385|       |
 8386|   206k|    monostate monostate_val{};
 8387|       |
 8388|   206k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 206k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 206k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 206k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 206k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 206k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 206k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 206k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 206k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 206k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 206k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 206k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 206k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 206k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 206k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 206k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  68.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 68.7k, False: 137k]
  ------------------
 8420|  68.7k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.7k|    }                                                           \
  |  | 8382|  68.7k|    else {                                                      \
  |  | 8383|  68.7k|        return vis(monostate_val);                              \
  |  | 8384|  68.7k|    }
  ------------------
 8421|  68.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 68.8k, False: 137k]
  ------------------
 8422|  68.8k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  68.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.8k|    }                                                           \
  |  | 8382|  68.8k|    else {                                                      \
  |  | 8383|  68.8k|        return vis(monostate_val);                              \
  |  | 8384|  68.8k|    }
  ------------------
 8423|  68.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 68.9k, False: 137k]
  ------------------
 8424|  68.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  68.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.9k|    }                                                           \
  |  | 8382|  68.9k|    else {                                                      \
  |  | 8383|  68.9k|        return vis(monostate_val);                              \
  |  | 8384|  68.9k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 206k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 206k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 206k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 206k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 206k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 206k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 206k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 206k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 206k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   206k|            SCN_CLANG_POP
 8456|   206k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  64.0k|{
 8378|  64.0k|#define SCN_VISIT(Type)                                         \
 8379|  64.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  64.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  64.0k|    }                                                           \
 8382|  64.0k|    else {                                                      \
 8383|  64.0k|        return vis(monostate_val);                              \
 8384|  64.0k|    }
 8385|       |
 8386|  64.0k|    monostate monostate_val{};
 8387|       |
 8388|  64.0k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 64.0k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 64.0k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 64.0k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 64.0k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 64.0k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 64.0k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 64.0k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 64.0k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 64.0k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 64.0k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 64.0k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 64.0k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 64.0k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 64.0k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 64.0k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  21.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 21.3k, False: 42.7k]
  ------------------
 8420|  21.3k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.3k|    }                                                           \
  |  | 8382|  21.3k|    else {                                                      \
  |  | 8383|  21.3k|        return vis(monostate_val);                              \
  |  | 8384|  21.3k|    }
  ------------------
 8421|  21.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 21.3k, False: 42.7k]
  ------------------
 8422|  21.3k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.3k|    }                                                           \
  |  | 8382|  21.3k|    else {                                                      \
  |  | 8383|  21.3k|        return vis(monostate_val);                              \
  |  | 8384|  21.3k|    }
  ------------------
 8423|  21.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 21.3k, False: 42.6k]
  ------------------
 8424|  21.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  21.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  21.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  21.3k|    }                                                           \
  |  | 8382|  21.3k|    else {                                                      \
  |  | 8383|  21.3k|        return vis(monostate_val);                              \
  |  | 8384|  21.3k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 64.0k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 64.0k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 64.0k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 64.0k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 64.0k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 64.0k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 64.0k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 64.0k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 64.0k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  64.0k|            SCN_CLANG_POP
 8456|  64.0k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   206k|{
 7005|   206k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   206k|    handler.check_args_exhausted();
 7007|   206k|    return handler.get_error();
 7008|   206k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   206k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   206k|    auto begin = format.data();
 6974|   206k|    auto it = begin;
 6975|   206k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   237k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 206k, False: 31.0k]
  ------------------
 6978|   206k|        const auto ch = *it++;
 6979|   206k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 206k, False: 0]
  ------------------
 6980|   206k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   206k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   206k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 175k, False: 31.0k]
  ------------------
 6984|   175k|                return;
 6985|   175k|            }
 6986|   206k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   206k|    }
 6997|       |
 6998|  31.0k|    handler.on_literal_text(begin, end);
 6999|  31.0k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8135|  31.0k|    {
 8136|  31.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  31.0k|    static_cast<    \
  |  |  929|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  31.0k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|   206k|{
 6903|   206k|    struct id_adapter {
 6904|   206k|        constexpr void operator()()
 6905|   206k|        {
 6906|   206k|            arg_id = handler.on_arg_id();
 6907|   206k|        }
 6908|   206k|        constexpr void operator()(std::size_t id)
 6909|   206k|        {
 6910|   206k|            arg_id = handler.on_arg_id(id);
 6911|   206k|        }
 6912|       |
 6913|   206k|        constexpr void on_error(const char* msg)
 6914|   206k|        {
 6915|   206k|            SCN_UNLIKELY_ATTR
 6916|   206k|            handler.on_error(msg);
 6917|   206k|        }
 6918|       |
 6919|   206k|        Handler& handler;
 6920|   206k|        std::size_t arg_id;
 6921|   206k|    };
 6922|       |
 6923|   206k|    ++begin;
 6924|   206k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   206k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 206k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   206k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 206k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   206k|    else {
 6936|   206k|        auto adapter = id_adapter{handler, 0};
 6937|   206k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   206k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   206k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 206k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   206k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 206k, False: 0]
  ------------------
 6948|   206k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   206k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   206k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  |  Branch (859:45): [True: 0, False: 206k]
  |  |  |  Branch (859:45): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   206k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   206k|    }
 6964|   206k|    return begin + 1;
 6965|   206k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   206k|{
 6404|   206k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   206k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 206k, False: 0]
  |  Branch (6405:26): [True: 0, False: 206k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   206k|    handler();
 6410|   206k|    return begin;
 6411|   206k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   206k|        {
 6906|   206k|            arg_id = handler.on_arg_id();
 6907|   206k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|   206k|    {
 7083|   206k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   206k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|   206k|{
 6819|   206k|    auto do_presentation = [&]() -> const CharT* {
 6820|   206k|        if (*begin == CharT{'['}) {
 6821|   206k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   206k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   206k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   206k|                return begin;
 6827|   206k|            }
 6828|   206k|            handler.on_character_set_string(set);
 6829|   206k|            return begin;
 6830|   206k|        }
 6831|   206k|        if (*begin == CharT{'/'}) {
 6832|   206k|            return parse_presentation_regex(begin, end, handler);
 6833|   206k|        }
 6834|   206k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   206k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   206k|            handler.on_error("Invalid type specifier in format string");
 6837|   206k|            return begin;
 6838|   206k|        }
 6839|   206k|        handler.on_type(type);
 6840|   206k|        return begin;
 6841|   206k|    };
 6842|       |
 6843|   206k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 206k, False: 0]
  |  Branch (6843:28): [True: 206k, False: 0]
  ------------------
 6844|   206k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 206k, False: 0]
  |  Branch (6844:36): [True: 163k, False: 42.7k]
  ------------------
 6845|   163k|        return do_presentation();
 6846|   163k|    }
 6847|       |
 6848|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  42.7k|    begin = parse_align(begin, end, handler);
 6854|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  42.7k|    begin = parse_width(begin, end, handler);
 6860|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  42.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 42.7k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  42.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 42.7k, False: 0]
  ------------------
 6879|  42.7k|        handler.on_localized();
 6880|  42.7k|        ++begin;
 6881|  42.7k|    }
 6882|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  42.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 42.7k, False: 0]
  |  Branch (6887:25): [True: 0, False: 42.7k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  42.7k|    return begin;
 6896|  42.7k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|   163k|    auto do_presentation = [&]() -> const CharT* {
 6820|   163k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 163k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   163k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 163k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   163k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   163k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 163k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   163k|        handler.on_type(type);
 6840|   163k|        return begin;
 6841|   163k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|  42.7k|{
 6493|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  42.7k|    auto check_align = [](wchar_t ch) {
 6496|  42.7k|        switch (ch) {
 6497|  42.7k|            case L'<':
 6498|  42.7k|                return align_type::left;
 6499|  42.7k|            case L'>':
 6500|  42.7k|                return align_type::right;
 6501|  42.7k|            case L'^':
 6502|  42.7k|                return align_type::center;
 6503|  42.7k|            default:
 6504|  42.7k|                return align_type::none;
 6505|  42.7k|        }
 6506|  42.7k|    };
 6507|       |
 6508|  42.7k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  42.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  |  Branch (859:45): [True: 0, False: 42.7k]
  |  |  |  Branch (859:45): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6510|  42.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  42.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  42.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  42.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  42.7k|    const auto begin_before_fill = begin;
 6520|  42.7k|    begin += potential_fill_len;
 6521|       |
 6522|  42.7k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 42.7k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  42.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  42.7k|    const auto begin_after_fill = begin;
 6528|  42.7k|    ++begin;
 6529|       |
 6530|  42.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 42.7k, False: 0]
  ------------------
 6531|  42.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  42.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 42.7k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  42.7k|    }
 6539|       |
 6540|  42.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 42.7k, False: 0]
  ------------------
 6541|  42.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 42.7k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  42.7k|        return begin_before_fill;
 6546|  42.7k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  42.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  85.4k|    auto check_align = [](wchar_t ch) {
 6496|  85.4k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 85.4k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 85.4k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 85.4k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  85.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 85.4k, False: 0]
  ------------------
 6504|  85.4k|                return align_type::none;
 6505|  85.4k|        }
 6506|  85.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|  42.7k|{
 6558|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  42.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 42.7k, False: 0]
  |  Branch (6560:33): [True: 0, False: 42.7k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  42.7k|    return begin;
 6571|  42.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|  42.7k|    {
 7088|  42.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  42.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 42.7k, False: 0]
  ------------------
 7090|  42.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 42.7k, False: 0]
  ------------------
 7091|  42.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 42.7k]
  ------------------
 7092|  42.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  42.7k|        Handler::on_localized();
 7100|  42.7k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   206k|{
 8378|   206k|#define SCN_VISIT(Type)                                         \
 8379|   206k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   206k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   206k|    }                                                           \
 8382|   206k|    else {                                                      \
 8383|   206k|        return vis(monostate_val);                              \
 8384|   206k|    }
 8385|       |
 8386|   206k|    monostate monostate_val{};
 8387|       |
 8388|   206k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 206k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 206k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 206k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 206k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 206k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 206k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 206k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 206k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 206k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 206k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 206k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 206k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 206k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 206k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 206k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  68.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 68.7k, False: 137k]
  ------------------
 8420|  68.7k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.7k|    }                                                           \
  |  | 8382|  68.7k|    else {                                                      \
  |  | 8383|  68.7k|        return vis(monostate_val);                              \
  |  | 8384|  68.7k|    }
  ------------------
 8421|  68.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 68.7k, False: 137k]
  ------------------
 8422|  68.7k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  68.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.7k|    }                                                           \
  |  | 8382|  68.7k|    else {                                                      \
  |  | 8383|  68.7k|        return vis(monostate_val);                              \
  |  | 8384|  68.7k|    }
  ------------------
 8423|  68.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 68.8k, False: 137k]
  ------------------
 8424|  68.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  68.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  68.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  68.8k|    }                                                           \
  |  | 8382|  68.8k|    else {                                                      \
  |  | 8383|  68.8k|        return vis(monostate_val);                              \
  |  | 8384|  68.8k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 206k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 206k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 206k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 206k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 206k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 206k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 206k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 206k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 206k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   206k|            SCN_CLANG_POP
 8456|   206k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|   227k|    {
 4047|   227k|        sync(0);
 4048|   227k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|   453k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|  42.7k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  41.4k|{
   89|  41.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   124k|{
   44|   124k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   124k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  41.4k|{
  127|  41.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   124k|{
   60|   124k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   124k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.10k|{
  163|  7.10k|    T value;
  164|  7.10k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.26k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.26k|    static_cast<    \
  |  |  929|  1.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.26k|    static_cast<    \
  |  |  929|  1.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.10k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  21.3k|{
   72|  21.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  21.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  41.5k|{
   89|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  41.5k|{
  127|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.12k|{
  163|  7.12k|    T value;
  164|  7.12k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.12k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.27k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.27k|    static_cast<    \
  |  |  929|  1.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.27k|    static_cast<    \
  |  |  929|  1.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.12k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  41.5k|{
   89|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.5k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  41.5k|{
  127|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.5k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.13k|{
  163|  7.13k|    T value;
  164|  7.13k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.13k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.29k|    static_cast<    \
  |  |  929|  1.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.29k|    static_cast<    \
  |  |  929|  1.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.13k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  41.4k|{
   89|  41.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   124k|{
   44|   124k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   124k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.4k|{
  127|  41.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.4k|    static_cast<    \
  |  |  929|  41.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   124k|{
   60|   124k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   124k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.10k|{
  163|  7.10k|    T value;
  164|  7.10k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.25k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.10k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  21.3k|{
   72|  21.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  21.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  41.5k|{
   89|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.5k|{
  127|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.11k|{
  163|  7.11k|    T value;
  164|  7.11k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.11k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.27k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.27k|    static_cast<    \
  |  |  929|  1.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.27k|    static_cast<    \
  |  |  929|  1.27k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.11k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  41.5k|{
   89|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  41.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  41.5k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  41.5k|{
  127|  41.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  41.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  41.5k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.13k|{
  163|  7.13k|    T value;
  164|  7.13k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.13k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  7.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.84k, False: 1.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.84k|    }                                                  \
  |  |  |  | 3642|  7.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.28k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.28k|    static_cast<    \
  |  |  929|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.28k|    static_cast<    \
  |  |  929|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.13k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.34M|{
  653|  2.34M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.34M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.02M|{
  659|  1.02M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.02M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 511k, False: 511k]
  ------------------
  661|  1.02M|                    : std::locale{};
  662|  1.02M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.40M|{
 1221|  1.40M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.40M|                                  m_nan_payload_buffer, value);
 1223|  1.40M|    value = this->setsign(value);
 1224|  1.40M|    return n;
 1225|  1.40M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  68.9k|{
 1221|  68.9k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  68.9k|                                  m_nan_payload_buffer, value);
 1223|  68.9k|    value = this->setsign(value);
 1224|  68.9k|    return n;
 1225|  68.9k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.52M|{
 1221|  1.52M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.52M|                                  m_nan_payload_buffer, value);
 1223|  1.52M|    value = this->setsign(value);
 1224|  1.52M|    return n;
 1225|  1.52M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  69.0k|{
 1221|  69.0k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  69.0k|                                  m_nan_payload_buffer, value);
 1223|  69.0k|    value = this->setsign(value);
 1224|  69.0k|    return n;
 1225|  69.0k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.54M|{
 1221|  1.54M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.54M|                                  m_nan_payload_buffer, value);
 1223|  1.54M|    value = this->setsign(value);
 1224|  1.54M|    return n;
 1225|  1.54M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  69.1k|{
 1221|  69.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  69.1k|                                  m_nan_payload_buffer, value);
 1223|  69.1k|    value = this->setsign(value);
 1224|  69.1k|    return n;
 1225|  69.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.04M|{
 2176|  1.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.04M|{
 2184|  1.04M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.04M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 996k, False: 52.5k]
  |  |  ------------------
  ------------------
 2186|   996k|        source.sync(*n);
 2187|   996k|    }
 2188|  52.5k|    else {
 2189|  52.5k|        source.sync_all();
 2190|  52.5k|    }
 2191|  1.04M|    return n;
 2192|  1.04M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   124k|{
 2200|   124k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   124k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   124k|{
 2208|   124k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   124k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.3k, False: 105k]
  |  |  ------------------
  ------------------
 2210|  19.3k|        source.sync(*n);
 2211|  19.3k|    }
 2212|   105k|    else {
 2213|   105k|        source.sync_all();
 2214|   105k|    }
 2215|   124k|    return n;
 2216|   124k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.06M|{
  194|  2.06M|    return find_classic_impl(
  195|  2.06M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.06M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.06M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.63M|{
  202|  4.63M|    return find_classic_impl(
  203|  4.63M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.63M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.63M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.04M|{
 2133|  1.04M|    return vscan_internal(source, format, args);
 2134|  1.04M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.04M|{
 2139|  1.04M|    auto n = vscan_internal(source, format, args);
 2140|  1.04M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 996k, False: 52.5k]
  |  |  ------------------
  ------------------
 2141|   996k|        source.sync(*n);
 2142|   996k|    }
 2143|  52.5k|    else {
 2144|  52.5k|        source.sync_all();
 2145|  52.5k|    }
 2146|  1.04M|    return n;
 2147|  1.04M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   124k|{
 2153|   124k|    return vscan_internal(source, format, args);
 2154|   124k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   124k|{
 2159|   124k|    auto n = vscan_internal(source, format, args);
 2160|   124k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   124k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.3k, False: 105k]
  |  |  ------------------
  ------------------
 2161|  19.3k|        source.sync(*n);
 2162|  19.3k|    }
 2163|   105k|    else {
 2164|   105k|        source.sync_all();
 2165|   105k|    }
 2166|   124k|    return n;
 2167|   124k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   234k|{
 2243|   234k|    return vscan_value_internal(source, arg);
 2244|   234k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   218k|{
 2248|   218k|    auto n = vscan_value_internal(source, arg);
 2249|   218k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   218k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 209k, False: 8.76k]
  |  |  ------------------
  ------------------
 2250|   209k|        source.sync(*n);
 2251|   209k|    }
 2252|  8.76k|    else {
 2253|  8.76k|        source.sync_all();
 2254|  8.76k|    }
 2255|   218k|    return n;
 2256|   218k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  21.3k|{
 2262|  21.3k|    return vscan_value_internal(source, arg);
 2263|  21.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  21.3k|{
 2268|  21.3k|    auto n = vscan_value_internal(source, arg);
 2269|  21.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  21.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.82k, False: 17.5k]
  |  |  ------------------
  ------------------
 2270|  3.82k|        source.sync(*n);
 2271|  3.82k|    }
 2272|  17.5k|    else {
 2273|  17.5k|        source.sync_all();
 2274|  17.5k|    }
 2275|  21.3k|    return n;
 2276|  21.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.06M|{
  118|  2.06M|    auto it = source.begin();
  119|       |
  120|  8.58M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.34M, False: 1.24M]
  ------------------
  121|  7.34M|        auto sv =
  122|  7.34M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.34M|                .substr(0, 8);
  124|       |
  125|  7.34M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.17M, False: 165k]
  ------------------
  126|  7.17M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.17M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.17M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 753k, False: 6.42M]
  ------------------
  129|   753k|                break;
  130|   753k|            }
  131|  6.42M|            continue;
  132|  7.17M|        }
  133|       |
  134|   573k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 475k, False: 97.7k]
  ------------------
  135|   475k|            auto tmp =
  136|   475k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   475k|            auto res = get_next_code_point(tmp);
  138|   475k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 68.1k, False: 407k]
  ------------------
  139|  68.1k|                return it;
  140|  68.1k|            }
  141|   407k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   407k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   407k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   407k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   407k|        }
  145|   165k|    }
  146|       |
  147|  1.99M|    return detail::make_string_view_iterator(source, it);
  148|  2.06M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  10.3M|{
  105|  10.3M|    static_assert(sizeof(*source.data()) == 1);
  106|  10.3M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  10.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  10.3M|    uint64_t word{};
  108|  10.3M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  10.3M|    return has_byte_greater(word, 127) != 0;
  111|  10.3M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  47.5M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   475k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.63M|{
  118|  4.63M|    auto it = source.begin();
  119|       |
  120|  5.03M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.98M, False: 2.04M]
  ------------------
  121|  2.98M|        auto sv =
  122|  2.98M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.98M|                .substr(0, 8);
  124|       |
  125|  2.98M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.81M, False: 176k]
  ------------------
  126|  2.81M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.81M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.81M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.43M, False: 380k]
  ------------------
  129|  2.43M|                break;
  130|  2.43M|            }
  131|   380k|            continue;
  132|  2.81M|        }
  133|       |
  134|   333k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 320k, False: 12.8k]
  ------------------
  135|   320k|            auto tmp =
  136|   320k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   320k|            auto res = get_next_code_point(tmp);
  138|   320k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 163k, False: 156k]
  ------------------
  139|   163k|                return it;
  140|   163k|            }
  141|   156k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   156k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   156k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   156k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   156k|        }
  145|   176k|    }
  146|       |
  147|  4.47M|    return detail::make_string_view_iterator(source, it);
  148|  4.63M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.45M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   320k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.40M|{
 1138|  1.40M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 13.4k, False: 1.39M]
  ------------------
 1139|  13.4k|        value = std::numeric_limits<T>::infinity();
 1140|  13.4k|        return 3;
 1141|  13.4k|    }
 1142|  1.39M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 9.93k, False: 1.38M]
  ------------------
 1143|  9.93k|        value = std::numeric_limits<T>::infinity();
 1144|  9.93k|        return 8;
 1145|  9.93k|    }
 1146|  1.38M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 57.3k, False: 1.32M]
  ------------------
 1147|  57.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  57.3k|        return 3;
 1149|  57.3k|    }
 1150|  1.32M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.32M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.32M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.32M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 303k, False: 1.02M]
  ------------------
 1185|   303k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.87k, False: 300k]
  |  |  ------------------
  ------------------
 1186|  2.87k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.87k|                                         "Invalid floating-point digit");
 1188|  2.87k|        }
 1189|   303k|    }
 1190|  1.32M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.70k, False: 1.31M]
  |  |  ------------------
  ------------------
 1191|  7.70k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.70k|                                     "Invalid floating-point digit");
 1193|  7.70k|    }
 1194|       |
 1195|  1.31M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.31M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.31M|            double tmp{};
 1200|  1.31M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.31M|            value = tmp;
 1202|  1.31M|            return ret;
 1203|  1.31M|        }
 1204|  1.31M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.31M|            return fast_float_fallback(data, value);
 1208|  1.31M|        }
 1209|  1.31M|    }
 1210|  1.31M|    else {
 1211|       |        // Default to fast_float
 1212|  1.31M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.31M|    }
 1214|  1.31M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.31M|    {
 1078|  1.31M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  4.92M|    {
  712|  4.92M|        return {kind, options};
  713|  4.92M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.31M|    {
 1082|  1.31M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 300k, False: 1.01M]
  ------------------
 1083|  1.31M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 51.3k, False: 963k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   351k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   351k|                                              value);
 1087|   351k|        }
 1088|       |
 1089|   963k|        const auto flags = get_flags();
 1090|   963k|        const auto view = get_view();
 1091|   963k|        const auto result = fast_float::from_chars(
 1092|   963k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   963k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 963k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   963k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.33k, False: 954k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  9.33k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  9.33k|                                              value);
 1102|  9.33k|        }
 1103|       |
 1104|   954k|        return result.ptr - view.data();
 1105|   963k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   360k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   360k|    {
 1048|   360k|#if !SCN_DISABLE_STRTOD
 1049|   360k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   360k|    }
 1056|   360k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   360k|    {
  894|   360k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   366k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   360k|    {
  898|   360k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   360k|                           generic_strtod);
  900|   360k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   360k|    {
  732|   360k|        CharT* end{};
  733|   360k|        errno = 0;
  734|   360k|        value = strtod_cb(src, &end);
  735|   360k|        const auto saved_errno = errno;
  736|   360k|        auto chars_read = end - src;
  737|       |
  738|   360k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   360k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 349k]
  |  |  ------------------
  ------------------
  740|  11.0k|            return unexpected(e);
  741|  11.0k|        }
  742|       |
  743|   349k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 298k, False: 50.8k]
  ------------------
  744|   349k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 298k, False: 0]
  ------------------
  745|   298k|            chars_read -= 2;
  746|   298k|        }
  747|       |
  748|   349k|        return chars_read;
  749|   360k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   366k|    {
  778|   366k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 93.7k, False: 272k]
  |  Branch (778:37): [True: 0, False: 93.7k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   366k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 51.4k, False: 315k]
  ------------------
  785|   366k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 51.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   366k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 12.2k, False: 354k]
  |  Branch (791:34): [True: 1.68k, False: 10.5k]
  ------------------
  792|  1.68k|            SCN_UNLIKELY_ATTR
  793|  1.68k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.68k|        }
  795|       |
  796|   364k|        SCN_GCC_COMPAT_PUSH
  797|   364k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   364k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 364k, False: 0]
  ------------------
  800|   364k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 364k, False: 0]
  ------------------
  801|   364k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 9.89k, False: 355k]
  ------------------
  802|  9.89k|            SCN_UNLIKELY_ATTR
  803|  9.89k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  9.89k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   355k|            return {};
  809|   364k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   378k|{
  687|   378k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 95.4k, False: 283k]
  |  Branch (687:25): [True: 0, False: 283k]
  ------------------
  688|   378k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   360k|    {
  755|   360k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 354k, False: 6.56k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   354k|            auto first_space = read_until_classic_space(input.view());
  758|   354k|            input.assign(
  759|   354k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   354k|        }
  761|       |
  762|   360k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 300k, False: 60.6k]
  ------------------
  763|   300k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   300k|                input.get_allocated_string().insert(0, "0x");
  765|   300k|            }
  766|   300k|            else {
  767|   300k|                input.get_allocated_string().insert(0, L"0x");
  768|   300k|            }
  769|   300k|        }
  770|       |
  771|   360k|        return input.get_allocated_string().c_str();
  772|   360k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   360k|    {
  905|   360k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   360k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   360k|        }
  908|   360k|        else {
  909|   360k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   360k|        }
  911|   360k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   360k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   360k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   360k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   360k|            return std::strtof(str, str_end);
  839|   360k|        }
  840|   360k|        else if constexpr (std::is_same_v<T, double>) {
  841|   360k|            return std::strtod(str, str_end);
  842|   360k|        }
  843|   360k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   360k|            return std::strtold(str, str_end);
  845|   360k|        }
  846|   360k|#endif
  847|   360k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.06M|    {
 1061|  2.06M|        unsigned format_flags{};
 1062|  2.06M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.04M, False: 18.8k]
  ------------------
 1063|  2.04M|            format_flags |= fast_float::fixed;
 1064|  2.04M|        }
 1065|  2.06M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.81M, False: 252k]
  ------------------
 1066|  1.81M|            format_flags |= fast_float::scientific;
 1067|  1.81M|        }
 1068|       |
 1069|  2.06M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.06M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   963k|    {
 1110|   963k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   963k|            return m_input.view();
 1112|   963k|        }
 1113|   963k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   963k|            return std::u16string_view{
 1115|   963k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   963k|                m_input.view().size()};
 1117|   963k|        }
 1118|   963k|        else {
 1119|   963k|            return std::u32string_view{
 1120|   963k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   963k|                m_input.view().size()};
 1122|   963k|        }
 1123|   963k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  68.9k|{
 1138|  68.9k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 68.9k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  68.9k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 68.9k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  68.9k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 68.9k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  68.9k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 68.9k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  68.9k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  68.9k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 16.7k, False: 52.2k]
  ------------------
 1185|  16.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 5.28k]
  |  |  ------------------
  ------------------
 1186|  11.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.5k|                                         "Invalid floating-point digit");
 1188|  11.5k|        }
 1189|  16.7k|    }
 1190|  57.4k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 28.6k]
  |  |  ------------------
  ------------------
 1191|  28.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.8k|                                     "Invalid floating-point digit");
 1193|  28.8k|    }
 1194|       |
 1195|  28.6k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  28.6k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  28.6k|            double tmp{};
 1200|  28.6k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  28.6k|            value = tmp;
 1202|  28.6k|            return ret;
 1203|  28.6k|        }
 1204|  28.6k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  28.6k|            return fast_float_fallback(data, value);
 1208|  28.6k|        }
 1209|  28.6k|    }
 1210|  28.6k|    else {
 1211|       |        // Default to fast_float
 1212|  28.6k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  28.6k|    }
 1214|  28.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  28.6k|    {
 1078|  28.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  97.5k|    {
  712|  97.5k|        return {kind, options};
  713|  97.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  28.6k|    {
 1082|  28.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 5.25k, False: 23.4k]
  ------------------
 1083|  28.6k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 23.3k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  5.35k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  5.35k|                                              value);
 1087|  5.35k|        }
 1088|       |
 1089|  23.3k|        const auto flags = get_flags();
 1090|  23.3k|        const auto view = get_view();
 1091|  23.3k|        const auto result = fast_float::from_chars(
 1092|  23.3k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  23.3k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  23.3k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 504, False: 22.8k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    504|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    504|                                              value);
 1102|    504|        }
 1103|       |
 1104|  22.8k|        return result.ptr - view.data();
 1105|  23.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  5.85k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  5.85k|    {
 1048|  5.85k|#if !SCN_DISABLE_STRTOD
 1049|  5.85k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  5.85k|    }
 1056|  5.85k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  5.85k|    {
  894|  5.85k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  5.85k|    {
  898|  5.85k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  5.85k|                           generic_strtod);
  900|  5.85k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  5.85k|    {
  732|  5.85k|        CharT* end{};
  733|  5.85k|        errno = 0;
  734|  5.85k|        value = strtod_cb(src, &end);
  735|  5.85k|        const auto saved_errno = errno;
  736|  5.85k|        auto chars_read = end - src;
  737|       |
  738|  5.85k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  5.85k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 512, False: 5.34k]
  |  |  ------------------
  ------------------
  740|    512|            return unexpected(e);
  741|    512|        }
  742|       |
  743|  5.34k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 5.24k, False: 98]
  ------------------
  744|  5.34k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 5.24k, False: 0]
  ------------------
  745|  5.24k|            chars_read -= 2;
  746|  5.24k|        }
  747|       |
  748|  5.34k|        return chars_read;
  749|  5.85k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  5.85k|    {
  755|  5.85k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 5.45k, False: 398]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  5.45k|            auto first_space = read_until_classic_space(input.view());
  758|  5.45k|            input.assign(
  759|  5.45k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  5.45k|        }
  761|       |
  762|  5.85k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 5.25k, False: 602]
  ------------------
  763|  5.25k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  5.25k|                input.get_allocated_string().insert(0, "0x");
  765|  5.25k|            }
  766|  5.25k|            else {
  767|  5.25k|                input.get_allocated_string().insert(0, L"0x");
  768|  5.25k|            }
  769|  5.25k|        }
  770|       |
  771|  5.85k|        return input.get_allocated_string().c_str();
  772|  5.85k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  5.85k|    {
  905|  5.85k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  5.85k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  5.85k|        }
  908|  5.85k|        else {
  909|  5.85k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  5.85k|        }
  911|  5.85k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  5.85k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  5.85k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  5.85k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  5.85k|            return std::wcstof(str, str_end);
  877|  5.85k|        }
  878|  5.85k|        else if constexpr (std::is_same_v<T, double>) {
  879|  5.85k|            return std::wcstod(str, str_end);
  880|  5.85k|        }
  881|  5.85k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  5.85k|            return std::wcstold(str, str_end);
  883|  5.85k|        }
  884|  5.85k|#endif
  885|  5.85k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  23.3k|    {
 1110|  23.3k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  23.3k|            return m_input.view();
 1112|  23.3k|        }
 1113|  23.3k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  23.3k|            return std::u16string_view{
 1115|  23.3k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  23.3k|                m_input.view().size()};
 1117|  23.3k|        }
 1118|  23.3k|        else {
 1119|  23.3k|            return std::u32string_view{
 1120|  23.3k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  23.3k|                m_input.view().size()};
 1122|  23.3k|        }
 1123|  23.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.52M|{
 1138|  1.52M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.6k, False: 1.51M]
  ------------------
 1139|  14.6k|        value = std::numeric_limits<T>::infinity();
 1140|  14.6k|        return 3;
 1141|  14.6k|    }
 1142|  1.51M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.5k, False: 1.49M]
  ------------------
 1143|  10.5k|        value = std::numeric_limits<T>::infinity();
 1144|  10.5k|        return 8;
 1145|  10.5k|    }
 1146|  1.49M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 59.2k, False: 1.44M]
  ------------------
 1147|  59.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  59.2k|        return 3;
 1149|  59.2k|    }
 1150|  1.44M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.43M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.43M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.43M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 315k, False: 1.12M]
  ------------------
 1185|   315k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.13k, False: 312k]
  |  |  ------------------
  ------------------
 1186|  3.13k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.13k|                                         "Invalid floating-point digit");
 1188|  3.13k|        }
 1189|   315k|    }
 1190|  1.43M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 1.42M]
  |  |  ------------------
  ------------------
 1191|  8.95k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.95k|                                     "Invalid floating-point digit");
 1193|  8.95k|    }
 1194|       |
 1195|  1.42M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.42M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.42M|            double tmp{};
 1200|  1.42M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.42M|            value = tmp;
 1202|  1.42M|            return ret;
 1203|  1.42M|        }
 1204|  1.42M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.42M|            return fast_float_fallback(data, value);
 1208|  1.42M|        }
 1209|  1.42M|    }
 1210|  1.42M|    else {
 1211|       |        // Default to fast_float
 1212|  1.42M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.42M|    }
 1214|  1.42M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.42M|    {
 1078|  1.42M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.42M|    {
 1082|  1.42M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 312k, False: 1.11M]
  ------------------
 1083|  1.42M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 59.8k, False: 1.05M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   372k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   372k|                                              value);
 1087|   372k|        }
 1088|       |
 1089|  1.05M|        const auto flags = get_flags();
 1090|  1.05M|        const auto view = get_view();
 1091|  1.05M|        const auto result = fast_float::from_chars(
 1092|  1.05M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.05M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.05M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 1.05M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.12k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.12k|                                              value);
 1102|  4.12k|        }
 1103|       |
 1104|  1.05M|        return result.ptr - view.data();
 1105|  1.05M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   376k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   376k|    {
 1048|   376k|#if !SCN_DISABLE_STRTOD
 1049|   376k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   376k|    }
 1056|   376k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   376k|    {
  894|   376k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   381k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   376k|    {
  898|   376k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   376k|                           generic_strtod);
  900|   376k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   376k|    {
  732|   376k|        CharT* end{};
  733|   376k|        errno = 0;
  734|   376k|        value = strtod_cb(src, &end);
  735|   376k|        const auto saved_errno = errno;
  736|   376k|        auto chars_read = end - src;
  737|       |
  738|   376k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   376k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 371k]
  |  |  ------------------
  ------------------
  740|  4.70k|            return unexpected(e);
  741|  4.70k|        }
  742|       |
  743|   371k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 311k, False: 59.7k]
  ------------------
  744|   371k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 311k, False: 0]
  ------------------
  745|   311k|            chars_read -= 2;
  746|   311k|        }
  747|       |
  748|   371k|        return chars_read;
  749|   376k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   381k|    {
  778|   381k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 95.6k, False: 286k]
  |  Branch (778:37): [True: 0, False: 95.6k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   381k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 59.9k, False: 321k]
  ------------------
  785|   381k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 59.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   381k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.99k, False: 376k]
  |  Branch (791:34): [True: 506, False: 4.48k]
  ------------------
  792|    506|            SCN_UNLIKELY_ATTR
  793|    506|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    506|        }
  795|       |
  796|   381k|        SCN_GCC_COMPAT_PUSH
  797|   381k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   381k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 381k, False: 0]
  ------------------
  800|   381k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 381k, False: 0]
  ------------------
  801|   381k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.48k, False: 376k]
  ------------------
  802|  4.48k|            SCN_UNLIKELY_ATTR
  803|  4.48k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.48k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   376k|            return {};
  809|   381k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   386k|{
  691|   386k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 96.1k, False: 290k]
  |  Branch (691:24): [True: 0, False: 290k]
  ------------------
  692|   386k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   376k|    {
  755|   376k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 371k, False: 4.66k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   371k|            auto first_space = read_until_classic_space(input.view());
  758|   371k|            input.assign(
  759|   371k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   371k|        }
  761|       |
  762|   376k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 312k, False: 63.9k]
  ------------------
  763|   312k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   312k|                input.get_allocated_string().insert(0, "0x");
  765|   312k|            }
  766|   312k|            else {
  767|   312k|                input.get_allocated_string().insert(0, L"0x");
  768|   312k|            }
  769|   312k|        }
  770|       |
  771|   376k|        return input.get_allocated_string().c_str();
  772|   376k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   376k|    {
  905|   376k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   376k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   376k|        }
  908|   376k|        else {
  909|   376k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   376k|        }
  911|   376k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   376k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   376k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   376k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   376k|            return std::strtof(str, str_end);
  839|   376k|        }
  840|   376k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   376k|            return std::strtod(str, str_end);
  842|   376k|        }
  843|   376k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   376k|            return std::strtold(str, str_end);
  845|   376k|        }
  846|   376k|#endif
  847|   376k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.05M|    {
 1110|  1.05M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.05M|            return m_input.view();
 1112|  1.05M|        }
 1113|  1.05M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.05M|            return std::u16string_view{
 1115|  1.05M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.05M|                m_input.view().size()};
 1117|  1.05M|        }
 1118|  1.05M|        else {
 1119|  1.05M|            return std::u32string_view{
 1120|  1.05M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.05M|                m_input.view().size()};
 1122|  1.05M|        }
 1123|  1.05M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  69.0k|{
 1138|  69.0k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 69.0k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  69.0k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 69.0k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  69.0k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 69.0k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  69.0k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 69.0k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  69.0k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  69.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  69.0k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 16.7k, False: 52.2k]
  ------------------
 1185|  16.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 5.28k]
  |  |  ------------------
  ------------------
 1186|  11.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.5k|                                         "Invalid floating-point digit");
 1188|  11.5k|        }
 1189|  16.7k|    }
 1190|  57.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 28.6k]
  |  |  ------------------
  ------------------
 1191|  28.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.8k|                                     "Invalid floating-point digit");
 1193|  28.8k|    }
 1194|       |
 1195|  28.6k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  28.6k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  28.6k|            double tmp{};
 1200|  28.6k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  28.6k|            value = tmp;
 1202|  28.6k|            return ret;
 1203|  28.6k|        }
 1204|  28.6k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  28.6k|            return fast_float_fallback(data, value);
 1208|  28.6k|        }
 1209|  28.6k|    }
 1210|  28.6k|    else {
 1211|       |        // Default to fast_float
 1212|  28.6k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  28.6k|    }
 1214|  28.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  28.6k|    {
 1078|  28.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  28.6k|    {
 1082|  28.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 5.25k, False: 23.4k]
  ------------------
 1083|  28.6k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 23.3k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  5.35k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  5.35k|                                              value);
 1087|  5.35k|        }
 1088|       |
 1089|  23.3k|        const auto flags = get_flags();
 1090|  23.3k|        const auto view = get_view();
 1091|  23.3k|        const auto result = fast_float::from_chars(
 1092|  23.3k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  23.3k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  23.3k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 286, False: 23.0k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    286|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    286|                                              value);
 1102|    286|        }
 1103|       |
 1104|  23.0k|        return result.ptr - view.data();
 1105|  23.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  5.63k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  5.63k|    {
 1048|  5.63k|#if !SCN_DISABLE_STRTOD
 1049|  5.63k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  5.63k|    }
 1056|  5.63k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  5.63k|    {
  894|  5.63k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  5.63k|    {
  898|  5.63k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  5.63k|                           generic_strtod);
  900|  5.63k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  5.63k|    {
  732|  5.63k|        CharT* end{};
  733|  5.63k|        errno = 0;
  734|  5.63k|        value = strtod_cb(src, &end);
  735|  5.63k|        const auto saved_errno = errno;
  736|  5.63k|        auto chars_read = end - src;
  737|       |
  738|  5.63k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  5.63k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 290, False: 5.34k]
  |  |  ------------------
  ------------------
  740|    290|            return unexpected(e);
  741|    290|        }
  742|       |
  743|  5.34k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 5.24k, False: 98]
  ------------------
  744|  5.34k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 5.24k, False: 0]
  ------------------
  745|  5.24k|            chars_read -= 2;
  746|  5.24k|        }
  747|       |
  748|  5.34k|        return chars_read;
  749|  5.63k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  5.63k|    {
  755|  5.63k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 5.34k, False: 289]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  5.34k|            auto first_space = read_until_classic_space(input.view());
  758|  5.34k|            input.assign(
  759|  5.34k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  5.34k|        }
  761|       |
  762|  5.63k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 5.25k, False: 384]
  ------------------
  763|  5.25k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  5.25k|                input.get_allocated_string().insert(0, "0x");
  765|  5.25k|            }
  766|  5.25k|            else {
  767|  5.25k|                input.get_allocated_string().insert(0, L"0x");
  768|  5.25k|            }
  769|  5.25k|        }
  770|       |
  771|  5.63k|        return input.get_allocated_string().c_str();
  772|  5.63k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  5.63k|    {
  905|  5.63k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  5.63k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  5.63k|        }
  908|  5.63k|        else {
  909|  5.63k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  5.63k|        }
  911|  5.63k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  5.63k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  5.63k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  5.63k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  5.63k|            return std::wcstof(str, str_end);
  877|  5.63k|        }
  878|  5.63k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  5.63k|            return std::wcstod(str, str_end);
  880|  5.63k|        }
  881|  5.63k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  5.63k|            return std::wcstold(str, str_end);
  883|  5.63k|        }
  884|  5.63k|#endif
  885|  5.63k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  23.3k|    {
 1110|  23.3k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  23.3k|            return m_input.view();
 1112|  23.3k|        }
 1113|  23.3k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  23.3k|            return std::u16string_view{
 1115|  23.3k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  23.3k|                m_input.view().size()};
 1117|  23.3k|        }
 1118|  23.3k|        else {
 1119|  23.3k|            return std::u32string_view{
 1120|  23.3k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  23.3k|                m_input.view().size()};
 1122|  23.3k|        }
 1123|  23.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.54M|{
 1138|  1.54M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.1k, False: 1.52M]
  ------------------
 1139|  15.1k|        value = std::numeric_limits<T>::infinity();
 1140|  15.1k|        return 3;
 1141|  15.1k|    }
 1142|  1.52M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.7k, False: 1.51M]
  ------------------
 1143|  10.7k|        value = std::numeric_limits<T>::infinity();
 1144|  10.7k|        return 8;
 1145|  10.7k|    }
 1146|  1.51M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 59.7k, False: 1.45M]
  ------------------
 1147|  59.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  59.7k|        return 3;
 1149|  59.7k|    }
 1150|  1.45M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.45M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.45M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.45M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 316k, False: 1.13M]
  ------------------
 1185|   316k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.25k, False: 313k]
  |  |  ------------------
  ------------------
 1186|  3.25k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.25k|                                         "Invalid floating-point digit");
 1188|  3.25k|        }
 1189|   316k|    }
 1190|  1.45M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.58k, False: 1.44M]
  |  |  ------------------
  ------------------
 1191|  9.58k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.58k|                                     "Invalid floating-point digit");
 1193|  9.58k|    }
 1194|       |
 1195|  1.44M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.44M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.44M|            double tmp{};
 1200|  1.44M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.44M|            value = tmp;
 1202|  1.44M|            return ret;
 1203|  1.44M|        }
 1204|  1.44M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.44M|            return fast_float_fallback(data, value);
 1208|  1.44M|        }
 1209|  1.44M|    }
 1210|  1.44M|    else {
 1211|       |        // Default to fast_float
 1212|  1.44M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.44M|    }
 1214|  1.44M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.44M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.44M|    {
 1048|  1.44M|#if !SCN_DISABLE_STRTOD
 1049|  1.44M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.44M|    }
 1056|  1.44M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.44M|    {
  894|  1.44M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.47M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.44M|    {
  898|  1.44M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.44M|                           generic_strtod);
  900|  1.44M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.44M|    {
  732|  1.44M|        CharT* end{};
  733|  1.44M|        errno = 0;
  734|  1.44M|        value = strtod_cb(src, &end);
  735|  1.44M|        const auto saved_errno = errno;
  736|  1.44M|        auto chars_read = end - src;
  737|       |
  738|  1.44M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.44M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 1.44M]
  |  |  ------------------
  ------------------
  740|  1.29k|            return unexpected(e);
  741|  1.29k|        }
  742|       |
  743|  1.44M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 312k, False: 1.12M]
  ------------------
  744|  1.44M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 312k, False: 0]
  ------------------
  745|   312k|            chars_read -= 2;
  746|   312k|        }
  747|       |
  748|  1.44M|        return chars_read;
  749|  1.44M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.47M|    {
  778|  1.47M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 405k, False: 1.06M]
  |  Branch (778:37): [True: 0, False: 405k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.47M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 59.9k, False: 1.41M]
  ------------------
  785|  1.47M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 59.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.47M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.32k, False: 1.46M]
  |  Branch (791:34): [True: 136, False: 1.19k]
  ------------------
  792|    136|            SCN_UNLIKELY_ATTR
  793|    136|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    136|        }
  795|       |
  796|  1.47M|        SCN_GCC_COMPAT_PUSH
  797|  1.47M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.47M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.47M, False: 0]
  ------------------
  800|  1.47M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.47M, False: 0]
  ------------------
  801|  1.47M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.19k, False: 1.46M]
  ------------------
  802|  1.19k|            SCN_UNLIKELY_ATTR
  803|  1.19k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.19k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.46M|            return {};
  809|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.47M|{
  695|  1.47M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 406k, False: 1.06M]
  |  Branch (695:26): [True: 0, False: 1.06M]
  ------------------
  696|  1.47M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.44M|    {
  755|  1.44M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.33M, False: 102k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.33M|            auto first_space = read_until_classic_space(input.view());
  758|  1.33M|            input.assign(
  759|  1.33M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.33M|        }
  761|       |
  762|  1.44M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 312k, False: 1.12M]
  ------------------
  763|   312k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   312k|                input.get_allocated_string().insert(0, "0x");
  765|   312k|            }
  766|   312k|            else {
  767|   312k|                input.get_allocated_string().insert(0, L"0x");
  768|   312k|            }
  769|   312k|        }
  770|       |
  771|  1.44M|        return input.get_allocated_string().c_str();
  772|  1.44M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.44M|    {
  905|  1.44M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.44M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.44M|        }
  908|  1.44M|        else {
  909|  1.44M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.44M|        }
  911|  1.44M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.44M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.44M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.44M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.44M|            return std::strtof(str, str_end);
  839|  1.44M|        }
  840|  1.44M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.44M|            return std::strtod(str, str_end);
  842|  1.44M|        }
  843|  1.44M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.44M|            return std::strtold(str, str_end);
  845|  1.44M|        }
  846|  1.44M|#endif
  847|  1.44M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  69.1k|{
 1138|  69.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 69.1k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  69.1k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 69.1k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  69.1k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 69.1k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  69.1k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 69.1k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  69.1k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  69.1k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 16.7k, False: 52.3k]
  ------------------
 1185|  16.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 5.28k]
  |  |  ------------------
  ------------------
 1186|  11.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.5k|                                         "Invalid floating-point digit");
 1188|  11.5k|        }
 1189|  16.7k|    }
 1190|  57.6k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  57.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.9k, False: 28.7k]
  |  |  ------------------
  ------------------
 1191|  28.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  28.9k|                                     "Invalid floating-point digit");
 1193|  28.9k|    }
 1194|       |
 1195|  28.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  28.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  28.7k|            double tmp{};
 1200|  28.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  28.7k|            value = tmp;
 1202|  28.7k|            return ret;
 1203|  28.7k|        }
 1204|  28.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  28.7k|            return fast_float_fallback(data, value);
 1208|  28.7k|        }
 1209|  28.7k|    }
 1210|  28.7k|    else {
 1211|       |        // Default to fast_float
 1212|  28.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  28.7k|    }
 1214|  28.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  28.7k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  28.7k|    {
 1048|  28.7k|#if !SCN_DISABLE_STRTOD
 1049|  28.7k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  28.7k|    }
 1056|  28.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  28.7k|    {
  894|  28.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  28.7k|    {
  898|  28.7k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  28.7k|                           generic_strtod);
  900|  28.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  28.7k|    {
  732|  28.7k|        CharT* end{};
  733|  28.7k|        errno = 0;
  734|  28.7k|        value = strtod_cb(src, &end);
  735|  28.7k|        const auto saved_errno = errno;
  736|  28.7k|        auto chars_read = end - src;
  737|       |
  738|  28.7k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  28.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 28.6k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  28.6k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 5.25k, False: 23.4k]
  ------------------
  744|  28.6k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 5.25k, False: 0]
  ------------------
  745|  5.25k|            chars_read -= 2;
  746|  5.25k|        }
  747|       |
  748|  28.6k|        return chars_read;
  749|  28.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  28.7k|    {
  755|  28.7k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 27.8k, False: 849]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  27.8k|            auto first_space = read_until_classic_space(input.view());
  758|  27.8k|            input.assign(
  759|  27.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  27.8k|        }
  761|       |
  762|  28.7k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 5.25k, False: 23.4k]
  ------------------
  763|  5.25k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  5.25k|                input.get_allocated_string().insert(0, "0x");
  765|  5.25k|            }
  766|  5.25k|            else {
  767|  5.25k|                input.get_allocated_string().insert(0, L"0x");
  768|  5.25k|            }
  769|  5.25k|        }
  770|       |
  771|  28.7k|        return input.get_allocated_string().c_str();
  772|  28.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  28.7k|    {
  905|  28.7k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  28.7k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  28.7k|        }
  908|  28.7k|        else {
  909|  28.7k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  28.7k|        }
  911|  28.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  28.7k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  28.7k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  28.7k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  28.7k|            return std::wcstof(str, str_end);
  877|  28.7k|        }
  878|  28.7k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  28.7k|            return std::wcstod(str, str_end);
  880|  28.7k|        }
  881|  28.7k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  28.7k|            return std::wcstold(str, str_end);
  883|  28.7k|        }
  884|  28.7k|#endif
  885|  28.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.09M|{
 2065|  2.09M|    const auto argcount = args.size();
 2066|  2.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 436k, False: 1.66M]
  |  Branch (2066:60): [True: 436k, False: 0]
  ------------------
 2067|   436k|        auto arg = args.get(0);
 2068|   436k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   436k|    static_cast<    \
  |  |  929|   436k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   436k|    }
 2070|       |
 2071|  1.66M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.66M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.66M|    SCN_UNLIKELY_ATTR
 2079|  1.66M|    {
 2080|  1.66M|        auto handler = format_handler<false, CharT>{
 2081|  1.66M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.66M|    static_cast<    \
  |  |  929|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.66M|    static_cast<    \
  |  |  929|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.66M|        return vscan_parse_format_string(format, handler);
 2083|  1.66M|    }
 2084|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.19M|{
 1625|  4.19M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.29M, False: 906k]
  ------------------
 1626|  3.29M|        return false;
 1627|  3.29M|    }
 1628|   906k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 906k, False: 0]
  |  Branch (1628:39): [True: 906k, False: 0]
  ------------------
 1629|  4.19M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   655k|{
 1658|   655k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 655k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   655k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   655k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 655k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   655k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   655k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   655k|    static_cast<    \
  |  |  929|   655k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   655k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   655k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   655k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   655k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 628k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  26.2k|    }                                                  \
  |  |  |  | 3642|   655k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   628k|    return it.position();
 1675|   655k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.62M|    {
 1903|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  3.70M|    {
 1722|  3.70M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.62M|    {
 1853|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.62M|{
 2030|  1.62M|    const auto beg = handler.get_ctx().begin();
 2031|  1.62M|    detail::parse_format_string<false>(format, handler);
 2032|  1.62M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.6k, False: 1.54M]
  |  |  ------------------
  ------------------
 2033|  87.6k|        return unexpected(handler.error);
 2034|  87.6k|    }
 2035|  1.54M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.62M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  11.2M|    {
 2014|  11.2M|        return ctx.get();
 2015|  11.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.2M|    {
 1857|  11.2M|        return contiguous_ctx;
 1858|  11.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.17M|    {
 1907|  3.17M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.17M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.62M|{
 1681|  1.62M|    auto arg = ctx.arg(id);
 1682|  1.62M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.62M|    return arg;
 1686|  1.62M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.70M|    {
 1797|  3.70M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.70M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.70M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.70M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.70M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.70M|            visited_args_lower64 |= (1ull << id);
 1808|  3.70M|            return;
 1809|  3.70M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.70M|    {
 1782|  3.70M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.70M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.70M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.70M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.70M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.70M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   525k|    {
 1766|   525k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 525k, False: 0]
  |  |  ------------------
  ------------------
 1767|   525k|            error = err;
 1768|   525k|        }
 1769|   525k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.62M|    {
 1936|  1.62M|        return parse_ctx.next_arg_id();
 1937|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.62M|    {
 1977|  1.62M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.62M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.62M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.62M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.62M|        auto specs = detail::format_specs{};
 1990|  1.62M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.62M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.62M|            arg.type()};
 1993|       |
 1994|  1.62M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.62M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.62M]
  |  Branch (1995:29): [True: 0, False: 1.62M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.62M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.62M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.62M|        on_visit_scan_arg(
 2006|  1.62M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.62M|                                           get_ctx().locale()},
 2008|  1.62M|            arg);
 2009|  1.62M|        return parse_ctx.begin();
 2010|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.62M|    {
 1701|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.62M|    {
 1948|  1.62M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.62M]
  |  Branch (1948:23): [True: 0, False: 1.62M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.62M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.62M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.6k, False: 1.54M]
  |  |  ------------------
  ------------------
 1955|  87.6k|            on_error(r.error());
 1956|  87.6k|        }
 1957|  1.54M|        else {
 1958|  1.54M|            get_ctx().advance_to(*r);
 1959|  1.54M|        }
 1960|  1.62M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.70M|    {
 1729|  3.70M|        {
 1730|  3.70M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.70M]
  ------------------
 1731|  3.70M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.70M]
  ------------------
 1732|  3.70M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.70M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.70M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.70M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.70M|        }
 1739|       |
 1740|  3.70M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.70M, False: 0]
  ------------------
 1741|  3.70M|            return;
 1742|  3.70M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.70M|    {
 1777|  3.70M|        return error;
 1778|  3.70M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  11.1M|    {
 1773|  11.1M|        return static_cast<bool>(error);
 1774|  11.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.66M|    {
 1903|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.66M|    {
 1830|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.66M|{
 2030|  1.66M|    const auto beg = handler.get_ctx().begin();
 2031|  1.66M|    detail::parse_format_string<false>(format, handler);
 2032|  1.66M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.6k, False: 1.57M]
  |  |  ------------------
  ------------------
 2033|  87.6k|        return unexpected(handler.error);
 2034|  87.6k|    }
 2035|  1.57M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  11.4M|    {
 2014|  11.4M|        return ctx.get();
 2015|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.4M|    {
 1834|  11.4M|        return ctx;
 1835|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.23M|    {
 1907|  3.23M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.23M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.66M|{
 1681|  1.66M|    auto arg = ctx.arg(id);
 1682|  1.66M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.66M|    return arg;
 1686|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.66M|    {
 1936|  1.66M|        return parse_ctx.next_arg_id();
 1937|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.66M|    {
 1977|  1.66M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.66M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.66M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.66M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.66M|        auto specs = detail::format_specs{};
 1990|  1.66M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.66M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.66M|            arg.type()};
 1993|       |
 1994|  1.66M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.66M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.66M]
  |  Branch (1995:29): [True: 0, False: 1.66M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.66M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.66M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.66M|        on_visit_scan_arg(
 2006|  1.66M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.66M|                                           get_ctx().locale()},
 2008|  1.66M|            arg);
 2009|  1.66M|        return parse_ctx.begin();
 2010|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.66M|    {
 1701|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.66M|    {
 1948|  1.66M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.66M]
  |  Branch (1948:23): [True: 0, False: 1.66M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.66M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.66M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.6k, False: 1.57M]
  |  |  ------------------
  ------------------
 1955|  87.6k|            on_error(r.error());
 1956|  87.6k|        }
 1957|  1.57M|        else {
 1958|  1.57M|            get_ctx().advance_to(*r);
 1959|  1.57M|        }
 1960|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.09M|{
 2045|  2.09M|    const auto argcount = args.size();
 2046|  2.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 469k, False: 1.62M]
  |  Branch (2046:60): [True: 469k, False: 0]
  ------------------
 2047|   469k|        auto arg = args.get(0);
 2048|   469k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   469k|    static_cast<    \
  |  |  929|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   469k|    }
 2050|       |
 2051|  1.62M|    auto handler = format_handler<true, CharT>{
 2052|  1.62M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.62M|                                       source.data() + source.size()},
 2054|  1.62M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.62M|    return vscan_parse_format_string(format, handler);
 2056|  2.09M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   704k|{
 1638|   704k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   704k|    auto reader =
 1644|   704k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   704k|            ranges::subrange<const CharT*>{source.data(),
 1646|   704k|                                           source.data() + source.size()},
 1647|   704k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   704k|    static_cast<    \
  |  |  929|   704k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   704k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   704k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   704k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   704k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 677k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  26.2k|    }                                                  \
  |  |  |  | 3642|   704k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   677k|    return ranges::distance(source.data(), it);
 1650|   704k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   249k|{
 2045|   249k|    const auto argcount = args.size();
 2046|   249k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 42.7k, False: 206k]
  |  Branch (2046:60): [True: 42.7k, False: 0]
  ------------------
 2047|  42.7k|        auto arg = args.get(0);
 2048|  42.7k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  42.7k|    static_cast<    \
  |  |  929|  42.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  42.7k|    }
 2050|       |
 2051|   206k|    auto handler = format_handler<true, CharT>{
 2052|   206k|        ranges::subrange<const CharT*>{source.data(),
 2053|   206k|                                       source.data() + source.size()},
 2054|   206k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   206k|    return vscan_parse_format_string(format, handler);
 2056|   249k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   498k|{
 1625|   498k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 412k, False: 85.4k]
  ------------------
 1626|   412k|        return false;
 1627|   412k|    }
 1628|  85.4k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 85.4k, False: 0]
  |  Branch (1628:39): [True: 85.4k, False: 0]
  ------------------
 1629|   498k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  64.1k|{
 1638|  64.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.1k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  64.1k|    auto reader =
 1644|  64.1k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  64.1k|            ranges::subrange<const CharT*>{source.data(),
 1646|  64.1k|                                           source.data() + source.size()},
 1647|  64.1k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  64.1k|    static_cast<    \
  |  |  929|  64.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  64.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  64.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  64.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  64.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.5k, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  52.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  52.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  52.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  52.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  52.5k|    }                                                  \
  |  |  |  | 3642|  64.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  11.5k|    return ranges::distance(source.data(), it);
 1650|  64.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   206k|    {
 1903|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   206k|    {
 1853|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   206k|{
 2030|   206k|    const auto beg = handler.get_ctx().begin();
 2031|   206k|    detail::parse_format_string<false>(format, handler);
 2032|   206k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 31.1k]
  |  |  ------------------
  ------------------
 2033|   175k|        return unexpected(handler.error);
 2034|   175k|    }
 2035|  31.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.09M|    {
 2014|  1.09M|        return ctx.get();
 2015|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.09M|    {
 1857|  1.09M|        return contiguous_ctx;
 1858|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   237k|    {
 1907|   237k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 237k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   237k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   206k|{
 1681|   206k|    auto arg = ctx.arg(id);
 1682|   206k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   206k|    return arg;
 1686|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   206k|    {
 1936|   206k|        return parse_ctx.next_arg_id();
 1937|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   206k|    {
 1977|   206k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   206k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   206k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 206k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   206k|        auto specs = detail::format_specs{};
 1990|   206k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   206k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   206k|            arg.type()};
 1993|       |
 1994|   206k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   206k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 206k]
  |  Branch (1995:29): [True: 0, False: 206k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   206k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   206k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   206k|        on_visit_scan_arg(
 2006|   206k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   206k|                                           get_ctx().locale()},
 2008|   206k|            arg);
 2009|   206k|        return parse_ctx.begin();
 2010|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   206k|    {
 1701|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   206k|    {
 1948|   206k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 206k]
  |  Branch (1948:23): [True: 0, False: 206k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   206k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   206k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 31.1k]
  |  |  ------------------
  ------------------
 1955|   175k|            on_error(r.error());
 1956|   175k|        }
 1957|  31.1k|        else {
 1958|  31.1k|            get_ctx().advance_to(*r);
 1959|  31.1k|        }
 1960|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   249k|{
 2065|   249k|    const auto argcount = args.size();
 2066|   249k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 42.7k, False: 206k]
  |  Branch (2066:60): [True: 42.7k, False: 0]
  ------------------
 2067|  42.7k|        auto arg = args.get(0);
 2068|  42.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  42.7k|    static_cast<    \
  |  |  929|  42.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  42.7k|    }
 2070|       |
 2071|   206k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 206k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   206k|    SCN_UNLIKELY_ATTR
 2079|   206k|    {
 2080|   206k|        auto handler = format_handler<false, CharT>{
 2081|   206k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   206k|        return vscan_parse_format_string(format, handler);
 2083|   206k|    }
 2084|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  64.0k|{
 1658|  64.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.0k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  64.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  64.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 64.0k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  64.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  64.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  64.0k|    static_cast<    \
  |  |  929|  64.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  64.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  64.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  64.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  64.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.5k, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  52.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  52.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  52.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  52.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  52.5k|    }                                                  \
  |  |  |  | 3642|  64.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  11.4k|    return it.position();
 1675|  64.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   206k|    {
 1903|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   206k|    {
 1830|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   206k|{
 2030|   206k|    const auto beg = handler.get_ctx().begin();
 2031|   206k|    detail::parse_format_string<false>(format, handler);
 2032|   206k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 31.0k]
  |  |  ------------------
  ------------------
 2033|   175k|        return unexpected(handler.error);
 2034|   175k|    }
 2035|  31.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.09M|    {
 2014|  1.09M|        return ctx.get();
 2015|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.09M|    {
 1834|  1.09M|        return ctx;
 1835|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   237k|    {
 1907|   237k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 237k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   237k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   206k|{
 1681|   206k|    auto arg = ctx.arg(id);
 1682|   206k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   206k|    return arg;
 1686|   206k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   206k|    {
 1936|   206k|        return parse_ctx.next_arg_id();
 1937|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   206k|    {
 1977|   206k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   206k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   206k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 206k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   206k|        auto specs = detail::format_specs{};
 1990|   206k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   206k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   206k|            arg.type()};
 1993|       |
 1994|   206k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   206k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 206k]
  |  Branch (1995:29): [True: 0, False: 206k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   206k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   206k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   206k|        on_visit_scan_arg(
 2006|   206k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   206k|                                           get_ctx().locale()},
 2008|   206k|            arg);
 2009|   206k|        return parse_ctx.begin();
 2010|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   206k|    {
 1701|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   206k|    {
 1948|   206k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 206k]
  |  Branch (1948:23): [True: 0, False: 206k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   206k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   206k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 31.0k]
  |  |  ------------------
  ------------------
 1955|   175k|            on_error(r.error());
 1956|   175k|        }
 1957|  31.0k|        else {
 1958|  31.0k|            get_ctx().advance_to(*r);
 1959|  31.0k|        }
 1960|   206k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   234k|{
 2091|   234k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   234k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   218k|{
 2091|   218k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  21.3k|{
 2091|  21.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  21.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  21.3k|{
 2091|  21.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  21.3k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.92k|{
 1363|  2.92k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.92k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.92k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.92k|            std::u32string tmp;
 1368|  2.92k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.92k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.92k|                std::u32string_view{tmp}, dest);
 1371|  2.92k|        }
 1372|  2.92k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.92k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.92k|        }
 1375|  2.92k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.92k|{
 1256|  2.92k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.92k|    auto it = src.begin();
 1259|  1.02M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.02M, False: 2.92k]
  ------------------
 1260|  1.02M|        auto res = get_next_code_point(
 1261|  1.02M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.02M|                                                                 src.end()));
 1263|  1.02M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 1.02M]
  |  |  ------------------
  ------------------
 1264|  2.01k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.01k|        }
 1266|  1.02M|        else {
 1267|  1.02M|            dest.push_back(res.value);
 1268|  1.02M|        }
 1269|  1.02M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.02M|    }
 1271|  2.92k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.82M|{
 1169|  1.82M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.82M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.82M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 1.79M]
  |  |  ------------------
  ------------------
 1173|  27.6k|        return {get_start_for_next_code_point(input),
 1174|  27.6k|                detail::invalid_code_point};
 1175|  27.6k|    }
 1176|  1.79M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.50k, False: 1.78M]
  |  |  ------------------
  ------------------
 1177|  5.50k|        return {input.end(), detail::invalid_code_point};
 1178|  5.50k|    }
 1179|       |
 1180|  1.78M|    return {input.begin() + len,
 1181|  1.78M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.79M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  27.6k|{
 1155|  27.6k|    auto it = input.begin();
 1156|   197k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 188k, False: 8.50k]
  ------------------
 1157|   188k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 19.0k, False: 169k]
  ------------------
 1158|  19.0k|            break;
 1159|  19.0k|        }
 1160|   188k|    }
 1161|  27.6k|    return it;
 1162|  27.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  39.1M|    {
  809|  39.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  39.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  39.1M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  14.6M|    {
  823|  14.6M|        return a.m_code == b.m_code;
  824|  14.6M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.21M|    {
 1728|  2.21M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.21M|        std::strcpy(m_locbuf, loc);
 1730|  2.21M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.21M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.21M|        std::setlocale(m_category, m_locbuf);
 1735|  2.21M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.21M|    {
 1757|  2.21M|        std::setlocale(cat, "C");
 1758|  2.21M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.70M|    {
 2936|  3.70M|        return m_msg == nullptr;
 2937|  3.70M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|  3.66M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  52.0M|{
  458|  52.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  52.0M|        static_cast<unsigned char>(ch))];
  460|  52.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  46.6k|{
  469|  46.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  46.6k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  10.3M|{
  539|  10.3M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  10.3M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.3M|{
  784|  17.3M|    return e != eof_error::good;
  785|  17.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  57.4k|{
  798|  57.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  57.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  57.4k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   238k|{
  845|   238k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   238k|    return parse_error::eof;
  847|   238k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.29M|{
  854|  5.29M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.29M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.29M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 85.1k, False: 5.20M]
  ------------------
  859|  85.1k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  85.1k|    }
  861|       |
  862|  5.20M|    return scan_error{code, msg};
  863|  5.29M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.29M|{
  868|  5.29M|    return [code, msg](parse_error err) {
  869|  5.29M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.29M|    };
  871|  5.29M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.29M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.29M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.04M, False: 247k]
  |  Branch (1201:27): [True: 1.73M, False: 3.30M]
  ------------------
 1202|  5.29M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 125k, False: 3.42M]
  ------------------
 1203|  5.29M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 160k, False: 3.26M]
  ------------------
 1204|  5.29M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.67k, False: 3.26M]
  ------------------
 1205|  5.29M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 15.2k, False: 3.24M]
  ------------------
 1206|  5.29M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 72.8k, False: 3.17M]
  ------------------
 1207|  5.29M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.17M]
  ------------------
 1208|  5.29M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.14M|{
 2220|  6.14M|    unsigned char running_diff{0};
 2221|  23.0M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 16.9M, False: 6.14M]
  ------------------
 2222|  16.9M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  16.9M|    }
 2224|  6.14M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 200k, False: 5.94M]
  |  Branch (2224:33): [True: 32.0k, False: 5.91M]
  ------------------
 2225|  6.14M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  37.8M|{
 3123|  37.8M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  37.8M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   742k|{
 3127|   742k|#if WCHAR_MIN < 0
 3128|   742k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 730k, False: 11.6k]
  |  Branch (3128:20): [True: 415k, False: 314k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   415k|        return char_to_int(static_cast<char>(ch));
 3133|   415k|    }
 3134|   326k|    return 255;
 3135|   742k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  3.17M|{
 6009|  3.17M|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 0, False: 3.17M]
  ------------------
 6010|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 0, False: 0]
  ------------------
 6011|      0|            return {scan_error::invalid_scanned_value,
 6012|      0|                    "Scanned value too narrow, width did not exceed what "
 6013|      0|                    "was specified in the format string"};
 6014|      0|        }
 6015|      0|    }
 6016|  3.17M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 0, False: 3.17M]
  ------------------
 6017|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 0, False: 0]
  ------------------
 6018|      0|            return {scan_error::invalid_scanned_value,
 6019|      0|                    "Scanned value too wide, width exceeded the specified "
 6020|      0|                    "precision"};
 6021|      0|        }
 6022|      0|    }
 6023|  3.17M|    return {};
 6024|  3.17M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.84M|    {
  304|  6.84M|        ranges::advance(x, n);
  305|  6.84M|        return x;
  306|  6.84M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.84M|    {
  268|  6.84M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.84M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.84M|    {
  151|  6.84M|        i += n;
  152|  6.84M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.11M|    {
  108|  8.11M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.11M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.11M|    {
   87|  8.11M|        return s - i;
   88|  8.11M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   680k|    {
  304|   680k|        ranges::advance(x, n);
  305|   680k|        return x;
  306|   680k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   680k|    {
  268|   680k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   680k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   680k|    {
  151|   680k|        i += n;
  152|   680k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  59.4k|    {
  108|  59.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  59.4k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  59.4k|    {
   87|  59.4k|        return s - i;
   88|  59.4k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.31M|{
  981|  2.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.31M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.31M|        return true;
  984|  2.31M|    }
  985|  2.31M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.31M|                           ranges::const_iterator_t<Range>,
  987|  2.31M|                           typename detail::basic_scan_buffer<
  988|  2.31M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.31M|        auto beg = r.begin();
  990|  2.31M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.31M, False: 0]
  ------------------
  991|  2.31M|            return false;
  992|  2.31M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.31M|    else {
 1006|  2.31M|        return false;
 1007|  2.31M|    }
 1008|  2.31M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|  1.66M|    {
 6038|  1.66M|        const bool need_skipped_width =
 6039|  1.66M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.66M]
  |  Branch (6039:33): [True: 0, False: 1.66M]
  ------------------
 6040|  1.66M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.66M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.66M]
  ------------------
 6044|  1.66M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.66M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.66M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.66M, False: 0]
  |  Branch (6048:56): [True: 1.66M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.66M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.66M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.30M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.66M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.66M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.66M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.8k, False: 1.64M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  20.8k|    }                                                  \
  |  |  |  | 3642|  1.66M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.30M|                            make_eof_scan_error));
 6059|       |
 6060|  3.30M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.64M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.64M|            return result_type{it, 0};
 6068|  3.30M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.66M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.50M|{
 1976|  4.50M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.50M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.50M|{
 1957|  4.50M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.50M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.50M|    }
 1960|  4.50M|    else {
 1961|  4.50M|        auto first = range.begin();
 1962|  24.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 24.8M, False: 37.7k]
  ------------------
 1963|  24.8M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.46M, False: 20.4M]
  ------------------
 1964|  4.46M|                return first;
 1965|  4.46M|            }
 1966|  24.8M|        }
 1967|  37.7k|        return first;
 1968|  4.50M|    }
 1969|  4.50M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  64.5M|    {
  763|  64.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  64.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  64.5M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  5.73M|    {
  754|  5.73M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  32.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.2M|              cvref<T> obj = *get<T>(fn);
  745|  32.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.2M|              }
  748|  32.2M|              else {
  749|  32.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.2M|              }
  751|  32.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  32.2M|    {
  684|  32.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.2M|            return static_cast<T*>(s.m_cp);
  686|  32.2M|        }
  687|  32.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.2M|            return static_cast<T*>(s.m_p);
  689|  32.2M|        }
  690|  32.2M|        else {
  691|  32.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.2M|        }
  693|  32.2M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  5.73M|        {
  662|  5.73M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.95M|    {
  108|  3.95M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.95M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.95M|    {
   94|  3.95M|        iter_difference_t<I> counter{0};
   95|  40.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 36.3M, False: 3.95M]
  ------------------
   96|  36.3M|            ++i;
   97|  36.3M|            ++counter;
   98|  36.3M|        }
   99|  3.95M|        return counter;
  100|  3.95M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.13M|{
 1857|  6.13M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.13M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.13M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.13M|        if (sz < count) {
 1862|  6.13M|            return unexpected(eof_error::eof);
 1863|  6.13M|        }
 1864|       |
 1865|  6.13M|        return ranges::next(range.begin(), count);
 1866|  6.13M|    }
 1867|  6.13M|    else {
 1868|  6.13M|        auto it = range.begin();
 1869|  6.13M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.78M, False: 2.35M]
  ------------------
 1870|  3.78M|            return ranges::next(it, count);
 1871|  3.78M|        }
 1872|       |
 1873|  9.39M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.09M, False: 2.30M]
  ------------------
 1874|  7.09M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.2k, False: 7.04M]
  ------------------
 1875|  51.2k|                return unexpected(eof_error::eof);
 1876|  51.2k|            }
 1877|  7.09M|        }
 1878|       |
 1879|  2.30M|        return it;
 1880|  2.35M|    }
 1881|  6.13M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.13M|{
 1095|  6.13M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.13M|        return r.size();
 1097|  6.13M|    }
 1098|  6.13M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.13M|                           ranges::const_iterator_t<Range>,
 1100|  6.13M|                           typename detail::basic_scan_buffer<
 1101|  6.13M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.13M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.13M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.13M|        }
 1105|  6.13M|        else {
 1106|  6.13M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.13M, False: 0]
  ------------------
 1107|  6.13M|                return static_cast<size_t>(
 1108|  6.13M|                    r.begin().parent()->chars_available() -
 1109|  6.13M|                    r.begin().position());
 1110|  6.13M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.13M|        }
 1113|  6.13M|    }
 1114|  6.13M|    else {
 1115|  6.13M|        return 0;
 1116|  6.13M|    }
 1117|  6.13M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.91M|    {
  763|  8.91M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.91M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.56M|    {
  754|  2.56M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.41M|              cvref<T> obj = *get<T>(fn);
  745|  4.41M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.41M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.41M|              }
  748|  4.41M|              else {
  749|  4.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.41M|              }
  751|  4.41M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.41M|    {
  684|  4.41M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.41M|            return static_cast<T*>(s.m_cp);
  686|  4.41M|        }
  687|  4.41M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.41M|            return static_cast<T*>(s.m_p);
  689|  4.41M|        }
  690|  4.41M|        else {
  691|  4.41M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.41M|        }
  693|  4.41M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.56M|        {
  662|  2.56M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.29M|    return [code, msg](parse_error err) {
  869|  5.29M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.29M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   938k|    {
 1780|   938k|        auto stdloc = loc.get<std::locale>();
 1781|   938k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   938k|        grouping = numpunct.grouping();
 1783|   938k|        thousands_sep =
 1784|   938k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 938k]
  ------------------
 1785|   938k|        decimal_point = numpunct.decimal_point();
 1786|   938k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   938k|{
 1717|   938k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 938k, False: 0]
  ------------------
 1718|   938k|        return std::use_facet<Facet>(stdloc);
 1719|   938k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   938k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  6.63M|{
 1846|  6.63M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 6.61M]
  |  |  ------------------
  ------------------
 1847|  28.5k|        return unexpected(e);
 1848|  28.5k|    }
 1849|       |
 1850|  6.61M|    return ranges::next(range.begin());
 1851|  6.63M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  9.60M|{
  950|  9.60M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  9.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.4k, False: 9.54M]
  |  |  ------------------
  ------------------
  951|  56.4k|        return eof_error::eof;
  952|  56.4k|    }
  953|  9.54M|    return eof_error::good;
  954|  9.60M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  13.4M|{
  944|  13.4M|    return is_range_eof(r.begin(), r.end());
  945|  13.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  13.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  13.4M|    {
  937|  13.4M|        return begin == end;
  938|  13.4M|    }
  939|  13.4M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  6.61M|    {
  296|  6.61M|        ++x;
  297|  6.61M|        return x;
  298|  6.61M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.52M|{
 3141|  2.52M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.52M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.79M, False: 730k]
  ------------------
 3143|  1.79M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.79M, False: 491]
  ------------------
 3144|  1.79M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.79M|        }
 3146|    491|        return unexpected(eof_error::eof);
 3147|  1.79M|    }
 3148|       |
 3149|   730k|    auto& it = *r;
 3150|   730k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 291k, False: 439k]
  ------------------
 3151|   291k|        return std::pair{it, sign_type::minus_sign};
 3152|   291k|    }
 3153|   439k|    return std::pair{it, sign_type::plus_sign};
 3154|   730k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.44M|{
 2272|  4.44M|    auto it = read_code_unit(range);
 2273|  4.44M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 4.42M]
  |  |  ------------------
  ------------------
 2274|  16.6k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  16.6k|    }
 2276|       |
 2277|  8.23M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.23M, False: 3.45M]
  ------------------
 2278|  8.23M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 970k, False: 7.26M]
  ------------------
 2279|   970k|            return *it;
 2280|   970k|        }
 2281|  8.23M|    }
 2282|       |
 2283|  3.45M|    return unexpected(parse_error::error);
 2284|  4.42M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.13M|{
 2231|  6.13M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.13M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.13M|        if (range.size() < str.size()) {
 2236|  6.13M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.13M|        }
 2238|  6.13M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.13M|            return unexpected(parse_error::error);
 2240|  6.13M|        }
 2241|  6.13M|        return ranges::next(range.begin(), str.size());
 2242|  6.13M|    }
 2243|  6.13M|    else {
 2244|  6.13M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.13M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.13M|                return ch;
 2247|  6.13M|            }
 2248|  6.13M|            return static_cast<char_type>(ch +
 2249|  6.13M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.13M|        };
 2251|       |
 2252|  6.13M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  6.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.2k, False: 6.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  51.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  51.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  51.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  51.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  51.2k|    }                                                  \
  |  |  |  | 3642|  6.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.08M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.08M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.08M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.85M, False: 229k]
  |  |  ------------------
  ------------------
 2257|  6.08M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.08M|                    return ascii_tolower(a) ==
 2259|  6.08M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.08M|                }))) {
 2261|  5.85M|            return unexpected(parse_error::error);
 2262|  5.85M|        }
 2263|       |
 2264|   229k|        return it;
 2265|  6.08M|    }
 2266|  6.13M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.12M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.12M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 6.38M, False: 733k]
  |  Branch (2245:29): [True: 623k, False: 110k]
  ------------------
 2246|  7.00M|                return ch;
 2247|  7.00M|            }
 2248|   110k|            return static_cast<char_type>(ch +
 2249|   110k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.12M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.19M|{
 2146|  2.19M|    auto it = read_code_unit(range);
 2147|  2.19M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 2.18M]
  |  |  ------------------
  ------------------
 2148|  11.8k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  11.8k|    }
 2150|       |
 2151|  2.18M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.84M, False: 342k]
  |  |  ------------------
  ------------------
 2152|  2.18M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.84M|        return unexpected(parse_error::error);
 2154|  1.84M|    }
 2155|       |
 2156|   342k|    return *it;
 2157|  2.18M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.49M|{
 1996|  4.49M|    auto it = read_while_code_unit(range, pred);
 1997|  4.49M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.88M, False: 2.61M]
  ------------------
 1998|  1.88M|        return unexpected(parse_error::error);
 1999|  1.88M|    }
 2000|  2.61M|    return it;
 2001|  4.49M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.08M|    {
 1621|  2.08M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.08M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.08M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.08M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.08M|            m_storage.reset();
 1627|  2.08M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.08M|        }
 1629|  2.08M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.08M|                                          std::basic_string<CharT>>) {
 1631|  2.08M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.08M|            m_view = string_view_type{*m_storage};
 1633|  2.08M|        }
 1634|  2.08M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.08M|                                          typename detail::basic_scan_buffer<
 1636|  2.08M|                                              value_t>::forward_iterator> &&
 1637|  2.08M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.08M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.08M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.08M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 292k, False: 1.79M]
  |  |  ------------------
  ------------------
 1641|  2.08M|                             detail::to_address(end_seg.end()))) {
 1642|   292k|                auto& str = m_storage.emplace();
 1643|   292k|                str.reserve(range.end().position() - range.begin().position());
 1644|   292k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   292k|                m_view = string_view_type{str};
 1646|   292k|                return;
 1647|   292k|            }
 1648|       |
 1649|  1.79M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.79M|                                                            end_seg.data());
 1651|  1.79M|            m_storage.reset();
 1652|  1.79M|        }
 1653|  2.08M|        else {
 1654|  2.08M|            auto& str = m_storage.emplace();
 1655|  2.08M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.08M|                str.reserve(range.size());
 1657|  2.08M|            }
 1658|  2.08M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.08M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.08M|                          std::back_inserter(str));
 1661|  2.08M|            }
 1662|  2.08M|            else {
 1663|  2.08M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.08M|                     ++it) {
 1665|  2.08M|                    str.push_back(*it);
 1666|  2.08M|                }
 1667|  2.08M|            }
 1668|  2.08M|            m_view = string_view_type{str};
 1669|  2.08M|        }
 1670|  2.08M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  15.5M|    {
 1582|  15.5M|        return m_view;
 1583|  15.5M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.19M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  1.55M|    {
 6080|  1.55M|        const bool need_skipped_width =
 6081|  1.55M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.55M]
  |  Branch (6081:33): [True: 0, False: 1.55M]
  ------------------
 6082|  1.55M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.55M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.55M]
  ------------------
 6085|  1.55M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.55M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.55M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.55M, False: 0]
  ------------------
 6090|  1.55M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.55M]
  ------------------
 6091|  1.55M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.55M|        return result_type{rng.begin(), 0};
 6115|  1.55M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.42M|{
 1846|  3.42M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.87k, False: 3.42M]
  |  |  ------------------
  ------------------
 1847|  6.87k|        return unexpected(e);
 1848|  6.87k|    }
 1849|       |
 1850|  3.42M|    return ranges::next(range.begin());
 1851|  3.42M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.46M|{
  950|  6.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.3k, False: 6.42M]
  |  |  ------------------
  ------------------
  951|  32.3k|        return eof_error::eof;
  952|  32.3k|    }
  953|  6.42M|    return eof_error::good;
  954|  6.46M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.46M|{
  944|  6.46M|    return is_range_eof(r.begin(), r.end());
  945|  6.46M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.46M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.46M|    {
  937|  6.46M|        return begin == end;
  938|  6.46M|    }
  939|  6.46M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.42M|    {
  296|  3.42M|        ++x;
  297|  3.42M|        return x;
  298|  3.42M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.38M|{
 3141|  2.38M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.38M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.68M, False: 696k]
  ------------------
 3143|  1.68M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.68M, False: 156]
  ------------------
 3144|  1.68M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.68M|        }
 3146|    156|        return unexpected(eof_error::eof);
 3147|  1.68M|    }
 3148|       |
 3149|   696k|    auto& it = *r;
 3150|   696k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 280k, False: 416k]
  ------------------
 3151|   280k|        return std::pair{it, sign_type::minus_sign};
 3152|   280k|    }
 3153|   416k|    return std::pair{it, sign_type::plus_sign};
 3154|   696k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.76M|{
 2272|  2.76M|    auto it = read_code_unit(range);
 2273|  2.76M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.19k, False: 2.76M]
  |  |  ------------------
  ------------------
 2274|  3.19k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.19k|    }
 2276|       |
 2277|  5.05M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.05M, False: 1.99M]
  ------------------
 2278|  5.05M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 774k, False: 4.28M]
  ------------------
 2279|   774k|            return *it;
 2280|   774k|        }
 2281|  5.05M|    }
 2282|       |
 2283|  1.99M|    return unexpected(parse_error::error);
 2284|  2.76M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.20M|{
 2231|  6.20M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.20M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.20M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.20M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 55.5k, False: 6.14M]
  ------------------
 2236|  55.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  55.5k|        }
 2238|  6.14M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 5.91M, False: 232k]
  ------------------
 2239|  5.91M|            return unexpected(parse_error::error);
 2240|  5.91M|        }
 2241|   232k|        return ranges::next(range.begin(), str.size());
 2242|  6.14M|    }
 2243|  6.20M|    else {
 2244|  6.20M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.20M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.20M|                return ch;
 2247|  6.20M|            }
 2248|  6.20M|            return static_cast<char_type>(ch +
 2249|  6.20M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.20M|        };
 2251|       |
 2252|  6.20M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.20M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.20M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.20M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.20M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.20M|                    return ascii_tolower(a) ==
 2259|  6.20M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.20M|                }))) {
 2261|  6.20M|            return unexpected(parse_error::error);
 2262|  6.20M|        }
 2263|       |
 2264|  6.20M|        return it;
 2265|  6.20M|    }
 2266|  6.20M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   659k|{
 2146|   659k|    auto it = read_code_unit(range);
 2147|   659k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   659k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.68k, False: 655k]
  |  |  ------------------
  ------------------
 2148|  3.68k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.68k|    }
 2150|       |
 2151|   655k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 545k, False: 110k]
  |  |  ------------------
  ------------------
 2152|   655k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   545k|        return unexpected(parse_error::error);
 2154|   545k|    }
 2155|       |
 2156|   110k|    return *it;
 2157|   655k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  8.78M|    {
 1503|  8.78M|        return sv;
 1504|  8.78M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.23M|{
 1976|  1.23M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.23M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.23M|{
 1957|  1.23M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.23M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.23M|    }
 1960|  1.23M|    else {
 1961|  1.23M|        auto first = range.begin();
 1962|  1.23M|        for (; first != range.end(); ++first) {
 1963|  1.23M|            if (pred(*first)) {
 1964|  1.23M|                return first;
 1965|  1.23M|            }
 1966|  1.23M|        }
 1967|  1.23M|        return first;
 1968|  1.23M|    }
 1969|  1.23M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.32M|{
 2951|  2.32M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.32M, False: 0]
  ------------------
 2952|  2.32M|        auto it = read_while_classic_space(range);
 2953|  2.32M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.32M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.3k, False: 2.30M]
  |  |  ------------------
  ------------------
 2955|  19.3k|            return unexpected(e);
 2956|  19.3k|        }
 2957|       |
 2958|  2.30M|        return it;
 2959|  2.32M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.32M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.32M|{
 2117|  2.32M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.32M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.32M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.32M|        auto buf = make_contiguous_buffer(range);
 2121|  2.32M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.32M|        return ranges::next(range.begin(),
 2123|  2.32M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.32M|    }
 2125|  2.32M|    else {
 2126|  2.32M|        auto it = range.begin();
 2127|       |
 2128|  2.32M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.32M|            auto seg = get_contiguous_beginning(range);
 2130|  2.32M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.32M|                seg_it != seg.end()) {
 2132|  2.32M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.32M|            }
 2134|  2.32M|            ranges::advance(it, seg.size());
 2135|  2.32M|        }
 2136|       |
 2137|  2.32M|        return read_while_code_point(
 2138|  2.32M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.32M|    }
 2140|  2.32M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.32M|{
 1683|  2.32M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.32M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.32M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.32M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.32M|    }
 1688|  2.32M|    else {
 1689|  2.32M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.32M|    }
 1691|  2.32M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.32M|    {
 1490|  2.32M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.27M|    {
  304|  6.27M|        ranges::advance(x, n);
  305|  6.27M|        return x;
  306|  6.27M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  8.29M|    {
  268|  8.29M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.29M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  8.29M|    {
  181|  39.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 31.5M, False: 8.29M]
  ------------------
  182|  31.5M|            ++i;
  183|  31.5M|        }
  184|  8.29M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   526k|    {
 6179|   526k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   526k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   526k|            auto rd = make_reader<T, char_type>();
 6184|   526k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   526k|                return unexpected(e);
 6186|   526k|            }
 6187|       |
 6188|   526k|            return impl(rd, range, value);
 6189|   526k|        }
 6190|   526k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   526k|            auto rd = make_reader<T, char_type>();
 6192|   526k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 526k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   526k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 526k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   526k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   526k|                return impl(rd, range, value);
 6199|   526k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   526k|        else {
 6207|   526k|            SCN_EXPECT(false);
 6208|   526k|            SCN_UNREACHABLE;
 6209|   526k|        }
 6210|   526k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.29M|    {
 3040|  3.29M|        reader_error_handler eh{};
 3041|  3.29M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.29M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.29M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.29M|        return {};
 3046|  3.29M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.29M|    {
 3051|  3.29M|        return static_cast<Derived&>(*this);
 3052|  3.29M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  3.29M|    {
 4146|  3.29M|        detail::check_float_type_specs(specs, eh);
 4147|  3.29M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   526k|    {
 6121|   526k|        const bool need_skipped_width =
 6122|   526k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 526k]
  |  Branch (6122:33): [True: 0, False: 526k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   526k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   526k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.28k, False: 520k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.28k|    }                                                  \
  |  |  |  | 3642|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   520k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   520k|        auto [it, prefix_width] = prefix_result;
 6127|   520k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   520k|        std::ptrdiff_t value_width = 0;
 6131|   520k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 520k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   520k|        else {
 6147|   520k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   520k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   520k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.9k, False: 497k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.9k|    }                                                  \
  |  | 3642|   520k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   520k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   497k|                                             specs, value, loc));
 6149|       |
 6150|   497k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 497k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   497k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   497k|        std::ptrdiff_t postfix_width = 0;
 6159|   497k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 492k, False: 4.84k]
  ------------------
 6160|   492k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   492k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   492k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   492k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   492k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   492k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   492k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   492k|                                 value_width));
 6164|   492k|            std::tie(it, postfix_width) = postfix_result;
 6165|   492k|        }
 6166|       |
 6167|   497k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   497k|                                                 value_width, postfix_width);
 6169|   497k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 497k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   497k|        return it;
 6174|   497k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  7.73M|    {
 3035|  7.73M|        return true;
 3036|  7.73M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|  3.25M|    {
 4218|  3.25M|        unsigned options{};
 4219|  3.25M|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 938k, False: 2.31M]
  ------------------
 4220|   938k|            options |= float_reader_base::allow_thsep;
 4221|   938k|        }
 4222|       |
 4223|  3.25M|        SCN_GCC_COMPAT_PUSH
 4224|  3.25M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|  3.25M|        switch (specs.type) {
 4227|   408k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 408k, False: 2.84M]
  ------------------
 4228|   408k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  63.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 63.1k, False: 3.18M]
  ------------------
 4231|  63.1k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|  1.05M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 1.05M, False: 2.19M]
  ------------------
 4234|  1.05M|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|   789k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 789k, False: 2.46M]
  ------------------
 4237|   789k|                return options | float_reader_base::allow_scientific |
 4238|   789k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|   938k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 938k, False: 2.31M]
  ------------------
 4241|   938k|                return options | float_reader_base::allow_scientific |
 4242|   938k|                       float_reader_base::allow_fixed |
 4243|   938k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 3.25M]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|  3.25M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|  3.25M|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|  3.25M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|  3.25M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.59M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  9.19M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  1.40M|    {
 3692|  1.40M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.40M|        const std::ptrdiff_t sign_len =
 3695|  1.40M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 421k, False: 986k]
  ------------------
 3696|       |
 3697|  1.40M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.40M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.40M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.40M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.6k, False: 1.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  21.6k|    }                                                  \
  |  |  |  | 3642|  1.40M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.38M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.40M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|  4.47M|    {
 4058|  4.47M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 4.47M, False: 0]
  ------------------
 4059|  4.47M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 4.47M, False: 0]
  ------------------
 4060|  4.47M|            return;
 4061|  4.47M|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.28M|    {
 1587|  5.28M|        return m_storage.has_value();
 1588|  5.28M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.10M|    {
 1592|  3.10M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.10M|        return *m_storage;
 1594|  3.10M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   520k|    {
 4171|   520k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   520k|#if !SCN_DISABLE_LOCALE
 4174|   520k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 146k, False: 373k]
  ------------------
 4175|   146k|            return read_impl<Range>(
 4176|   146k|                range, rd,
 4177|   146k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   146k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   146k|                },
 4180|   146k|                value, loc);
 4181|   146k|        }
 4182|   373k|#endif
 4183|       |
 4184|   373k|        return read_impl<Range>(
 4185|   373k|            range, rd,
 4186|   373k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   373k|                return r.read_source(SCN_FWD(args)...);
 4188|   373k|            },
 4189|   373k|            value);
 4190|   520k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   720k|    {
 4207|   720k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   720k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 696k]
  |  |  ------------------
  ------------------
 4209|  23.9k|            return unexpected(r.error());
 4210|  23.9k|        }
 4211|       |
 4212|   696k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   696k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   696k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   696k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.69k, False: 690k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.69k|    }                                                  \
  |  |  |  | 3642|   696k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   690k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   690k|        return ranges::next(range.begin(), n);
 4214|   696k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.28M|    {
  763|  2.28M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.28M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   146k|    {
  754|   146k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|   146k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   146k|                  obj(static_cast<decltype(args)>(args)...);
  747|   146k|              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   146k|    {
  684|   146k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   146k|            return static_cast<T*>(s.m_cp);
  686|   146k|        }
  687|   146k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   146k|            return static_cast<T*>(s.m_p);
  689|   146k|        }
  690|   146k|        else {
  691|   146k|            return reinterpret_cast<T*>(s.m_fp);
  692|   146k|        }
  693|   146k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   146k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   146k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   146k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|   473k|    {
 3680|   473k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   473k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   473k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 473k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   473k|        return read_source_impl(range);
 3686|   473k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|  2.28M|    {
 3706|  2.28M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.28M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.28M|        auto it = sign_result.first;
 3709|  2.28M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.28M|        auto digits_begin = it;
 3712|  2.28M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.28M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.28M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.28M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|  2.28M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|  2.28M|                SCN_TRY_ASSIGN(
 3718|  2.28M|                    it,
 3719|  2.28M|                    do_read_source_impl(
 3720|  2.28M|                        r,
 3721|  2.28M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|  2.28M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|  2.28M|            }
 3724|  2.28M|            else {
 3725|  2.28M|                auto cb = [&](const auto& rr)
 3726|  2.28M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.28M|                    auto res = read_all(rr);
 3728|  2.28M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.28M|                        return unexpected_scan_error(
 3730|  2.28M|                            scan_error::invalid_scanned_value,
 3731|  2.28M|                            "Invalid float value");
 3732|  2.28M|                    }
 3733|  2.28M|                    return res;
 3734|  2.28M|                };
 3735|  2.28M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|  2.28M|            }
 3737|  2.28M|        }
 3738|  2.28M|        else {
 3739|  2.28M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|  2.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 77.0k, False: 2.21M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  77.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  77.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  77.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  77.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  77.0k|    }                                                  \
  |  | 3642|  2.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  2.21M|                it,
 3741|  2.21M|                do_read_source_impl(
 3742|  2.21M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.21M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.21M|        }
 3745|       |
 3746|  2.21M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.21M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.19M, False: 21.7k]
  |  Branch (3748:48): [True: 2.17M, False: 15.5k]
  ------------------
 3749|  2.21M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.08M, False: 88.1k]
  ------------------
 3750|  2.21M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.08M, False: 2.66k]
  ------------------
 3751|  2.08M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.08M|        }
 3753|       |
 3754|  2.21M|        handle_separators();
 3755|       |
 3756|  2.21M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.21M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.21M|        return it;
 3769|  2.21M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|  2.28M|    {
 4001|  2.28M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.28M|        const bool allowed_nonhex =
 4003|  2.28M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.28M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.28M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.25M, False: 37.3k]
  |  Branch (4006:45): [True: 0, False: 2.25M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.28M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 37.3k, False: 2.25M]
  ------------------
 4012|  37.3k|            return *r;
 4013|  37.3k|        }
 4014|       |
 4015|  2.25M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.16M, False: 90.8k]
  |  Branch (4015:45): [True: 1.14k, False: 2.15M]
  ------------------
 4016|  1.14k|            return unexpected(r.error());
 4017|  1.14k|        }
 4018|  2.25M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 90.8k, False: 2.15M]
  ------------------
 4019|  90.8k|            return *r;
 4020|  90.8k|        }
 4021|       |
 4022|  2.15M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.55M, False: 600k]
  |  Branch (4022:28): [True: 502k, False: 1.05M]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   502k|            auto it = range.begin();
 4026|       |
 4027|   502k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 25.9k, False: 476k]
  ------------------
 4028|  25.9k|                m_kind = float_kind::hex_with_prefix;
 4029|  25.9k|                it = *r;
 4030|  25.9k|            }
 4031|   476k|            else {
 4032|   476k|                m_kind = float_kind::hex_without_prefix;
 4033|   476k|            }
 4034|       |
 4035|   502k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   502k|        }
 4037|  1.65M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 600k, False: 1.05M]
  |  Branch (4037:29): [True: 600k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   600k|            m_kind = float_kind::generic;
 4041|   600k|            return read_regular_float(range);
 4042|   600k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.05M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.6k, False: 997k]
  |  |  ------------------
  ------------------
 4048|  58.6k|            m_kind = float_kind::hex_with_prefix;
 4049|  58.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  58.6k|        }
 4051|       |
 4052|   997k|        m_kind = float_kind::generic;
 4053|   997k|        return read_regular(range);
 4054|  1.05M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|  2.28M|    {
 3812|  2.28M|        auto it = range.begin();
 3813|  2.28M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.25M, False: 37.3k]
  ------------------
 3814|  2.25M|            return unexpected(r.error());
 3815|  2.25M|        }
 3816|  37.3k|        else {
 3817|  37.3k|            it = *r;
 3818|  37.3k|        }
 3819|       |
 3820|  37.3k|        if (auto r = read_matching_string_classic_nocase(
 3821|  37.3k|                ranges::subrange{it, range.end()}, "inity");
 3822|  37.3k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 21.7k, False: 15.5k]
  ------------------
 3823|  21.7k|            m_kind = float_kind::inf_short;
 3824|  21.7k|            return it;
 3825|  21.7k|        }
 3826|  15.5k|        else {
 3827|  15.5k|            m_kind = float_kind::inf_long;
 3828|  15.5k|            return *r;
 3829|  15.5k|        }
 3830|  37.3k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|  2.25M|    {
 3835|  2.25M|        auto it = range.begin();
 3836|  2.25M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.15M, False: 91.9k]
  ------------------
 3837|  2.15M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.15M|                scan_error::invalid_scanned_value,
 3839|  2.15M|                "Invalid floating-point NaN value"));
 3840|  2.15M|        }
 3841|  91.9k|        else {
 3842|  91.9k|            it = *r;
 3843|  91.9k|        }
 3844|       |
 3845|  91.9k|        if (auto r =
 3846|  91.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  91.9k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 88.1k, False: 3.81k]
  ------------------
 3848|  88.1k|            m_kind = float_kind::nan_simple;
 3849|  88.1k|            return it;
 3850|  88.1k|        }
 3851|  3.81k|        else {
 3852|  3.81k|            it = *r;
 3853|  3.81k|        }
 3854|       |
 3855|  3.81k|        auto payload_beg_it = it;
 3856|  3.81k|        it = read_while_code_unit(
 3857|  3.81k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.81k|                return is_ascii_char(ch) &&
 3859|  3.81k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.81k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.81k|            });
 3862|  3.81k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.81k|        m_kind = float_kind::nan_with_payload;
 3865|  3.81k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.66k, False: 1.14k]
  ------------------
 3866|  3.81k|                                             ')')) {
 3867|  2.66k|            return *r;
 3868|  2.66k|        }
 3869|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.14k|                                     "Invalid floating-point NaN payload");
 3871|  3.81k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.81k|    {
  754|  3.81k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  23.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.3k|              cvref<T> obj = *get<T>(fn);
  745|  23.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.3k|              }
  748|  23.3k|              else {
  749|  23.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.3k|              }
  751|  23.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  23.3k|    {
  684|  23.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.3k|            return static_cast<T*>(s.m_cp);
  686|  23.3k|        }
  687|  23.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.3k|            return static_cast<T*>(s.m_p);
  689|  23.3k|        }
  690|  23.3k|        else {
  691|  23.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.3k|        }
  693|  23.3k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3857|  23.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  23.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 23.1k, False: 195]
  ------------------
 3859|  23.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 20.3k, False: 2.76k]
  |  Branch (3859:39): [True: 12.5k, False: 7.77k]
  |  Branch (3859:54): [True: 2.53k, False: 8.00k]
  |  Branch (3859:67): [True: 2.45k, False: 83]
  ------------------
 3860|  23.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.85k]
  ------------------
 3861|  23.3k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.81k|        {
  662|  3.81k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|  1.55M|    {
 3805|  1.55M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.55M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|   561k|    {
 3905|   561k|        auto it = range.begin();
 3906|       |
 3907|   561k|        std::ptrdiff_t digits_count = 0;
 3908|   561k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|   561k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.44k, False: 552k]
  |  |  ------------------
  ------------------
 3910|  9.44k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  9.44k|                scan_error::invalid_scanned_value,
 3912|  9.44k|                "Invalid hexadecimal floating-point value"));
 3913|  9.44k|        }
 3914|   552k|        else {
 3915|   552k|            digits_count += ranges::distance(it, *r);
 3916|   552k|            it = *r;
 3917|   552k|        }
 3918|       |
 3919|   552k|        m_integral_part_length = digits_count;
 3920|   552k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 72.5k, False: 479k]
  ------------------
 3921|   552k|                                             m_locale_options.decimal_point)) {
 3922|  72.5k|            it = *r;
 3923|  72.5k|        }
 3924|       |
 3925|   552k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 57.6k, False: 494k]
  ------------------
 3926|   552k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|  57.6k|            digits_count += ranges::distance(it, *r);
 3928|  57.6k|            it = *r;
 3929|  57.6k|        }
 3930|       |
 3931|   552k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 552k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|   552k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|   552k|        return it;
 3939|   552k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  1.11M|    {
 3790|  1.11M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  1.11M|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  1.11M|        return read_while1_code_unit(
 3799|  1.11M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  1.11M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.11M|    {
  754|  1.11M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.78M|              cvref<T> obj = *get<T>(fn);
  745|  5.78M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.78M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.78M|              }
  748|  5.78M|              else {
  749|  5.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.78M|              }
  751|  5.78M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  5.78M|    {
  684|  5.78M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.78M|            return static_cast<T*>(s.m_cp);
  686|  5.78M|        }
  687|  5.78M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.78M|            return static_cast<T*>(s.m_p);
  689|  5.78M|        }
  690|  5.78M|        else {
  691|  5.78M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.78M|        }
  693|  5.78M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3799|  5.78M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.11M|        {
  662|  1.11M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  1.91M|    {
 3877|  1.91M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 240k, False: 1.67M]
  ------------------
 3878|   240k|            auto beg_exp_it = range.begin();
 3879|   240k|            auto it = *r;
 3880|       |
 3881|   240k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 239k, False: 491]
  ------------------
 3882|   240k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|   239k|                it = r_sign->first;
 3884|   239k|            }
 3885|       |
 3886|   240k|            if (auto r_exp = read_while1_code_unit(
 3887|   240k|                    ranges::subrange{it, range.end()},
 3888|   240k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|   240k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 237k]
  |  |  ------------------
  ------------------
 3890|  2.75k|                it = beg_exp_it;
 3891|  2.75k|            }
 3892|   237k|            else {
 3893|   237k|                it = *r_exp;
 3894|   237k|            }
 3895|       |
 3896|   240k|            return it;
 3897|   240k|        }
 3898|  1.67M|        return range.begin();
 3899|  1.91M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   240k|    {
  754|   240k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   767k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   767k|              cvref<T> obj = *get<T>(fn);
  745|   767k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   767k|                  obj(static_cast<decltype(args)>(args)...);
  747|   767k|              }
  748|   767k|              else {
  749|   767k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   767k|              }
  751|   767k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   767k|    {
  684|   767k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   767k|            return static_cast<T*>(s.m_cp);
  686|   767k|        }
  687|   767k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   767k|            return static_cast<T*>(s.m_p);
  689|   767k|        }
  690|   767k|        else {
  691|   767k|            return reinterpret_cast<T*>(s.m_fp);
  692|   767k|        }
  693|   767k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   767k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   240k|        {
  662|   240k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|  1.59M|    {
 3945|  1.59M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  1.59M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 1.39M, False: 198k]
  |  Branch (3946:50): [True: 29.9k, False: 1.36M]
  ------------------
 3947|       |
 3948|  1.59M|        auto it = ranges::begin(range);
 3949|  1.59M|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  1.59M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  1.59M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.4k, False: 1.54M]
  |  |  ------------------
  ------------------
 3953|  51.4k|            return r.transform_error(
 3954|  51.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  51.4k|                                              "Invalid floating-point value"));
 3956|  51.4k|        }
 3957|  1.54M|        else {
 3958|  1.54M|            digits_count += ranges::distance(it, *r);
 3959|  1.54M|            it = *r;
 3960|  1.54M|        }
 3961|       |
 3962|  1.54M|        m_integral_part_length = digits_count;
 3963|  1.54M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 263k, False: 1.28M]
  ------------------
 3964|  1.54M|                                             m_locale_options.decimal_point)) {
 3965|   263k|            it = *r;
 3966|   263k|        }
 3967|       |
 3968|  1.54M|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 223k, False: 1.32M]
  ------------------
 3969|  1.54M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|   223k|            digits_count += ranges::distance(it, *r);
 3971|   223k|            it = *r;
 3972|   223k|        }
 3973|       |
 3974|  1.54M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  1.54M|        auto beg_exp_it = it;
 3980|  1.54M|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 1.36M, False: 183k]
  ------------------
 3981|  1.36M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  1.36M|        }
 3983|  1.54M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 29.1k, False: 1.51M]
  |  Branch (3983:29): [True: 15.0k, False: 14.0k]
  ------------------
 3984|  15.0k|            return unexpected_scan_error(
 3985|  15.0k|                scan_error::invalid_scanned_value,
 3986|  15.0k|                "No exponent given to scientific float");
 3987|  15.0k|        }
 3988|       |
 3989|  1.53M|        m_kind =
 3990|  1.53M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 1.29M, False: 236k]
  ------------------
 3991|       |
 3992|  1.53M|        return it;
 3993|  1.54M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|  3.14M|    {
 3775|  3.14M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.14M]
  |  |  |  Branch (859:45): [True: 0, False: 3.14M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  3.14M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  3.14M|        return read_while1_code_unit(
 3784|  3.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  3.14M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.14M|    {
  754|  3.14M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  18.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3M|              cvref<T> obj = *get<T>(fn);
  745|  18.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3M|              }
  748|  18.3M|              else {
  749|  18.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3M|              }
  751|  18.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  18.3M|    {
  684|  18.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3M|            return static_cast<T*>(s.m_cp);
  686|  18.3M|        }
  687|  18.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3M|            return static_cast<T*>(s.m_p);
  689|  18.3M|        }
  690|  18.3M|        else {
  691|  18.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3M|        }
  693|  18.3M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3784|  18.3M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.14M|        {
  662|  3.14M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.08M|    {
 1577|  2.08M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.08M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   146k|        {
  662|   146k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   373k|    {
  754|   373k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   373k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   373k|              cvref<T> obj = *get<T>(fn);
  745|   373k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   373k|                  obj(static_cast<decltype(args)>(args)...);
  747|   373k|              }
  748|   373k|              else {
  749|   373k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   373k|              }
  751|   373k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   373k|    {
  684|   373k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   373k|            return static_cast<T*>(s.m_cp);
  686|   373k|        }
  687|   373k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   373k|            return static_cast<T*>(s.m_p);
  689|   373k|        }
  690|   373k|        else {
  691|   373k|            return reinterpret_cast<T*>(s.m_fp);
  692|   373k|        }
  693|   373k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   373k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   373k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   373k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|  1.81M|    {
 3666|  1.81M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.81M|        return read_source_impl(range);
 3672|  1.81M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   373k|        {
  662|   373k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   510k|    {
 4171|   510k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   510k|#if !SCN_DISABLE_LOCALE
 4174|   510k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 143k, False: 366k]
  ------------------
 4175|   143k|            return read_impl<Range>(
 4176|   143k|                range, rd,
 4177|   143k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   143k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   143k|                },
 4180|   143k|                value, loc);
 4181|   143k|        }
 4182|   366k|#endif
 4183|       |
 4184|   366k|        return read_impl<Range>(
 4185|   366k|            range, rd,
 4186|   366k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   366k|                return r.read_source(SCN_FWD(args)...);
 4188|   366k|            },
 4189|   366k|            value);
 4190|   510k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   725k|    {
 4207|   725k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   725k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 711k]
  |  |  ------------------
  ------------------
 4209|  14.3k|            return unexpected(r.error());
 4210|  14.3k|        }
 4211|       |
 4212|   711k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   711k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   711k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   711k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.9k, False: 695k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  15.9k|    }                                                  \
  |  |  |  | 3642|   711k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   695k|        return ranges::next(range.begin(), n);
 4214|   711k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.30M|    {
  763|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.30M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   143k|    {
  754|   143k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   143k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143k|              cvref<T> obj = *get<T>(fn);
  745|   143k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   143k|                  obj(static_cast<decltype(args)>(args)...);
  747|   143k|              }
  748|   143k|              else {
  749|   143k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143k|              }
  751|   143k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   143k|    {
  684|   143k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   143k|            return static_cast<T*>(s.m_cp);
  686|   143k|        }
  687|   143k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   143k|            return static_cast<T*>(s.m_p);
  689|   143k|        }
  690|   143k|        else {
  691|   143k|            return reinterpret_cast<T*>(s.m_fp);
  692|   143k|        }
  693|   143k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   143k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   143k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   143k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|   464k|    {
 3680|   464k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   464k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   464k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 464k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   464k|        return read_source_impl(range);
 3686|   464k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  2.30M|    {
 3706|  2.30M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.30M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.30M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.30M|        auto it = sign_result.first;
 3709|  2.30M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.30M|        auto digits_begin = it;
 3712|  2.30M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.30M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.30M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.30M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.30M]
  |  |  |  Branch (859:45): [True: 0, False: 2.30M]
  |  |  |  Branch (859:45): [True: 0, False: 2.30M]
  |  |  ------------------
  ------------------
 3716|  2.30M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  2.30M|            else {
 3725|  2.30M|                auto cb = [&](const auto& rr)
 3726|  2.30M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.30M|                    auto res = read_all(rr);
 3728|  2.30M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.30M|                        return unexpected_scan_error(
 3730|  2.30M|                            scan_error::invalid_scanned_value,
 3731|  2.30M|                            "Invalid float value");
 3732|  2.30M|                    }
 3733|  2.30M|                    return res;
 3734|  2.30M|                };
 3735|  2.30M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  2.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44.9k, False: 2.26M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  44.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  44.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  44.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  44.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  44.9k|    }                                                  \
  |  | 3642|  2.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  2.26M|            }
 3737|  2.30M|        }
 3738|  2.26M|        else {
 3739|  2.26M|            SCN_TRY_ASSIGN(
 3740|  2.26M|                it,
 3741|  2.26M|                do_read_source_impl(
 3742|  2.26M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.26M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.26M|        }
 3745|       |
 3746|  2.26M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.26M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.24M, False: 21.4k]
  |  Branch (3748:48): [True: 2.22M, False: 15.5k]
  ------------------
 3749|  2.26M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.13M, False: 88.0k]
  ------------------
 3750|  2.26M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.13M, False: 2.65k]
  ------------------
 3751|  2.13M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.13M|        }
 3753|       |
 3754|  2.26M|        handle_separators();
 3755|       |
 3756|  2.26M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.26M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.26M|        return it;
 3769|  2.26M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  2.30M|    {
 3812|  2.30M|        auto it = range.begin();
 3813|  2.30M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.27M, False: 37.0k]
  ------------------
 3814|  2.27M|            return unexpected(r.error());
 3815|  2.27M|        }
 3816|  37.0k|        else {
 3817|  37.0k|            it = *r;
 3818|  37.0k|        }
 3819|       |
 3820|  37.0k|        if (auto r = read_matching_string_classic_nocase(
 3821|  37.0k|                ranges::subrange{it, range.end()}, "inity");
 3822|  37.0k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 21.4k, False: 15.5k]
  ------------------
 3823|  21.4k|            m_kind = float_kind::inf_short;
 3824|  21.4k|            return it;
 3825|  21.4k|        }
 3826|  15.5k|        else {
 3827|  15.5k|            m_kind = float_kind::inf_long;
 3828|  15.5k|            return *r;
 3829|  15.5k|        }
 3830|  37.0k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  2.27M|    {
 3835|  2.27M|        auto it = range.begin();
 3836|  2.27M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.17M, False: 91.8k]
  ------------------
 3837|  2.17M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.17M|                scan_error::invalid_scanned_value,
 3839|  2.17M|                "Invalid floating-point NaN value"));
 3840|  2.17M|        }
 3841|  91.8k|        else {
 3842|  91.8k|            it = *r;
 3843|  91.8k|        }
 3844|       |
 3845|  91.8k|        if (auto r =
 3846|  91.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  91.8k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 88.0k, False: 3.77k]
  ------------------
 3848|  88.0k|            m_kind = float_kind::nan_simple;
 3849|  88.0k|            return it;
 3850|  88.0k|        }
 3851|  3.77k|        else {
 3852|  3.77k|            it = *r;
 3853|  3.77k|        }
 3854|       |
 3855|  3.77k|        auto payload_beg_it = it;
 3856|  3.77k|        it = read_while_code_unit(
 3857|  3.77k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.77k|                return is_ascii_char(ch) &&
 3859|  3.77k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.77k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.77k|            });
 3862|  3.77k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.77k|        m_kind = float_kind::nan_with_payload;
 3865|  3.77k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.65k, False: 1.12k]
  ------------------
 3866|  3.77k|                                             ')')) {
 3867|  2.65k|            return *r;
 3868|  2.65k|        }
 3869|  1.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.12k|                                     "Invalid floating-point NaN payload");
 3871|  3.77k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.77k|    {
  754|  3.77k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.2k|              cvref<T> obj = *get<T>(fn);
  745|  23.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.2k|              }
  748|  23.2k|              else {
  749|  23.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.2k|              }
  751|  23.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.2k|    {
  684|  23.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.2k|            return static_cast<T*>(s.m_cp);
  686|  23.2k|        }
  687|  23.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.2k|            return static_cast<T*>(s.m_p);
  689|  23.2k|        }
  690|  23.2k|        else {
  691|  23.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.2k|        }
  693|  23.2k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3857|  23.2k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  23.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 23.1k, False: 167]
  ------------------
 3859|  23.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 20.3k, False: 2.76k]
  |  Branch (3859:39): [True: 12.5k, False: 7.76k]
  |  Branch (3859:54): [True: 2.52k, False: 8.00k]
  |  Branch (3859:67): [True: 2.44k, False: 83]
  ------------------
 3860|  23.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.84k]
  ------------------
 3861|  23.2k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.77k|        {
  662|  3.77k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  1.58M|    {
 3805|  1.58M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.58M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.23M|{
 1996|  1.23M|    auto it = read_while_code_unit(range, pred);
 1997|  1.23M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 502k, False: 729k]
  ------------------
 1998|   502k|        return unexpected(parse_error::error);
 1999|   502k|    }
 2000|   729k|    return it;
 2001|  1.23M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|   383k|    {
 3877|   383k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 77.6k, False: 305k]
  ------------------
 3878|  77.6k|            auto beg_exp_it = range.begin();
 3879|  77.6k|            auto it = *r;
 3880|       |
 3881|  77.6k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 77.5k, False: 156]
  ------------------
 3882|  77.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  77.5k|                it = r_sign->first;
 3884|  77.5k|            }
 3885|       |
 3886|  77.6k|            if (auto r_exp = read_while1_code_unit(
 3887|  77.6k|                    ranges::subrange{it, range.end()},
 3888|  77.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  77.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  77.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 76.6k]
  |  |  ------------------
  ------------------
 3890|  1.00k|                it = beg_exp_it;
 3891|  1.00k|            }
 3892|  76.6k|            else {
 3893|  76.6k|                it = *r_exp;
 3894|  76.6k|            }
 3895|       |
 3896|  77.6k|            return it;
 3897|  77.6k|        }
 3898|   305k|        return range.begin();
 3899|   383k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  77.6k|    {
  754|  77.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   241k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   241k|              cvref<T> obj = *get<T>(fn);
  745|   241k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   241k|                  obj(static_cast<decltype(args)>(args)...);
  747|   241k|              }
  748|   241k|              else {
  749|   241k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   241k|              }
  751|   241k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   241k|    {
  684|   241k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   241k|            return static_cast<T*>(s.m_cp);
  686|   241k|        }
  687|   241k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   241k|            return static_cast<T*>(s.m_p);
  689|   241k|        }
  690|   241k|        else {
  691|   241k|            return reinterpret_cast<T*>(s.m_fp);
  692|   241k|        }
  693|   241k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   241k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  77.6k|        {
  662|  77.6k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   591k|    {
 3945|   591k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   591k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 395k, False: 195k]
  |  Branch (3946:50): [True: 30.1k, False: 365k]
  ------------------
 3947|       |
 3948|   591k|        auto it = ranges::begin(range);
 3949|   591k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   591k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   591k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.5k, False: 563k]
  |  |  ------------------
  ------------------
 3953|  27.5k|            return r.transform_error(
 3954|  27.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  27.5k|                                              "Invalid floating-point value"));
 3956|  27.5k|        }
 3957|   563k|        else {
 3958|   563k|            digits_count += ranges::distance(it, *r);
 3959|   563k|            it = *r;
 3960|   563k|        }
 3961|       |
 3962|   563k|        m_integral_part_length = digits_count;
 3963|   563k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 103k, False: 459k]
  ------------------
 3964|   563k|                                             m_locale_options.decimal_point)) {
 3965|   103k|            it = *r;
 3966|   103k|        }
 3967|       |
 3968|   563k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 89.1k, False: 474k]
  ------------------
 3969|   563k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|  89.1k|            digits_count += ranges::distance(it, *r);
 3971|  89.1k|            it = *r;
 3972|  89.1k|        }
 3973|       |
 3974|   563k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|   563k|        auto beg_exp_it = it;
 3980|   563k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 383k, False: 180k]
  ------------------
 3981|   383k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|   383k|        }
 3983|   563k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 29.1k, False: 534k]
  |  Branch (3983:29): [True: 15.0k, False: 14.0k]
  ------------------
 3984|  15.0k|            return unexpected_scan_error(
 3985|  15.0k|                scan_error::invalid_scanned_value,
 3986|  15.0k|                "No exponent given to scientific float");
 3987|  15.0k|        }
 3988|       |
 3989|   548k|        m_kind =
 3990|   548k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 471k, False: 76.6k]
  ------------------
 3991|       |
 3992|   548k|        return it;
 3993|   563k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|  1.15M|    {
 3775|  1.15M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  |  Branch (859:45): [True: 0, False: 1.15M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  1.15M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  1.15M|        return read_while1_code_unit(
 3784|  1.15M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  1.15M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.15M|    {
  754|  1.15M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.14M|              cvref<T> obj = *get<T>(fn);
  745|  7.14M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.14M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.14M|              }
  748|  7.14M|              else {
  749|  7.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.14M|              }
  751|  7.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.14M|    {
  684|  7.14M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.14M|            return static_cast<T*>(s.m_cp);
  686|  7.14M|        }
  687|  7.14M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.14M|            return static_cast<T*>(s.m_p);
  689|  7.14M|        }
  690|  7.14M|        else {
  691|  7.14M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.14M|        }
  693|  7.14M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|  7.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.15M|        {
  662|  1.15M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  2.30M|    {
 4001|  2.30M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.30M|        const bool allowed_nonhex =
 4003|  2.30M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.30M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.30M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.27M, False: 37.0k]
  |  Branch (4006:45): [True: 0, False: 2.27M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.30M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 37.0k, False: 2.27M]
  ------------------
 4012|  37.0k|            return *r;
 4013|  37.0k|        }
 4014|       |
 4015|  2.27M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.18M, False: 90.7k]
  |  Branch (4015:45): [True: 1.12k, False: 2.17M]
  ------------------
 4016|  1.12k|            return unexpected(r.error());
 4017|  1.12k|        }
 4018|  2.27M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 90.7k, False: 2.17M]
  ------------------
 4019|  90.7k|            return *r;
 4020|  90.7k|        }
 4021|       |
 4022|  2.17M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.58M, False: 591k]
  |  Branch (4022:28): [True: 492k, False: 1.09M]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   492k|            auto it = range.begin();
 4026|       |
 4027|   492k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 25.3k, False: 466k]
  ------------------
 4028|  25.3k|                m_kind = float_kind::hex_with_prefix;
 4029|  25.3k|                it = *r;
 4030|  25.3k|            }
 4031|   466k|            else {
 4032|   466k|                m_kind = float_kind::hex_without_prefix;
 4033|   466k|            }
 4034|       |
 4035|   492k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   492k|        }
 4037|  1.68M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 591k, False: 1.09M]
  |  Branch (4037:29): [True: 591k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   591k|            m_kind = float_kind::generic;
 4041|   591k|            return read_regular_float(range);
 4042|   591k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.09M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.3k, False: 1.03M]
  |  |  ------------------
  ------------------
 4048|  62.3k|            m_kind = float_kind::hex_with_prefix;
 4049|  62.3k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  62.3k|        }
 4051|       |
 4052|  1.03M|        m_kind = float_kind::generic;
 4053|  1.03M|        return read_regular(range);
 4054|  1.09M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  1.58M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.58M|                    auto res = read_all(rr);
 3728|  1.58M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24k, False: 1.58M]
  |  |  ------------------
  ------------------
 3729|  1.24k|                        return unexpected_scan_error(
 3730|  1.24k|                            scan_error::invalid_scanned_value,
 3731|  1.24k|                            "Invalid float value");
 3732|  1.24k|                    }
 3733|  1.58M|                    return res;
 3734|  1.58M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.58M|{
 1839|  1.58M|    return ranges::next(range.begin(), range.end());
 1840|  1.58M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.58M|    {
  313|  1.58M|        ranges::advance(x, bound);
  314|  1.58M|        return x;
  315|  1.58M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.58M|    {
  275|  1.58M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.58M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.58M|    {
  190|  1.58M|        i = std::move(bound);
  191|  1.58M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.13M|    {
 1577|  2.13M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.13M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.13M|    {
 1621|  2.13M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.13M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.13M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.13M|            m_storage.reset();
 1627|  2.13M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.13M|        }
 1629|  2.13M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.13M|                                          std::basic_string<CharT>>) {
 1631|  2.13M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.13M|            m_view = string_view_type{*m_storage};
 1633|  2.13M|        }
 1634|  2.13M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.13M|                                          typename detail::basic_scan_buffer<
 1636|  2.13M|                                              value_t>::forward_iterator> &&
 1637|  2.13M|                           ranges::common_range<Range>) {
 1638|  2.13M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.13M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.13M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.13M|                             detail::to_address(end_seg.end()))) {
 1642|  2.13M|                auto& str = m_storage.emplace();
 1643|  2.13M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.13M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.13M|                m_view = string_view_type{str};
 1646|  2.13M|                return;
 1647|  2.13M|            }
 1648|       |
 1649|  2.13M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.13M|                                                            end_seg.data());
 1651|  2.13M|            m_storage.reset();
 1652|  2.13M|        }
 1653|  2.13M|        else {
 1654|  2.13M|            auto& str = m_storage.emplace();
 1655|  2.13M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.13M|                str.reserve(range.size());
 1657|  2.13M|            }
 1658|  2.13M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.13M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.13M|                          std::back_inserter(str));
 1661|  2.13M|            }
 1662|  2.13M|            else {
 1663|  2.13M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.13M|                     ++it) {
 1665|  2.13M|                    str.push_back(*it);
 1666|  2.13M|                }
 1667|  2.13M|            }
 1668|  2.13M|            m_view = string_view_type{str};
 1669|  2.13M|        }
 1670|  2.13M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   143k|        {
  662|   143k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   366k|    {
  754|   366k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   366k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   366k|              cvref<T> obj = *get<T>(fn);
  745|   366k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   366k|                  obj(static_cast<decltype(args)>(args)...);
  747|   366k|              }
  748|   366k|              else {
  749|   366k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   366k|              }
  751|   366k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   366k|    {
  684|   366k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   366k|            return static_cast<T*>(s.m_cp);
  686|   366k|        }
  687|   366k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   366k|            return static_cast<T*>(s.m_p);
  689|   366k|        }
  690|   366k|        else {
  691|   366k|            return reinterpret_cast<T*>(s.m_fp);
  692|   366k|        }
  693|   366k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   366k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   366k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   366k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  1.84M|    {
 3666|  1.84M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.84M|        return read_source_impl(range);
 3672|  1.84M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   366k|        {
  662|   366k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   564k|    {
 6179|   564k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   564k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   564k|            auto rd = make_reader<T, char_type>();
 6184|   564k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   564k|                return unexpected(e);
 6186|   564k|            }
 6187|       |
 6188|   564k|            return impl(rd, range, value);
 6189|   564k|        }
 6190|   564k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   564k|            auto rd = make_reader<T, char_type>();
 6192|   564k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   564k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 564k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   564k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   564k|                return impl(rd, range, value);
 6199|   564k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   564k|        else {
 6207|   564k|            SCN_EXPECT(false);
 6208|   564k|            SCN_UNREACHABLE;
 6209|   564k|        }
 6210|   564k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   564k|    {
 6121|   564k|        const bool need_skipped_width =
 6122|   564k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 564k]
  |  Branch (6122:33): [True: 0, False: 564k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   564k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   564k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.08k, False: 557k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.08k|    }                                                  \
  |  |  |  | 3642|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   557k|        auto [it, prefix_width] = prefix_result;
 6127|   557k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   557k|        std::ptrdiff_t value_width = 0;
 6131|   557k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 557k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   557k|        else {
 6147|   557k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   557k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   557k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.1k, False: 535k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.1k|    }                                                  \
  |  | 3642|   557k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   535k|                                             specs, value, loc));
 6149|       |
 6150|   535k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 535k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   535k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   535k|        std::ptrdiff_t postfix_width = 0;
 6159|   535k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 529k, False: 5.48k]
  ------------------
 6160|   529k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 529k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   529k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   529k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   529k|                                 value_width));
 6164|   529k|            std::tie(it, postfix_width) = postfix_result;
 6165|   529k|        }
 6166|       |
 6167|   535k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   535k|                                                 value_width, postfix_width);
 6169|   535k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 535k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   535k|        return it;
 6174|   535k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  1.52M|    {
 3692|  1.52M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.52M|        const std::ptrdiff_t sign_len =
 3695|  1.52M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 452k, False: 1.07M]
  ------------------
 3696|       |
 3697|  1.52M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.52M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 1.50M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  16.7k|    }                                                  \
  |  |  |  | 3642|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.50M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.52M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   557k|    {
 4171|   557k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   557k|#if !SCN_DISABLE_LOCALE
 4174|   557k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 162k, False: 395k]
  ------------------
 4175|   162k|            return read_impl<Range>(
 4176|   162k|                range, rd,
 4177|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   162k|                },
 4180|   162k|                value, loc);
 4181|   162k|        }
 4182|   395k|#endif
 4183|       |
 4184|   395k|        return read_impl<Range>(
 4185|   395k|            range, rd,
 4186|   395k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   395k|                return r.read_source(SCN_FWD(args)...);
 4188|   395k|            },
 4189|   395k|            value);
 4190|   557k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   779k|    {
 4207|   779k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   779k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 753k]
  |  |  ------------------
  ------------------
 4209|  26.0k|            return unexpected(r.error());
 4210|  26.0k|        }
 4211|       |
 4212|   753k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   753k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   753k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   753k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 751k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.48k|    }                                                  \
  |  |  |  | 3642|   753k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   751k|        return ranges::next(range.begin(), n);
 4214|   753k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   162k|    {
  754|   162k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|   162k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   162k|                  obj(static_cast<decltype(args)>(args)...);
  747|   162k|              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   162k|    {
  684|   162k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   162k|            return static_cast<T*>(s.m_cp);
  686|   162k|        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   162k|            return static_cast<T*>(s.m_p);
  689|   162k|        }
  690|   162k|        else {
  691|   162k|            return reinterpret_cast<T*>(s.m_fp);
  692|   162k|        }
  693|   162k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   162k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   162k|        {
  662|   162k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   395k|    {
  754|   395k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   395k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   395k|              cvref<T> obj = *get<T>(fn);
  745|   395k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   395k|                  obj(static_cast<decltype(args)>(args)...);
  747|   395k|              }
  748|   395k|              else {
  749|   395k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   395k|              }
  751|   395k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   395k|    {
  684|   395k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   395k|            return static_cast<T*>(s.m_cp);
  686|   395k|        }
  687|   395k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   395k|            return static_cast<T*>(s.m_p);
  689|   395k|        }
  690|   395k|        else {
  691|   395k|            return reinterpret_cast<T*>(s.m_fp);
  692|   395k|        }
  693|   395k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   395k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   395k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   395k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   395k|        {
  662|   395k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   547k|    {
 4171|   547k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   547k|#if !SCN_DISABLE_LOCALE
 4174|   547k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 159k, False: 388k]
  ------------------
 4175|   159k|            return read_impl<Range>(
 4176|   159k|                range, rd,
 4177|   159k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   159k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   159k|                },
 4180|   159k|                value, loc);
 4181|   159k|        }
 4182|   388k|#endif
 4183|       |
 4184|   388k|        return read_impl<Range>(
 4185|   388k|            range, rd,
 4186|   388k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   388k|                return r.read_source(SCN_FWD(args)...);
 4188|   388k|            },
 4189|   388k|            value);
 4190|   547k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   785k|    {
 4207|   785k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   785k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 770k]
  |  |  ------------------
  ------------------
 4209|  15.0k|            return unexpected(r.error());
 4210|  15.0k|        }
 4211|       |
 4212|   770k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   770k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   770k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   770k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   770k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 756k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  14.3k|    }                                                  \
  |  |  |  | 3642|   770k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   756k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   756k|        return ranges::next(range.begin(), n);
 4214|   770k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   159k|    {
  684|   159k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   159k|            return static_cast<T*>(s.m_cp);
  686|   159k|        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   159k|            return static_cast<T*>(s.m_p);
  689|   159k|        }
  690|   159k|        else {
  691|   159k|            return reinterpret_cast<T*>(s.m_fp);
  692|   159k|        }
  693|   159k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   159k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   159k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   159k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   388k|    {
  754|   388k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   388k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   388k|              cvref<T> obj = *get<T>(fn);
  745|   388k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   388k|                  obj(static_cast<decltype(args)>(args)...);
  747|   388k|              }
  748|   388k|              else {
  749|   388k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   388k|              }
  751|   388k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   388k|    {
  684|   388k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   388k|            return static_cast<T*>(s.m_cp);
  686|   388k|        }
  687|   388k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   388k|            return static_cast<T*>(s.m_p);
  689|   388k|        }
  690|   388k|        else {
  691|   388k|            return reinterpret_cast<T*>(s.m_fp);
  692|   388k|        }
  693|   388k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   388k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   388k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   388k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   388k|        {
  662|   388k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   571k|    {
 6179|   571k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   571k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   571k|            auto rd = make_reader<T, char_type>();
 6184|   571k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   571k|                return unexpected(e);
 6186|   571k|            }
 6187|       |
 6188|   571k|            return impl(rd, range, value);
 6189|   571k|        }
 6190|   571k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   571k|            auto rd = make_reader<T, char_type>();
 6192|   571k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 571k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   571k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 571k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   571k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   571k|                return impl(rd, range, value);
 6199|   571k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   571k|        else {
 6207|   571k|            SCN_EXPECT(false);
 6208|   571k|            SCN_UNREACHABLE;
 6209|   571k|        }
 6210|   571k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   571k|    {
 6121|   571k|        const bool need_skipped_width =
 6122|   571k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 571k]
  |  Branch (6122:33): [True: 0, False: 571k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   571k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   571k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   571k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   571k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.47k, False: 563k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.47k|    }                                                  \
  |  |  |  | 3642|   571k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   563k|        auto [it, prefix_width] = prefix_result;
 6127|   563k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   563k|        std::ptrdiff_t value_width = 0;
 6131|   563k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 563k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   563k|        else {
 6147|   563k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.7k, False: 541k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.7k|    }                                                  \
  |  | 3642|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   541k|                                             specs, value, loc));
 6149|       |
 6150|   541k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 541k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   541k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   541k|        std::ptrdiff_t postfix_width = 0;
 6159|   541k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 536k, False: 5.81k]
  ------------------
 6160|   536k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   536k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   536k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   536k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 536k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   536k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   536k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   536k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   536k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   536k|                                 value_width));
 6164|   536k|            std::tie(it, postfix_width) = postfix_result;
 6165|   536k|        }
 6166|       |
 6167|   541k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   541k|                                                 value_width, postfix_width);
 6169|   541k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 541k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   541k|        return it;
 6174|   541k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  1.54M|    {
 3692|  1.54M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.54M|        const std::ptrdiff_t sign_len =
 3695|  1.54M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 464k, False: 1.07M]
  ------------------
 3696|       |
 3697|  1.54M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.1k, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  14.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  14.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  14.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  14.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  14.1k|    }                                                  \
  |  |  |  | 3642|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.52M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.54M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   563k|    {
 4171|   563k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   563k|#if !SCN_DISABLE_LOCALE
 4174|   563k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 165k, False: 398k]
  ------------------
 4175|   165k|            return read_impl<Range>(
 4176|   165k|                range, rd,
 4177|   165k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   165k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   165k|                },
 4180|   165k|                value, loc);
 4181|   165k|        }
 4182|   398k|#endif
 4183|       |
 4184|   398k|        return read_impl<Range>(
 4185|   398k|            range, rd,
 4186|   398k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   398k|                return r.read_source(SCN_FWD(args)...);
 4188|   398k|            },
 4189|   398k|            value);
 4190|   563k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   788k|    {
 4207|   788k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   788k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.1k, False: 761k]
  |  |  ------------------
  ------------------
 4209|  27.1k|            return unexpected(r.error());
 4210|  27.1k|        }
 4211|       |
 4212|   761k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   761k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   761k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   761k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 774, False: 761k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    774|    }                                                  \
  |  |  |  | 3642|   761k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   761k|        return ranges::next(range.begin(), n);
 4214|   761k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   165k|    {
  754|   165k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   165k|    {
  684|   165k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   165k|            return static_cast<T*>(s.m_cp);
  686|   165k|        }
  687|   165k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   165k|            return static_cast<T*>(s.m_p);
  689|   165k|        }
  690|   165k|        else {
  691|   165k|            return reinterpret_cast<T*>(s.m_fp);
  692|   165k|        }
  693|   165k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   165k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   165k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   165k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   165k|        {
  662|   165k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   398k|    {
  754|   398k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   398k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   398k|              cvref<T> obj = *get<T>(fn);
  745|   398k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   398k|                  obj(static_cast<decltype(args)>(args)...);
  747|   398k|              }
  748|   398k|              else {
  749|   398k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   398k|              }
  751|   398k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   398k|    {
  684|   398k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   398k|            return static_cast<T*>(s.m_cp);
  686|   398k|        }
  687|   398k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   398k|            return static_cast<T*>(s.m_p);
  689|   398k|        }
  690|   398k|        else {
  691|   398k|            return reinterpret_cast<T*>(s.m_fp);
  692|   398k|        }
  693|   398k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   398k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   398k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   398k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   398k|        {
  662|   398k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   553k|    {
 4171|   553k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   553k|#if !SCN_DISABLE_LOCALE
 4174|   553k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 161k, False: 391k]
  ------------------
 4175|   161k|            return read_impl<Range>(
 4176|   161k|                range, rd,
 4177|   161k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   161k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   161k|                },
 4180|   161k|                value, loc);
 4181|   161k|        }
 4182|   391k|#endif
 4183|       |
 4184|   391k|        return read_impl<Range>(
 4185|   391k|            range, rd,
 4186|   391k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   391k|                return r.read_source(SCN_FWD(args)...);
 4188|   391k|            },
 4189|   391k|            value);
 4190|   553k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   796k|    {
 4207|   796k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   796k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.4k, False: 780k]
  |  |  ------------------
  ------------------
 4209|  15.4k|            return unexpected(r.error());
 4210|  15.4k|        }
 4211|       |
 4212|   780k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   780k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   780k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   780k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.3k, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  13.3k|    }                                                  \
  |  |  |  | 3642|   780k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   767k|        return ranges::next(range.begin(), n);
 4214|   780k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   161k|    {
  684|   161k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   161k|            return static_cast<T*>(s.m_cp);
  686|   161k|        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   161k|            return static_cast<T*>(s.m_p);
  689|   161k|        }
  690|   161k|        else {
  691|   161k|            return reinterpret_cast<T*>(s.m_fp);
  692|   161k|        }
  693|   161k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   161k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   161k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   161k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   391k|    {
  754|   391k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   391k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   391k|              cvref<T> obj = *get<T>(fn);
  745|   391k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   391k|                  obj(static_cast<decltype(args)>(args)...);
  747|   391k|              }
  748|   391k|              else {
  749|   391k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   391k|              }
  751|   391k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   391k|    {
  684|   391k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   391k|            return static_cast<T*>(s.m_cp);
  686|   391k|        }
  687|   391k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   391k|            return static_cast<T*>(s.m_p);
  689|   391k|        }
  690|   391k|        else {
  691|   391k|            return reinterpret_cast<T*>(s.m_fp);
  692|   391k|        }
  693|   391k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   391k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   391k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   391k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   391k|        {
  662|   391k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.31M|{
 1039|  2.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.31M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.31M|        return r;
 1042|  2.31M|    }
 1043|  2.31M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.31M|                           ranges::const_iterator_t<Range>,
 1045|  2.31M|                           typename detail::basic_scan_buffer<
 1046|  2.31M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.31M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.31M|            auto seg = r.begin().contiguous_segment();
 1049|  2.31M|            auto dist =
 1050|  2.31M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.31M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.31M|        }
 1053|  2.31M|        else {
 1054|  2.31M|            return r.begin().contiguous_segment();
 1055|  2.31M|        }
 1056|  2.31M|    }
 1057|  2.31M|    else {
 1058|  2.31M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.31M|    }
 1060|  2.31M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.02M|{
 2061|  2.02M|    auto it = range.begin();
 2062|  3.82M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.80M, False: 21.9k]
  ------------------
 2063|  3.80M|        const auto val =
 2064|  3.80M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.80M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.79M, False: 5.69k]
  |  |  ------------------
  ------------------
 2066|  3.79M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.79M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.79M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.00M, False: 1.79M]
  ------------------
 2069|  2.00M|                return it;
 2070|  2.00M|            }
 2071|  3.79M|        }
 2072|  1.80M|        it = val.iterator;
 2073|  1.80M|    }
 2074|       |
 2075|  21.9k|    return it;
 2076|  2.02M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.80M|{
 1899|  3.80M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.80M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.80M|    auto it = range.begin();
 1903|  3.80M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.80M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.69k, False: 3.79M]
  |  |  ------------------
  ------------------
 1906|  5.69k|        ++it;
 1907|  5.69k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  5.69k|        return {it, {}};
 1909|  5.69k|    }
 1910|       |
 1911|  3.79M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.74M, False: 53.2k]
  ------------------
 1912|  3.74M|        ++it;
 1913|  3.74M|        return {it, string_type(1, *range.begin())};
 1914|  3.74M|    }
 1915|       |
 1916|  53.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  53.2k|    return {it, string_type{range.begin(), it}};
 1918|  3.79M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  5.69k|{
 1155|  5.69k|    auto it = input.begin();
 1156|  49.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 48.1k, False: 1.53k]
  ------------------
 1157|  48.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.15k, False: 44.0k]
  ------------------
 1158|  4.15k|            break;
 1159|  4.15k|        }
 1160|  48.1k|    }
 1161|  5.69k|    return it;
 1162|  5.69k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  53.2k|    {
  283|  53.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  53.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  53.2k|    {
  252|  53.2k|        constexpr iter_difference_t<I> zero{0};
  253|  53.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|   162k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 110k, False: 52.2k]
  |  Branch (255:30): [True: 109k, False: 1.05k]
  ------------------
  256|   109k|            ++i;
  257|   109k|            ++counter;
  258|   109k|        }
  259|       |
  260|  53.2k|        return counter;
  261|  53.2k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.80M|    {
 1890|  3.80M|        return !codepoint.empty();
 1891|  3.80M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.02M|{
 2082|  2.02M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.02M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.31M|{
 2951|  2.31M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.31M, False: 0]
  ------------------
 2952|  2.31M|        auto it = read_while_classic_space(range);
 2953|  2.31M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.31M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.9k, False: 2.28M]
  |  |  ------------------
  ------------------
 2955|  21.9k|            return unexpected(e);
 2956|  21.9k|        }
 2957|       |
 2958|  2.28M|        return it;
 2959|  2.31M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.31M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.31M|{
 2117|  2.31M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.31M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.31M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.31M|        auto buf = make_contiguous_buffer(range);
 2121|  2.31M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.31M|        return ranges::next(range.begin(),
 2123|  2.31M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.31M|    }
 2125|  2.31M|    else {
 2126|  2.31M|        auto it = range.begin();
 2127|       |
 2128|  2.31M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.31M|            auto seg = get_contiguous_beginning(range);
 2130|  2.31M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.31M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 286k, False: 2.02M]
  ------------------
 2132|   286k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   286k|            }
 2134|  2.02M|            ranges::advance(it, seg.size());
 2135|  2.02M|        }
 2136|       |
 2137|  2.02M|        return read_while_code_point(
 2138|  2.02M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.31M|    }
 2140|  2.31M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.02M|    {
  754|  2.02M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.79M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.79M|              cvref<T> obj = *get<T>(fn);
  745|  3.79M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.79M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.79M|              }
  748|  3.79M|              else {
  749|  3.79M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.79M|              }
  751|  3.79M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.79M|    {
  684|  3.79M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.79M|            return static_cast<T*>(s.m_cp);
  686|  3.79M|        }
  687|  3.79M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.79M|            return static_cast<T*>(s.m_p);
  689|  3.79M|        }
  690|  3.79M|        else {
  691|  3.79M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.79M|        }
  693|  3.79M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.79M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.02M|        {
  662|  2.02M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   270k|{
  981|   270k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   270k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   270k|        return true;
  984|   270k|    }
  985|   270k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   270k|                           ranges::const_iterator_t<Range>,
  987|   270k|                           typename detail::basic_scan_buffer<
  988|   270k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   270k|        auto beg = r.begin();
  990|   270k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 270k, False: 0]
  ------------------
  991|   270k|            return false;
  992|   270k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   270k|    else {
 1006|   270k|        return false;
 1007|   270k|    }
 1008|   270k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|   206k|    {
 6038|   206k|        const bool need_skipped_width =
 6039|   206k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 206k]
  |  Branch (6039:33): [True: 0, False: 206k]
  ------------------
 6040|   206k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   206k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 206k]
  ------------------
 6044|   206k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 206k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   206k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 206k, False: 0]
  |  Branch (6048:56): [True: 206k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   206k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 206k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   411k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.53k|    }                                                  \
  |  |  |  | 3642|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   411k|                            make_eof_scan_error));
 6059|       |
 6060|   411k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 204k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   204k|            return result_type{it, 0};
 6068|   411k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   206k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   314k|{
 1976|   314k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   314k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   314k|{
 1957|   314k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   314k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   314k|    }
 1960|   314k|    else {
 1961|   314k|        auto first = range.begin();
 1962|   364k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 363k, False: 984]
  ------------------
 1963|   363k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 313k, False: 49.6k]
  ------------------
 1964|   313k|                return first;
 1965|   313k|            }
 1966|   363k|        }
 1967|    984|        return first;
 1968|   314k|    }
 1969|   314k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.03M|    {
  763|  1.03M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.03M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   452k|    {
  754|   452k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   519k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   519k|              cvref<T> obj = *get<T>(fn);
  745|   519k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   519k|                  obj(static_cast<decltype(args)>(args)...);
  747|   519k|              }
  748|   519k|              else {
  749|   519k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   519k|              }
  751|   519k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   519k|    {
  684|   519k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   519k|            return static_cast<T*>(s.m_cp);
  686|   519k|        }
  687|   519k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   519k|            return static_cast<T*>(s.m_p);
  689|   519k|        }
  690|   519k|        else {
  691|   519k|            return reinterpret_cast<T*>(s.m_fp);
  692|   519k|        }
  693|   519k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   452k|        {
  662|   452k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  75.1k|    {
  108|  75.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  75.1k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  75.1k|    {
   94|  75.1k|        iter_difference_t<I> counter{0};
   95|   183k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 108k, False: 75.1k]
  ------------------
   96|   108k|            ++i;
   97|   108k|            ++counter;
   98|   108k|        }
   99|  75.1k|        return counter;
  100|  75.1k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   685k|{
 1857|   685k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   685k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   685k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   685k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   685k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   685k|        if (sz < count) {
 1862|   685k|            return unexpected(eof_error::eof);
 1863|   685k|        }
 1864|       |
 1865|   685k|        return ranges::next(range.begin(), count);
 1866|   685k|    }
 1867|   685k|    else {
 1868|   685k|        auto it = range.begin();
 1869|   685k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 389k, False: 295k]
  ------------------
 1870|   389k|            return ranges::next(it, count);
 1871|   389k|        }
 1872|       |
 1873|  1.10M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 855k, False: 247k]
  ------------------
 1874|   855k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 47.5k, False: 808k]
  ------------------
 1875|  47.5k|                return unexpected(eof_error::eof);
 1876|  47.5k|            }
 1877|   855k|        }
 1878|       |
 1879|   247k|        return it;
 1880|   295k|    }
 1881|   685k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   685k|{
 1095|   685k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   685k|        return r.size();
 1097|   685k|    }
 1098|   685k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   685k|                           ranges::const_iterator_t<Range>,
 1100|   685k|                           typename detail::basic_scan_buffer<
 1101|   685k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   685k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   685k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   685k|        }
 1105|   685k|        else {
 1106|   685k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 685k, False: 0]
  ------------------
 1107|   685k|                return static_cast<size_t>(
 1108|   685k|                    r.begin().parent()->chars_available() -
 1109|   685k|                    r.begin().position());
 1110|   685k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   685k|        }
 1113|   685k|    }
 1114|   685k|    else {
 1115|   685k|        return 0;
 1116|   685k|    }
 1117|   685k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  84.7k|    {
 1780|  84.7k|        auto stdloc = loc.get<std::locale>();
 1781|  84.7k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  84.7k|        grouping = numpunct.grouping();
 1783|  84.7k|        thousands_sep =
 1784|  84.7k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 84.7k]
  ------------------
 1785|  84.7k|        decimal_point = numpunct.decimal_point();
 1786|  84.7k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  84.7k|{
 1717|  84.7k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 84.7k, False: 0]
  ------------------
 1718|  84.7k|        return std::use_facet<Facet>(stdloc);
 1719|  84.7k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  84.7k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   351k|{
 1846|   351k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 711, False: 350k]
  |  |  ------------------
  ------------------
 1847|    711|        return unexpected(e);
 1848|    711|    }
 1849|       |
 1850|   350k|    return ranges::next(range.begin());
 1851|   351k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   685k|{
  950|   685k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   685k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 682k]
  |  |  ------------------
  ------------------
  951|  2.74k|        return eof_error::eof;
  952|  2.74k|    }
  953|   682k|    return eof_error::good;
  954|   685k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   993k|{
  944|   993k|    return is_range_eof(r.begin(), r.end());
  945|   993k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   993k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   993k|    {
  937|   993k|        return begin == end;
  938|   993k|    }
  939|   993k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   350k|    {
  296|   350k|        ++x;
  297|   350k|        return x;
  298|   350k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   270k|{
 3141|   270k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   270k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 270k, False: 315]
  ------------------
 3143|   270k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 270k, False: 27]
  ------------------
 3144|   270k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   270k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   270k|    }
 3148|       |
 3149|    315|    auto& it = *r;
 3150|    315|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 276, False: 39]
  ------------------
 3151|    276|        return std::pair{it, sign_type::minus_sign};
 3152|    276|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    315|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   306k|{
 2272|   306k|    auto it = read_code_unit(range);
 2273|   306k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 345, False: 306k]
  |  |  ------------------
  ------------------
 2274|    345|        return unexpected(make_eof_parse_error(it.error()));
 2275|    345|    }
 2276|       |
 2277|   613k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 613k, False: 304k]
  ------------------
 2278|   613k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.43k, False: 610k]
  ------------------
 2279|  2.43k|            return *it;
 2280|  2.43k|        }
 2281|   613k|    }
 2282|       |
 2283|   304k|    return unexpected(parse_error::error);
 2284|   306k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   685k|{
 2231|   685k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   685k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   685k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   685k|        if (range.size() < str.size()) {
 2236|   685k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   685k|        }
 2238|   685k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   685k|            return unexpected(parse_error::error);
 2240|   685k|        }
 2241|   685k|        return ranges::next(range.begin(), str.size());
 2242|   685k|    }
 2243|   685k|    else {
 2244|   685k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   685k|            if (ch < 'A' || ch > 'Z') {
 2246|   685k|                return ch;
 2247|   685k|            }
 2248|   685k|            return static_cast<char_type>(ch +
 2249|   685k|                                          static_cast<char_type>('a' - 'A'));
 2250|   685k|        };
 2251|       |
 2252|   685k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   685k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   685k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   685k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   685k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.5k, False: 637k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  47.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  47.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  47.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  47.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  47.5k|    }                                                  \
  |  |  |  | 3642|   685k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   637k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   637k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   637k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   637k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 637k, False: 210]
  |  |  ------------------
  ------------------
 2257|   637k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   637k|                    return ascii_tolower(a) ==
 2259|   637k|                           static_cast<detail::char_t<Range>>(b);
 2260|   637k|                }))) {
 2261|   637k|            return unexpected(parse_error::error);
 2262|   637k|        }
 2263|       |
 2264|    210|        return it;
 2265|   637k|    }
 2266|   685k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   662k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   662k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 410k, False: 252k]
  |  Branch (2245:29): [True: 247k, False: 4.21k]
  ------------------
 2246|   657k|                return ch;
 2247|   657k|            }
 2248|  4.21k|            return static_cast<char_type>(ch +
 2249|  4.21k|                                          static_cast<char_type>('a' - 'A'));
 2250|   662k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  44.1k|{
 2146|  44.1k|    auto it = read_code_unit(range);
 2147|  44.1k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 366, False: 43.7k]
  |  |  ------------------
  ------------------
 2148|    366|        return unexpected(make_eof_parse_error(it.error()));
 2149|    366|    }
 2150|       |
 2151|  43.7k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.7k, False: 6]
  |  |  ------------------
  ------------------
 2152|  43.7k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  43.7k|        return unexpected(parse_error::error);
 2154|  43.7k|    }
 2155|       |
 2156|      6|    return *it;
 2157|  43.7k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   314k|{
 1996|   314k|    auto it = read_while_code_unit(range, pred);
 1997|   314k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 269k, False: 45.3k]
  ------------------
 1998|   269k|        return unexpected(parse_error::error);
 1999|   269k|    }
 2000|  45.3k|    return it;
 2001|   314k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  43.0k|    {
 1621|  43.0k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  43.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  43.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  43.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  43.0k|            m_storage.reset();
 1627|  43.0k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  43.0k|        }
 1629|  43.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  43.0k|                                          std::basic_string<CharT>>) {
 1631|  43.0k|            m_storage.emplace(SCN_FWD(range));
 1632|  43.0k|            m_view = string_view_type{*m_storage};
 1633|  43.0k|        }
 1634|  43.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  43.0k|                                          typename detail::basic_scan_buffer<
 1636|  43.0k|                                              value_t>::forward_iterator> &&
 1637|  43.0k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  43.0k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  43.0k|            auto end_seg = range.end().contiguous_segment();
 1640|  43.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.53k, False: 40.4k]
  |  |  ------------------
  ------------------
 1641|  43.0k|                             detail::to_address(end_seg.end()))) {
 1642|  2.53k|                auto& str = m_storage.emplace();
 1643|  2.53k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.53k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.53k|                m_view = string_view_type{str};
 1646|  2.53k|                return;
 1647|  2.53k|            }
 1648|       |
 1649|  40.4k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  40.4k|                                                            end_seg.data());
 1651|  40.4k|            m_storage.reset();
 1652|  40.4k|        }
 1653|  43.0k|        else {
 1654|  43.0k|            auto& str = m_storage.emplace();
 1655|  43.0k|            if constexpr (ranges::sized_range<Range>) {
 1656|  43.0k|                str.reserve(range.size());
 1657|  43.0k|            }
 1658|  43.0k|            if constexpr (ranges::common_range<Range>) {
 1659|  43.0k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  43.0k|                          std::back_inserter(str));
 1661|  43.0k|            }
 1662|  43.0k|            else {
 1663|  43.0k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  43.0k|                     ++it) {
 1665|  43.0k|                    str.push_back(*it);
 1666|  43.0k|                }
 1667|  43.0k|            }
 1668|  43.0k|            m_view = string_view_type{str};
 1669|  43.0k|        }
 1670|  43.0k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   600k|    {
 1582|   600k|        return m_view;
 1583|   600k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.07M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  30.7k|    {
 6080|  30.7k|        const bool need_skipped_width =
 6081|  30.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 30.7k]
  |  Branch (6081:33): [True: 0, False: 30.7k]
  ------------------
 6082|  30.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  30.7k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 30.7k]
  ------------------
 6085|  30.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 30.7k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  30.7k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 30.7k, False: 0]
  ------------------
 6090|  30.7k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 30.7k]
  ------------------
 6091|  30.7k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  30.7k|        return result_type{rng.begin(), 0};
 6115|  30.7k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   685k|{
 1857|   685k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   685k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   685k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   685k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   685k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   685k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 47.5k, False: 638k]
  ------------------
 1862|  47.5k|            return unexpected(eof_error::eof);
 1863|  47.5k|        }
 1864|       |
 1865|   638k|        return ranges::next(range.begin(), count);
 1866|   685k|    }
 1867|   685k|    else {
 1868|   685k|        auto it = range.begin();
 1869|   685k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   685k|            return ranges::next(it, count);
 1871|   685k|        }
 1872|       |
 1873|   685k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   685k|            if (it == range.end()) {
 1875|   685k|                return unexpected(eof_error::eof);
 1876|   685k|            }
 1877|   685k|        }
 1878|       |
 1879|   685k|        return it;
 1880|   685k|    }
 1881|   685k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   387k|{
 1899|   387k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   387k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   387k|    auto it = range.begin();
 1903|   387k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   387k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   387k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 387k, False: 0]
  ------------------
 1912|   387k|        ++it;
 1913|   387k|        return {it, string_type(1, *range.begin())};
 1914|   387k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   387k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.01M|{
  944|  1.01M|    return is_range_eof(r.begin(), r.end());
  945|  1.01M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.01M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.01M|    {
  937|  1.01M|        return begin == end;
  938|  1.01M|    }
  939|  1.01M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   148k|    {
  190|   148k|        i = std::move(bound);
  191|   148k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   387k|    {
 1890|   387k|        return !codepoint.empty();
 1891|   387k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   629k|{
  950|   629k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.27k, False: 627k]
  |  |  ------------------
  ------------------
  951|  2.27k|        return eof_error::eof;
  952|  2.27k|    }
  953|   627k|    return eof_error::good;
  954|   629k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   295k|{
 1846|   295k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 295k]
  |  |  ------------------
  ------------------
 1847|    240|        return unexpected(e);
 1848|    240|    }
 1849|       |
 1850|   295k|    return ranges::next(range.begin());
 1851|   295k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   295k|    {
  296|   295k|        ++x;
  297|   295k|        return x;
  298|   295k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   269k|{
 3141|   269k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   269k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 269k, False: 225]
  ------------------
 3143|   269k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 269k, False: 12]
  ------------------
 3144|   269k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   269k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   269k|    }
 3148|       |
 3149|    225|    auto& it = *r;
 3150|    225|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 186, False: 39]
  ------------------
 3151|    186|        return std::pair{it, sign_type::minus_sign};
 3152|    186|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    225|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   278k|{
 2272|   278k|    auto it = read_code_unit(range);
 2273|   278k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 278k]
  |  |  ------------------
  ------------------
 2274|    102|        return unexpected(make_eof_parse_error(it.error()));
 2275|    102|    }
 2276|       |
 2277|   556k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 556k, False: 277k]
  ------------------
 2278|   556k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.11k, False: 555k]
  ------------------
 2279|  1.11k|            return *it;
 2280|  1.11k|        }
 2281|   556k|    }
 2282|       |
 2283|   277k|    return unexpected(parse_error::error);
 2284|   278k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   685k|{
 2231|   685k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   685k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   685k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   685k|        if (range.size() < str.size()) {
 2236|   685k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   685k|        }
 2238|   685k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   685k|            return unexpected(parse_error::error);
 2240|   685k|        }
 2241|   685k|        return ranges::next(range.begin(), str.size());
 2242|   685k|    }
 2243|   685k|    else {
 2244|   685k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   685k|            if (ch < 'A' || ch > 'Z') {
 2246|   685k|                return ch;
 2247|   685k|            }
 2248|   685k|            return static_cast<char_type>(ch +
 2249|   685k|                                          static_cast<char_type>('a' - 'A'));
 2250|   685k|        };
 2251|       |
 2252|   685k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   685k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   685k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   685k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   685k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.5k, False: 638k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  47.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  47.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  47.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  47.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  47.5k|    }                                                  \
  |  |  |  | 3642|   685k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   638k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   638k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   638k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   638k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 637k, False: 210]
  |  |  ------------------
  ------------------
 2257|   638k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   638k|                    return ascii_tolower(a) ==
 2259|   638k|                           static_cast<detail::char_t<Range>>(b);
 2260|   638k|                }))) {
 2261|   637k|            return unexpected(parse_error::error);
 2262|   637k|        }
 2263|       |
 2264|    210|        return it;
 2265|   638k|    }
 2266|   685k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   662k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   662k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 410k, False: 252k]
  |  Branch (2245:29): [True: 248k, False: 4.21k]
  ------------------
 2246|   658k|                return ch;
 2247|   658k|            }
 2248|  4.21k|            return static_cast<char_type>(ch +
 2249|  4.21k|                                          static_cast<char_type>('a' - 'A'));
 2250|   662k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  16.8k|{
 2146|  16.8k|    auto it = read_code_unit(range);
 2147|  16.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 16.6k]
  |  |  ------------------
  ------------------
 2148|    138|        return unexpected(make_eof_parse_error(it.error()));
 2149|    138|    }
 2150|       |
 2151|  16.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 0]
  |  |  ------------------
  ------------------
 2152|  16.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  16.6k|        return unexpected(parse_error::error);
 2154|  16.6k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  16.6k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   137k|{
 1976|   137k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   137k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   137k|{
 1957|   137k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   137k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   137k|    }
 1960|   137k|    else {
 1961|   137k|        auto first = range.begin();
 1962|   137k|        for (; first != range.end(); ++first) {
 1963|   137k|            if (pred(*first)) {
 1964|   137k|                return first;
 1965|   137k|            }
 1966|   137k|        }
 1967|   137k|        return first;
 1968|   137k|    }
 1969|   137k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   270k|{
 2951|   270k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 270k, False: 0]
  ------------------
 2952|   270k|        auto it = read_while_classic_space(range);
 2953|   270k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   270k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 268k]
  |  |  ------------------
  ------------------
 2955|  1.93k|            return unexpected(e);
 2956|  1.93k|        }
 2957|       |
 2958|   268k|        return it;
 2959|   270k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   270k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   270k|{
 2117|   270k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   270k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   270k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   270k|        auto buf = make_contiguous_buffer(range);
 2121|   270k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   270k|        return ranges::next(range.begin(),
 2123|   270k|                            ranges::distance(buf.view().begin(), it));
 2124|   270k|    }
 2125|   270k|    else {
 2126|   270k|        auto it = range.begin();
 2127|       |
 2128|   270k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   270k|            auto seg = get_contiguous_beginning(range);
 2130|   270k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   270k|                seg_it != seg.end()) {
 2132|   270k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   270k|            }
 2134|   270k|            ranges::advance(it, seg.size());
 2135|   270k|        }
 2136|       |
 2137|   270k|        return read_while_code_point(
 2138|   270k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   270k|    }
 2140|   270k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   270k|{
 2082|   270k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   270k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   309k|{
 2061|   309k|    auto it = range.begin();
 2062|   414k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 387k, False: 26.9k]
  ------------------
 2063|   387k|        const auto val =
 2064|   387k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   387k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   387k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 387k, False: 0]
  |  |  ------------------
  ------------------
 2066|   387k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   387k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   387k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 282k, False: 104k]
  ------------------
 2069|   282k|                return it;
 2070|   282k|            }
 2071|   387k|        }
 2072|   104k|        it = val.iterator;
 2073|   104k|    }
 2074|       |
 2075|  26.9k|    return it;
 2076|   309k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   270k|    {
  754|   270k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   308k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   308k|              cvref<T> obj = *get<T>(fn);
  745|   308k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   308k|                  obj(static_cast<decltype(args)>(args)...);
  747|   308k|              }
  748|   308k|              else {
  749|   308k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   308k|              }
  751|   308k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   308k|    {
  684|   308k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   308k|            return static_cast<T*>(s.m_cp);
  686|   308k|        }
  687|   308k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   308k|            return static_cast<T*>(s.m_p);
  689|   308k|        }
  690|   308k|        else {
  691|   308k|            return reinterpret_cast<T*>(s.m_fp);
  692|   308k|        }
  693|   308k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   308k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   270k|        {
  662|   270k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   432k|    {
  304|   432k|        ranges::advance(x, n);
  305|   432k|        return x;
  306|   432k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   432k|    {
  268|   432k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   432k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   432k|    {
  181|  1.50M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.07M, False: 432k]
  ------------------
  182|  1.07M|            ++i;
  183|  1.07M|        }
  184|   432k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  68.7k|    {
 6179|  68.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.7k|            auto rd = make_reader<T, char_type>();
 6184|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  68.7k|                return unexpected(e);
 6186|  68.7k|            }
 6187|       |
 6188|  68.7k|            return impl(rd, range, value);
 6189|  68.7k|        }
 6190|  68.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  68.7k|            auto rd = make_reader<T, char_type>();
 6192|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  68.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 68.7k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  68.7k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  68.7k|                return impl(rd, range, value);
 6199|  68.7k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  68.7k|        else {
 6207|  68.7k|            SCN_EXPECT(false);
 6208|  68.7k|            SCN_UNREACHABLE;
 6209|  68.7k|        }
 6210|  68.7k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   412k|    {
 3040|   412k|        reader_error_handler eh{};
 3041|   412k|        get_derived().check_specs_impl(specs, eh);
 3042|   412k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   412k|        return {};
 3046|   412k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   412k|    {
 3051|   412k|        return static_cast<Derived&>(*this);
 3052|   412k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|   412k|    {
 4146|   412k|        detail::check_float_type_specs(specs, eh);
 4147|   412k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  68.7k|    {
 6121|  68.7k|        const bool need_skipped_width =
 6122|  68.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.7k]
  |  Branch (6122:33): [True: 0, False: 68.7k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 494, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    494|    }                                                  \
  |  |  |  | 3642|  68.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.2k|        auto [it, prefix_width] = prefix_result;
 6127|  68.2k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.2k|        std::ptrdiff_t value_width = 0;
 6131|  68.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.2k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.2k|        else {
 6147|  68.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.2k|                                             specs, value, loc));
 6149|       |
 6150|  10.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.2k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.2k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.2k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.1k, False: 94]
  ------------------
 6160|  10.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.1k|                                 value_width));
 6164|  10.1k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.1k|        }
 6166|       |
 6167|  10.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.2k|                                                 value_width, postfix_width);
 6169|  10.2k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.2k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.2k|        return it;
 6174|  10.2k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   602k|    {
 3035|   602k|        return true;
 3036|   602k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|   409k|    {
 4218|   409k|        unsigned options{};
 4219|   409k|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 84.7k, False: 325k]
  ------------------
 4220|  84.7k|            options |= float_reader_base::allow_thsep;
 4221|  84.7k|        }
 4222|       |
 4223|   409k|        SCN_GCC_COMPAT_PUSH
 4224|   409k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|   409k|        switch (specs.type) {
 4227|  85.0k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 85.0k, False: 324k]
  ------------------
 4228|  85.0k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  70.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 70.1k, False: 339k]
  ------------------
 4231|  70.1k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|  85.0k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 85.0k, False: 324k]
  ------------------
 4234|  85.0k|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|  84.8k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 84.8k, False: 324k]
  ------------------
 4237|  84.8k|                return options | float_reader_base::allow_scientific |
 4238|  84.8k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|  84.7k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 84.7k, False: 325k]
  ------------------
 4241|  84.7k|                return options | float_reader_base::allow_scientific |
 4242|  84.7k|                       float_reader_base::allow_fixed |
 4243|  84.7k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 409k]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|   409k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|   409k|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|   409k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|   409k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   536k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.07M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  68.9k|    {
 3692|  68.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  68.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  68.9k|        const std::ptrdiff_t sign_len =
 3695|  68.9k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 20, False: 68.9k]
  ------------------
 3696|       |
 3697|  68.9k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  68.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.8k, False: 28.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.8k|    }                                                  \
  |  |  |  | 3642|  68.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  28.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  68.9k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|   207k|    {
 4058|   207k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 207k, False: 0]
  ------------------
 4059|   207k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 207k, False: 0]
  ------------------
 4060|   207k|            return;
 4061|   207k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  96.1k|    {
 1587|  96.1k|        return m_storage.has_value();
 1588|  96.1k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  55.9k|    {
 1592|  55.9k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  55.9k|        return *m_storage;
 1594|  55.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  68.2k|    {
 4171|  68.2k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.2k|#if !SCN_DISABLE_LOCALE
 4174|  68.2k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.1k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.1k|#endif
 4183|       |
 4184|  54.1k|        return read_impl<Range>(
 4185|  54.1k|            range, rd,
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.1k|            },
 4189|  54.1k|            value);
 4190|  68.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  89.3k|    {
 4207|  89.3k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.0k, False: 14.3k]
  |  |  ------------------
  ------------------
 4209|  75.0k|            return unexpected(r.error());
 4210|  75.0k|        }
 4211|       |
 4212|  14.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    270|    }                                                  \
  |  |  |  | 3642|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.0k|        return ranges::next(range.begin(), n);
 4214|  14.3k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   268k|    {
  763|   268k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   268k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|  42.3k|    {
 3680|  42.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  42.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  42.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  42.3k|        return read_source_impl(range);
 3686|  42.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|   268k|    {
 3706|   268k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   268k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   268k|        auto it = sign_result.first;
 3709|   268k|        m_sign = sign_result.second;
 3710|       |
 3711|   268k|        auto digits_begin = it;
 3712|   268k|        auto r = ranges::subrange{it, range.end()};
 3713|   268k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   268k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   268k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|   268k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|   268k|                SCN_TRY_ASSIGN(
 3718|   268k|                    it,
 3719|   268k|                    do_read_source_impl(
 3720|   268k|                        r,
 3721|   268k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|   268k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|   268k|            }
 3724|   268k|            else {
 3725|   268k|                auto cb = [&](const auto& rr)
 3726|   268k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   268k|                    auto res = read_all(rr);
 3728|   268k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   268k|                        return unexpected_scan_error(
 3730|   268k|                            scan_error::invalid_scanned_value,
 3731|   268k|                            "Invalid float value");
 3732|   268k|                    }
 3733|   268k|                    return res;
 3734|   268k|                };
 3735|   268k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|   268k|            }
 3737|   268k|        }
 3738|   268k|        else {
 3739|   268k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 225k, False: 43.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|   225k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|   225k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|   225k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|   225k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|   225k|    }                                                  \
  |  | 3642|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  43.0k|                it,
 3741|  43.0k|                do_read_source_impl(
 3742|  43.0k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  43.0k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  43.0k|        }
 3745|       |
 3746|  43.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  43.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  43.0k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 43.0k, False: 0]
  |  Branch (3748:48): [True: 43.0k, False: 0]
  ------------------
 3749|  43.0k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 43.0k, False: 0]
  ------------------
 3750|  43.0k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 43.0k, False: 0]
  ------------------
 3751|  43.0k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  43.0k|        }
 3753|       |
 3754|  43.0k|        handle_separators();
 3755|       |
 3756|  43.0k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 43.0k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  43.0k|        return it;
 3769|  43.0k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|   268k|    {
 4001|   268k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   268k|        const bool allowed_nonhex =
 4003|   268k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   268k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   268k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 268k, False: 0]
  |  Branch (4006:45): [True: 0, False: 268k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   268k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 268k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   268k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 268k, False: 0]
  |  Branch (4015:45): [True: 0, False: 268k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   268k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 268k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   268k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 148k, False: 120k]
  |  Branch (4022:28): [True: 42.4k, False: 105k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  42.4k|            auto it = range.begin();
 4026|       |
 4027|  42.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 60, False: 42.4k]
  ------------------
 4028|     60|                m_kind = float_kind::hex_with_prefix;
 4029|     60|                it = *r;
 4030|     60|            }
 4031|  42.4k|            else {
 4032|  42.4k|                m_kind = float_kind::hex_without_prefix;
 4033|  42.4k|            }
 4034|       |
 4035|  42.4k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  42.4k|        }
 4037|   225k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 120k, False: 105k]
  |  Branch (4037:29): [True: 120k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   120k|            m_kind = float_kind::generic;
 4041|   120k|            return read_regular_float(range);
 4042|   120k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|   105k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 105k]
  |  |  ------------------
  ------------------
 4048|    150|            m_kind = float_kind::hex_with_prefix;
 4049|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    150|        }
 4051|       |
 4052|   105k|        m_kind = float_kind::generic;
 4053|   105k|        return read_regular(range);
 4054|   105k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|   268k|    {
 3812|   268k|        auto it = range.begin();
 3813|   268k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 268k, False: 0]
  ------------------
 3814|   268k|            return unexpected(r.error());
 3815|   268k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|   268k|    {
 3835|   268k|        auto it = range.begin();
 3836|   268k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 268k, False: 0]
  ------------------
 3837|   268k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   268k|                scan_error::invalid_scanned_value,
 3839|   268k|                "Invalid floating-point NaN value"));
 3840|   268k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|   148k|    {
 3805|   148k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   148k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|  42.6k|    {
 3905|  42.6k|        auto it = range.begin();
 3906|       |
 3907|  42.6k|        std::ptrdiff_t digits_count = 0;
 3908|  42.6k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|  42.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.6k, False: 8.00k]
  |  |  ------------------
  ------------------
 3910|  34.6k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  34.6k|                scan_error::invalid_scanned_value,
 3912|  34.6k|                "Invalid hexadecimal floating-point value"));
 3913|  34.6k|        }
 3914|  8.00k|        else {
 3915|  8.00k|            digits_count += ranges::distance(it, *r);
 3916|  8.00k|            it = *r;
 3917|  8.00k|        }
 3918|       |
 3919|  8.00k|        m_integral_part_length = digits_count;
 3920|  8.00k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 6, False: 7.99k]
  ------------------
 3921|  8.00k|                                             m_locale_options.decimal_point)) {
 3922|      6|            it = *r;
 3923|      6|        }
 3924|       |
 3925|  8.00k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 8.00k]
  ------------------
 3926|  8.00k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|  8.00k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  8.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.00k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|  8.00k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|  8.00k|        return it;
 3939|  8.00k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  50.6k|    {
 3790|  50.6k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.6k]
  |  |  |  Branch (859:45): [True: 0, False: 50.6k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  50.6k|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  50.6k|        return read_while1_code_unit(
 3799|  50.6k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  50.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  50.6k|    {
  754|  50.6k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  59.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.9k|              cvref<T> obj = *get<T>(fn);
  745|  59.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  59.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.9k|              }
  748|  59.9k|              else {
  749|  59.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.9k|              }
  751|  59.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  59.9k|    {
  684|  59.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  59.9k|            return static_cast<T*>(s.m_cp);
  686|  59.9k|        }
  687|  59.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  59.9k|            return static_cast<T*>(s.m_p);
  689|  59.9k|        }
  690|  59.9k|        else {
  691|  59.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  59.9k|        }
  693|  59.9k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3799|  59.9k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  50.6k|        {
  662|  50.6k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  36.3k|    {
 3877|  36.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 2.11k, False: 34.2k]
  ------------------
 3878|  2.11k|            auto beg_exp_it = range.begin();
 3879|  2.11k|            auto it = *r;
 3880|       |
 3881|  2.11k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 2.09k, False: 27]
  ------------------
 3882|  2.11k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  2.09k|                it = r_sign->first;
 3884|  2.09k|            }
 3885|       |
 3886|  2.11k|            if (auto r_exp = read_while1_code_unit(
 3887|  2.11k|                    ranges::subrange{it, range.end()},
 3888|  2.11k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  2.11k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 925, False: 1.19k]
  |  |  ------------------
  ------------------
 3890|    925|                it = beg_exp_it;
 3891|    925|            }
 3892|  1.19k|            else {
 3893|  1.19k|                it = *r_exp;
 3894|  1.19k|            }
 3895|       |
 3896|  2.11k|            return it;
 3897|  2.11k|        }
 3898|  34.2k|        return range.begin();
 3899|  36.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  2.11k|    {
  754|  2.11k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  4.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.57k|              cvref<T> obj = *get<T>(fn);
  745|  4.57k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.57k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.57k|              }
  748|  4.57k|              else {
  749|  4.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.57k|              }
  751|  4.57k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  4.57k|    {
  684|  4.57k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.57k|            return static_cast<T*>(s.m_cp);
  686|  4.57k|        }
  687|  4.57k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.57k|            return static_cast<T*>(s.m_p);
  689|  4.57k|        }
  690|  4.57k|        else {
  691|  4.57k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.57k|        }
  693|  4.57k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  4.57k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  2.11k|        {
  662|  2.11k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|   225k|    {
 3945|   225k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   225k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 183k, False: 42.5k]
  |  Branch (3946:50): [True: 35.0k, False: 148k]
  ------------------
 3947|       |
 3948|   225k|        auto it = ranges::begin(range);
 3949|   225k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   225k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   225k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 189k, False: 36.1k]
  |  |  ------------------
  ------------------
 3953|   189k|            return r.transform_error(
 3954|   189k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|   189k|                                              "Invalid floating-point value"));
 3956|   189k|        }
 3957|  36.1k|        else {
 3958|  36.1k|            digits_count += ranges::distance(it, *r);
 3959|  36.1k|            it = *r;
 3960|  36.1k|        }
 3961|       |
 3962|  36.1k|        m_integral_part_length = digits_count;
 3963|  36.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 36.1k]
  ------------------
 3964|  36.1k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  36.1k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 36.1k]
  ------------------
 3969|  36.1k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  36.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  36.1k|        auto beg_exp_it = it;
 3980|  36.1k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 28.3k, False: 7.72k]
  ------------------
 3981|  28.3k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  28.3k|        }
 3983|  36.1k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 1.32k, False: 34.7k]
  |  Branch (3983:29): [True: 1.11k, False: 210]
  ------------------
 3984|  1.11k|            return unexpected_scan_error(
 3985|  1.11k|                scan_error::invalid_scanned_value,
 3986|  1.11k|                "No exponent given to scientific float");
 3987|  1.11k|        }
 3988|       |
 3989|  34.9k|        m_kind =
 3990|  34.9k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 33.8k, False: 1.17k]
  ------------------
 3991|       |
 3992|  34.9k|        return it;
 3993|  36.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|   261k|    {
 3775|   261k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 261k]
  |  |  |  Branch (859:45): [True: 0, False: 261k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   261k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   261k|        return read_while1_code_unit(
 3784|   261k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   261k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   261k|    {
  754|   261k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   298k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   298k|              cvref<T> obj = *get<T>(fn);
  745|   298k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   298k|                  obj(static_cast<decltype(args)>(args)...);
  747|   298k|              }
  748|   298k|              else {
  749|   298k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   298k|              }
  751|   298k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   298k|    {
  684|   298k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   298k|            return static_cast<T*>(s.m_cp);
  686|   298k|        }
  687|   298k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   298k|            return static_cast<T*>(s.m_p);
  689|   298k|        }
  690|   298k|        else {
  691|   298k|            return reinterpret_cast<T*>(s.m_fp);
  692|   298k|        }
  693|   298k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3784|   298k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   261k|        {
  662|   261k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  43.0k|    {
 1577|  43.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  43.0k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  54.1k|    {
  754|  54.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  54.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.1k|              cvref<T> obj = *get<T>(fn);
  745|  54.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.1k|              }
  748|  54.1k|              else {
  749|  54.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.1k|              }
  751|  54.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.1k|    {
  684|  54.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.1k|            return static_cast<T*>(s.m_cp);
  686|  54.1k|        }
  687|  54.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.1k|            return static_cast<T*>(s.m_p);
  689|  54.1k|        }
  690|  54.1k|        else {
  691|  54.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.1k|        }
  693|  54.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.1k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|   226k|    {
 3666|   226k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   226k|        return read_source_impl(range);
 3672|   226k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  54.1k|        {
  662|  54.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  68.2k|    {
 4171|  68.2k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.2k|#if !SCN_DISABLE_LOCALE
 4174|  68.2k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.1k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.1k|#endif
 4183|       |
 4184|  54.1k|        return read_impl<Range>(
 4185|  54.1k|            range, rd,
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.1k|            },
 4189|  54.1k|            value);
 4190|  68.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  89.4k|    {
 4207|  89.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.7k, False: 54.6k]
  |  |  ------------------
  ------------------
 4209|  34.7k|            return unexpected(r.error());
 4210|  34.7k|        }
 4211|       |
 4212|  54.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.5k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.5k|    }                                                  \
  |  |  |  | 3642|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.1k|        return ranges::next(range.begin(), n);
 4214|  54.6k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   268k|    {
  763|   268k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   268k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|  42.4k|    {
 3680|  42.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  42.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  42.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 42.4k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  42.4k|        return read_source_impl(range);
 3686|  42.4k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|   268k|    {
 3706|   268k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   268k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   268k|        auto it = sign_result.first;
 3709|   268k|        m_sign = sign_result.second;
 3710|       |
 3711|   268k|        auto digits_begin = it;
 3712|   268k|        auto r = ranges::subrange{it, range.end()};
 3713|   268k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   268k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   268k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  |  Branch (859:45): [True: 0, False: 268k]
  |  |  |  Branch (859:45): [True: 0, False: 268k]
  |  |  ------------------
  ------------------
 3716|   268k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|   268k|            else {
 3725|   268k|                auto cb = [&](const auto& rr)
 3726|   268k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   268k|                    auto res = read_all(rr);
 3728|   268k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   268k|                        return unexpected_scan_error(
 3730|   268k|                            scan_error::invalid_scanned_value,
 3731|   268k|                            "Invalid float value");
 3732|   268k|                    }
 3733|   268k|                    return res;
 3734|   268k|                };
 3735|   268k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 104k, False: 164k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|   104k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|   104k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|   104k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|   104k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|   104k|    }                                                  \
  |  | 3642|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|   164k|            }
 3737|   268k|        }
 3738|   164k|        else {
 3739|   164k|            SCN_TRY_ASSIGN(
 3740|   164k|                it,
 3741|   164k|                do_read_source_impl(
 3742|   164k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|   164k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|   164k|        }
 3745|       |
 3746|   164k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|   164k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 164k, False: 0]
  |  Branch (3748:48): [True: 164k, False: 0]
  ------------------
 3749|   164k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 164k, False: 0]
  ------------------
 3750|   164k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 164k, False: 0]
  ------------------
 3751|   164k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|   164k|        }
 3753|       |
 3754|   164k|        handle_separators();
 3755|       |
 3756|   164k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 164k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|   164k|        return it;
 3769|   164k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|   268k|    {
 3812|   268k|        auto it = range.begin();
 3813|   268k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 268k, False: 0]
  ------------------
 3814|   268k|            return unexpected(r.error());
 3815|   268k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|   268k|    {
 3835|   268k|        auto it = range.begin();
 3836|   268k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 268k, False: 0]
  ------------------
 3837|   268k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   268k|                scan_error::invalid_scanned_value,
 3839|   268k|                "Invalid floating-point NaN value"));
 3840|   268k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|   148k|    {
 3805|   148k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   148k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   137k|{
 1996|   137k|    auto it = read_while_code_unit(range, pred);
 1997|   137k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 120k, False: 17.3k]
  ------------------
 1998|   120k|        return unexpected(parse_error::error);
 1999|   120k|    }
 2000|  17.3k|    return it;
 2001|   137k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|  9.09k|    {
 3877|  9.09k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 890, False: 8.20k]
  ------------------
 3878|    890|            auto beg_exp_it = range.begin();
 3879|    890|            auto it = *r;
 3880|       |
 3881|    890|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 878, False: 12]
  ------------------
 3882|    890|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|    878|                it = r_sign->first;
 3884|    878|            }
 3885|       |
 3886|    890|            if (auto r_exp = read_while1_code_unit(
 3887|    890|                    ranges::subrange{it, range.end()},
 3888|    890|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|    890|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|    890|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 404, False: 486]
  |  |  ------------------
  ------------------
 3890|    404|                it = beg_exp_it;
 3891|    404|            }
 3892|    486|            else {
 3893|    486|                it = *r_exp;
 3894|    486|            }
 3895|       |
 3896|    890|            return it;
 3897|    890|        }
 3898|  8.20k|        return range.begin();
 3899|  9.09k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|    890|    {
  754|    890|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  1.86k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.86k|              cvref<T> obj = *get<T>(fn);
  745|  1.86k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.86k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.86k|              }
  748|  1.86k|              else {
  749|  1.86k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.86k|              }
  751|  1.86k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  1.86k|    {
  684|  1.86k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.86k|            return static_cast<T*>(s.m_cp);
  686|  1.86k|        }
  687|  1.86k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.86k|            return static_cast<T*>(s.m_p);
  689|  1.86k|        }
  690|  1.86k|        else {
  691|  1.86k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.86k|        }
  693|  1.86k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  1.86k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|    890|        {
  662|    890|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   120k|    {
 3945|   120k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   120k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 77.5k, False: 42.5k]
  |  Branch (3946:50): [True: 35.0k, False: 42.4k]
  ------------------
 3947|       |
 3948|   120k|        auto it = ranges::begin(range);
 3949|   120k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   120k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   120k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 16.8k]
  |  |  ------------------
  ------------------
 3953|   103k|            return r.transform_error(
 3954|   103k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|   103k|                                              "Invalid floating-point value"));
 3956|   103k|        }
 3957|  16.8k|        else {
 3958|  16.8k|            digits_count += ranges::distance(it, *r);
 3959|  16.8k|            it = *r;
 3960|  16.8k|        }
 3961|       |
 3962|  16.8k|        m_integral_part_length = digits_count;
 3963|  16.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 16.8k]
  ------------------
 3964|  16.8k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  16.8k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 16.8k]
  ------------------
 3969|  16.8k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  16.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  16.8k|        auto beg_exp_it = it;
 3980|  16.8k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 9.09k, False: 7.72k]
  ------------------
 3981|  9.09k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  9.09k|        }
 3983|  16.8k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 1.32k, False: 15.5k]
  |  Branch (3983:29): [True: 1.11k, False: 210]
  ------------------
 3984|  1.11k|            return unexpected_scan_error(
 3985|  1.11k|                scan_error::invalid_scanned_value,
 3986|  1.11k|                "No exponent given to scientific float");
 3987|  1.11k|        }
 3988|       |
 3989|  15.7k|        m_kind =
 3990|  15.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 15.2k, False: 486]
  ------------------
 3991|       |
 3992|  15.7k|        return it;
 3993|  16.8k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|   136k|    {
 3775|   136k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 136k]
  |  |  |  Branch (859:45): [True: 0, False: 136k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   136k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   136k|        return read_while1_code_unit(
 3784|   136k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   136k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   136k|    {
  754|   136k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   154k|    {
  684|   154k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   154k|            return static_cast<T*>(s.m_cp);
  686|   154k|        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   154k|            return static_cast<T*>(s.m_p);
  689|   154k|        }
  690|   154k|        else {
  691|   154k|            return reinterpret_cast<T*>(s.m_fp);
  692|   154k|        }
  693|   154k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|   154k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   136k|        {
  662|   136k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|   268k|    {
 4001|   268k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   268k|        const bool allowed_nonhex =
 4003|   268k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   268k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   268k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 268k, False: 0]
  |  Branch (4006:45): [True: 0, False: 268k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   268k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 268k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   268k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 268k, False: 0]
  |  Branch (4015:45): [True: 0, False: 268k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   268k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 268k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   268k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 148k, False: 120k]
  |  Branch (4022:28): [True: 42.5k, False: 106k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  42.5k|            auto it = range.begin();
 4026|       |
 4027|  42.5k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 60, False: 42.4k]
  ------------------
 4028|     60|                m_kind = float_kind::hex_with_prefix;
 4029|     60|                it = *r;
 4030|     60|            }
 4031|  42.4k|            else {
 4032|  42.4k|                m_kind = float_kind::hex_without_prefix;
 4033|  42.4k|            }
 4034|       |
 4035|  42.5k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  42.5k|        }
 4037|   226k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 120k, False: 106k]
  |  Branch (4037:29): [True: 120k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   120k|            m_kind = float_kind::generic;
 4041|   120k|            return read_regular_float(range);
 4042|   120k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|   106k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 105k]
  |  |  ------------------
  ------------------
 4048|    150|            m_kind = float_kind::hex_with_prefix;
 4049|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    150|        }
 4051|       |
 4052|   105k|        m_kind = float_kind::generic;
 4053|   105k|        return read_regular(range);
 4054|   106k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|   148k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   148k|                    auto res = read_all(rr);
 3728|   148k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 148k]
  |  |  ------------------
  ------------------
 3729|     63|                        return unexpected_scan_error(
 3730|     63|                            scan_error::invalid_scanned_value,
 3731|     63|                            "Invalid float value");
 3732|     63|                    }
 3733|   148k|                    return res;
 3734|   148k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   148k|{
 1839|   148k|    return ranges::next(range.begin(), range.end());
 1840|   148k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   148k|    {
  313|   148k|        ranges::advance(x, bound);
  314|   148k|        return x;
  315|   148k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   148k|    {
  275|   148k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   148k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   164k|    {
 1577|   164k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   164k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   164k|    {
 1621|   164k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   164k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   164k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   164k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   164k|            m_storage.reset();
 1627|   164k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   164k|        }
 1629|   164k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   164k|                                          std::basic_string<CharT>>) {
 1631|   164k|            m_storage.emplace(SCN_FWD(range));
 1632|   164k|            m_view = string_view_type{*m_storage};
 1633|   164k|        }
 1634|   164k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   164k|                                          typename detail::basic_scan_buffer<
 1636|   164k|                                              value_t>::forward_iterator> &&
 1637|   164k|                           ranges::common_range<Range>) {
 1638|   164k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   164k|            auto end_seg = range.end().contiguous_segment();
 1640|   164k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   164k|                             detail::to_address(end_seg.end()))) {
 1642|   164k|                auto& str = m_storage.emplace();
 1643|   164k|                str.reserve(range.end().position() - range.begin().position());
 1644|   164k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   164k|                m_view = string_view_type{str};
 1646|   164k|                return;
 1647|   164k|            }
 1648|       |
 1649|   164k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   164k|                                                            end_seg.data());
 1651|   164k|            m_storage.reset();
 1652|   164k|        }
 1653|   164k|        else {
 1654|   164k|            auto& str = m_storage.emplace();
 1655|   164k|            if constexpr (ranges::sized_range<Range>) {
 1656|   164k|                str.reserve(range.size());
 1657|   164k|            }
 1658|   164k|            if constexpr (ranges::common_range<Range>) {
 1659|   164k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   164k|                          std::back_inserter(str));
 1661|   164k|            }
 1662|   164k|            else {
 1663|   164k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   164k|                     ++it) {
 1665|   164k|                    str.push_back(*it);
 1666|   164k|                }
 1667|   164k|            }
 1668|   164k|            m_view = string_view_type{str};
 1669|   164k|        }
 1670|   164k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  54.1k|    {
  754|  54.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  54.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.1k|              cvref<T> obj = *get<T>(fn);
  745|  54.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.1k|              }
  748|  54.1k|              else {
  749|  54.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.1k|              }
  751|  54.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.1k|    {
  684|  54.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.1k|            return static_cast<T*>(s.m_cp);
  686|  54.1k|        }
  687|  54.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.1k|            return static_cast<T*>(s.m_p);
  689|  54.1k|        }
  690|  54.1k|        else {
  691|  54.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.1k|        }
  693|  54.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.1k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|   226k|    {
 3666|   226k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   226k|        return read_source_impl(range);
 3672|   226k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  54.1k|        {
  662|  54.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  68.7k|    {
 6179|  68.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.7k|            auto rd = make_reader<T, char_type>();
 6184|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  68.7k|                return unexpected(e);
 6186|  68.7k|            }
 6187|       |
 6188|  68.7k|            return impl(rd, range, value);
 6189|  68.7k|        }
 6190|  68.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  68.7k|            auto rd = make_reader<T, char_type>();
 6192|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  68.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 68.7k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  68.7k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  68.7k|                return impl(rd, range, value);
 6199|  68.7k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  68.7k|        else {
 6207|  68.7k|            SCN_EXPECT(false);
 6208|  68.7k|            SCN_UNREACHABLE;
 6209|  68.7k|        }
 6210|  68.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  68.7k|    {
 6121|  68.7k|        const bool need_skipped_width =
 6122|  68.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.7k]
  |  Branch (6122:33): [True: 0, False: 68.7k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 516, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    516|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    516|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    516|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    516|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    516|    }                                                  \
  |  |  |  | 3642|  68.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.2k|        auto [it, prefix_width] = prefix_result;
 6127|  68.2k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.2k|        std::ptrdiff_t value_width = 0;
 6131|  68.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.2k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.2k|        else {
 6147|  68.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.3k|                                             specs, value, loc));
 6149|       |
 6150|  10.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.3k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.3k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.3k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.2k, False: 100]
  ------------------
 6160|  10.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.2k|                                 value_width));
 6164|  10.2k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.2k|        }
 6166|       |
 6167|  10.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.3k|                                                 value_width, postfix_width);
 6169|  10.3k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.3k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.3k|        return it;
 6174|  10.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  69.0k|    {
 3692|  69.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  69.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  69.0k|        const std::ptrdiff_t sign_len =
 3695|  69.0k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 20, False: 69.0k]
  ------------------
 3696|       |
 3697|  69.0k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  69.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  69.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  69.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 28.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.6k|    }                                                  \
  |  |  |  | 3642|  69.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  28.3k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  69.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  68.2k|    {
 4171|  68.2k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.2k|#if !SCN_DISABLE_LOCALE
 4174|  68.2k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.1k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.1k|#endif
 4183|       |
 4184|  54.1k|        return read_impl<Range>(
 4185|  54.1k|            range, rd,
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.1k|            },
 4189|  54.1k|            value);
 4190|  68.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  89.4k|    {
 4207|  89.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.1k, False: 14.3k]
  |  |  ------------------
  ------------------
 4209|  75.1k|            return unexpected(r.error());
 4210|  75.1k|        }
 4211|       |
 4212|  14.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 159, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    159|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    159|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    159|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    159|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    159|    }                                                  \
  |  |  |  | 3642|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.1k|        return ranges::next(range.begin(), n);
 4214|  14.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  54.1k|    {
  754|  54.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  54.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.1k|              cvref<T> obj = *get<T>(fn);
  745|  54.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.1k|              }
  748|  54.1k|              else {
  749|  54.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.1k|              }
  751|  54.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.1k|    {
  684|  54.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.1k|            return static_cast<T*>(s.m_cp);
  686|  54.1k|        }
  687|  54.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.1k|            return static_cast<T*>(s.m_p);
  689|  54.1k|        }
  690|  54.1k|        else {
  691|  54.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.1k|        }
  693|  54.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  54.1k|        {
  662|  54.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  68.3k|    {
 4171|  68.3k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.3k|#if !SCN_DISABLE_LOCALE
 4174|  68.3k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.1k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.1k|#endif
 4183|       |
 4184|  54.1k|        return read_impl<Range>(
 4185|  54.1k|            range, rd,
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.1k|            },
 4189|  54.1k|            value);
 4190|  68.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  89.4k|    {
 4207|  89.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.7k, False: 54.7k]
  |  |  ------------------
  ------------------
 4209|  34.7k|            return unexpected(r.error());
 4210|  34.7k|        }
 4211|       |
 4212|  54.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.5k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.5k|    }                                                  \
  |  |  |  | 3642|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.2k|        return ranges::next(range.begin(), n);
 4214|  54.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  54.1k|    {
  754|  54.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  54.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.1k|              cvref<T> obj = *get<T>(fn);
  745|  54.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.1k|              }
  748|  54.1k|              else {
  749|  54.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.1k|              }
  751|  54.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.1k|    {
  684|  54.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.1k|            return static_cast<T*>(s.m_cp);
  686|  54.1k|        }
  687|  54.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.1k|            return static_cast<T*>(s.m_p);
  689|  54.1k|        }
  690|  54.1k|        else {
  691|  54.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.1k|        }
  693|  54.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  54.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  54.1k|        {
  662|  54.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  68.8k|    {
 6179|  68.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.8k|            auto rd = make_reader<T, char_type>();
 6184|  68.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  68.8k|                return unexpected(e);
 6186|  68.8k|            }
 6187|       |
 6188|  68.8k|            return impl(rd, range, value);
 6189|  68.8k|        }
 6190|  68.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  68.8k|            auto rd = make_reader<T, char_type>();
 6192|  68.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.8k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  68.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 68.8k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  68.8k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  68.8k|                return impl(rd, range, value);
 6199|  68.8k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  68.8k|        else {
 6207|  68.8k|            SCN_EXPECT(false);
 6208|  68.8k|            SCN_UNREACHABLE;
 6209|  68.8k|        }
 6210|  68.8k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  68.8k|    {
 6121|  68.8k|        const bool need_skipped_width =
 6122|  68.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.8k]
  |  Branch (6122:33): [True: 0, False: 68.8k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.8k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 68.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    522|    }                                                  \
  |  |  |  | 3642|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.3k|        auto [it, prefix_width] = prefix_result;
 6127|  68.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.3k|        std::ptrdiff_t value_width = 0;
 6131|  68.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.3k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.3k|        else {
 6147|  68.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.4k|                                             specs, value, loc));
 6149|       |
 6150|  10.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.4k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.4k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.4k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.3k, False: 100]
  ------------------
 6160|  10.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.3k|                                 value_width));
 6164|  10.3k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.3k|        }
 6166|       |
 6167|  10.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.4k|                                                 value_width, postfix_width);
 6169|  10.4k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.4k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.4k|        return it;
 6174|  10.4k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  69.1k|    {
 3692|  69.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  69.1k|        const std::ptrdiff_t sign_len =
 3695|  69.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 20, False: 69.1k]
  ------------------
 3696|       |
 3697|  69.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  69.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  69.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  69.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.4k, False: 28.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.4k|    }                                                  \
  |  |  |  | 3642|  69.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  28.6k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  69.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  68.3k|    {
 4171|  68.3k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.3k|#if !SCN_DISABLE_LOCALE
 4174|  68.3k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.2k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.2k|#endif
 4183|       |
 4184|  54.2k|        return read_impl<Range>(
 4185|  54.2k|            range, rd,
 4186|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.2k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.2k|            },
 4189|  54.2k|            value);
 4190|  68.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  89.5k|    {
 4207|  89.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 14.3k]
  |  |  ------------------
  ------------------
 4209|  75.2k|            return unexpected(r.error());
 4210|  75.2k|        }
 4211|       |
 4212|  14.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.3k|        return ranges::next(range.begin(), n);
 4214|  14.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  54.2k|    {
  754|  54.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  54.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.2k|              cvref<T> obj = *get<T>(fn);
  745|  54.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.2k|              }
  748|  54.2k|              else {
  749|  54.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.2k|              }
  751|  54.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.2k|    {
  684|  54.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.2k|            return static_cast<T*>(s.m_cp);
  686|  54.2k|        }
  687|  54.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.2k|            return static_cast<T*>(s.m_p);
  689|  54.2k|        }
  690|  54.2k|        else {
  691|  54.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.2k|        }
  693|  54.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  54.2k|        {
  662|  54.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  68.3k|    {
 4171|  68.3k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  68.3k|#if !SCN_DISABLE_LOCALE
 4174|  68.3k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 14.1k, False: 54.2k]
  ------------------
 4175|  14.1k|            return read_impl<Range>(
 4176|  14.1k|                range, rd,
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  14.1k|                },
 4180|  14.1k|                value, loc);
 4181|  14.1k|        }
 4182|  54.2k|#endif
 4183|       |
 4184|  54.2k|        return read_impl<Range>(
 4185|  54.2k|            range, rd,
 4186|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.2k|                return r.read_source(SCN_FWD(args)...);
 4188|  54.2k|            },
 4189|  54.2k|            value);
 4190|  68.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  89.6k|    {
 4207|  89.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  89.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  89.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 54.8k]
  |  |  ------------------
  ------------------
 4209|  34.8k|            return unexpected(r.error());
 4210|  34.8k|        }
 4211|       |
 4212|  54.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  54.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.4k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  40.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  40.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  40.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  40.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  40.4k|    }                                                  \
  |  |  |  | 3642|  54.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  14.3k|        return ranges::next(range.begin(), n);
 4214|  54.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.1k|    {
  754|  14.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|  14.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.1k|              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|  14.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.1k|            return static_cast<T*>(s.m_cp);
  686|  14.1k|        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|  14.1k|        }
  690|  14.1k|        else {
  691|  14.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.1k|        }
  693|  14.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  14.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  14.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  14.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.1k|        {
  662|  14.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  54.2k|    {
  754|  54.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  54.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.2k|              cvref<T> obj = *get<T>(fn);
  745|  54.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.2k|              }
  748|  54.2k|              else {
  749|  54.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.2k|              }
  751|  54.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  54.2k|    {
  684|  54.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.2k|            return static_cast<T*>(s.m_cp);
  686|  54.2k|        }
  687|  54.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.2k|            return static_cast<T*>(s.m_p);
  689|  54.2k|        }
  690|  54.2k|        else {
  691|  54.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.2k|        }
  693|  54.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  54.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  54.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  54.2k|        {
  662|  54.2k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   270k|{
 2061|   270k|    auto it = range.begin();
 2062|   310k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 308k, False: 1.93k]
  ------------------
 2063|   308k|        const auto val =
 2064|   308k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   308k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   308k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 308k, False: 0]
  |  |  ------------------
  ------------------
 2066|   308k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   308k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   308k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 268k, False: 39.9k]
  ------------------
 2069|   268k|                return it;
 2070|   268k|            }
 2071|   308k|        }
 2072|  39.9k|        it = val.iterator;
 2073|  39.9k|    }
 2074|       |
 2075|  1.93k|    return it;
 2076|   270k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   308k|{
 1899|   308k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   308k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   308k|    auto it = range.begin();
 1903|   308k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   308k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   308k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 308k, False: 0]
  ------------------
 1912|   308k|        ++it;
 1913|   308k|        return {it, string_type(1, *range.begin())};
 1914|   308k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   308k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   308k|    {
 1890|   308k|        return !codepoint.empty();
 1891|   308k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   270k|{
 2082|   270k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   270k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   270k|{
 2951|   270k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 270k, False: 0]
  ------------------
 2952|   270k|        auto it = read_while_classic_space(range);
 2953|   270k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   270k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 268k]
  |  |  ------------------
  ------------------
 2955|  1.93k|            return unexpected(e);
 2956|  1.93k|        }
 2957|       |
 2958|   268k|        return it;
 2959|   270k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   270k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   270k|{
 2117|   270k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   270k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   270k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   270k|        auto buf = make_contiguous_buffer(range);
 2121|   270k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   270k|        return ranges::next(range.begin(),
 2123|   270k|                            ranges::distance(buf.view().begin(), it));
 2124|   270k|    }
 2125|   270k|    else {
 2126|   270k|        auto it = range.begin();
 2127|       |
 2128|   270k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   270k|            auto seg = get_contiguous_beginning(range);
 2130|   270k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   270k|                seg_it != seg.end()) {
 2132|   270k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   270k|            }
 2134|   270k|            ranges::advance(it, seg.size());
 2135|   270k|        }
 2136|       |
 2137|   270k|        return read_while_code_point(
 2138|   270k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   270k|    }
 2140|   270k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   270k|    {
  754|   270k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   308k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   308k|              cvref<T> obj = *get<T>(fn);
  745|   308k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   308k|                  obj(static_cast<decltype(args)>(args)...);
  747|   308k|              }
  748|   308k|              else {
  749|   308k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   308k|              }
  751|   308k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   308k|    {
  684|   308k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   308k|            return static_cast<T*>(s.m_cp);
  686|   308k|        }
  687|   308k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   308k|            return static_cast<T*>(s.m_p);
  689|   308k|        }
  690|   308k|        else {
  691|   308k|            return reinterpret_cast<T*>(s.m_fp);
  692|   308k|        }
  693|   308k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   308k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   270k|        {
  662|   270k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.06M|{
 2088|  2.06M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.06M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.06M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.06M|        auto buf = make_contiguous_buffer(range);
 2092|  2.06M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.06M|        return ranges::next(range.begin(),
 2094|  2.06M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.06M|    }
 2096|  2.06M|    else {
 2097|  2.06M|        auto it = range.begin();
 2098|       |
 2099|  2.06M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.06M|            auto seg = get_contiguous_beginning(range);
 2101|  2.06M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.06M|                seg_it != seg.end()) {
 2103|  2.06M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.06M|            }
 2105|  2.06M|            ranges::advance(it, seg.size());
 2106|  2.06M|        }
 2107|       |
 2108|  2.06M|        return read_until_code_point(
 2109|  2.06M|            ranges::subrange{it, range.end()},
 2110|  2.06M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.06M|    }
 2112|  2.06M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.06M|{
 1683|  2.06M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.06M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.06M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.06M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.06M|    }
 1688|  2.06M|    else {
 1689|  2.06M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.06M|    }
 1691|  2.06M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.06M|    {
 1490|  2.06M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.06M|    {
 1577|  2.06M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.06M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.06M|    {
 1621|  2.06M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.06M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.06M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.06M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.06M|            m_storage.reset();
 1627|  2.06M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.06M|        }
 1629|  2.06M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.06M|                                          std::basic_string<CharT>>) {
 1631|  2.06M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.06M|            m_view = string_view_type{*m_storage};
 1633|  2.06M|        }
 1634|  2.06M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.06M|                                          typename detail::basic_scan_buffer<
 1636|  2.06M|                                              value_t>::forward_iterator> &&
 1637|  2.06M|                           ranges::common_range<Range>) {
 1638|  2.06M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.06M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.06M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.06M|                             detail::to_address(end_seg.end()))) {
 1642|  2.06M|                auto& str = m_storage.emplace();
 1643|  2.06M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.06M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.06M|                m_view = string_view_type{str};
 1646|  2.06M|                return;
 1647|  2.06M|            }
 1648|       |
 1649|  2.06M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.06M|                                                            end_seg.data());
 1651|  2.06M|            m_storage.reset();
 1652|  2.06M|        }
 1653|  2.06M|        else {
 1654|  2.06M|            auto& str = m_storage.emplace();
 1655|  2.06M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.06M|                str.reserve(range.size());
 1657|  2.06M|            }
 1658|  2.06M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.06M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.06M|                          std::back_inserter(str));
 1661|  2.06M|            }
 1662|  2.06M|            else {
 1663|  2.06M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.06M|                     ++it) {
 1665|  2.06M|                    str.push_back(*it);
 1666|  2.06M|                }
 1667|  2.06M|            }
 1668|  2.06M|            m_view = string_view_type{str};
 1669|  2.06M|        }
 1670|  2.06M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4100|  1.40M|    {
 4101|  1.40M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 170k, False: 1.23M]
  ------------------
 4102|   170k|            return std::copysign(value, T{-1.0});
 4103|   170k|        }
 4104|  1.23M|        return std::copysign(value, T{1.0});
 4105|  1.40M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  38.6k|{
 2088|  38.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  38.6k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  38.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  38.6k|        auto buf = make_contiguous_buffer(range);
 2092|  38.6k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  38.6k|        return ranges::next(range.begin(),
 2094|  38.6k|                            ranges::distance(buf.view().begin(), it));
 2095|  38.6k|    }
 2096|  38.6k|    else {
 2097|  38.6k|        auto it = range.begin();
 2098|       |
 2099|  38.6k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  38.6k|            auto seg = get_contiguous_beginning(range);
 2101|  38.6k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  38.6k|                seg_it != seg.end()) {
 2103|  38.6k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  38.6k|            }
 2105|  38.6k|            ranges::advance(it, seg.size());
 2106|  38.6k|        }
 2107|       |
 2108|  38.6k|        return read_until_code_point(
 2109|  38.6k|            ranges::subrange{it, range.end()},
 2110|  38.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  38.6k|    }
 2112|  38.6k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  38.6k|    {
  754|  38.6k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  78.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.5k|              cvref<T> obj = *get<T>(fn);
  745|  78.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  78.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.5k|              }
  748|  78.5k|              else {
  749|  78.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.5k|              }
  751|  78.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  78.5k|    {
  684|  78.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  78.5k|            return static_cast<T*>(s.m_cp);
  686|  78.5k|        }
  687|  78.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  78.5k|            return static_cast<T*>(s.m_p);
  689|  78.5k|        }
  690|  78.5k|        else {
  691|  78.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  78.5k|        }
  693|  78.5k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  78.5k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  38.6k|        {
  662|  38.6k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  38.6k|    {
 1577|  38.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  38.6k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  38.6k|    {
 1621|  38.6k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  38.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  38.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  38.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  38.6k|            m_storage.reset();
 1627|  38.6k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  38.6k|        }
 1629|  38.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  38.6k|                                          std::basic_string<CharT>>) {
 1631|  38.6k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  38.6k|            m_view = string_view_type{*m_storage};
 1633|  38.6k|        }
 1634|  38.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  38.6k|                                          typename detail::basic_scan_buffer<
 1636|  38.6k|                                              value_t>::forward_iterator> &&
 1637|  38.6k|                           ranges::common_range<Range>) {
 1638|  38.6k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  38.6k|            auto end_seg = range.end().contiguous_segment();
 1640|  38.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  38.6k|                             detail::to_address(end_seg.end()))) {
 1642|  38.6k|                auto& str = m_storage.emplace();
 1643|  38.6k|                str.reserve(range.end().position() - range.begin().position());
 1644|  38.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  38.6k|                m_view = string_view_type{str};
 1646|  38.6k|                return;
 1647|  38.6k|            }
 1648|       |
 1649|  38.6k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  38.6k|                                                            end_seg.data());
 1651|  38.6k|            m_storage.reset();
 1652|  38.6k|        }
 1653|  38.6k|        else {
 1654|  38.6k|            auto& str = m_storage.emplace();
 1655|  38.6k|            if constexpr (ranges::sized_range<Range>) {
 1656|  38.6k|                str.reserve(range.size());
 1657|  38.6k|            }
 1658|  38.6k|            if constexpr (ranges::common_range<Range>) {
 1659|  38.6k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  38.6k|                          std::back_inserter(str));
 1661|  38.6k|            }
 1662|  38.6k|            else {
 1663|  38.6k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  38.6k|                     ++it) {
 1665|  38.6k|                    str.push_back(*it);
 1666|  38.6k|                }
 1667|  38.6k|            }
 1668|  38.6k|            m_view = string_view_type{str};
 1669|  38.6k|        }
 1670|  38.6k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4100|  68.9k|    {
 4101|  68.9k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 20, False: 68.9k]
  ------------------
 4102|     20|            return std::copysign(value, T{-1.0});
 4103|     20|        }
 4104|  68.9k|        return std::copysign(value, T{1.0});
 4105|  68.9k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  1.52M|    {
 4101|  1.52M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 182k, False: 1.34M]
  ------------------
 4102|   182k|            return std::copysign(value, T{-1.0});
 4103|   182k|        }
 4104|  1.34M|        return std::copysign(value, T{1.0});
 4105|  1.52M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|  69.0k|    {
 4101|  69.0k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 20, False: 69.0k]
  ------------------
 4102|     20|            return std::copysign(value, T{-1.0});
 4103|     20|        }
 4104|  69.0k|        return std::copysign(value, T{1.0});
 4105|  69.0k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4100|  1.54M|    {
 4101|  1.54M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 188k, False: 1.35M]
  ------------------
 4102|   188k|            return std::copysign(value, T{-1.0});
 4103|   188k|        }
 4104|  1.35M|        return std::copysign(value, T{1.0});
 4105|  1.54M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4100|  69.1k|    {
 4101|  69.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 20, False: 69.1k]
  ------------------
 4102|     20|            return std::copysign(value, T{-1.0});
 4103|     20|        }
 4104|  69.1k|        return std::copysign(value, T{1.0});
 4105|  69.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|   704k|{
 5796|   704k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   704k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.03k, False: 698k]
  |  |  ------------------
  ------------------
 5797|  6.03k|        return unexpected(e);
 5798|  6.03k|    }
 5799|       |
 5800|   698k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 698k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   698k|    return skip_classic_whitespace(range);
 5805|   698k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5871|   217k|    {
 5872|   217k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   217k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   217k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   217k|            auto rd = make_reader<T, char_type>();
 5877|   217k|            return impl(rd, range, value);
 5878|   217k|        }
 5879|   217k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   217k|            auto rd = make_reader<T, char_type>();
 5881|   217k|            if (!is_segment_contiguous(range)) {
 5882|   217k|                return impl(rd, range, value);
 5883|   217k|            }
 5884|   217k|            auto crange = get_as_contiguous(range);
 5885|   217k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   217k|            return ranges::next(range.begin(),
 5887|   217k|                                ranges::distance(crange.begin(), it));
 5888|   217k|        }
 5889|   217k|        else {
 5890|   217k|            SCN_EXPECT(false);
 5891|   217k|            SCN_UNREACHABLE;
 5892|   217k|        }
 5893|   217k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   217k|    {
 5864|   217k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.12k, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.12k|    }                                                  \
  |  |  |  | 3642|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   215k|                        .transform_error(make_eof_scan_error));
 5866|   215k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   217k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   215k|    {
 4153|   215k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   215k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   215k|        float_reader<CharT> rd{};
 4156|   215k|        return read_impl<Range>(
 4157|   215k|            range, rd,
 4158|   215k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   215k|                return r.read_source(SCN_FWD(args)...);
 4160|   215k|            },
 4161|   215k|            value);
 4162|   215k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  1.34M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  1.47M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   215k|    {
  754|   215k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   215k|    {
  684|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   215k|            return static_cast<T*>(s.m_cp);
  686|   215k|        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   215k|            return static_cast<T*>(s.m_p);
  689|   215k|        }
  690|   215k|        else {
  691|   215k|            return reinterpret_cast<T*>(s.m_fp);
  692|   215k|        }
  693|   215k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   215k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   215k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   215k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   215k|        {
  662|   215k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|   241k|    {
 5872|   241k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   241k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   241k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   241k|            auto rd = make_reader<T, char_type>();
 5877|   241k|            return impl(rd, range, value);
 5878|   241k|        }
 5879|   241k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   241k|            auto rd = make_reader<T, char_type>();
 5881|   241k|            if (!is_segment_contiguous(range)) {
 5882|   241k|                return impl(rd, range, value);
 5883|   241k|            }
 5884|   241k|            auto crange = get_as_contiguous(range);
 5885|   241k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   241k|            return ranges::next(range.begin(),
 5887|   241k|                                ranges::distance(crange.begin(), it));
 5888|   241k|        }
 5889|   241k|        else {
 5890|   241k|            SCN_EXPECT(false);
 5891|   241k|            SCN_UNREACHABLE;
 5892|   241k|        }
 5893|   241k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   241k|    {
 5864|   241k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.44k, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.44k|    }                                                  \
  |  |  |  | 3642|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   238k|                        .transform_error(make_eof_scan_error));
 5866|   238k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   241k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   238k|    {
 4153|   238k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   238k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   238k|        float_reader<CharT> rd{};
 4156|   238k|        return read_impl<Range>(
 4157|   238k|            range, rd,
 4158|   238k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   238k|                return r.read_source(SCN_FWD(args)...);
 4160|   238k|            },
 4161|   238k|            value);
 4162|   238k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   238k|    {
  754|   238k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   238k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   238k|              cvref<T> obj = *get<T>(fn);
  745|   238k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   238k|                  obj(static_cast<decltype(args)>(args)...);
  747|   238k|              }
  748|   238k|              else {
  749|   238k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   238k|              }
  751|   238k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   238k|    {
  684|   238k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   238k|            return static_cast<T*>(s.m_cp);
  686|   238k|        }
  687|   238k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   238k|            return static_cast<T*>(s.m_p);
  689|   238k|        }
  690|   238k|        else {
  691|   238k|            return reinterpret_cast<T*>(s.m_fp);
  692|   238k|        }
  693|   238k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   238k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   238k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   238k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   238k|        {
  662|   238k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5871|   245k|    {
 5872|   245k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   245k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   245k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   245k|            auto rd = make_reader<T, char_type>();
 5877|   245k|            return impl(rd, range, value);
 5878|   245k|        }
 5879|   245k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   245k|            auto rd = make_reader<T, char_type>();
 5881|   245k|            if (!is_segment_contiguous(range)) {
 5882|   245k|                return impl(rd, range, value);
 5883|   245k|            }
 5884|   245k|            auto crange = get_as_contiguous(range);
 5885|   245k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   245k|            return ranges::next(range.begin(),
 5887|   245k|                                ranges::distance(crange.begin(), it));
 5888|   245k|        }
 5889|   245k|        else {
 5890|   245k|            SCN_EXPECT(false);
 5891|   245k|            SCN_UNREACHABLE;
 5892|   245k|        }
 5893|   245k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   245k|    {
 5864|   245k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.60k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.60k|    }                                                  \
  |  |  |  | 3642|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   242k|                        .transform_error(make_eof_scan_error));
 5866|   242k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   245k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   242k|    {
 4153|   242k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   242k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   242k|        float_reader<CharT> rd{};
 4156|   242k|        return read_impl<Range>(
 4157|   242k|            range, rd,
 4158|   242k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   242k|                return r.read_source(SCN_FWD(args)...);
 4160|   242k|            },
 4161|   242k|            value);
 4162|   242k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   242k|    {
  754|   242k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   242k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   242k|              cvref<T> obj = *get<T>(fn);
  745|   242k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   242k|                  obj(static_cast<decltype(args)>(args)...);
  747|   242k|              }
  748|   242k|              else {
  749|   242k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   242k|              }
  751|   242k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   242k|    {
  684|   242k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   242k|            return static_cast<T*>(s.m_cp);
  686|   242k|        }
  687|   242k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   242k|            return static_cast<T*>(s.m_p);
  689|   242k|        }
  690|   242k|        else {
  691|   242k|            return reinterpret_cast<T*>(s.m_fp);
  692|   242k|        }
  693|   242k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   242k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   242k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   242k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   242k|        {
  662|   242k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|   655k|{
 5796|   655k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.01k, False: 649k]
  |  |  ------------------
  ------------------
 5797|  6.01k|        return unexpected(e);
 5798|  6.01k|    }
 5799|       |
 5800|   649k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 649k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   649k|    return skip_classic_whitespace(range);
 5805|   649k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   202k|    {
 5872|   202k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   202k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   202k|            auto rd = make_reader<T, char_type>();
 5877|   202k|            return impl(rd, range, value);
 5878|   202k|        }
 5879|   202k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   202k|            auto rd = make_reader<T, char_type>();
 5881|   202k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 202k, False: 0]
  ------------------
 5882|   202k|                return impl(rd, range, value);
 5883|   202k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   202k|        else {
 5890|   202k|            SCN_EXPECT(false);
 5891|   202k|            SCN_UNREACHABLE;
 5892|   202k|        }
 5893|   202k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   202k|    {
 5864|   202k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   202k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   202k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   202k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.10k|    }                                                  \
  |  |  |  | 3642|   202k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   200k|                        .transform_error(make_eof_scan_error));
 5866|   200k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   202k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   200k|    {
 4153|   200k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   200k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   200k|        float_reader<CharT> rd{};
 4156|   200k|        return read_impl<Range>(
 4157|   200k|            range, rd,
 4158|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   200k|                return r.read_source(SCN_FWD(args)...);
 4160|   200k|            },
 4161|   200k|            value);
 4162|   200k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   200k|    {
  754|   200k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|   200k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   200k|                  obj(static_cast<decltype(args)>(args)...);
  747|   200k|              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   200k|    {
  684|   200k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   200k|            return static_cast<T*>(s.m_cp);
  686|   200k|        }
  687|   200k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   200k|            return static_cast<T*>(s.m_p);
  689|   200k|        }
  690|   200k|        else {
  691|   200k|            return reinterpret_cast<T*>(s.m_fp);
  692|   200k|        }
  693|   200k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   200k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   200k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   200k|        {
  662|   200k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   224k|    {
 5872|   224k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   224k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   224k|            auto rd = make_reader<T, char_type>();
 5877|   224k|            return impl(rd, range, value);
 5878|   224k|        }
 5879|   224k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   224k|            auto rd = make_reader<T, char_type>();
 5881|   224k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 224k, False: 0]
  ------------------
 5882|   224k|                return impl(rd, range, value);
 5883|   224k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   224k|        else {
 5890|   224k|            SCN_EXPECT(false);
 5891|   224k|            SCN_UNREACHABLE;
 5892|   224k|        }
 5893|   224k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   224k|    {
 5864|   224k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.41k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.41k|    }                                                  \
  |  |  |  | 3642|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   222k|                        .transform_error(make_eof_scan_error));
 5866|   222k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   224k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   222k|    {
 4153|   222k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   222k|        float_reader<CharT> rd{};
 4156|   222k|        return read_impl<Range>(
 4157|   222k|            range, rd,
 4158|   222k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   222k|                return r.read_source(SCN_FWD(args)...);
 4160|   222k|            },
 4161|   222k|            value);
 4162|   222k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   222k|    {
  754|   222k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   222k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   222k|              cvref<T> obj = *get<T>(fn);
  745|   222k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   222k|                  obj(static_cast<decltype(args)>(args)...);
  747|   222k|              }
  748|   222k|              else {
  749|   222k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   222k|              }
  751|   222k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   222k|    {
  684|   222k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   222k|            return static_cast<T*>(s.m_cp);
  686|   222k|        }
  687|   222k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   222k|            return static_cast<T*>(s.m_p);
  689|   222k|        }
  690|   222k|        else {
  691|   222k|            return reinterpret_cast<T*>(s.m_fp);
  692|   222k|        }
  693|   222k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   222k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   222k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   222k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   222k|        {
  662|   222k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   227k|    {
 5872|   227k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   227k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   227k|            auto rd = make_reader<T, char_type>();
 5877|   227k|            return impl(rd, range, value);
 5878|   227k|        }
 5879|   227k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   227k|            auto rd = make_reader<T, char_type>();
 5881|   227k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 227k, False: 0]
  ------------------
 5882|   227k|                return impl(rd, range, value);
 5883|   227k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   227k|        else {
 5890|   227k|            SCN_EXPECT(false);
 5891|   227k|            SCN_UNREACHABLE;
 5892|   227k|        }
 5893|   227k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   227k|    {
 5864|   227k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.56k, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.56k|    }                                                  \
  |  |  |  | 3642|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   225k|                        .transform_error(make_eof_scan_error));
 5866|   225k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   227k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   225k|    {
 4153|   225k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   225k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   225k|        float_reader<CharT> rd{};
 4156|   225k|        return read_impl<Range>(
 4157|   225k|            range, rd,
 4158|   225k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   225k|                return r.read_source(SCN_FWD(args)...);
 4160|   225k|            },
 4161|   225k|            value);
 4162|   225k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   225k|    {
  754|   225k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   225k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   225k|              cvref<T> obj = *get<T>(fn);
  745|   225k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   225k|                  obj(static_cast<decltype(args)>(args)...);
  747|   225k|              }
  748|   225k|              else {
  749|   225k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   225k|              }
  751|   225k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   225k|    {
  684|   225k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   225k|            return static_cast<T*>(s.m_cp);
  686|   225k|        }
  687|   225k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   225k|            return static_cast<T*>(s.m_p);
  689|   225k|        }
  690|   225k|        else {
  691|   225k|            return reinterpret_cast<T*>(s.m_fp);
  692|   225k|        }
  693|   225k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   225k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   225k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   225k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   225k|        {
  662|   225k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.62M|    {
 2879|  1.62M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  4.80M|    {
 2883|  4.80M|        return m_current;
 2884|  4.80M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.17M|    {
 2888|  3.17M|        return m_range.end();
 2889|  3.17M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.54M|    {
 2903|  1.54M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.54M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.54M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.54M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.54M|        }
 2909|  1.54M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.54M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.62M|    {
 2893|  1.62M|        return ranges::subrange{begin(), end()};
 2894|  1.62M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  1.62M|    {
 6038|  1.62M|        const bool need_skipped_width =
 6039|  1.62M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.62M]
  |  Branch (6039:33): [True: 0, False: 1.62M]
  ------------------
 6040|  1.62M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.62M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.62M]
  ------------------
 6044|  1.62M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.62M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.62M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.62M, False: 0]
  |  Branch (6048:56): [True: 1.62M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.62M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.62M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.24M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.2k, False: 1.61M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  18.2k|    }                                                  \
  |  |  |  | 3642|  1.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.24M|                            make_eof_scan_error));
 6059|       |
 6060|  3.24M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.61M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.61M|            return result_type{it, 0};
 6068|  3.24M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.62M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  1.52M|    {
 6080|  1.52M|        const bool need_skipped_width =
 6081|  1.52M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.52M]
  |  Branch (6081:33): [True: 0, False: 1.52M]
  ------------------
 6082|  1.52M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.52M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.52M]
  ------------------
 6085|  1.52M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.52M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.52M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.52M, False: 0]
  ------------------
 6090|  1.52M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.52M]
  ------------------
 6091|  1.52M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.52M|        return result_type{rng.begin(), 0};
 6115|  1.52M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6178|   516k|    {
 6179|   516k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   516k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   516k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   516k|            auto rd = make_reader<T, char_type>();
 6184|   516k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   516k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 516k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   516k|            return impl(rd, range, value);
 6189|   516k|        }
 6190|   516k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   516k|            auto rd = make_reader<T, char_type>();
 6192|   516k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   516k|                return unexpected(e);
 6194|   516k|            }
 6195|       |
 6196|   516k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   516k|                specs.width != 0) {
 6198|   516k|                return impl(rd, range, value);
 6199|   516k|            }
 6200|       |
 6201|   516k|            auto crange = get_as_contiguous(range);
 6202|   516k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   516k|            return ranges::next(range.begin(),
 6204|   516k|                                ranges::distance(crange.begin(), it));
 6205|   516k|        }
 6206|   516k|        else {
 6207|   516k|            SCN_EXPECT(false);
 6208|   516k|            SCN_UNREACHABLE;
 6209|   516k|        }
 6210|   516k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   516k|    {
 6121|   516k|        const bool need_skipped_width =
 6122|   516k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 516k]
  |  Branch (6122:33): [True: 0, False: 516k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   516k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   516k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   516k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   516k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   516k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.54k, False: 510k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.54k|    }                                                  \
  |  |  |  | 3642|   516k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   510k|        auto [it, prefix_width] = prefix_result;
 6127|   510k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   510k|        std::ptrdiff_t value_width = 0;
 6131|   510k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 510k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   510k|        else {
 6147|   510k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   510k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   510k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.6k, False: 486k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  23.6k|    }                                                  \
  |  | 3642|   510k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   486k|                                             specs, value, loc));
 6149|       |
 6150|   486k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 486k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   486k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   486k|        std::ptrdiff_t postfix_width = 0;
 6159|   486k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 482k, False: 4.62k]
  ------------------
 6160|   482k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   482k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   482k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   482k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 482k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   482k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   482k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   482k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   482k|                                 value_width));
 6164|   482k|            std::tie(it, postfix_width) = postfix_result;
 6165|   482k|        }
 6166|       |
 6167|   486k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   486k|                                                 value_width, postfix_width);
 6169|   486k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 486k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   486k|        return it;
 6174|   486k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|   553k|    {
 6179|   553k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   553k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   553k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   553k|            auto rd = make_reader<T, char_type>();
 6184|   553k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 553k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   553k|            return impl(rd, range, value);
 6189|   553k|        }
 6190|   553k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   553k|            auto rd = make_reader<T, char_type>();
 6192|   553k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   553k|                return unexpected(e);
 6194|   553k|            }
 6195|       |
 6196|   553k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   553k|                specs.width != 0) {
 6198|   553k|                return impl(rd, range, value);
 6199|   553k|            }
 6200|       |
 6201|   553k|            auto crange = get_as_contiguous(range);
 6202|   553k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   553k|            return ranges::next(range.begin(),
 6204|   553k|                                ranges::distance(crange.begin(), it));
 6205|   553k|        }
 6206|   553k|        else {
 6207|   553k|            SCN_EXPECT(false);
 6208|   553k|            SCN_UNREACHABLE;
 6209|   553k|        }
 6210|   553k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   553k|    {
 6121|   553k|        const bool need_skipped_width =
 6122|   553k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 553k]
  |  Branch (6122:33): [True: 0, False: 553k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   553k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   553k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 547k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.17k|    }                                                  \
  |  |  |  | 3642|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   547k|        auto [it, prefix_width] = prefix_result;
 6127|   547k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   547k|        std::ptrdiff_t value_width = 0;
 6131|   547k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 547k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   547k|        else {
 6147|   547k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.0k, False: 524k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  23.0k|    }                                                  \
  |  | 3642|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   524k|                                             specs, value, loc));
 6149|       |
 6150|   524k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 524k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   524k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   524k|        std::ptrdiff_t postfix_width = 0;
 6159|   524k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 519k, False: 5.16k]
  ------------------
 6160|   519k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   519k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   519k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   519k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 519k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   519k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   519k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   519k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   519k|                                 value_width));
 6164|   519k|            std::tie(it, postfix_width) = postfix_result;
 6165|   519k|        }
 6166|       |
 6167|   524k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   524k|                                                 value_width, postfix_width);
 6169|   524k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 524k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   524k|        return it;
 6174|   524k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6178|   559k|    {
 6179|   559k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   559k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   559k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   559k|            auto rd = make_reader<T, char_type>();
 6184|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 559k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   559k|            return impl(rd, range, value);
 6189|   559k|        }
 6190|   559k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   559k|            auto rd = make_reader<T, char_type>();
 6192|   559k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   559k|                return unexpected(e);
 6194|   559k|            }
 6195|       |
 6196|   559k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   559k|                specs.width != 0) {
 6198|   559k|                return impl(rd, range, value);
 6199|   559k|            }
 6200|       |
 6201|   559k|            auto crange = get_as_contiguous(range);
 6202|   559k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   559k|            return ranges::next(range.begin(),
 6204|   559k|                                ranges::distance(crange.begin(), it));
 6205|   559k|        }
 6206|   559k|        else {
 6207|   559k|            SCN_EXPECT(false);
 6208|   559k|            SCN_UNREACHABLE;
 6209|   559k|        }
 6210|   559k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   559k|    {
 6121|   559k|        const bool need_skipped_width =
 6122|   559k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 559k]
  |  Branch (6122:33): [True: 0, False: 559k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   559k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   559k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   559k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   559k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.52k, False: 553k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.52k|    }                                                  \
  |  |  |  | 3642|   559k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   553k|        auto [it, prefix_width] = prefix_result;
 6127|   553k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   553k|        std::ptrdiff_t value_width = 0;
 6131|   553k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 553k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   553k|        else {
 6147|   553k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.6k, False: 530k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  22.6k|    }                                                  \
  |  | 3642|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   530k|                                             specs, value, loc));
 6149|       |
 6150|   530k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 530k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   530k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   530k|        std::ptrdiff_t postfix_width = 0;
 6159|   530k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 525k, False: 5.47k]
  ------------------
 6160|   525k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   525k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   525k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   525k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 525k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   525k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   525k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   525k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   525k|                                 value_width));
 6164|   525k|            std::tie(it, postfix_width) = postfix_result;
 6165|   525k|        }
 6166|       |
 6167|   530k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   530k|                                                 value_width, postfix_width);
 6169|   530k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 530k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   530k|        return it;
 6174|   530k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  64.1k|{
 5796|  64.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105, False: 64.0k]
  |  |  ------------------
  ------------------
 5797|    105|        return unexpected(e);
 5798|    105|    }
 5799|       |
 5800|  64.0k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 64.0k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  64.0k|    return skip_classic_whitespace(range);
 5805|  64.0k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5871|  21.3k|    {
 5872|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.3k|            auto rd = make_reader<T, char_type>();
 5877|  21.3k|            return impl(rd, range, value);
 5878|  21.3k|        }
 5879|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  21.3k|            auto rd = make_reader<T, char_type>();
 5881|  21.3k|            if (!is_segment_contiguous(range)) {
 5882|  21.3k|                return impl(rd, range, value);
 5883|  21.3k|            }
 5884|  21.3k|            auto crange = get_as_contiguous(range);
 5885|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  21.3k|            return ranges::next(range.begin(),
 5887|  21.3k|                                ranges::distance(crange.begin(), it));
 5888|  21.3k|        }
 5889|  21.3k|        else {
 5890|  21.3k|            SCN_EXPECT(false);
 5891|  21.3k|            SCN_UNREACHABLE;
 5892|  21.3k|        }
 5893|  21.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  21.3k|    {
 5864|  21.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 159, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    159|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    159|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    159|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    159|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    159|    }                                                  \
  |  |  |  | 3642|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.1k|                        .transform_error(make_eof_scan_error));
 5866|  21.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  21.1k|    {
 4153|  21.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.1k|        float_reader<CharT> rd{};
 4156|  21.1k|        return read_impl<Range>(
 4157|  21.1k|            range, rd,
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.1k|            },
 4161|  21.1k|            value);
 4162|  21.1k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|   127k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  21.1k|    {
  754|  21.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1k|              cvref<T> obj = *get<T>(fn);
  745|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.1k|              }
  748|  21.1k|              else {
  749|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1k|              }
  751|  21.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.1k|    {
  684|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.1k|            return static_cast<T*>(s.m_cp);
  686|  21.1k|        }
  687|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.1k|            return static_cast<T*>(s.m_p);
  689|  21.1k|        }
  690|  21.1k|        else {
  691|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.1k|        }
  693|  21.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.1k|        {
  662|  21.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|  21.3k|    {
 5872|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  21.3k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.3k|            auto rd = make_reader<T, char_type>();
 5877|  21.3k|            return impl(rd, range, value);
 5878|  21.3k|        }
 5879|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  21.3k|            auto rd = make_reader<T, char_type>();
 5881|  21.3k|            if (!is_segment_contiguous(range)) {
 5882|  21.3k|                return impl(rd, range, value);
 5883|  21.3k|            }
 5884|  21.3k|            auto crange = get_as_contiguous(range);
 5885|  21.3k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  21.3k|            return ranges::next(range.begin(),
 5887|  21.3k|                                ranges::distance(crange.begin(), it));
 5888|  21.3k|        }
 5889|  21.3k|        else {
 5890|  21.3k|            SCN_EXPECT(false);
 5891|  21.3k|            SCN_UNREACHABLE;
 5892|  21.3k|        }
 5893|  21.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  21.3k|    {
 5864|  21.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 171, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    171|    }                                                  \
  |  |  |  | 3642|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.1k|                        .transform_error(make_eof_scan_error));
 5866|  21.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  21.1k|    {
 4153|  21.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.1k|        float_reader<CharT> rd{};
 4156|  21.1k|        return read_impl<Range>(
 4157|  21.1k|            range, rd,
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.1k|            },
 4161|  21.1k|            value);
 4162|  21.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  21.1k|    {
  754|  21.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1k|              cvref<T> obj = *get<T>(fn);
  745|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.1k|              }
  748|  21.1k|              else {
  749|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1k|              }
  751|  21.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.1k|    {
  684|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.1k|            return static_cast<T*>(s.m_cp);
  686|  21.1k|        }
  687|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.1k|            return static_cast<T*>(s.m_p);
  689|  21.1k|        }
  690|  21.1k|        else {
  691|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.1k|        }
  693|  21.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.1k|        {
  662|  21.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5871|  21.4k|    {
 5872|  21.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.4k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  21.4k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.4k|            auto rd = make_reader<T, char_type>();
 5877|  21.4k|            return impl(rd, range, value);
 5878|  21.4k|        }
 5879|  21.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  21.4k|            auto rd = make_reader<T, char_type>();
 5881|  21.4k|            if (!is_segment_contiguous(range)) {
 5882|  21.4k|                return impl(rd, range, value);
 5883|  21.4k|            }
 5884|  21.4k|            auto crange = get_as_contiguous(range);
 5885|  21.4k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  21.4k|            return ranges::next(range.begin(),
 5887|  21.4k|                                ranges::distance(crange.begin(), it));
 5888|  21.4k|        }
 5889|  21.4k|        else {
 5890|  21.4k|            SCN_EXPECT(false);
 5891|  21.4k|            SCN_UNREACHABLE;
 5892|  21.4k|        }
 5893|  21.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  21.4k|    {
 5864|  21.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 21.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    174|    }                                                  \
  |  |  |  | 3642|  21.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.2k|                        .transform_error(make_eof_scan_error));
 5866|  21.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  21.2k|    {
 4153|  21.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.2k|        float_reader<CharT> rd{};
 4156|  21.2k|        return read_impl<Range>(
 4157|  21.2k|            range, rd,
 4158|  21.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.2k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.2k|            },
 4161|  21.2k|            value);
 4162|  21.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  21.2k|    {
  754|  21.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  21.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.2k|              cvref<T> obj = *get<T>(fn);
  745|  21.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.2k|              }
  748|  21.2k|              else {
  749|  21.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.2k|              }
  751|  21.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.2k|    {
  684|  21.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.2k|            return static_cast<T*>(s.m_cp);
  686|  21.2k|        }
  687|  21.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.2k|            return static_cast<T*>(s.m_p);
  689|  21.2k|        }
  690|  21.2k|        else {
  691|  21.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.2k|        }
  693|  21.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  21.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.2k|        {
  662|  21.2k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   206k|    {
 2879|   206k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   444k|    {
 2883|   444k|        return m_current;
 2884|   444k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   237k|    {
 2888|   237k|        return m_range.end();
 2889|   237k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  31.1k|    {
 2903|  31.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  31.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  31.1k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 31.1k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  31.1k|        }
 2909|  31.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  31.1k|    static_cast<    \
  |  |  929|  31.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  31.1k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   206k|    {
 2893|   206k|        return ranges::subrange{begin(), end()};
 2894|   206k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|   206k|    {
 6038|   206k|        const bool need_skipped_width =
 6039|   206k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 206k]
  |  Branch (6039:33): [True: 0, False: 206k]
  ------------------
 6040|   206k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   206k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 206k]
  ------------------
 6044|   206k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 206k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   206k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 206k, False: 0]
  |  Branch (6048:56): [True: 206k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   206k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 206k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   411k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.53k|    }                                                  \
  |  |  |  | 3642|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   411k|                            make_eof_scan_error));
 6059|       |
 6060|   411k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 204k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   204k|            return result_type{it, 0};
 6068|   411k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   206k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  30.8k|    {
 6080|  30.8k|        const bool need_skipped_width =
 6081|  30.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 30.8k]
  |  Branch (6081:33): [True: 0, False: 30.8k]
  ------------------
 6082|  30.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  30.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 30.8k]
  ------------------
 6085|  30.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 30.8k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  30.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 30.8k, False: 0]
  ------------------
 6090|  30.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 30.8k]
  ------------------
 6091|  30.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  30.8k|        return result_type{rng.begin(), 0};
 6115|  30.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6178|  68.7k|    {
 6179|  68.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.7k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  68.7k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.7k|            auto rd = make_reader<T, char_type>();
 6184|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  68.7k|            return impl(rd, range, value);
 6189|  68.7k|        }
 6190|  68.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  68.7k|            auto rd = make_reader<T, char_type>();
 6192|  68.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  68.7k|                return unexpected(e);
 6194|  68.7k|            }
 6195|       |
 6196|  68.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  68.7k|                specs.width != 0) {
 6198|  68.7k|                return impl(rd, range, value);
 6199|  68.7k|            }
 6200|       |
 6201|  68.7k|            auto crange = get_as_contiguous(range);
 6202|  68.7k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  68.7k|            return ranges::next(range.begin(),
 6204|  68.7k|                                ranges::distance(crange.begin(), it));
 6205|  68.7k|        }
 6206|  68.7k|        else {
 6207|  68.7k|            SCN_EXPECT(false);
 6208|  68.7k|            SCN_UNREACHABLE;
 6209|  68.7k|        }
 6210|  68.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  68.7k|    {
 6121|  68.7k|        const bool need_skipped_width =
 6122|  68.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.7k]
  |  Branch (6122:33): [True: 0, False: 68.7k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 494, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    494|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    494|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    494|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    494|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    494|    }                                                  \
  |  |  |  | 3642|  68.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.2k|        auto [it, prefix_width] = prefix_result;
 6127|  68.2k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.2k|        std::ptrdiff_t value_width = 0;
 6131|  68.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.2k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.2k|        else {
 6147|  68.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.3k|                                             specs, value, loc));
 6149|       |
 6150|  10.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.3k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.3k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.3k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.2k, False: 94]
  ------------------
 6160|  10.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.2k|                                 value_width));
 6164|  10.2k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.2k|        }
 6166|       |
 6167|  10.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.3k|                                                 value_width, postfix_width);
 6169|  10.3k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.3k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.3k|        return it;
 6174|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|  68.8k|    {
 6179|  68.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  68.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.8k|            auto rd = make_reader<T, char_type>();
 6184|  68.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.8k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  68.8k|            return impl(rd, range, value);
 6189|  68.8k|        }
 6190|  68.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  68.8k|            auto rd = make_reader<T, char_type>();
 6192|  68.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  68.8k|                return unexpected(e);
 6194|  68.8k|            }
 6195|       |
 6196|  68.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  68.8k|                specs.width != 0) {
 6198|  68.8k|                return impl(rd, range, value);
 6199|  68.8k|            }
 6200|       |
 6201|  68.8k|            auto crange = get_as_contiguous(range);
 6202|  68.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  68.8k|            return ranges::next(range.begin(),
 6204|  68.8k|                                ranges::distance(crange.begin(), it));
 6205|  68.8k|        }
 6206|  68.8k|        else {
 6207|  68.8k|            SCN_EXPECT(false);
 6208|  68.8k|            SCN_UNREACHABLE;
 6209|  68.8k|        }
 6210|  68.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  68.8k|    {
 6121|  68.8k|        const bool need_skipped_width =
 6122|  68.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.8k]
  |  Branch (6122:33): [True: 0, False: 68.8k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.8k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 516, False: 68.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    516|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    516|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    516|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    516|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    516|    }                                                  \
  |  |  |  | 3642|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.3k|        auto [it, prefix_width] = prefix_result;
 6127|  68.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.3k|        std::ptrdiff_t value_width = 0;
 6131|  68.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.3k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.3k|        else {
 6147|  68.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.3k|                                             specs, value, loc));
 6149|       |
 6150|  10.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.3k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.3k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.3k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.2k, False: 100]
  ------------------
 6160|  10.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.2k|                                 value_width));
 6164|  10.2k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.2k|        }
 6166|       |
 6167|  10.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.3k|                                                 value_width, postfix_width);
 6169|  10.3k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.3k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.3k|        return it;
 6174|  10.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6178|  68.9k|    {
 6179|  68.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  68.9k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  68.9k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  68.9k|            auto rd = make_reader<T, char_type>();
 6184|  68.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  68.9k|            return impl(rd, range, value);
 6189|  68.9k|        }
 6190|  68.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  68.9k|            auto rd = make_reader<T, char_type>();
 6192|  68.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  68.9k|                return unexpected(e);
 6194|  68.9k|            }
 6195|       |
 6196|  68.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  68.9k|                specs.width != 0) {
 6198|  68.9k|                return impl(rd, range, value);
 6199|  68.9k|            }
 6200|       |
 6201|  68.9k|            auto crange = get_as_contiguous(range);
 6202|  68.9k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  68.9k|            return ranges::next(range.begin(),
 6204|  68.9k|                                ranges::distance(crange.begin(), it));
 6205|  68.9k|        }
 6206|  68.9k|        else {
 6207|  68.9k|            SCN_EXPECT(false);
 6208|  68.9k|            SCN_UNREACHABLE;
 6209|  68.9k|        }
 6210|  68.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  68.9k|    {
 6121|  68.9k|        const bool need_skipped_width =
 6122|  68.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 68.9k]
  |  Branch (6122:33): [True: 0, False: 68.9k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  68.9k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  68.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 68.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    522|    }                                                  \
  |  |  |  | 3642|  68.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  68.3k|        auto [it, prefix_width] = prefix_result;
 6127|  68.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  68.3k|        std::ptrdiff_t value_width = 0;
 6131|  68.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 68.3k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  68.3k|        else {
 6147|  68.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  68.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  68.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.9k, False: 10.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  57.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  57.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  57.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  57.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  57.9k|    }                                                  \
  |  | 3642|  68.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  10.4k|                                             specs, value, loc));
 6149|       |
 6150|  10.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 10.4k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  10.4k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  10.4k|        std::ptrdiff_t postfix_width = 0;
 6159|  10.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 10.3k, False: 100]
  ------------------
 6160|  10.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  10.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  10.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  10.3k|                                 value_width));
 6164|  10.3k|            std::tie(it, postfix_width) = postfix_result;
 6165|  10.3k|        }
 6166|       |
 6167|  10.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  10.4k|                                                 value_width, postfix_width);
 6169|  10.4k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 10.4k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  10.4k|        return it;
 6174|  10.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|  64.0k|{
 5796|  64.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105, False: 63.9k]
  |  |  ------------------
  ------------------
 5797|    105|        return unexpected(e);
 5798|    105|    }
 5799|       |
 5800|  63.9k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 63.9k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  63.9k|    return skip_classic_whitespace(range);
 5805|  63.9k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  21.3k|    {
 5872|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.3k|            auto rd = make_reader<T, char_type>();
 5877|  21.3k|            return impl(rd, range, value);
 5878|  21.3k|        }
 5879|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  21.3k|            auto rd = make_reader<T, char_type>();
 5881|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 21.3k, False: 0]
  ------------------
 5882|  21.3k|                return impl(rd, range, value);
 5883|  21.3k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  21.3k|        else {
 5890|  21.3k|            SCN_EXPECT(false);
 5891|  21.3k|            SCN_UNREACHABLE;
 5892|  21.3k|        }
 5893|  21.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  21.3k|    {
 5864|  21.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 159, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    159|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    159|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    159|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    159|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    159|    }                                                  \
  |  |  |  | 3642|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.1k|                        .transform_error(make_eof_scan_error));
 5866|  21.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  21.1k|    {
 4153|  21.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.1k|        float_reader<CharT> rd{};
 4156|  21.1k|        return read_impl<Range>(
 4157|  21.1k|            range, rd,
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.1k|            },
 4161|  21.1k|            value);
 4162|  21.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  21.1k|    {
  754|  21.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1k|              cvref<T> obj = *get<T>(fn);
  745|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.1k|              }
  748|  21.1k|              else {
  749|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1k|              }
  751|  21.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.1k|    {
  684|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.1k|            return static_cast<T*>(s.m_cp);
  686|  21.1k|        }
  687|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.1k|            return static_cast<T*>(s.m_p);
  689|  21.1k|        }
  690|  21.1k|        else {
  691|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.1k|        }
  693|  21.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.1k|        {
  662|  21.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  21.3k|    {
 5872|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.3k|            auto rd = make_reader<T, char_type>();
 5877|  21.3k|            return impl(rd, range, value);
 5878|  21.3k|        }
 5879|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  21.3k|            auto rd = make_reader<T, char_type>();
 5881|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 21.3k, False: 0]
  ------------------
 5882|  21.3k|                return impl(rd, range, value);
 5883|  21.3k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  21.3k|        else {
 5890|  21.3k|            SCN_EXPECT(false);
 5891|  21.3k|            SCN_UNREACHABLE;
 5892|  21.3k|        }
 5893|  21.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  21.3k|    {
 5864|  21.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 171, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    171|    }                                                  \
  |  |  |  | 3642|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.1k|                        .transform_error(make_eof_scan_error));
 5866|  21.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  21.1k|    {
 4153|  21.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.1k|        float_reader<CharT> rd{};
 4156|  21.1k|        return read_impl<Range>(
 4157|  21.1k|            range, rd,
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.1k|            },
 4161|  21.1k|            value);
 4162|  21.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  21.1k|    {
  754|  21.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1k|              cvref<T> obj = *get<T>(fn);
  745|  21.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.1k|              }
  748|  21.1k|              else {
  749|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1k|              }
  751|  21.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.1k|    {
  684|  21.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.1k|            return static_cast<T*>(s.m_cp);
  686|  21.1k|        }
  687|  21.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.1k|            return static_cast<T*>(s.m_p);
  689|  21.1k|        }
  690|  21.1k|        else {
  691|  21.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.1k|        }
  693|  21.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  21.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.1k|        {
  662|  21.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  21.3k|    {
 5872|  21.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  21.3k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  21.3k|            auto rd = make_reader<T, char_type>();
 5877|  21.3k|            return impl(rd, range, value);
 5878|  21.3k|        }
 5879|  21.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  21.3k|            auto rd = make_reader<T, char_type>();
 5881|  21.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 21.3k, False: 0]
  ------------------
 5882|  21.3k|                return impl(rd, range, value);
 5883|  21.3k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  21.3k|        else {
 5890|  21.3k|            SCN_EXPECT(false);
 5891|  21.3k|            SCN_UNREACHABLE;
 5892|  21.3k|        }
 5893|  21.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  21.3k|    {
 5864|  21.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  21.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  21.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  21.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 21.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    174|    }                                                  \
  |  |  |  | 3642|  21.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  21.2k|                        .transform_error(make_eof_scan_error));
 5866|  21.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  21.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  21.2k|    {
 4153|  21.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  21.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  21.2k|        float_reader<CharT> rd{};
 4156|  21.2k|        return read_impl<Range>(
 4157|  21.2k|            range, rd,
 4158|  21.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.2k|                return r.read_source(SCN_FWD(args)...);
 4160|  21.2k|            },
 4161|  21.2k|            value);
 4162|  21.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  21.2k|    {
  754|  21.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  21.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.2k|              cvref<T> obj = *get<T>(fn);
  745|  21.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.2k|              }
  748|  21.2k|              else {
  749|  21.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.2k|              }
  751|  21.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.2k|    {
  684|  21.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.2k|            return static_cast<T*>(s.m_cp);
  686|  21.2k|        }
  687|  21.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.2k|            return static_cast<T*>(s.m_p);
  689|  21.2k|        }
  690|  21.2k|        else {
  691|  21.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.2k|        }
  693|  21.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  21.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  21.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  21.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.2k|        {
  662|  21.2k|        }

LLVMFuzzerTestOneInput:
   54|  2.92k|{
   55|  2.92k|    scn::fuzz::run(data, size);
   56|  2.92k|    return 0;
   57|  2.92k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.92k|{
   33|  2.92k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.92k]
  |  Branch (33:35): [True: 0, False: 2.92k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.92k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.92k|    const auto& f =
   40|  2.92k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.92k|    do_basic_run(sv, f);
   42|       |
   43|  2.92k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.92k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.92k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.92k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.92k, False: 0]
  ------------------
   47|  2.92k|        do_basic_run(wsv_transcode, wf);
   48|  2.92k|    }
   49|  2.92k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.92k|{
   25|  2.92k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.92k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.92k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.92k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.92k|{
   25|  2.92k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.92k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.92k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.92k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  5.84k|{
   25|  5.84k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.84k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.84k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.84k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  5.84k|{
   25|  5.84k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.84k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.84k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.84k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.92k|{
   52|  2.92k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.92k|    string_buffer.resize(size);
   56|  2.92k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.92k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.92k|    const auto wsv_reinterpret_size =
   61|  2.92k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 67, False: 2.85k]
  ------------------
   62|  2.92k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.92k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.92k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.92k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.92k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.92k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.92k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.92k|{
  122|  2.92k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.92k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.92k|    buf.resize(sizeof...(Args));
  125|  2.92k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.92k|    return buf;
  127|  2.92k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.92k|{
  108|  2.92k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.92k|        return format_string_view_buffer;
  110|  2.92k|    }
  111|  2.92k|    else {
  112|  2.92k|        return wformat_string_view_buffer;
  113|  2.92k|    }
  114|  2.92k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  2.92k|{
  182|  2.92k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  2.92k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  2.92k|                                   format_strings);
  185|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   330k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   330k|            auto result = scn::scan<T>(
  138|   330k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   330k|                scn::runtime_format(f));
  140|   330k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 313k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   313k|            it = result->begin();
  144|   313k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   330k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   330k|            auto result = scn::scan<T>(
  152|   330k|                global_locale,
  153|   330k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   330k|                scn::runtime_format(f));
  155|   330k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 313k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   313k|            it = result->begin();
  159|   313k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  72.5k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  72.5k|            auto result = scn::scan_value<T>(
  167|  72.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  72.5k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 69.5k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  69.5k|            it = result->begin();
  172|  69.5k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   357k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   357k|            auto result = scn::scan<T>(
  138|   357k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   357k|                scn::runtime_format(f));
  140|   357k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 339k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   339k|            it = result->begin();
  144|   339k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   357k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   357k|            auto result = scn::scan<T>(
  152|   357k|                global_locale,
  153|   357k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   357k|                scn::runtime_format(f));
  155|   357k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 339k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   339k|            it = result->begin();
  159|   339k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  80.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  80.3k|            auto result = scn::scan_value<T>(
  167|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  80.3k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 77.4k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  77.4k|            it = result->begin();
  172|  77.4k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   361k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   361k|            auto result = scn::scan<T>(
  138|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   361k|                scn::runtime_format(f));
  140|   361k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 344k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   344k|            it = result->begin();
  144|   344k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   361k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   361k|            auto result = scn::scan<T>(
  152|   361k|                global_locale,
  153|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   361k|                scn::runtime_format(f));
  155|   361k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 344k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   344k|            it = result->begin();
  159|   344k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  81.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  81.8k|            auto result = scn::scan_value<T>(
  167|  81.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  81.8k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 78.9k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  78.9k|            it = result->begin();
  172|  78.9k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   330k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   330k|            auto result = scn::scan<T>(
  138|   330k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   330k|                scn::runtime_format(f));
  140|   330k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 313k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   313k|            it = result->begin();
  144|   313k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   330k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   330k|            auto result = scn::scan<T>(
  152|   330k|                global_locale,
  153|   330k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   330k|                scn::runtime_format(f));
  155|   330k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 313k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   313k|            it = result->begin();
  159|   313k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  67.4k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  67.4k|            auto result = scn::scan_value<T>(
  167|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  67.4k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 64.5k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  64.5k|            it = result->begin();
  172|  64.5k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   357k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   357k|            auto result = scn::scan<T>(
  138|   357k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   357k|                scn::runtime_format(f));
  140|   357k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 339k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   339k|            it = result->begin();
  144|   339k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   357k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   357k|            auto result = scn::scan<T>(
  152|   357k|                global_locale,
  153|   357k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   357k|                scn::runtime_format(f));
  155|   357k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 339k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   339k|            it = result->begin();
  159|   339k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  74.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  74.9k|            auto result = scn::scan_value<T>(
  167|  74.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  74.9k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 72.0k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  72.0k|            it = result->begin();
  172|  72.0k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.92k|{
  133|       |    // Regular scan
  134|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 17.5k, False: 2.92k]
  ------------------
  135|  17.5k|        auto it = scn::ranges::begin(source);
  136|   361k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   361k|            auto result = scn::scan<T>(
  138|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   361k|                scn::runtime_format(f));
  140|   361k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 17.5k, False: 343k]
  ------------------
  141|  17.5k|                break;
  142|  17.5k|            }
  143|   343k|            it = result->begin();
  144|   343k|        }
  145|  17.5k|    }
  146|       |
  147|       |    // scan localized
  148|  17.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 17.5k, False: 2.92k]
  ------------------
  149|  17.5k|        auto it = scn::ranges::begin(source);
  150|   361k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   361k|            auto result = scn::scan<T>(
  152|   361k|                global_locale,
  153|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   361k|                scn::runtime_format(f));
  155|   361k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 17.5k, False: 343k]
  ------------------
  156|  17.5k|                break;
  157|  17.5k|            }
  158|   343k|            it = result->begin();
  159|   343k|        }
  160|  17.5k|    }
  161|       |
  162|       |    // scan_value
  163|  2.92k|    {
  164|  2.92k|        auto it = scn::ranges::begin(source);
  165|  75.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  75.9k|            auto result = scn::scan_value<T>(
  167|  75.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  75.9k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.92k, False: 73.0k]
  ------------------
  169|  2.92k|                break;
  170|  2.92k|            }
  171|  73.0k|            it = result->begin();
  172|  73.0k|        }
  173|  2.92k|    }
  174|  2.92k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.92k|{
   90|  2.92k|    using char_type = ranges::range_value_t<Source>;
   91|  2.92k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.92k|    deque.clear();
   93|  2.92k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.92k|              std::back_inserter(deque));
   95|  2.92k|    return deque;
   96|  2.92k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.92k|{
   79|  2.92k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.92k|        return noncontiguous_buffer;
   81|  2.92k|    }
   82|  2.92k|    else {
   83|  2.92k|        return wnoncontiguous_buffer;
   84|  2.92k|    }
   85|  2.92k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.92k|{
  122|  2.92k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.92k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.92k|    buf.resize(sizeof...(Args));
  125|  2.92k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.92k|    return buf;
  127|  2.92k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.92k|{
  108|  2.92k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.92k|        return format_string_view_buffer;
  110|  2.92k|    }
  111|  2.92k|    else {
  112|  2.92k|        return wformat_string_view_buffer;
  113|  2.92k|    }
  114|  2.92k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  5.84k|{
  182|  5.84k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  5.84k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  5.84k|                                   format_strings);
  185|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.4k|            auto result = scn::scan<T>(
  138|  41.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.4k|                scn::runtime_format(f));
  140|  41.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.41k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.41k|            it = result->begin();
  144|  6.41k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.4k|            auto result = scn::scan<T>(
  152|  41.4k|                global_locale,
  153|  41.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.4k|                scn::runtime_format(f));
  155|  41.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.41k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.41k|            it = result->begin();
  159|  6.41k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.10k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.10k|            auto result = scn::scan_value<T>(
  167|  7.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.10k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.26k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.26k|            it = result->begin();
  172|  1.26k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.5k|            auto result = scn::scan<T>(
  138|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.5k|                scn::runtime_format(f));
  140|  41.5k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.46k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.46k|            it = result->begin();
  144|  6.46k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.5k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.5k|            auto result = scn::scan<T>(
  152|  41.5k|                global_locale,
  153|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.5k|                scn::runtime_format(f));
  155|  41.5k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.46k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.46k|            it = result->begin();
  159|  6.46k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.12k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.12k|            auto result = scn::scan_value<T>(
  167|  7.12k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.12k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.27k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.27k|            it = result->begin();
  172|  1.27k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.5k|            auto result = scn::scan<T>(
  138|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.5k|                scn::runtime_format(f));
  140|  41.5k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.52k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.52k|            it = result->begin();
  144|  6.52k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.5k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.5k|            auto result = scn::scan<T>(
  152|  41.5k|                global_locale,
  153|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.5k|                scn::runtime_format(f));
  155|  41.5k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.52k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.52k|            it = result->begin();
  159|  6.52k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.13k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.13k|            auto result = scn::scan_value<T>(
  167|  7.13k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.13k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.29k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.29k|            it = result->begin();
  172|  1.29k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.4k|            auto result = scn::scan<T>(
  138|  41.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.4k|                scn::runtime_format(f));
  140|  41.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.40k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.40k|            it = result->begin();
  144|  6.40k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.4k|            auto result = scn::scan<T>(
  152|  41.4k|                global_locale,
  153|  41.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.4k|                scn::runtime_format(f));
  155|  41.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.40k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.40k|            it = result->begin();
  159|  6.40k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.10k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.10k|            auto result = scn::scan_value<T>(
  167|  7.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.10k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.25k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.25k|            it = result->begin();
  172|  1.25k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.5k|            auto result = scn::scan<T>(
  138|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.5k|                scn::runtime_format(f));
  140|  41.5k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.44k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.44k|            it = result->begin();
  144|  6.44k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.5k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.5k|            auto result = scn::scan<T>(
  152|  41.5k|                global_locale,
  153|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.5k|                scn::runtime_format(f));
  155|  41.5k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.44k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.44k|            it = result->begin();
  159|  6.44k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.11k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.11k|            auto result = scn::scan_value<T>(
  167|  7.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.11k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.27k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.27k|            it = result->begin();
  172|  1.27k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.84k|{
  133|       |    // Regular scan
  134|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 35.0k, False: 5.84k]
  ------------------
  135|  35.0k|        auto it = scn::ranges::begin(source);
  136|  41.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.5k|            auto result = scn::scan<T>(
  138|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  41.5k|                scn::runtime_format(f));
  140|  41.5k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 35.0k, False: 6.51k]
  ------------------
  141|  35.0k|                break;
  142|  35.0k|            }
  143|  6.51k|            it = result->begin();
  144|  6.51k|        }
  145|  35.0k|    }
  146|       |
  147|       |    // scan localized
  148|  35.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 35.0k, False: 5.84k]
  ------------------
  149|  35.0k|        auto it = scn::ranges::begin(source);
  150|  41.5k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  41.5k|            auto result = scn::scan<T>(
  152|  41.5k|                global_locale,
  153|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  41.5k|                scn::runtime_format(f));
  155|  41.5k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 35.0k, False: 6.51k]
  ------------------
  156|  35.0k|                break;
  157|  35.0k|            }
  158|  6.51k|            it = result->begin();
  159|  6.51k|        }
  160|  35.0k|    }
  161|       |
  162|       |    // scan_value
  163|  5.84k|    {
  164|  5.84k|        auto it = scn::ranges::begin(source);
  165|  7.13k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  7.13k|            auto result = scn::scan_value<T>(
  167|  7.13k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  7.13k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.84k, False: 1.28k]
  ------------------
  169|  5.84k|                break;
  170|  5.84k|            }
  171|  1.28k|            it = result->begin();
  172|  1.28k|        }
  173|  5.84k|    }
  174|  5.84k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  5.84k|{
   90|  5.84k|    using char_type = ranges::range_value_t<Source>;
   91|  5.84k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  5.84k|    deque.clear();
   93|  5.84k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  5.84k|              std::back_inserter(deque));
   95|  5.84k|    return deque;
   96|  5.84k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  5.84k|{
   79|  5.84k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  5.84k|        return noncontiguous_buffer;
   81|  5.84k|    }
   82|  5.84k|    else {
   83|  5.84k|        return wnoncontiguous_buffer;
   84|  5.84k|    }
   85|  5.84k|}

