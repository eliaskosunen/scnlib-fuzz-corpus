_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.07M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.07M|  chars_format const fmt = options.format;
  277|  1.07M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.07M|  parsed_number_string_t<UC> answer;
  280|  1.07M|  answer.valid = false;
  281|  1.07M|  answer.too_many_digits = false;
  282|  1.07M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.07M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.07M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.07M|  UC const * const start_digits = p;
  303|       |
  304|  1.07M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  6.35M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.06M, False: 294k]
  |  Branch (306:25): [True: 5.27M, False: 785k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.27M|    i = 10 * i +
  310|  5.27M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.27M|    ++p;
  312|  5.27M|  }
  313|  1.07M|  UC const * const end_of_integer_part = p;
  314|  1.07M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.07M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.07M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.07M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.07M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.07M|  int64_t exponent = 0;
  324|  1.07M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 785k, False: 294k]
  |  Branch (324:49): [True: 151k, False: 634k]
  ------------------
  325|  1.07M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 151k, False: 928k]
  ------------------
  326|   151k|    ++p;
  327|   151k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   151k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   623k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 572k, False: 50.2k]
  |  Branch (332:27): [True: 471k, False: 101k]
  ------------------
  333|   471k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   471k|      ++p;
  335|   471k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   471k|    }
  337|   151k|    exponent = before - p;
  338|   151k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   151k|    digit_count -= exponent;
  340|   151k|  }
  341|  1.07M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.07M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.07M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.07M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.07M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.07M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.07M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 946k, False: 132k]
  ------------------
  352|  1.07M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 735k, False: 211k]
  ------------------
  353|  1.07M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 108k, False: 626k]
  |  Branch (353:29): [True: 33.4k, False: 593k]
  ------------------
  354|  1.07M|       ||
  355|  1.07M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   937k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 937k]
  ------------------
  356|   937k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   937k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   141k|    UC const * location_of_e = p;
  359|   141k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 108k, False: 33.4k]
  |  Branch (359:28): [True: 33.4k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   141k|      ++p;
  361|   141k|    }
  362|   141k|    bool neg_exp = false;
  363|   141k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 141k, False: 225]
  |  Branch (363:24): [True: 9.01k, False: 132k]
  ------------------
  364|  9.01k|      neg_exp = true;
  365|  9.01k|      ++p;
  366|   132k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 132k, False: 225]
  |  Branch (366:31): [True: 30.3k, False: 102k]
  ------------------
  367|  30.3k|      ++p;
  368|  30.3k|    }
  369|   141k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 141k]
  |  Branch (369:24): [True: 740, False: 140k]
  ------------------
  370|    995|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 995]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    995|      p = location_of_e;
  376|   140k|    } else {
  377|   440k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 393k, False: 46.0k]
  |  Branch (377:29): [True: 299k, False: 94.6k]
  ------------------
  378|   299k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   299k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 283k, False: 15.5k]
  ------------------
  380|   283k|          exp_number = 10 * exp_number + digit;
  381|   283k|        }
  382|   299k|        ++p;
  383|   299k|      }
  384|   140k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 8.96k, False: 131k]
  ------------------
  385|   140k|      exponent += exp_number;
  386|   140k|    }
  387|   937k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   937k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 804k, False: 132k]
  |  Branch (389:44): [True: 0, False: 804k]
  ------------------
  390|   937k|  }
  391|  1.07M|  answer.lastmatch = p;
  392|  1.07M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.07M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 155k, False: 924k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   155k|    UC const * start = start_digits;
  405|  1.47M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.46M, False: 1.26k]
  |  Branch (405:32): [True: 1.28M, False: 181k]
  |  Branch (405:53): [True: 27.3k, False: 153k]
  ------------------
  406|  1.31M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 1.28M, False: 27.3k]
  ------------------
  407|  1.31M|      start++;
  408|  1.31M|    }
  409|       |
  410|   155k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 143k, False: 11.7k]
  ------------------
  411|   143k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   143k|      i = 0;
  416|   143k|      p = answer.integer.ptr;
  417|   143k|      UC const* int_end = p + answer.integer.len();
  418|   143k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.28M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.22M, False: 60.3k]
  |  Branch (419:54): [True: 2.14M, False: 82.9k]
  ------------------
  420|  2.14M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.14M|        ++p;
  422|  2.14M|      }
  423|   143k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 60.3k, False: 82.9k]
  ------------------
  424|  60.3k|        exponent = end_of_integer_part - p + exp_number;
  425|  60.3k|      }
  426|  82.9k|      else { // We have a value with a fractional component.
  427|  82.9k|        p = answer.fraction.ptr;
  428|  82.9k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.72M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.64M, False: 82.9k]
  |  Branch (429:56): [True: 1.64M, False: 0]
  ------------------
  430|  1.64M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.64M|          ++p;
  432|  1.64M|        }
  433|  82.9k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  82.9k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   143k|    }
  437|   155k|  }
  438|  1.07M|  answer.exponent = exponent;
  439|  1.07M|  answer.mantissa = i;
  440|  1.07M|  return answer;
  441|  1.07M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.17M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.17M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 189k, False: 6.98M]
  |  Branch (36:27): [True: 792k, False: 6.19M]
  ------------------
   37|  7.17M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   151k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   663k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 607k, False: 55.8k]
  |  Branch (249:43): [True: 511k, False: 95.5k]
  ------------------
  250|   511k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   511k|    p += 8;
  252|   511k|  }
  253|   151k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   607k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   607k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   607k|     0x8080808080808080));
  172|   607k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.30M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.30M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.30M|  uint64_t val;
   63|  1.30M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.30M|  return val;
   69|  1.30M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   820k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   820k|  const uint64_t mask = 0x000000FF000000FF;
  148|   820k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   820k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   820k|  val -= 0x3030303030303030;
  151|   820k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   820k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   820k|  return uint32_t(val);
  154|   820k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   188k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   188k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   188k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   188k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   188k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.01M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.01M|  chars_format const fmt = options.format;
  277|  1.01M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.01M|  parsed_number_string_t<UC> answer;
  280|  1.01M|  answer.valid = false;
  281|  1.01M|  answer.too_many_digits = false;
  282|  1.01M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.01M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.01M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.01M|  UC const * const start_digits = p;
  303|       |
  304|  1.01M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.74M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 5.39M, False: 343k]
  |  Branch (306:25): [True: 4.72M, False: 675k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.72M|    i = 10 * i +
  310|  4.72M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.72M|    ++p;
  312|  4.72M|  }
  313|  1.01M|  UC const * const end_of_integer_part = p;
  314|  1.01M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.01M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.01M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.01M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.01M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.01M|  int64_t exponent = 0;
  324|  1.01M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 675k, False: 343k]
  |  Branch (324:49): [True: 118k, False: 556k]
  ------------------
  325|  1.01M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 118k, False: 900k]
  ------------------
  326|   118k|    ++p;
  327|   118k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   118k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  3.06M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 3.02M, False: 39.1k]
  |  Branch (332:27): [True: 2.94M, False: 79.6k]
  ------------------
  333|  2.94M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.94M|      ++p;
  335|  2.94M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.94M|    }
  337|   118k|    exponent = before - p;
  338|   118k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   118k|    digit_count -= exponent;
  340|   118k|  }
  341|  1.01M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.01M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.01M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.01M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.01M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.01M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.01M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 886k, False: 132k]
  ------------------
  352|  1.01M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 636k, False: 250k]
  ------------------
  353|  1.01M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 96.5k, False: 540k]
  |  Branch (353:29): [True: 32.7k, False: 507k]
  ------------------
  354|  1.01M|       ||
  355|  1.01M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   889k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 889k]
  ------------------
  356|   889k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   889k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   129k|    UC const * location_of_e = p;
  359|   129k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 96.5k, False: 32.7k]
  |  Branch (359:28): [True: 32.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   129k|      ++p;
  361|   129k|    }
  362|   129k|    bool neg_exp = false;
  363|   129k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 129k, False: 225]
  |  Branch (363:24): [True: 8.77k, False: 120k]
  ------------------
  364|  8.77k|      neg_exp = true;
  365|  8.77k|      ++p;
  366|   120k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 120k, False: 225]
  |  Branch (366:31): [True: 29.4k, False: 90.7k]
  ------------------
  367|  29.4k|      ++p;
  368|  29.4k|    }
  369|   129k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 129k]
  |  Branch (369:24): [True: 685, False: 128k]
  ------------------
  370|    940|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 940]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    940|      p = location_of_e;
  376|   128k|    } else {
  377|   396k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 353k, False: 42.0k]
  |  Branch (377:29): [True: 267k, False: 86.2k]
  ------------------
  378|   267k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   267k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 253k, False: 14.3k]
  ------------------
  380|   253k|          exp_number = 10 * exp_number + digit;
  381|   253k|        }
  382|   267k|        ++p;
  383|   267k|      }
  384|   128k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 8.73k, False: 119k]
  ------------------
  385|   128k|      exponent += exp_number;
  386|   128k|    }
  387|   889k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   889k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 757k, False: 132k]
  |  Branch (389:44): [True: 0, False: 757k]
  ------------------
  390|   889k|  }
  391|  1.01M|  answer.lastmatch = p;
  392|  1.01M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.01M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 118k, False: 900k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   118k|    UC const * start = start_digits;
  405|   866k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 865k, False: 846]
  |  Branch (405:32): [True: 733k, False: 132k]
  |  Branch (405:53): [True: 14.1k, False: 118k]
  ------------------
  406|   747k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 733k, False: 14.1k]
  ------------------
  407|   747k|      start++;
  408|   747k|    }
  409|       |
  410|   118k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 110k, False: 8.52k]
  ------------------
  411|   110k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   110k|      i = 0;
  416|   110k|      p = answer.integer.ptr;
  417|   110k|      UC const* int_end = p + answer.integer.len();
  418|   110k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.78M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.73M, False: 50.1k]
  |  Branch (419:54): [True: 1.67M, False: 60.1k]
  ------------------
  420|  1.67M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.67M|        ++p;
  422|  1.67M|      }
  423|   110k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 50.1k, False: 60.1k]
  ------------------
  424|  50.1k|        exponent = end_of_integer_part - p + exp_number;
  425|  50.1k|      }
  426|  60.1k|      else { // We have a value with a fractional component.
  427|  60.1k|        p = answer.fraction.ptr;
  428|  60.1k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.05M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 994k, False: 60.1k]
  |  Branch (429:56): [True: 994k, False: 0]
  ------------------
  430|   994k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   994k|          ++p;
  432|   994k|        }
  433|  60.1k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  60.1k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   110k|    }
  437|   118k|  }
  438|  1.01M|  answer.exponent = exponent;
  439|  1.01M|  answer.mantissa = i;
  440|  1.01M|  return answer;
  441|  1.01M|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  8.90M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  8.90M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 183k, False: 8.72M]
  |  Branch (36:27): [True: 659k, False: 8.06M]
  ------------------
   37|  8.90M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|   118k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|   118k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|   118k|    return;
  240|   118k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|   119k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   119k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   119k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   119k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   119k|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|   119k|uint64_t read8_to_u64(const UC *chars) {
   54|   119k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|   119k|    uint64_t val = 0;
   56|  1.07M|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 957k, False: 119k]
  ------------------
   57|   957k|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|   957k|      ++chars;
   59|   957k|    }
   60|   119k|    return val;
   61|   119k|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|   119k|}

_ZN10fast_float6bigintC2Ev:
  412|  71.6k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   148k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   236k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   236k|    return small_mul(vec, y);
  565|   236k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   365k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   365k|  limb carry = 0;
  284|  1.48M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.11M, False: 365k]
  ------------------
  285|  1.11M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.11M|  }
  287|   365k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 235k, False: 130k]
  ------------------
  288|   235k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   235k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
  289|   235k|  }
  290|   365k|  return true;
  291|   365k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.85M|  constexpr size_t len() const noexcept {
   77|  2.85M|    return length;
   78|  2.85M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.11M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.11M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.11M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.11M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.11M|  carry = limb(z >> limb_bits);
  235|  1.11M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.11M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  3.02M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  3.02M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  3.02M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  3.02M|    return data[index];
   60|  3.02M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   325k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   325k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 325k, False: 0]
  ------------------
   93|   325k|      push_unchecked(value);
   94|   325k|      return true;
   95|   325k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   325k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   392k|  constexpr size_t capacity() const noexcept {
   83|   392k|    return size;
   84|   392k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   380k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   380k|    data[length] = value;
   88|   380k|    length++;
   89|   380k|  }
_ZN10fast_float6bigint3addEm:
  567|   236k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   236k|    return small_add(vec, y);
  569|   236k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   236k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   236k|  return small_add_from(vec, y, 0);
  277|   236k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   236k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   236k|  size_t index = start;
  259|   236k|  limb carry = y;
  260|   236k|  bool overflow;
  261|   341k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 176k, False: 165k]
  |  Branch (261:24): [True: 104k, False: 71.6k]
  ------------------
  262|   104k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   104k|    carry = limb(overflow);
  264|   104k|    index += 1;
  265|   104k|  }
  266|   236k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 71.6k, False: 165k]
  ------------------
  267|  71.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  71.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 71.6k]
  |  |  ------------------
  ------------------
  268|  71.6k|  }
  269|   236k|  return true;
  270|   236k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   304k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   304k|  limb z;
  211|       |// gcc and clang
  212|   304k|#if defined(__has_builtin)
  213|   304k|  #if __has_builtin(__builtin_add_overflow)
  214|   304k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   304k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   304k|      return z;
  217|   304k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   304k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  16.2k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  16.2k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  16.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
  611|  16.2k|    return pow2(exp);
  612|  16.2k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  71.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  71.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  71.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  77.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 5.42k, False: 71.6k]
  ------------------
  582|  5.42k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  5.42k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.42k]
  |  |  ------------------
  ------------------
  583|  5.42k|      exp -= large_step;
  584|  5.42k|    }
  585|  71.6k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  71.6k|    uint32_t small_step = 27;
  587|  71.6k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   121k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 49.8k, False: 71.6k]
  ------------------
  593|  49.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  49.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 49.8k]
  |  |  ------------------
  ------------------
  594|  49.8k|      exp -= small_step;
  595|  49.8k|    }
  596|  71.6k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 52.0k, False: 19.6k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  52.0k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  52.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 52.0k]
  |  |  ------------------
  ------------------
  601|  52.0k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  52.0k|      );
  603|  52.0k|    }
  604|       |
  605|  71.6k|    return true;
  606|  71.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  5.42k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  5.42k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 5.42k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  5.42k|  } else {
  368|  5.42k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  5.42k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.42k]
  |  |  ------------------
  ------------------
  369|  5.42k|  }
  370|  5.42k|  return true;
  371|  5.42k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  5.42k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  5.42k|  limb_span xs = limb_span(x.data, x.len());
  337|  5.42k|  stackvec<size> z(xs);
  338|  5.42k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  5.42k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 5.42k, False: 0]
  ------------------
  341|  5.42k|    limb y0 = y[0];
  342|  5.42k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  5.42k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.42k]
  |  |  ------------------
  ------------------
  343|  27.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 21.6k, False: 5.42k]
  ------------------
  344|  21.6k|      limb yi = y[index];
  345|  21.6k|      stackvec<size> zi;
  346|  21.6k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 21.6k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  21.6k|        zi.set_len(0);
  349|  21.6k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  21.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.6k]
  |  |  ------------------
  ------------------
  350|  21.6k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  21.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.6k]
  |  |  ------------------
  ------------------
  351|  21.6k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  21.6k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  21.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.6k]
  |  |  ------------------
  ------------------
  353|  21.6k|      }
  354|  21.6k|    }
  355|  5.42k|  }
  356|       |
  357|  5.42k|  x.normalize();
  358|  5.42k|  return true;
  359|  5.42k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  5.42k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  5.42k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  5.42k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  5.42k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  89.2k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  89.2k|    length = uint16_t(len);
   75|  89.2k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  27.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  27.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 27.1k, False: 0]
  ------------------
  108|  27.1k|      extend_unchecked(s);
  109|  27.1k|      return true;
  110|  27.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  27.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  27.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  27.1k|    limb* ptr = data + length;
  102|  27.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  27.1k|    set_len(len() + s.len());
  104|  27.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  21.6k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  21.6k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 21.6k]
  |  Branch (300:26): [True: 21.3k, False: 300]
  ------------------
  301|  21.3k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  21.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
  302|  21.3k|  }
  303|       |
  304|  21.6k|  bool carry = false;
  305|   170k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 148k, False: 21.6k]
  ------------------
  306|   148k|    limb xi = x[index + start];
  307|   148k|    limb yi = y[index];
  308|   148k|    bool c1 = false;
  309|   148k|    bool c2 = false;
  310|   148k|    xi = scalar_add(xi, yi, c1);
  311|   148k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 50.8k, False: 97.8k]
  ------------------
  312|  50.8k|      xi = scalar_add(xi, 1, c2);
  313|  50.8k|    }
  314|   148k|    x[index + start] = xi;
  315|   148k|    carry = c1 | c2;
  316|   148k|  }
  317|       |
  318|       |  // handle overflow
  319|  21.6k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 21.6k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  21.6k|  return true;
  323|  21.6k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  21.3k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  21.3k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 21.3k]
  ------------------
  132|      0|      return false;
  133|  21.3k|    } else {
  134|  21.3k|      resize_unchecked(new_len, value);
  135|  21.3k|      return true;
  136|  21.3k|    }
  137|  21.3k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  21.3k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  21.3k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 21.3k, False: 0]
  ------------------
  120|  21.3k|      size_t count = new_len - len();
  121|  21.3k|      limb* first = data + len();
  122|  21.3k|      limb* last = first + count;
  123|  21.3k|      ::std::fill(first, last, value);
  124|  21.3k|      set_len(new_len);
  125|  21.3k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  21.3k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  60.8k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  60.8k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 60.8k, False: 0]
  |  Branch (152:25): [True: 0, False: 60.8k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  60.8k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   108k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   108k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   108k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   108k|    size_t rindex = length - index - 1;
   69|   108k|    return data[rindex];
   70|   108k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  71.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  71.5k|    return shl(exp);
  574|  71.5k|  }
_ZN10fast_float6bigint3shlEm:
  530|  71.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  71.5k|    size_t rem = n % limb_bits;
  532|  71.5k|    size_t div = n / limb_bits;
  533|  71.5k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 55.0k, False: 16.5k]
  ------------------
  534|  55.0k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  55.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 55.0k]
  |  |  ------------------
  ------------------
  535|  55.0k|    }
  536|  71.5k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 19.0k, False: 52.5k]
  ------------------
  537|  19.0k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  19.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 19.0k]
  |  |  ------------------
  ------------------
  538|  19.0k|    }
  539|  71.5k|    return true;
  540|  71.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  55.0k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  55.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  55.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  55.0k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  55.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  55.0k|    size_t shl = n;
  493|  55.0k|    size_t shr = limb_bits - shl;
  494|  55.0k|    limb prev = 0;
  495|   196k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 141k, False: 55.0k]
  ------------------
  496|   141k|      limb xi = vec[index];
  497|   141k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   141k|      prev = xi;
  499|   141k|    }
  500|       |
  501|  55.0k|    limb carry = prev >> shr;
  502|  55.0k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 18.5k, False: 36.5k]
  ------------------
  503|  18.5k|      return vec.try_push(carry);
  504|  18.5k|    }
  505|  36.5k|    return true;
  506|  55.0k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  19.0k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  19.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  19.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  19.0k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 19.0k]
  ------------------
  512|      0|      return false;
  513|  19.0k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 19.0k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  19.0k|      limb* dst = vec.data + n;
  516|  19.0k|      const limb* src = vec.data;
  517|  19.0k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  19.0k|      limb* first = vec.data;
  520|  19.0k|      limb* last = first + n;
  521|  19.0k|      ::std::fill(first, last, 0);
  522|  19.0k|      vec.set_len(n + vec.len());
  523|  19.0k|      return true;
  524|  19.0k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  19.0k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  35.3k|  constexpr bool is_empty() const noexcept {
   80|  35.3k|    return length == 0;
   81|  35.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  16.2k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  16.2k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  16.2k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 16.2k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  16.2k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.43k, False: 14.8k]
  ------------------
  435|  1.43k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  14.8k|    } else {
  437|  14.8k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  14.8k|      truncated |= vec.nonzero(2);
  439|  14.8k|      return result;
  440|  14.8k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  16.2k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.43k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.43k|  truncated = false;
  167|  1.43k|  int shl = leading_zeroes(r0);
  168|  1.43k|  return r0 << shl;
  169|  1.43k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  14.8k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  14.8k|  int shl = leading_zeroes(r0);
  174|  14.8k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 14.8k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  14.8k|  } else {
  178|  14.8k|    int shr = 64 - shl;
  179|  14.8k|    truncated = (r1 << shl) != 0;
  180|  14.8k|    return (r0 << shl) | (r1 >> shr);
  181|  14.8k|  }
  182|  14.8k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  14.8k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  14.8k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 619, False: 14.2k]
  ------------------
  143|    619|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 583, False: 36]
  ------------------
  144|    583|        return true;
  145|    583|      }
  146|     36|      index++;
  147|     36|    }
  148|  14.2k|    return false;
  149|  14.8k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  16.2k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  16.2k|    int lz = ctlz();
  560|  16.2k|    return int(limb_bits * vec.len()) - lz;
  561|  16.2k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  16.2k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  16.2k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 16.2k]
  ------------------
  545|      0|      return 0;
  546|  16.2k|    } else {
  547|  16.2k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  16.2k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  16.2k|    }
  555|  16.2k|  }
_ZN10fast_float6bigintC2Em:
  418|  55.3k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  55.3k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  55.3k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  55.3k|    vec.normalize();
  426|  55.3k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  55.3k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  55.3k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 55.3k]
  ------------------
  464|      0|      return 1;
  465|  55.3k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 55.3k]
  ------------------
  466|      0|      return -1;
  467|  55.3k|    } else {
  468|   110k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 101k, False: 8.67k]
  ------------------
  469|   101k|        limb xi = vec[index - 1];
  470|   101k|        limb yi = other.vec[index - 1];
  471|   101k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 4.86k, False: 96.8k]
  ------------------
  472|  4.86k|          return 1;
  473|  96.8k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 41.8k, False: 55.0k]
  ------------------
  474|  41.8k|          return -1;
  475|  41.8k|        }
  476|   101k|      }
  477|  8.67k|      return 0;
  478|  55.3k|    }
  479|  55.3k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   203k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   203k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   203k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   203k|    return data[index];
   64|   203k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   376k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   376k|  adjusted_mantissa answer;
   96|   376k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.30k, False: 372k]
  |  Branch (96:19): [True: 1.62k, False: 371k]
  ------------------
   97|  4.92k|    answer.power2 = 0;
   98|  4.92k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.92k|    return answer;
  101|  4.92k|  }
  102|   371k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.32k, False: 364k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.32k|    answer.power2 = binary::infinite_power();
  105|  6.32k|    answer.mantissa = 0;
  106|  6.32k|    return answer;
  107|  6.32k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   364k|  int lz = leading_zeroes(w);
  112|   364k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   364k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   364k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   364k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   364k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   364k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 618, False: 364k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    618|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 582]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    582|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    582|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    582|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    582|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 582, False: 0]
  ------------------
  156|    582|    return answer;
  157|    618|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   364k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 147k, False: 217k]
  |  Branch (162:30): [True: 146k, False: 410]
  |  Branch (162:77): [True: 138k, False: 7.85k]
  ------------------
  163|   364k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 23.9k, False: 114k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  23.9k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 10.1k, False: 13.7k]
  ------------------
  168|  10.1k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  10.1k|    }
  170|  23.9k|  }
  171|       |
  172|   364k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   364k|  answer.mantissa >>= 1;
  174|   364k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 25.2k, False: 339k]
  ------------------
  175|  25.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  25.2k|    answer.power2++; // undo previous addition
  177|  25.2k|  }
  178|       |
  179|   364k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   364k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.84k, False: 361k]
  ------------------
  181|  2.84k|    answer.power2 = binary::infinite_power();
  182|  2.84k|    answer.mantissa = 0;
  183|  2.84k|  }
  184|   364k|  return answer;
  185|   364k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   397k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   397k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   397k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   397k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   397k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   397k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   397k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 57.1k, False: 340k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  57.1k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  57.1k|    firstproduct.low += secondproduct.high;
   35|  57.1k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.9k, False: 8.18k]
  ------------------
   36|  48.9k|      firstproduct.high++;
   37|  48.9k|    }
   38|  57.1k|  }
   39|   397k|  return firstproduct;
   40|   397k|}
_ZN10fast_float6detail5powerEi:
   58|   785k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   785k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   785k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  32.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  32.3k|  int lz = leading_zeroes(w);
   82|  32.3k|  w <<= lz;
   83|  32.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  32.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  32.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  32.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  32.3k|  int hilz = int(w >> 63) ^ 1;
   69|  32.3k|  adjusted_mantissa answer;
   70|  32.3k|  answer.mantissa = w << hilz;
   71|  32.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  32.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  32.3k|  return answer;
   74|  32.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   356k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   356k|  adjusted_mantissa answer;
   96|   356k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.03k, False: 353k]
  |  Branch (96:19): [True: 567, False: 352k]
  ------------------
   97|  3.60k|    answer.power2 = 0;
   98|  3.60k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.60k|    return answer;
  101|  3.60k|  }
  102|   352k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.70k, False: 348k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.70k|    answer.power2 = binary::infinite_power();
  105|  3.70k|    answer.mantissa = 0;
  106|  3.70k|    return answer;
  107|  3.70k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   348k|  int lz = leading_zeroes(w);
  112|   348k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   348k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   348k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   348k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   348k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   348k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 11.0k, False: 337k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  11.0k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 92, False: 10.9k]
  ------------------
  137|     92|      answer.power2 = 0;
  138|     92|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     92|      return answer;
  141|     92|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  10.9k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  10.9k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  10.9k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  10.9k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 10.9k, False: 0]
  ------------------
  156|  10.9k|    return answer;
  157|  11.0k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   337k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 108k, False: 229k]
  |  Branch (162:30): [True: 69.1k, False: 39.2k]
  |  Branch (162:77): [True: 65.3k, False: 3.84k]
  ------------------
  163|   337k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 19.1k, False: 46.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  19.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.9k, False: 5.18k]
  ------------------
  168|  13.9k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.9k|    }
  170|  19.1k|  }
  171|       |
  172|   337k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   337k|  answer.mantissa >>= 1;
  174|   337k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 23.5k, False: 314k]
  ------------------
  175|  23.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  23.5k|    answer.power2++; // undo previous addition
  177|  23.5k|  }
  178|       |
  179|   337k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   337k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 286, False: 337k]
  ------------------
  181|    286|    answer.power2 = binary::infinite_power();
  182|    286|    answer.mantissa = 0;
  183|    286|  }
  184|   337k|  return answer;
  185|   348k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   388k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   388k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   388k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   388k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   388k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   388k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   388k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 74.3k, False: 313k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  74.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  74.3k|    firstproduct.low += secondproduct.high;
   35|  74.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 46.4k, False: 27.8k]
  ------------------
   36|  46.4k|      firstproduct.high++;
   37|  46.4k|    }
   38|  74.3k|  }
   39|   388k|  return firstproduct;
   40|   388k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  39.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  39.3k|  int lz = leading_zeroes(w);
   82|  39.3k|  w <<= lz;
   83|  39.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  39.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  39.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  39.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  39.3k|  int hilz = int(w >> 63) ^ 1;
   69|  39.3k|  adjusted_mantissa answer;
   70|  39.3k|  answer.mantissa = w << hilz;
   71|  39.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  39.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  39.3k|  return answer;
   74|  39.3k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  17.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  17.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  17.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  17.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  17.6k|  size_t digits = 0;
  413|  17.6k|  bigint bigmant;
  414|  17.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  17.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  17.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 405, False: 17.2k]
  ------------------
  418|    405|    return positive_digit_comp<T>(bigmant, exponent);
  419|  17.2k|  } else {
  420|  17.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  17.2k|  }
  422|  17.6k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  42.2k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  42.2k|  uint64_t mantissa = num.mantissa;
   30|  42.2k|  int32_t exponent = int32_t(num.exponent);
   31|   211k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 169k, False: 42.2k]
  ------------------
   32|   169k|    mantissa /= 10000;
   33|   169k|    exponent += 4;
   34|   169k|  }
   35|  84.5k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 42.2k, False: 42.2k]
  ------------------
   36|  42.2k|    mantissa /= 100;
   37|  42.2k|    exponent += 2;
   38|  42.2k|  }
   39|  42.2k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 42.2k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  42.2k|  return exponent;
   44|  42.2k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  42.2k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  42.2k|  size_t counter = 0;
  245|  42.2k|  digits = 0;
  246|  42.2k|  limb value = 0;
  247|  42.2k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  42.2k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  42.2k|  UC const * p = num.integer.ptr;
  255|  42.2k|  UC const * pend = p + num.integer.len();
  256|  42.2k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  83.9k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 41.6k, False: 42.2k]
  ------------------
  259|  76.8k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 40.8k, False: 35.9k]
  |  Branch (259:45): [True: 35.1k, False: 5.71k]
  |  Branch (259:70): [True: 35.1k, False: 0]
  ------------------
  260|  35.1k|      parse_eight_digits(p, value, counter, digits);
  261|  35.1k|    }
  262|   167k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 157k, False: 9.92k]
  |  Branch (262:30): [True: 126k, False: 31.7k]
  |  Branch (262:43): [True: 126k, False: 0]
  ------------------
  263|   126k|      parse_one_digit(p, value, counter, digits);
  264|   126k|    }
  265|  41.6k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 41.6k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  41.6k|    } else {
  277|  41.6k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  41.6k|      counter = 0;
  279|  41.6k|      value = 0;
  280|  41.6k|    }
  281|  41.6k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  42.2k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 33.2k, False: 9.07k]
  ------------------
  285|  33.2k|    p = num.fraction.ptr;
  286|  33.2k|    pend = p + num.fraction.len();
  287|  33.2k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 10.5k, False: 22.7k]
  ------------------
  288|  10.5k|      skip_zeros(p, pend);
  289|  10.5k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   128k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 98.2k, False: 30.2k]
  ------------------
  292|   251k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 213k, False: 38.4k]
  |  Branch (292:47): [True: 155k, False: 58.2k]
  |  Branch (292:72): [True: 153k, False: 1.50k]
  ------------------
  293|   153k|        parse_eight_digits(p, value, counter, digits);
  294|   153k|      }
  295|   410k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 344k, False: 66.0k]
  |  Branch (295:32): [True: 314k, False: 29.6k]
  |  Branch (295:45): [True: 312k, False: 2.47k]
  ------------------
  296|   312k|        parse_one_digit(p, value, counter, digits);
  297|   312k|      }
  298|  98.2k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.94k, False: 95.2k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.94k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.94k|        bool truncated = is_truncated(p, pend);
  302|  2.94k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.17k, False: 769]
  ------------------
  303|  2.17k|          round_up_bigint(result, digits);
  304|  2.17k|        }
  305|  2.94k|        return;
  306|  95.2k|      } else {
  307|  95.2k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  95.2k|        counter = 0;
  309|  95.2k|        value = 0;
  310|  95.2k|      }
  311|  98.2k|    }
  312|  33.2k|  }
  313|       |
  314|  39.3k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 39.3k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  39.3k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  52.7k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  52.7k|  uint64_t val;
  161|   103k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 83.9k, False: 19.4k]
  ------------------
  162|  83.9k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  83.9k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 33.3k, False: 50.6k]
  ------------------
  164|  33.3k|      break;
  165|  33.3k|    }
  166|  50.6k|    first += int_cmp_len<UC>();
  167|  50.6k|  }
  168|   142k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 131k, False: 10.5k]
  ------------------
  169|   131k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 42.2k, False: 89.2k]
  ------------------
  170|  42.2k|      break;
  171|  42.2k|    }
  172|  89.2k|    first++;
  173|  89.2k|  }
  174|  52.7k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   188k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   188k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   188k|  p += 8;
  210|   188k|  counter += 8;
  211|   188k|  count += 8;
  212|   188k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   438k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   438k|  value = value * 10 + limb(*p - UC('0'));
  218|   438k|  p++;
  219|   438k|  counter++;
  220|   438k|  count++;
  221|   438k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   236k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   236k|  big.mul(power);
  226|   236k|  big.add(value);
  227|   236k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  2.94k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.94k|  uint64_t val;
  183|  4.87k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 3.09k, False: 1.77k]
  ------------------
  184|  3.09k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  3.09k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.16k, False: 1.92k]
  ------------------
  186|  1.16k|      return true;
  187|  1.16k|    }
  188|  1.92k|    first += int_cmp_len<UC>();
  189|  1.92k|  }
  190|  2.44k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 1.67k, False: 769]
  ------------------
  191|  1.67k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.00k, False: 666]
  ------------------
  192|  1.00k|      return true;
  193|  1.00k|    }
  194|    666|    ++first;
  195|    666|  }
  196|    769|  return false;
  197|  1.77k|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  4.22k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  4.22k|  add_native(big, 10, 1);
  234|  4.22k|  count++;
  235|  4.22k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    765|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    765|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    765|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    765|  adjusted_mantissa answer;
  324|    765|  bool truncated;
  325|    765|  answer.mantissa = bigmant.hi64(truncated);
  326|    765|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    765|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    765|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    765|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    765|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    765|    });
  333|    765|  });
  334|       |
  335|    765|  return answer;
  336|    765|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    765|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    765|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    765|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 765]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    765|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    765|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 765]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    765|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    765|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 765]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    765|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    765|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    765|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    765|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    765|    });
  333|    765|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    765|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    765|  const uint64_t mask
  125|    765|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 765]
  ------------------
  126|    765|    ? UINT64_MAX
  127|    765|    : (uint64_t(1) << shift) - 1;
  128|    765|  const uint64_t halfway
  129|    765|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 765]
  ------------------
  130|    765|    ? 0
  131|    765|    : uint64_t(1) << (shift - 1);
  132|    765|  uint64_t truncated_bits = am.mantissa & mask;
  133|    765|  bool is_above = truncated_bits > halfway;
  134|    765|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    765|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 765]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    765|  } else {
  140|    765|    am.mantissa >>= shift;
  141|    765|  }
  142|    765|  am.power2 += shift;
  143|       |
  144|    765|  bool is_odd = (am.mantissa & 1) == 1;
  145|    765|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    765|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    765|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    765|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 77, False: 688]
  |  Branch (331:27): [True: 576, False: 112]
  |  Branch (331:41): [True: 0, False: 576]
  |  Branch (331:56): [True: 76, False: 612]
  |  Branch (331:66): [True: 25, False: 51]
  ------------------
  332|    765|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  31.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  31.5k|  bigint& real_digits = bigmant;
  347|  31.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  31.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  31.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  31.5k|  T b;
  354|  31.5k|  to_float(false, am_b, b);
  355|  31.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  31.5k|  bigint theor_digits(theor.mantissa);
  357|  31.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  31.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  31.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  31.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 31.5k, False: 0]
  ------------------
  363|  31.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  31.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  31.5k|  }
  365|  31.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 31.5k, False: 0]
  ------------------
  366|  31.5k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  31.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  31.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  31.5k|  int ord = real_digits.compare(theor_digits);
  373|  31.5k|  adjusted_mantissa answer = am;
  374|  31.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  31.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  31.5k|      (void)_;  // not needed, since we've done our comparison
  377|  31.5k|      (void)__; // not needed, since we've done our comparison
  378|  31.5k|      if (ord > 0) {
  379|  31.5k|        return true;
  380|  31.5k|      } else if (ord < 0) {
  381|  31.5k|        return false;
  382|  31.5k|      } else {
  383|  31.5k|        return is_odd;
  384|  31.5k|      }
  385|  31.5k|    });
  386|  31.5k|  });
  387|       |
  388|  31.5k|  return answer;
  389|  31.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  31.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  31.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  31.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 31.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  31.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  31.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 31.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  31.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  31.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 31.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  31.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  31.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  55.3k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  55.3k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 55.3k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  55.3k|  } else {
  153|  55.3k|    am.mantissa >>= shift;
  154|  55.3k|  }
  155|  55.3k|  am.power2 += shift;
  156|  55.3k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  31.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  31.5k|  adjusted_mantissa am = to_extended(value);
   84|  31.5k|  am.mantissa <<= 1;
   85|  31.5k|  am.mantissa += 1;
   86|  31.5k|  am.power2 -= 1;
   87|  31.5k|  return am;
   88|  31.5k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  31.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  31.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  31.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  31.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  31.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  31.5k|  adjusted_mantissa am;
   56|  31.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  31.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  31.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  31.5k|#endif
   63|  31.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 31.5k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  31.5k|  } else {
   68|       |    // normal
   69|  31.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  31.5k|    am.power2 -= bias;
   71|  31.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  31.5k|  }
   73|       |
   74|  31.5k|  return am;
   75|  31.5k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  31.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  31.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  31.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 31.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  31.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  31.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 31.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  31.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  31.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 31.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  31.5k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  31.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  31.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  31.5k|      (void)_;  // not needed, since we've done our comparison
  377|  31.5k|      (void)__; // not needed, since we've done our comparison
  378|  31.5k|      if (ord > 0) {
  379|  31.5k|        return true;
  380|  31.5k|      } else if (ord < 0) {
  381|  31.5k|        return false;
  382|  31.5k|      } else {
  383|  31.5k|        return is_odd;
  384|  31.5k|      }
  385|  31.5k|    });
  386|  31.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  31.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  31.5k|  const uint64_t mask
  125|  31.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 31.5k]
  ------------------
  126|  31.5k|    ? UINT64_MAX
  127|  31.5k|    : (uint64_t(1) << shift) - 1;
  128|  31.5k|  const uint64_t halfway
  129|  31.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 31.5k]
  ------------------
  130|  31.5k|    ? 0
  131|  31.5k|    : uint64_t(1) << (shift - 1);
  132|  31.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  31.5k|  bool is_above = truncated_bits > halfway;
  134|  31.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  31.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 31.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  31.5k|  } else {
  140|  31.5k|    am.mantissa >>= shift;
  141|  31.5k|  }
  142|  31.5k|  am.power2 += shift;
  143|       |
  144|  31.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  31.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  31.5k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  31.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  31.5k|      (void)_;  // not needed, since we've done our comparison
  377|  31.5k|      (void)__; // not needed, since we've done our comparison
  378|  31.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 197, False: 31.3k]
  ------------------
  379|    197|        return true;
  380|  31.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 23.7k, False: 7.69k]
  ------------------
  381|  23.7k|        return false;
  382|  23.7k|      } else {
  383|  7.69k|        return is_odd;
  384|  7.69k|      }
  385|  31.5k|    });
_ZN10fast_float10digit_compIfDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.6k|  size_t digits = 0;
  413|  14.6k|  bigint bigmant;
  414|  14.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 360, False: 14.3k]
  ------------------
  418|    360|    return positive_digit_comp<T>(bigmant, exponent);
  419|  14.3k|  } else {
  420|  14.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  14.3k|  }
  422|  14.6k|}
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|  29.3k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  29.3k|  uint64_t mantissa = num.mantissa;
   30|  29.3k|  int32_t exponent = int32_t(num.exponent);
   31|   146k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 117k, False: 29.3k]
  ------------------
   32|   117k|    mantissa /= 10000;
   33|   117k|    exponent += 4;
   34|   117k|  }
   35|  58.7k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 29.3k, False: 29.3k]
  ------------------
   36|  29.3k|    mantissa /= 100;
   37|  29.3k|    exponent += 2;
   38|  29.3k|  }
   39|  29.3k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 29.3k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  29.3k|  return exponent;
   44|  29.3k|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  29.3k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  29.3k|  size_t counter = 0;
  245|  29.3k|  digits = 0;
  246|  29.3k|  limb value = 0;
  247|  29.3k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  29.3k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  29.3k|  UC const * p = num.integer.ptr;
  255|  29.3k|  UC const * pend = p + num.integer.len();
  256|  29.3k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  61.4k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 32.0k, False: 29.3k]
  ------------------
  259|  58.6k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 31.2k, False: 27.3k]
  |  Branch (259:45): [True: 26.6k, False: 4.66k]
  |  Branch (259:70): [True: 26.6k, False: 0]
  ------------------
  260|  26.6k|      parse_eight_digits(p, value, counter, digits);
  261|  26.6k|    }
  262|   129k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 121k, False: 7.43k]
  |  Branch (262:30): [True: 97.3k, False: 24.5k]
  |  Branch (262:43): [True: 97.3k, False: 0]
  ------------------
  263|  97.3k|      parse_one_digit(p, value, counter, digits);
  264|  97.3k|    }
  265|  32.0k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 32.0k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  32.0k|    } else {
  277|  32.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  32.0k|      counter = 0;
  279|  32.0k|      value = 0;
  280|  32.0k|    }
  281|  32.0k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  29.3k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 22.7k, False: 6.65k]
  ------------------
  285|  22.7k|    p = num.fraction.ptr;
  286|  22.7k|    pend = p + num.fraction.len();
  287|  22.7k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 4.81k, False: 17.9k]
  ------------------
  288|  4.81k|      skip_zeros(p, pend);
  289|  4.81k|    }
  290|       |    // process all digits, in increments of step per loop
  291|  80.5k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 60.5k, False: 19.9k]
  ------------------
  292|   153k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 128k, False: 25.0k]
  |  Branch (292:47): [True: 94.5k, False: 34.1k]
  |  Branch (292:72): [True: 93.1k, False: 1.42k]
  ------------------
  293|  93.1k|        parse_eight_digits(p, value, counter, digits);
  294|  93.1k|      }
  295|   250k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 211k, False: 38.4k]
  |  Branch (295:32): [True: 191k, False: 19.7k]
  |  Branch (295:45): [True: 189k, False: 2.30k]
  ------------------
  296|   189k|        parse_one_digit(p, value, counter, digits);
  297|   189k|      }
  298|  60.5k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.75k, False: 57.8k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.75k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.75k|        bool truncated = is_truncated(p, pend);
  302|  2.75k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.04k, False: 707]
  ------------------
  303|  2.04k|          round_up_bigint(result, digits);
  304|  2.04k|        }
  305|  2.75k|        return;
  306|  57.8k|      } else {
  307|  57.8k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  57.8k|        counter = 0;
  309|  57.8k|        value = 0;
  310|  57.8k|      }
  311|  60.5k|    }
  312|  22.7k|  }
  313|       |
  314|  26.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 26.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  26.6k|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|  34.2k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  34.2k|  uint64_t val;
  161|   165k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 159k, False: 6.43k]
  ------------------
  162|   159k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   159k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 27.7k, False: 131k]
  ------------------
  164|  27.7k|      break;
  165|  27.7k|    }
  166|   131k|    first += int_cmp_len<UC>();
  167|   131k|  }
  168|  44.6k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 39.8k, False: 4.81k]
  ------------------
  169|  39.8k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 29.3k, False: 10.4k]
  ------------------
  170|  29.3k|      break;
  171|  29.3k|    }
  172|  10.4k|    first++;
  173|  10.4k|  }
  174|  34.2k|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|   119k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   119k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   119k|  p += 8;
  210|   119k|  counter += 8;
  211|   119k|  count += 8;
  212|   119k|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|   286k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   286k|  value = value * 10 + limb(*p - UC('0'));
  218|   286k|  p++;
  219|   286k|  counter++;
  220|   286k|  count++;
  221|   286k|}
_ZN10fast_float12is_truncatedIDiEEbPKT_S3_:
  180|  2.75k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.75k|  uint64_t val;
  183|  11.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 10.1k, False: 1.09k]
  ------------------
  184|  10.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  10.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.65k, False: 8.50k]
  ------------------
  186|  1.65k|      return true;
  187|  1.65k|    }
  188|  8.50k|    first += int_cmp_len<UC>();
  189|  8.50k|  }
  190|  1.20k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 502, False: 707]
  ------------------
  191|    502|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 387, False: 115]
  ------------------
  192|    387|      return true;
  193|    387|    }
  194|    115|    ++first;
  195|    115|  }
  196|    707|  return false;
  197|  1.09k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  24.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  24.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  24.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  24.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  24.5k|  size_t digits = 0;
  413|  24.5k|  bigint bigmant;
  414|  24.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  24.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  24.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 8.95k, False: 15.6k]
  ------------------
  418|  8.95k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  15.6k|  } else {
  420|  15.6k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  15.6k|  }
  422|  24.5k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  15.5k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  15.5k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  15.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  15.5k|  adjusted_mantissa answer;
  324|  15.5k|  bool truncated;
  325|  15.5k|  answer.mantissa = bigmant.hi64(truncated);
  326|  15.5k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  15.5k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  15.5k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.5k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.5k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.5k|    });
  333|  15.5k|  });
  334|       |
  335|  15.5k|  return answer;
  336|  15.5k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  15.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  15.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  15.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 15.5k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  15.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  15.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 555, False: 14.9k]
  ------------------
  109|    555|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    555|    am.power2++;
  111|    555|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  15.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  15.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 15.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  15.5k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  15.5k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  15.5k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.5k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  15.5k|    });
  333|  15.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  15.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  15.5k|  const uint64_t mask
  125|  15.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 15.5k]
  ------------------
  126|  15.5k|    ? UINT64_MAX
  127|  15.5k|    : (uint64_t(1) << shift) - 1;
  128|  15.5k|  const uint64_t halfway
  129|  15.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 15.5k]
  ------------------
  130|  15.5k|    ? 0
  131|  15.5k|    : uint64_t(1) << (shift - 1);
  132|  15.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  15.5k|  bool is_above = truncated_bits > halfway;
  134|  15.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  15.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 15.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  15.5k|  } else {
  140|  15.5k|    am.mantissa >>= shift;
  141|  15.5k|  }
  142|  15.5k|  am.power2 += shift;
  143|       |
  144|  15.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  15.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  15.5k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  15.5k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  15.5k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 671, False: 14.8k]
  |  Branch (331:27): [True: 14.0k, False: 770]
  |  Branch (331:41): [True: 5.20k, False: 8.88k]
  |  Branch (331:56): [True: 354, False: 9.29k]
  |  Branch (331:66): [True: 89, False: 265]
  ------------------
  332|  15.5k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  23.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  23.7k|  bigint& real_digits = bigmant;
  347|  23.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  23.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  23.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  23.7k|  T b;
  354|  23.7k|  to_float(false, am_b, b);
  355|  23.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  23.7k|  bigint theor_digits(theor.mantissa);
  357|  23.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  23.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  23.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  23.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 23.7k, False: 0]
  ------------------
  363|  23.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  23.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  23.7k|  }
  365|  23.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 4.57k, False: 19.2k]
  ------------------
  366|  4.57k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  4.57k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  19.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 19.1k, False: 114]
  ------------------
  368|  19.1k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  19.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  19.1k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  23.7k|  int ord = real_digits.compare(theor_digits);
  373|  23.7k|  adjusted_mantissa answer = am;
  374|  23.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  23.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.7k|      (void)_;  // not needed, since we've done our comparison
  377|  23.7k|      (void)__; // not needed, since we've done our comparison
  378|  23.7k|      if (ord > 0) {
  379|  23.7k|        return true;
  380|  23.7k|      } else if (ord < 0) {
  381|  23.7k|        return false;
  382|  23.7k|      } else {
  383|  23.7k|        return is_odd;
  384|  23.7k|      }
  385|  23.7k|    });
  386|  23.7k|  });
  387|       |
  388|  23.7k|  return answer;
  389|  23.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  23.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  23.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  23.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 156, False: 23.6k]
  ------------------
   96|       |    // have a denormal float
   97|    156|    int32_t shift = -am.power2 + 1;
   98|    156|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    156|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 156, False: 0]
  ------------------
  101|    156|    return;
  102|    156|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  23.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  23.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 23.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  23.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  23.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 23.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  23.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  23.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  23.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  23.7k|  adjusted_mantissa am = to_extended(value);
   84|  23.7k|  am.mantissa <<= 1;
   85|  23.7k|  am.mantissa += 1;
   86|  23.7k|  am.power2 -= 1;
   87|  23.7k|  return am;
   88|  23.7k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  23.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  23.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  23.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  23.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  23.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  23.7k|  adjusted_mantissa am;
   56|  23.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  23.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  23.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  23.7k|#endif
   63|  23.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 156, False: 23.6k]
  ------------------
   64|       |    // denormal
   65|    156|    am.power2 = 1 - bias;
   66|    156|    am.mantissa = bits & mantissa_mask;
   67|  23.6k|  } else {
   68|       |    // normal
   69|  23.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  23.6k|    am.power2 -= bias;
   71|  23.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  23.6k|  }
   73|       |
   74|  23.7k|  return am;
   75|  23.7k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  23.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  23.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  23.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 156, False: 23.6k]
  ------------------
   96|       |    // have a denormal float
   97|    156|    int32_t shift = -am.power2 + 1;
   98|    156|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    156|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 156, False: 0]
  ------------------
  101|    156|    return;
  102|    156|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  23.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  23.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 72, False: 23.5k]
  ------------------
  109|     72|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     72|    am.power2++;
  111|     72|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  23.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  23.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 23.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  23.6k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  23.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  23.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.7k|      (void)_;  // not needed, since we've done our comparison
  377|  23.7k|      (void)__; // not needed, since we've done our comparison
  378|  23.7k|      if (ord > 0) {
  379|  23.7k|        return true;
  380|  23.7k|      } else if (ord < 0) {
  381|  23.7k|        return false;
  382|  23.7k|      } else {
  383|  23.7k|        return is_odd;
  384|  23.7k|      }
  385|  23.7k|    });
  386|  23.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  23.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  23.7k|  const uint64_t mask
  125|  23.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 23.7k]
  ------------------
  126|  23.7k|    ? UINT64_MAX
  127|  23.7k|    : (uint64_t(1) << shift) - 1;
  128|  23.7k|  const uint64_t halfway
  129|  23.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 23.7k]
  ------------------
  130|  23.7k|    ? 0
  131|  23.7k|    : uint64_t(1) << (shift - 1);
  132|  23.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  23.7k|  bool is_above = truncated_bits > halfway;
  134|  23.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  23.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 23.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  23.7k|  } else {
  140|  23.7k|    am.mantissa >>= shift;
  141|  23.7k|  }
  142|  23.7k|  am.power2 += shift;
  143|       |
  144|  23.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  23.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  23.7k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  23.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.7k|      (void)_;  // not needed, since we've done our comparison
  377|  23.7k|      (void)__; // not needed, since we've done our comparison
  378|  23.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 4.66k, False: 19.1k]
  ------------------
  379|  4.66k|        return true;
  380|  19.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 18.1k, False: 977]
  ------------------
  381|  18.1k|        return false;
  382|  18.1k|      } else {
  383|    977|        return is_odd;
  384|    977|      }
  385|  23.7k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.7k|  size_t digits = 0;
  413|  14.7k|  bigint bigmant;
  414|  14.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.57k, False: 8.14k]
  ------------------
  418|  6.57k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  8.14k|  } else {
  420|  8.14k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  8.14k|  }
  422|  14.7k|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.15M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.23M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   301k|  constexpr size_t len() const noexcept {
  238|   301k|    return length;
  239|   301k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   994k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   994k|  return -10;
  469|   994k|#endif
  470|   994k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   958k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   958k|  return 10;
  517|   958k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   812k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   812k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   812k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.53M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.53M|  return 23;
  477|  2.53M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   737k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   737k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   737k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   875k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   372k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   372k|  return -65;
  568|   372k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   371k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   371k|  return 38;
  559|   371k|}
_ZN10fast_float14leading_zeroesEm:
  268|   818k|int leading_zeroes(uint64_t input_num) {
  269|   818k|  assert(input_num > 0);
  270|   818k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   818k|  return __builtin_clzll(input_num);
  285|   818k|#endif
  286|   818k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   916k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   916k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   916k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|   916k|  __uint128_t r = ((__uint128_t)a) * b;
  336|   916k|  answer.low = uint64_t(r);
  337|   916k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   916k|  return answer;
  342|   916k|}
_ZN10fast_float8value128C2Ev:
  251|   916k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   429k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   429k|  return -127;
  500|   429k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   147k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   147k|  return -17;
  493|   147k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   146k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   146k|  return 10;
  485|   146k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   253k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   253k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 71.6k, False: 181k]
  |  Branch (352:38): [True: 0, False: 181k]
  ------------------
  353|   253k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  32.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  32.3k|  return 114;
  575|  32.3k|}
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   160k|{
  650|   160k|    return sizeof(uint64_t) / sizeof(UC);
  651|   160k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  87.0k|{
  644|  87.0k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  87.0k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  87.0k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   104k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   332k|  constexpr size_t len() const noexcept {
  238|   332k|    return length;
  239|   332k|  }
_ZNK10fast_float4spanImEixEm:
  241|   175k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   175k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   175k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   175k|    return ptr[index];
  244|   175k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   288k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   288k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   288k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   288k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   288k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   288k|  ::memcpy(&value, &word, sizeof(T));
  615|   288k|#endif
  616|   288k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   288k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   693k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   693k|  return 0xFF;
  507|   693k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.07M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  2.03M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  1.13M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|   222k|  constexpr size_t len() const noexcept {
  238|   222k|    return length;
  239|   222k|  }
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|   316k|{
  650|   316k|    return sizeof(uint64_t) / sizeof(UC);
  651|   316k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|   169k|{
  644|   169k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   169k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   169k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  1.01M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.10M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.10M|  return -22;
  461|  1.10M|#endif
  462|  1.10M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.07M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.07M|  return 22;
  514|  1.07M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   900k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   900k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   900k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.51M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.51M|  return 52;
  474|  2.51M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   882k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   882k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   882k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   353k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   353k|  return -342;
  564|   353k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   352k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   352k|  return 308;
  555|   352k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   427k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   427k|  return -1023;
  497|   427k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   108k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   108k|  return -4;
  489|   108k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  69.1k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  69.1k|  return 23;
  481|  69.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  39.3k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  39.3k|  return 769;
  572|  39.3k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   245k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   245k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   245k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   245k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   245k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   245k|  ::memcpy(&value, &word, sizeof(T));
  615|   245k|#endif
  616|   245k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   245k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   625k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   625k|  return 0x7FF;
  504|   625k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   510k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   510k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   510k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   510k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   510k|    return from_chars_advanced(first, last, value, options);
  143|   510k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   510k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   510k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   510k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   510k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   510k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 510k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   510k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   510k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 510k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   510k|  answer.ec = std::errc(); // be optimistic
  221|   510k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   510k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 488k, False: 22.2k]
  |  Branch (227:69): [True: 457k, False: 30.5k]
  |  Branch (227:131): [True: 409k, False: 47.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   409k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 409k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   409k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 370k, False: 39.7k]
  ------------------
  239|   370k|        value = T(pns.mantissa);
  240|   370k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 3.29k, False: 366k]
  ------------------
  241|   366k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   370k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 370k]
  ------------------
  243|   370k|        return answer;
  244|   370k|      }
  245|   409k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   409k|  }
  262|   140k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   140k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 67.2k, False: 73.0k]
  |  Branch (263:29): [True: 67.2k, False: 0]
  ------------------
  264|  67.2k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 17.6k, False: 49.5k]
  ------------------
  265|  17.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  17.6k|    }
  267|  67.2k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   140k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 17.6k, False: 122k]
  ------------------
  271|   140k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   140k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 138k, False: 1.74k]
  |  Branch (273:29): [True: 12.2k, False: 126k]
  |  Branch (273:49): [True: 725, False: 11.5k]
  |  Branch (273:68): [True: 3.76k, False: 135k]
  ------------------
  274|  4.48k|    answer.ec = std::errc::result_out_of_range;
  275|  4.48k|  }
  276|   140k|  return answer;
  277|   510k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.71M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.71M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.71M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|  1.71M|  #   pragma clang diagnostic push
  118|  1.71M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.71M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|  1.71M|  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.71M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   484k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   484k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   484k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   484k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   484k|    return from_chars_advanced(first, last, value, options);
  143|   484k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   484k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   484k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   484k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   484k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   484k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 484k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   484k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   484k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 484k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   484k|  answer.ec = std::errc(); // be optimistic
  221|   484k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   484k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 469k, False: 14.1k]
  |  Branch (227:69): [True: 442k, False: 27.0k]
  |  Branch (227:131): [True: 403k, False: 39.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   403k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 403k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   403k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 367k, False: 36.0k]
  ------------------
  239|   367k|        value = T(pns.mantissa);
  240|   367k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 2.79k, False: 364k]
  ------------------
  241|   364k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   367k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 367k]
  ------------------
  243|   367k|        return answer;
  244|   367k|      }
  245|   403k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   403k|  }
  262|   117k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   117k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 51.6k, False: 65.4k]
  |  Branch (263:29): [True: 51.6k, False: 0]
  ------------------
  264|  51.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 14.6k, False: 36.9k]
  ------------------
  265|  14.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  14.6k|    }
  267|  51.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   117k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 14.6k, False: 102k]
  ------------------
  271|   117k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   117k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 115k, False: 1.56k]
  |  Branch (273:29): [True: 11.4k, False: 104k]
  |  Branch (273:49): [True: 660, False: 10.7k]
  |  Branch (273:68): [True: 3.07k, False: 113k]
  ------------------
  274|  3.73k|    answer.ec = std::errc::result_out_of_range;
  275|  3.73k|  }
  276|   117k|  return answer;
  277|   484k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   569k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   569k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   569k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   569k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   569k|    return from_chars_advanced(first, last, value, options);
  143|   569k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   569k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   569k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   569k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   569k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   569k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 569k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   569k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   569k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 569k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   569k|  answer.ec = std::errc(); // be optimistic
  221|   569k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   569k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 551k, False: 17.7k]
  |  Branch (227:69): [True: 518k, False: 32.9k]
  |  Branch (227:131): [True: 456k, False: 61.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   456k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 456k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   456k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 447k, False: 9.27k]
  ------------------
  239|   447k|        value = T(pns.mantissa);
  240|   447k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 16.5k, False: 430k]
  ------------------
  241|   430k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   447k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 447k]
  ------------------
  243|   447k|        return answer;
  244|   447k|      }
  245|   456k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   456k|  }
  262|   121k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   121k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 76.0k, False: 45.6k]
  |  Branch (263:29): [True: 76.0k, False: 0]
  ------------------
  264|  76.0k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 24.5k, False: 51.4k]
  ------------------
  265|  24.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  24.5k|    }
  267|  76.0k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   121k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 24.5k, False: 97.1k]
  ------------------
  271|   121k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   121k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 120k, False: 1.56k]
  |  Branch (273:29): [True: 8.31k, False: 111k]
  |  Branch (273:49): [True: 308, False: 8.00k]
  |  Branch (273:68): [True: 1.90k, False: 119k]
  ------------------
  274|  2.21k|    answer.ec = std::errc::result_out_of_range;
  275|  2.21k|  }
  276|   121k|  return answer;
  277|   569k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   534k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   534k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   534k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   534k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   534k|    return from_chars_advanced(first, last, value, options);
  143|   534k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   534k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   534k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   534k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   534k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   534k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 534k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   534k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   534k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 534k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   534k|  answer.ec = std::errc(); // be optimistic
  221|   534k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   534k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 523k, False: 11.3k]
  |  Branch (227:69): [True: 494k, False: 29.4k]
  |  Branch (227:131): [True: 443k, False: 50.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   443k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 443k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   443k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 435k, False: 7.94k]
  ------------------
  239|   435k|        value = T(pns.mantissa);
  240|   435k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 14.4k, False: 420k]
  ------------------
  241|   420k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   435k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 435k]
  ------------------
  243|   435k|        return answer;
  244|   435k|      }
  245|   443k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   443k|  }
  262|  99.5k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  99.5k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 58.6k, False: 40.8k]
  |  Branch (263:29): [True: 58.6k, False: 0]
  ------------------
  264|  58.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 14.7k, False: 43.9k]
  ------------------
  265|  14.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  14.7k|    }
  267|  58.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  99.5k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 14.7k, False: 84.8k]
  ------------------
  271|  99.5k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  99.5k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 98.1k, False: 1.46k]
  |  Branch (273:29): [True: 8.01k, False: 90.0k]
  |  Branch (273:49): [True: 275, False: 7.73k]
  |  Branch (273:68): [True: 1.67k, False: 97.6k]
  ------------------
  274|  1.94k|    answer.ec = std::errc::result_out_of_range;
  275|  1.94k|  }
  276|  99.5k|  return answer;
  277|   534k|}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|   484k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.63k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  17.5k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  17.5k|  return idx < lenminusstep;
   70|  17.5k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  14.8k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  14.8k|  return &buf[idx];
   75|  14.8k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  17.5k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  17.5k|  idx += STEP_SIZE;
   88|  17.5k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.63k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.63k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.63k]
  ------------------
   80|  2.63k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.63k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.63k|  return len - idx;
   83|  2.63k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  2.09k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  2.09k|    size_t pos = 0;
   12|  2.09k|    size_t count = 0;
   13|  13.5k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 11.4k, False: 2.09k]
  ------------------
   14|  11.4k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  11.4k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  11.4k|      count += count_ones(utf8_continuation_mask);
   17|  11.4k|    }
   18|  2.09k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  2.09k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   477k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   477k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   477k|      size_t pos = 0;
  131|   477k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|   477k|      size_t leading_byte = 0;
  139|   477k|      size_t margin = size;
  140|  1.08M|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 605k, False: 477k]
  |  Branch (140:27): [True: 605k, False: 0]
  ------------------
  141|   605k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   605k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   477k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   477k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 477k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   477k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 477k]
  ------------------
  195|   477k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 477k, False: 0]
  ------------------
  196|   477k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   477k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 24.9k, False: 452k]
  ------------------
  198|   452k|        utf32_output += howmany;
  199|   452k|      }
  200|   452k|      return utf32_output - start;
  201|   477k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   477k|    simdutf_really_inline bool errors() const {
  291|   477k|      return this->error.any_bits_set_anywhere();
  292|   477k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  2.09k|    char32_t* utf32_output) noexcept {
   13|  2.09k|  size_t pos = 0;
   14|  2.09k|  char32_t* start{utf32_output};
   15|  2.09k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  13.3k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 11.2k, False: 2.09k]
  ------------------
   17|  11.2k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  11.2k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 10.3k, False: 903]
  ------------------
   19|  10.3k|      in.store_ascii_as_utf32(utf32_output);
   20|  10.3k|      utf32_output += 64;
   21|  10.3k|      pos += 64;
   22|  10.3k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    903|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    903|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    903|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    903|    size_t max_starting_point = (pos + 64) - 12;
   28|  6.78k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 5.87k, False: 903]
  ------------------
   29|  5.87k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  5.87k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  5.87k|      pos += consumed;
   32|  5.87k|      utf8_end_of_code_point_mask >>= consumed;
   33|  5.87k|      }
   34|    903|    }
   35|  11.2k|  }
   36|  2.09k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  2.09k|  return utf32_output - start;
   38|  2.09k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  17.5k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  17.5k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  17.5k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 15.6k, False: 1.80k]
  |  |  ------------------
  ------------------
  154|  15.6k|        this->error |= this->prev_incomplete;
  155|  15.6k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.80k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.80k|            "We support either two or four chunks per 64-byte block.");
  159|  1.80k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.80k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.80k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.80k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.80k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.80k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.80k|      }
  172|  17.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.61k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.61k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.61k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.61k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.61k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.61k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.61k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.61k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.61k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.61k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.61k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.61k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.61k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.61k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.61k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.61k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.61k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.61k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.61k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.61k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.61k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.61k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.61k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.61k|    );
   51|  3.61k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.61k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.61k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.61k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.61k|      CARRY,
   59|  3.61k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.61k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.61k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.61k|    );
   80|  3.61k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.61k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.61k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.61k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.61k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.61k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.61k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.61k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.61k|    );
   96|  3.61k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.61k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.61k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.61k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.61k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.61k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.61k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.61k|    return must23_80 ^ sc;
  105|  3.61k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.80k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.80k|    static const uint8_t max_array[32] = {
  115|  1.80k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.80k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.80k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.80k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.80k|    };
  120|  1.80k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.80k|    return input.gt_bits(max_value);
  122|  1.80k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.63k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.63k|      this->error |= this->prev_incomplete;
  150|  2.63k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.63k|    simdutf_really_inline bool errors() const {
  176|  2.63k|      return this->error.any_bits_set_anywhere();
  177|  2.63k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.63k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.63k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.63k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.63k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.63k|    checker c{};
   12|  2.63k|    buf_block_reader<64> reader(input, length);
   13|  17.5k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 14.8k, False: 2.63k]
  ------------------
   14|  14.8k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  14.8k|      c.check_next_input(in);
   16|  14.8k|      reader.advance();
   17|  14.8k|    }
   18|  2.63k|    uint8_t block[64]{};
   19|  2.63k|    reader.get_remainder(block);
   20|  2.63k|    simd::simd8x64<uint8_t> in(block);
   21|  2.63k|    c.check_next_input(in);
   22|  2.63k|    reader.advance();
   23|  2.63k|    c.check_eof();
   24|  2.63k|    return !c.errors();
   25|  2.63k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  5.87k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  5.87k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  5.87k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  5.87k|      utf8_end_of_code_point_mask & 0xfff;
   24|  5.87k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.26k, False: 4.61k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.26k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.26k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.26k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.26k|    return 16; // We consumed 16 bytes.
   30|  1.26k|  }
   31|  4.61k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 4.54k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  4.54k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 73, False: 4.47k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     73|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     73|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     73|    const __m128i ascii =
   49|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     73|    const __m128i middlebyte =
   51|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     73|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     73|    const __m128i highbyte =
   54|     73|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     73|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     73|    const __m128i composed =
   57|     73|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     73|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     73|    utf32_output += 4;
   60|     73|    return 12;
   61|     73|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.47k|  const uint8_t idx =
   65|  4.47k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.47k|  const uint8_t consumed =
   67|  4.47k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.47k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.85k, False: 1.61k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.85k|    const __m128i sh =
   75|  2.85k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.85k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.85k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.85k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.85k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.85k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.85k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.85k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 606, False: 1.01k]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    606|    const __m128i sh =
   86|    606|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    606|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    606|    const __m128i ascii =
   89|    606|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    606|    const __m128i middlebyte =
   91|    606|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    606|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    606|    const __m128i highbyte =
   94|    606|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    606|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    606|    const __m128i composed =
   97|    606|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    606|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    606|    utf32_output += 4;
  100|  1.01k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 1.01k, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|  1.01k|    const __m128i sh =
  103|  1.01k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|  1.01k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|  1.01k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|  1.01k|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|  1.01k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|  1.01k|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|  1.01k|    const __m128i correct =
  111|  1.01k|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|  1.01k|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|  1.01k|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|  1.01k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|  1.01k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|  1.01k|    const __m128i composed =
  117|  1.01k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|  1.01k|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|  1.01k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|  1.01k|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|  1.01k|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.47k|  return consumed;
  125|  4.54k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|  2.63k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|  2.63k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|  2.63k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|   477k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|   477k|  utf8_to_utf32::validating_transcoder converter;
  277|   477k|  return converter.convert(buf, len, utf32_output);
  278|   477k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  2.09k|    char32_t* utf32_output) const noexcept {
  287|  2.09k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  2.09k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|  2.09k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|  2.09k|  return utf8::count_code_points(input, length);
  779|  2.09k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  17.5k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  17.5k|  return input.reduce_or().is_ascii();
   25|  17.5k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.61k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.61k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  3.61k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  3.61k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  3.61k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|   484k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|   484k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|   484k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|   484k|    return active_implementation;
  913|   484k|#endif
  914|   484k|}
_ZN7simdutf26get_default_implementationEv:
  922|   484k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|   484k|  return get_active_implementation();
  924|   484k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|  2.63k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|  2.63k|  return get_default_implementation()->validate_utf8(buf, len);
  930|  2.63k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|   477k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|   477k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|   477k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  2.09k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  2.09k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  2.09k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|  2.09k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|  2.09k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|  2.09k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  2.09k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  2.09k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  2.09k|    size_t counter{0};
  171|  56.9k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 54.8k, False: 2.09k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  54.8k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 54.2k, False: 637]
  ------------------
  174|  54.8k|    }
  175|  2.09k|    return counter;
  176|  2.09k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   477k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   477k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   477k|  size_t pos = 0;
   12|   477k|  char32_t* start{utf32_output};
   13|   930k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 477k, False: 452k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   477k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 477k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   477k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   477k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 379k, False: 97.6k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   379k|      *utf32_output++ = char32_t(leading_byte);
   34|   379k|      pos++;
   35|   379k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 76.6k, False: 20.9k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  76.6k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 76.6k]
  ------------------
   38|  76.6k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 9.86k, False: 66.8k]
  ------------------
   39|       |      // range check
   40|  66.8k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  66.8k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 982, False: 65.8k]
  |  Branch (41:32): [True: 0, False: 65.8k]
  ------------------
   42|  65.8k|      *utf32_output++ = char32_t(code_point);
   43|  65.8k|      pos += 2;
   44|  65.8k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 11.2k, False: 9.72k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  11.2k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 11.2k]
  ------------------
   47|       |
   48|  11.2k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 3.05k, False: 8.17k]
  ------------------
   49|  8.17k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.17k, False: 7.00k]
  ------------------
   50|       |      // range check
   51|  7.00k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  7.00k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  7.00k|                   (data[pos + 2] & 0b00111111);
   54|  7.00k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 1.24k, False: 5.76k]
  |  Branch (54:33): [True: 0, False: 5.76k]
  ------------------
   55|  7.00k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 4.49k, False: 1.26k]
  |  Branch (55:35): [True: 1.41k, False: 3.08k]
  ------------------
   56|  2.65k|        return 0;
   57|  2.65k|      }
   58|  4.35k|      *utf32_output++ = char32_t(code_point);
   59|  4.35k|      pos += 3;
   60|  9.72k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 9.72k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  9.72k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 9.72k]
  ------------------
   63|  9.72k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 2.46k, False: 7.26k]
  ------------------
   64|  7.26k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 727, False: 6.53k]
  ------------------
   65|  6.53k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 1.92k, False: 4.61k]
  ------------------
   66|       |
   67|       |      // range check
   68|  4.61k|      uint32_t code_point =
   69|  4.61k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  4.61k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  4.61k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 1.39k, False: 3.22k]
  |  Branch (71:35): [True: 738, False: 2.48k]
  ------------------
   72|  2.48k|      *utf32_output++ = char32_t(code_point);
   73|  2.48k|      pos += 4;
   74|  2.48k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   477k|  }
   78|   452k|  return utf32_output - start;
   79|   477k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  2.09k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  2.09k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  2.09k|  size_t pos = 0;
   12|  2.09k|  char32_t* start{utf32_output};
   13|  18.9k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 16.9k, False: 2.09k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  16.9k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 9.77k, False: 7.12k]
  ------------------
   16|  9.77k|      uint64_t v;
   17|  9.77k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  9.77k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 8.18k, False: 1.58k]
  ------------------
   19|  8.18k|        size_t final_pos = pos + 8;
   20|  73.7k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 65.5k, False: 8.18k]
  ------------------
   21|  65.5k|          *utf32_output++ = char32_t(buf[pos]);
   22|  65.5k|          pos++;
   23|  65.5k|        }
   24|  8.18k|        continue;
   25|  8.18k|      }
   26|  9.77k|    }
   27|  8.71k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  8.71k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 8.07k, False: 632]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  8.07k|      *utf32_output++ = char32_t(leading_byte);
   31|  8.07k|      pos++;
   32|  8.07k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 472, False: 160]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    472|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 472]
  ------------------
   35|    472|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    472|      pos += 2;
   37|    472|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 104, False: 56]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    104|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 104]
  ------------------
   40|    104|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    104|      pos += 3;
   42|    104|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 56, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     56|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 56]
  ------------------
   45|     56|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     56|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     56|      *utf32_output++ = char32_t(code_word);
   48|     56|      pos += 4;
   49|     56|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  8.71k|  }
   54|  2.09k|  return utf32_output - start;
   55|  2.09k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  11.4k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  11.4k|  return _popcnt64(input_num);
   16|  11.4k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  7.89k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  7.89k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  7.89k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  7.89k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  17.5k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  36.8k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  36.8k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  36.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   656k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   656k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   656k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   656k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  17.5k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  17.5k|      return this->chunks[0] | this->chunks[1];
  297|  17.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  43.0k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  1.18M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  17.5k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  21.9k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.61k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.61k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.23k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  10.8k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  10.8k|      return lookup_16(simd8<L>::repeat_16(
  140|  10.8k|        replace0,  replace1,  replace2,  replace3,
  141|  10.8k|        replace4,  replace5,  replace6,  replace7,
  142|  10.8k|        replace8,  replace9,  replace10, replace11,
  143|  10.8k|        replace12, replace13, replace14, replace15
  144|  10.8k|      ));
  145|  10.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  10.8k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  10.8k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  10.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  14.4k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  10.8k|    ) {
  218|  10.8k|      return simd8<uint8_t>(
  219|  10.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  10.8k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  10.8k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  10.8k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  10.8k|      );
  224|  10.8k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  10.8k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  21.6k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   499k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   499k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.61k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.61k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.61k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.61k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.04k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  28.3k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  28.3k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  28.3k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.61k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.61k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.80k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.80k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   480k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   480k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  22.7k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  45.5k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  45.5k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  45.5k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  69.2k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  69.2k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  69.2k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  69.2k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  11.2k|    simdutf_really_inline bool is_ascii() const {
  300|  11.2k|      return this->reduce_or().is_ascii();
  301|  11.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  11.2k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  11.2k|      return this->chunks[0] | this->chunks[1];
  297|  11.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  11.2k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   166k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  11.2k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    903|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    903|      const simd8<T> mask = simd8<T>::splat(m);
  364|    903|      return  simd8x64<bool>(
  365|    903|        this->chunks[0] < mask,
  366|    903|        this->chunks[1] < mask
  367|    903|      ).to_bitmask();
  368|    903|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  12.3k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.80k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  12.3k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  12.3k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  12.3k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  12.3k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  12.3k|      return r_lo | (r_hi << 32);
  287|  12.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  24.7k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  24.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  10.3k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  10.3k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  10.3k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  10.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  20.7k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  20.7k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  20.7k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  20.7k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  20.7k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  20.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  11.4k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  11.4k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  11.4k|      return  simd8x64<bool>(
  373|  11.4k|        this->chunks[0] > mask,
  374|  11.4k|        this->chunks[1] > mask
  375|  11.4k|      ).to_bitmask();
  376|  11.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  22.9k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   712k|{
  619|   712k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   712k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   712k|    static_cast<    \
  |  |  247|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   712k|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  386|  1.59M|{
  387|  1.59M|    static_assert(
  388|  1.59M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.59M|        "Scan argument types must be default constructible");
  390|  1.59M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.59M|                  "Scan argument types must be Destructible");
  392|  1.59M|    static_assert(
  393|  1.59M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.59M|        "Scan argument types must not be references");
  395|  1.59M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   712k|    {
  564|   712k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   712k|    {
  574|   712k|        return {
  575|   712k|            detail::make_arg<base::is_packed, Context,
  576|   712k|                             detail::mapped_type_constant<
  577|   712k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   712k|                args)...};
  579|   712k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   712k|{
  415|   712k|    return make_value<Context>(value);
  416|   712k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  371|   790k|{
  372|   790k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   790k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   790k|                                  needs_context_tag>) {
  376|   790k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   790k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   790k|    }
  378|   790k|    else {
  379|   790k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   790k|            value, context_tag<Context>{}));
  381|   790k|    }
  382|   790k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  216|   790k|    {                                                                        \
  217|   790k|        return val;                                                          \
  218|   790k|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  340|  1.59M|{
  341|  1.59M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.59M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.59M|    constexpr bool scannable_char =
  345|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.59M|    static_assert(scannable_char,
  347|  1.59M|                  "Cannot scan an argument of an unsupported character "
  348|  1.59M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.59M|    constexpr bool scannable_const =
  351|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.59M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.59M|    constexpr bool scannable_disabled =
  355|  1.59M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.59M|    static_assert(scannable_disabled,
  357|  1.59M|                  "Cannot scan an argument that has been disabled by "
  358|  1.59M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.59M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.59M|    static_assert(
  362|  1.59M|        scannable,
  363|  1.59M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.59M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.59M|    return arg_value{arg};
  367|  1.59M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  1.59M|    {
  160|  1.59M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   712k|    {
  647|   712k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.29M|    {
  694|  2.29M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  553|   649k|    {
  554|   649k|        return m_args;
  555|   649k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  77.4k|{
  400|  77.4k|    check_scan_arg_types<T>();
  401|       |
  402|  77.4k|    basic_scan_arg<Context> arg;
  403|  77.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  77.4k|    arg.m_value = make_value<Context>(value);
  405|  77.4k|    return arg;
  406|  77.4k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  2.55M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  5.12M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   787k|{
  619|   787k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   787k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   787k|    static_cast<    \
  |  |  247|   787k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   787k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  1.75M|{
  387|  1.75M|    static_assert(
  388|  1.75M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.75M|        "Scan argument types must be default constructible");
  390|  1.75M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.75M|                  "Scan argument types must be Destructible");
  392|  1.75M|    static_assert(
  393|  1.75M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.75M|        "Scan argument types must not be references");
  395|  1.75M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   787k|    {
  564|   787k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   787k|    {
  574|   787k|        return {
  575|   787k|            detail::make_arg<base::is_packed, Context,
  576|   787k|                             detail::mapped_type_constant<
  577|   787k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   787k|                args)...};
  579|   787k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   787k|{
  415|   787k|    return make_value<Context>(value);
  416|   787k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|   875k|{
  372|   875k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   875k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   875k|                                  needs_context_tag>) {
  376|   875k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   875k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   875k|    }
  378|   875k|    else {
  379|   875k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   875k|            value, context_tag<Context>{}));
  381|   875k|    }
  382|   875k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|   875k|    {                                                                        \
  217|   875k|        return val;                                                          \
  218|   875k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  1.75M|{
  341|  1.75M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.75M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.75M|    constexpr bool scannable_char =
  345|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.75M|    static_assert(scannable_char,
  347|  1.75M|                  "Cannot scan an argument of an unsupported character "
  348|  1.75M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.75M|    constexpr bool scannable_const =
  351|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.75M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.75M|    constexpr bool scannable_disabled =
  355|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.75M|    static_assert(scannable_disabled,
  357|  1.75M|                  "Cannot scan an argument that has been disabled by "
  358|  1.75M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.75M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.75M|    static_assert(
  362|  1.75M|        scannable,
  363|  1.75M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.75M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.75M|    return arg_value{arg};
  367|  1.75M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  1.75M|    {
  160|  1.75M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   787k|    {
  647|   787k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  553|   724k|    {
  554|   724k|        return m_args;
  555|   724k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  87.7k|{
  400|  87.7k|    check_scan_arg_types<T>();
  401|       |
  402|  87.7k|    basic_scan_arg<Context> arg;
  403|  87.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  87.7k|    arg.m_value = make_value<Context>(value);
  405|  87.7k|    return arg;
  406|  87.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   797k|{
  619|   797k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   797k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   797k|    static_cast<    \
  |  |  247|   797k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   797k|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  386|  1.77M|{
  387|  1.77M|    static_assert(
  388|  1.77M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.77M|        "Scan argument types must be default constructible");
  390|  1.77M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.77M|                  "Scan argument types must be Destructible");
  392|  1.77M|    static_assert(
  393|  1.77M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.77M|        "Scan argument types must not be references");
  395|  1.77M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   797k|    {
  564|   797k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   797k|    {
  574|   797k|        return {
  575|   797k|            detail::make_arg<base::is_packed, Context,
  576|   797k|                             detail::mapped_type_constant<
  577|   797k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   797k|                args)...};
  579|   797k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   797k|{
  415|   797k|    return make_value<Context>(value);
  416|   797k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  371|   886k|{
  372|   886k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   886k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   886k|                                  needs_context_tag>) {
  376|   886k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   886k|    }
  378|   886k|    else {
  379|   886k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   886k|            value, context_tag<Context>{}));
  381|   886k|    }
  382|   886k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  216|   886k|    {                                                                        \
  217|   886k|        return val;                                                          \
  218|   886k|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  340|  1.77M|{
  341|  1.77M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.77M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.77M|    constexpr bool scannable_char =
  345|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.77M|    static_assert(scannable_char,
  347|  1.77M|                  "Cannot scan an argument of an unsupported character "
  348|  1.77M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.77M|    constexpr bool scannable_const =
  351|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.77M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.77M|    constexpr bool scannable_disabled =
  355|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.77M|    static_assert(scannable_disabled,
  357|  1.77M|                  "Cannot scan an argument that has been disabled by "
  358|  1.77M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.77M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.77M|    static_assert(
  362|  1.77M|        scannable,
  363|  1.77M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.77M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.77M|    return arg_value{arg};
  367|  1.77M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  1.77M|    {
  160|  1.77M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   797k|    {
  647|   797k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  553|   734k|    {
  554|   734k|        return m_args;
  555|   734k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  89.3k|{
  400|  89.3k|    check_scan_arg_types<T>();
  401|       |
  402|  89.3k|    basic_scan_arg<Context> arg;
  403|  89.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  89.3k|    arg.m_value = make_value<Context>(value);
  405|  89.3k|    return arg;
  406|  89.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   728k|{
  619|   728k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   728k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   728k|    static_cast<    \
  |  |  247|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   728k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   728k|    {
  564|   728k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   728k|    {
  574|   728k|        return {
  575|   728k|            detail::make_arg<base::is_packed, Context,
  576|   728k|                             detail::mapped_type_constant<
  577|   728k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   728k|                args)...};
  579|   728k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   728k|{
  415|   728k|    return make_value<Context>(value);
  416|   728k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  371|   805k|{
  372|   805k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   805k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   805k|                                  needs_context_tag>) {
  376|   805k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   805k|    }
  378|   805k|    else {
  379|   805k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   805k|            value, context_tag<Context>{}));
  381|   805k|    }
  382|   805k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  216|   805k|    {                                                                        \
  217|   805k|        return val;                                                          \
  218|   805k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   728k|    {
  647|   728k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.32M|    {
  694|  2.32M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  553|   615k|    {
  554|   615k|        return m_args;
  555|   615k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  76.9k|{
  400|  76.9k|    check_scan_arg_types<T>();
  401|       |
  402|  76.9k|    basic_scan_arg<Context> arg;
  403|  76.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  76.9k|    arg.m_value = make_value<Context>(value);
  405|  76.9k|    return arg;
  406|  76.9k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  2.57M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   791k|{
  619|   791k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   791k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   791k|    static_cast<    \
  |  |  247|   791k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   791k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   791k|    {
  564|   791k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   791k|    {
  574|   791k|        return {
  575|   791k|            detail::make_arg<base::is_packed, Context,
  576|   791k|                             detail::mapped_type_constant<
  577|   791k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   791k|                args)...};
  579|   791k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   791k|{
  415|   791k|    return make_value<Context>(value);
  416|   791k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|   877k|{
  372|   877k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   877k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   877k|                                  needs_context_tag>) {
  376|   877k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   877k|    }
  378|   877k|    else {
  379|   877k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   877k|            value, context_tag<Context>{}));
  381|   877k|    }
  382|   877k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|   877k|    {                                                                        \
  217|   877k|        return val;                                                          \
  218|   877k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   791k|    {
  647|   791k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  553|   678k|    {
  554|   678k|        return m_args;
  555|   678k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  85.8k|{
  400|  85.8k|    check_scan_arg_types<T>();
  401|       |
  402|  85.8k|    basic_scan_arg<Context> arg;
  403|  85.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  85.8k|    arg.m_value = make_value<Context>(value);
  405|  85.8k|    return arg;
  406|  85.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   800k|{
  619|   800k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   800k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   800k|    static_cast<    \
  |  |  247|   800k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   800k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   800k|    {
  564|   800k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   800k|    {
  574|   800k|        return {
  575|   800k|            detail::make_arg<base::is_packed, Context,
  576|   800k|                             detail::mapped_type_constant<
  577|   800k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   800k|                args)...};
  579|   800k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   800k|{
  415|   800k|    return make_value<Context>(value);
  416|   800k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  371|   888k|{
  372|   888k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   888k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   888k|                                  needs_context_tag>) {
  376|   888k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   888k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   888k|    }
  378|   888k|    else {
  379|   888k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   888k|            value, context_tag<Context>{}));
  381|   888k|    }
  382|   888k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  216|   888k|    {                                                                        \
  217|   888k|        return val;                                                          \
  218|   888k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   800k|    {
  647|   800k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  553|   687k|    {
  554|   687k|        return m_args;
  555|   687k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  87.3k|{
  400|  87.3k|    check_scan_arg_types<T>();
  401|       |
  402|  87.3k|    basic_scan_arg<Context> arg;
  403|  87.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  87.3k|    arg.m_value = make_value<Context>(value);
  405|  87.3k|    return arg;
  406|  87.3k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  2.29M|    {
  682|  2.29M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.29M|        return static_cast<std::size_t>(m_desc &
  687|  2.29M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.29M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  4.59M|    {
  702|  4.59M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.59M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  2.29M|    {
  655|  2.29M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.29M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.29M|        const auto t = type(id);
  667|  2.29M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.29M|        basic_scan_arg<Context> arg;
  672|  2.29M|        arg.m_type = t;
  673|  2.29M|        arg.m_value = m_values[id];
  674|  2.29M|        return arg;
  675|  2.29M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  2.29M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.29M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.29M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.29M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.29M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  4.34M|    {
  483|  4.34M|        return m_type != detail::arg_type::none_type;
  484|  4.34M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  3.57M|    {
  488|  3.57M|        return m_type;
  489|  3.57M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  2.32M|    {
  682|  2.32M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.32M|        return static_cast<std::size_t>(m_desc &
  687|  2.32M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.32M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  4.64M|    {
  702|  4.64M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.64M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  2.32M|    {
  655|  2.32M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.32M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.32M|        const auto t = type(id);
  667|  2.32M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.32M|        basic_scan_arg<Context> arg;
  672|  2.32M|        arg.m_type = t;
  673|  2.32M|        arg.m_value = m_values[id];
  674|  2.32M|        return arg;
  675|  2.32M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  2.32M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.32M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.32M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.32M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.32M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  4.39M|    {
  483|  4.39M|        return m_type != detail::arg_type::none_type;
  484|  4.39M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  3.64M|    {
  488|  3.64M|        return m_type;
  489|  3.64M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   254k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   250k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  78.9k|    {
  109|  78.9k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  1.78M|    {
   60|  1.78M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   157k|    {
  124|   157k|        return m_current;
  125|   157k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  1.78M|    {
   43|  1.78M|        return m_args.get(id);
   44|  1.78M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.78M|    {
   53|  1.78M|        return m_locale;
   54|  1.78M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|  78.9k|    {
  132|  78.9k|        return ranges_std::default_sentinel;
  133|  78.9k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|  78.9k|    {
  140|  78.9k|        return ranges::subrange{begin(), end()};
  141|  78.9k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   255k|    {
  109|   255k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  1.82M|    {
   60|  1.82M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   623k|    {
  124|   623k|        return m_current;
  125|   623k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  1.82M|    {
   43|  1.82M|        return m_args.get(id);
   44|  1.82M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.82M|    {
   53|  1.82M|        return m_locale;
   54|  1.82M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   255k|    {
  132|   255k|        return ranges_std::default_sentinel;
  133|   255k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   113k|    {
  146|   113k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   113k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   255k|    {
  140|   255k|        return ranges::subrange{begin(), end()};
  141|   255k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  5.35M|    {
   69|  5.35M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  5.35M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  5.35M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  20.2M|    {
   75|  20.2M|        return m_code == good;
   76|  20.2M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   441k|    {
   86|   441k|        return m_code;
   87|   441k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   441k|{
  111|   441k|    return a.code() == b;
  112|   441k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   441k|{
  116|   441k|    return !(a == b);
  117|   441k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  13.0M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   681k|    {
  675|   681k|        return m_str;
  676|   681k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.29M|{
  385|  2.29M|    return s;
  386|  2.29M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.29M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   681k|    {
  671|   681k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   755k|    {
  675|   755k|        return m_str;
  676|   755k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   755k|    {
  671|   755k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   765k|    {
  675|   765k|        return m_str;
  676|   765k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   765k|    {
  671|   765k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  31.5k|    {
  675|  31.5k|        return m_str;
  676|  31.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  31.5k|    {
  671|  31.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  31.5k|    {
  675|  31.5k|        return m_str;
  676|  31.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  31.5k|    {
  671|  31.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  31.5k|    {
  675|  31.5k|        return m_str;
  676|  31.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  31.5k|    {
  671|  31.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   624k|    {
  675|   624k|        return m_str;
  676|   624k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.32M|{
  390|  2.32M|    return s;
  391|  2.32M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.32M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   624k|    {
  671|   624k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   687k|    {
  675|   687k|        return m_str;
  676|   687k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   687k|    {
  671|   687k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   696k|    {
  675|   696k|        return m_str;
  676|   696k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   696k|    {
  671|   696k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   103k|    {
  675|   103k|        return m_str;
  676|   103k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   103k|    {
  671|   103k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   103k|    {
  675|   103k|        return m_str;
  676|   103k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   103k|    {
  671|   103k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   103k|    {
  675|   103k|        return m_str;
  676|   103k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   103k|    {
  671|   103k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  3.60M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.00M|    {
  245|  1.00M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.00M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.00M|            m_specs.localized = true;
  247|  1.00M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.00M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  2.60M|    {
  260|  2.60M|        m_specs.type = type;
  261|  2.60M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  3.60M|    {
  333|  3.60M|        return static_cast<bool>(m_error);
  334|  3.60M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.00M|{
  987|  1.00M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.00M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 1.00M]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.00M]
  ------------------
  993|      0|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 1.00M]
  ------------------
  994|      0|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.00M]
  ------------------
  995|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 1.00M]
  ------------------
  996|      0|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 1.00M]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.00M]
  ------------------
 1000|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 0, False: 1.00M]
  ------------------
 1001|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.00M]
  ------------------
 1002|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 1.00M]
  ------------------
 1003|      0|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.00M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.00M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.00M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.00M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.00M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|   308k|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 308k, False: 700k]
  ------------------
 1015|   656k|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 347k, False: 662k]
  ------------------
 1016|  1.00M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 353k, False: 656k]
  ------------------
 1017|  1.00M|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.00M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.00M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.00M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.00M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.00M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.00M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.00M|            SCN_CLANG_POP
 1034|  1.00M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.00M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.70M|{
  968|  1.70M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.70M|    handler.check_args_exhausted();
  970|  1.70M|    return handler.get_error();
  971|  1.70M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.70M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.70M|    auto begin = format.data();
  937|  1.70M|    auto it = begin;
  938|  1.70M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.34M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.70M, False: 1.63M]
  ------------------
  941|  1.70M|        const auto ch = *it++;
  942|  1.70M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.70M, False: 0]
  ------------------
  943|  1.70M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.70M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.70M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 78.9k, False: 1.63M]
  ------------------
  947|  78.9k|                return;
  948|  78.9k|            }
  949|  1.70M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.70M|    }
  960|       |
  961|  1.63M|    handler.on_literal_text(begin, end);
  962|  1.63M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.70M|{
  866|  1.70M|    struct id_adapter {
  867|  1.70M|        constexpr void operator()()
  868|  1.70M|        {
  869|  1.70M|            arg_id = handler.on_arg_id();
  870|  1.70M|        }
  871|  1.70M|        constexpr void operator()(std::size_t id)
  872|  1.70M|        {
  873|  1.70M|            arg_id = handler.on_arg_id(id);
  874|  1.70M|        }
  875|       |
  876|  1.70M|        constexpr void on_error(const char* msg)
  877|  1.70M|        {
  878|  1.70M|            SCN_UNLIKELY_ATTR
  879|  1.70M|            handler.on_error(msg);
  880|  1.70M|        }
  881|       |
  882|  1.70M|        Handler& handler;
  883|  1.70M|        std::size_t arg_id;
  884|  1.70M|    };
  885|       |
  886|  1.70M|    ++begin;
  887|  1.70M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.70M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.70M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.70M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.70M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.70M|    else {
  899|  1.70M|        auto adapter = id_adapter{handler, 0};
  900|  1.70M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.70M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.70M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.70M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.70M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.70M, False: 0]
  ------------------
  911|  1.70M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.70M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.70M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  |  Branch (153:45): [True: 0, False: 1.70M]
  |  |  |  Branch (153:45): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.70M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.70M|    }
  927|  1.70M|    return begin + 1;
  928|  1.70M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.70M|{
  400|  1.70M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.70M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.70M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.70M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.70M|    handler();
  406|  1.70M|    return begin;
  407|  1.70M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.70M|        {
  869|  1.70M|            arg_id = handler.on_arg_id();
  870|  1.70M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.70M|    {
 1046|  1.70M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.70M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.70M|{
  795|  1.70M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.70M|        if (*begin == CharT{'['}) {
  797|  1.70M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.70M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.70M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.70M|                return begin;
  803|  1.70M|            }
  804|  1.70M|            handler.on_character_set_string(set);
  805|  1.70M|            return begin;
  806|  1.70M|        }
  807|  1.70M|        if (*begin == CharT{'/'}) {
  808|  1.70M|            return parse_presentation_regex(begin, end, handler);
  809|  1.70M|        }
  810|  1.70M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.70M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.70M|            handler.on_error("Invalid type specifier in format string");
  813|  1.70M|            return begin;
  814|  1.70M|        }
  815|  1.70M|        handler.on_type(type);
  816|  1.70M|        return begin;
  817|  1.70M|    };
  818|       |
  819|  1.70M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.70M, False: 0]
  |  Branch (819:28): [True: 1.70M, False: 0]
  ------------------
  820|  1.70M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.70M, False: 0]
  |  Branch (820:36): [True: 1.21M, False: 493k]
  ------------------
  821|  1.21M|        return do_presentation();
  822|  1.21M|    }
  823|       |
  824|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   493k|    begin = parse_align(begin, end, handler);
  830|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   493k|    begin = parse_width(begin, end, handler);
  836|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   493k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 493k, False: 0]
  ------------------
  842|   493k|        handler.on_localized();
  843|   493k|        ++begin;
  844|   493k|    }
  845|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   493k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 493k, False: 0]
  |  Branch (850:25): [True: 0, False: 493k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   493k|    return begin;
  859|   493k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  1.78M|{
  464|  1.78M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.27M, False: 509k]
  |  Branch (464:33): [True: 1.27M, False: 0]
  ------------------
  465|  1.78M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 509k, False: 0]
  |  Branch (465:33): [True: 509k, False: 0]
  ------------------
  466|  1.78M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.21M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.21M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.21M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.21M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.21M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.21M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.21M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.21M|        handler.on_type(type);
  816|  1.21M|        return begin;
  817|  1.21M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.27M|{
  412|  1.27M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.27M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.27M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.27M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.27M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.27M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.27M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.27M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.27M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.27M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.27M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   561k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 561k, False: 717k]
  ------------------
  431|   561k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.27M]
  ------------------
  432|   561k|            return presentation_type::float_hex;
  433|  42.2k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 42.2k, False: 1.23M]
  ------------------
  434|  42.2k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.27M]
  ------------------
  435|  42.2k|            return presentation_type::float_scientific;
  436|   240k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 240k, False: 1.03M]
  ------------------
  437|   240k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.27M]
  ------------------
  438|   240k|            return presentation_type::float_fixed;
  439|   434k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 434k, False: 844k]
  ------------------
  440|   434k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.27M]
  ------------------
  441|   434k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.27M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.27M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.27M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.27M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.27M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.27M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.27M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.27M|    }
  459|  1.27M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   493k|{
  489|   493k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   493k|        switch (ch) {
  493|   493k|            case L'<':
  494|   493k|                return align_type::left;
  495|   493k|            case L'>':
  496|   493k|                return align_type::right;
  497|   493k|            case L'^':
  498|   493k|                return align_type::center;
  499|   493k|            default:
  500|   493k|                return align_type::none;
  501|   493k|        }
  502|   493k|    };
  503|       |
  504|   493k|    auto potential_fill_len = code_point_length(begin, end);
  505|   493k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  |  Branch (153:45): [True: 0, False: 493k]
  |  |  |  Branch (153:45): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  506|   493k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   493k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   493k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   493k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   493k|    const auto begin_before_fill = begin;
  516|   493k|    begin += potential_fill_len;
  517|       |
  518|   493k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 493k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   493k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   493k|    const auto begin_after_fill = begin;
  524|   493k|    ++begin;
  525|       |
  526|   493k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 493k, False: 0]
  ------------------
  527|   493k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   493k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 493k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   493k|    }
  535|       |
  536|   493k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 493k, False: 0]
  ------------------
  537|   493k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 493k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   493k|        return begin_before_fill;
  542|   493k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   493k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   509k|{
  471|   509k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   509k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   509k|        return 1;
  474|   509k|    }
  475|   509k|    else {
  476|   509k|        const auto lengths =
  477|   509k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   509k|            "\3\4";
  479|   509k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   509k|        return len;
  481|   509k|    }
  482|   509k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   986k|    auto check_align = [](wchar_t ch) {
  492|   986k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 986k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 986k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 986k]
  ------------------
  498|      0|                return align_type::center;
  499|   986k|            default:
  ------------------
  |  Branch (499:13): [True: 986k, False: 0]
  ------------------
  500|   986k|                return align_type::none;
  501|   986k|        }
  502|   986k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   493k|{
  554|   493k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   493k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 493k, False: 0]
  |  Branch (556:33): [True: 0, False: 493k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   493k|    return begin;
  567|   493k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   493k|    {
 1051|   493k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   493k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 493k, False: 0]
  ------------------
 1053|   493k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 493k, False: 0]
  ------------------
 1054|   493k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 493k]
  ------------------
 1055|   493k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   493k|        Handler::on_localized();
 1063|   493k|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  3.60M|{
 1117|  3.60M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 2.60M, False: 1.00M]
  ------------------
 1118|  3.60M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 0, False: 2.60M]
  ------------------
 1119|  2.60M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 0, False: 2.60M]
  ------------------
 1120|      0|        SCN_UNLIKELY_ATTR
 1121|      0|        return handler.on_error("Invalid type specifier for float type");
 1122|      0|    }
 1123|  3.60M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  78.9k|{
  968|  78.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  78.9k|    handler.check_args_exhausted();
  970|  78.9k|    return handler.get_error();
  971|  78.9k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  78.9k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  78.9k|    auto begin = format.data();
  937|  78.9k|    auto it = begin;
  938|  78.9k|    const auto end = format.data() + format.size();
  939|       |
  940|  78.9k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 78.9k, False: 0]
  ------------------
  941|  78.9k|        const auto ch = *it++;
  942|  78.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 78.9k, False: 0]
  ------------------
  943|  78.9k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  78.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  78.9k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 78.9k, False: 0]
  ------------------
  947|  78.9k|                return;
  948|  78.9k|            }
  949|  78.9k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  78.9k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|  78.9k|{
  866|  78.9k|    struct id_adapter {
  867|  78.9k|        constexpr void operator()()
  868|  78.9k|        {
  869|  78.9k|            arg_id = handler.on_arg_id();
  870|  78.9k|        }
  871|  78.9k|        constexpr void operator()(std::size_t id)
  872|  78.9k|        {
  873|  78.9k|            arg_id = handler.on_arg_id(id);
  874|  78.9k|        }
  875|       |
  876|  78.9k|        constexpr void on_error(const char* msg)
  877|  78.9k|        {
  878|  78.9k|            SCN_UNLIKELY_ATTR
  879|  78.9k|            handler.on_error(msg);
  880|  78.9k|        }
  881|       |
  882|  78.9k|        Handler& handler;
  883|  78.9k|        std::size_t arg_id;
  884|  78.9k|    };
  885|       |
  886|  78.9k|    ++begin;
  887|  78.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  78.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 78.9k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  78.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 78.9k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  78.9k|    else {
  899|  78.9k|        auto adapter = id_adapter{handler, 0};
  900|  78.9k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  78.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  78.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 78.9k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  78.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 78.9k, False: 0]
  ------------------
  911|  78.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  78.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  78.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  |  Branch (153:45): [True: 0, False: 78.9k]
  |  |  |  Branch (153:45): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  78.9k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  78.9k|    }
  927|  78.9k|    return begin + 1;
  928|  78.9k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  78.9k|{
  400|  78.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  78.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  78.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  78.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 78.9k, False: 0]
  |  Branch (401:26): [True: 0, False: 78.9k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  78.9k|    handler();
  406|  78.9k|    return begin;
  407|  78.9k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  78.9k|        {
  869|  78.9k|            arg_id = handler.on_arg_id();
  870|  78.9k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|  78.9k|    {
 1046|  78.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  78.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  78.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  78.9k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|  78.9k|{
  795|  78.9k|    auto do_presentation = [&]() -> const CharT* {
  796|  78.9k|        if (*begin == CharT{'['}) {
  797|  78.9k|            auto set = parse_presentation_set(begin, end, handler);
  798|  78.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  78.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  78.9k|                return begin;
  803|  78.9k|            }
  804|  78.9k|            handler.on_character_set_string(set);
  805|  78.9k|            return begin;
  806|  78.9k|        }
  807|  78.9k|        if (*begin == CharT{'/'}) {
  808|  78.9k|            return parse_presentation_regex(begin, end, handler);
  809|  78.9k|        }
  810|  78.9k|        presentation_type type = parse_presentation_type(*begin++);
  811|  78.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  78.9k|            handler.on_error("Invalid type specifier in format string");
  813|  78.9k|            return begin;
  814|  78.9k|        }
  815|  78.9k|        handler.on_type(type);
  816|  78.9k|        return begin;
  817|  78.9k|    };
  818|       |
  819|  78.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 78.9k, False: 0]
  |  Branch (819:28): [True: 78.9k, False: 0]
  ------------------
  820|  78.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 78.9k, False: 0]
  |  Branch (820:36): [True: 63.1k, False: 15.7k]
  ------------------
  821|  63.1k|        return do_presentation();
  822|  63.1k|    }
  823|       |
  824|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  15.7k|    begin = parse_align(begin, end, handler);
  830|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  15.7k|    begin = parse_width(begin, end, handler);
  836|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  15.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 15.7k, False: 0]
  ------------------
  842|  15.7k|        handler.on_localized();
  843|  15.7k|        ++begin;
  844|  15.7k|    }
  845|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  15.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 15.7k, False: 0]
  |  Branch (850:25): [True: 0, False: 15.7k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  15.7k|    return begin;
  859|  15.7k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|  63.1k|    auto do_presentation = [&]() -> const CharT* {
  796|  63.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 63.1k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  63.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 63.1k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  63.1k|        presentation_type type = parse_presentation_type(*begin++);
  811|  63.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  63.1k|        handler.on_type(type);
  816|  63.1k|        return begin;
  817|  63.1k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  15.7k|{
  489|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  15.7k|        switch (ch) {
  493|  15.7k|            case L'<':
  494|  15.7k|                return align_type::left;
  495|  15.7k|            case L'>':
  496|  15.7k|                return align_type::right;
  497|  15.7k|            case L'^':
  498|  15.7k|                return align_type::center;
  499|  15.7k|            default:
  500|  15.7k|                return align_type::none;
  501|  15.7k|        }
  502|  15.7k|    };
  503|       |
  504|  15.7k|    auto potential_fill_len = code_point_length(begin, end);
  505|  15.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  |  Branch (153:45): [True: 0, False: 15.7k]
  |  |  |  Branch (153:45): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  506|  15.7k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  15.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  15.7k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  15.7k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  15.7k|    const auto begin_before_fill = begin;
  516|  15.7k|    begin += potential_fill_len;
  517|       |
  518|  15.7k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 15.7k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  15.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  15.7k|    const auto begin_after_fill = begin;
  524|  15.7k|    ++begin;
  525|       |
  526|  15.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 15.7k, False: 0]
  ------------------
  527|  15.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  15.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 15.7k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  15.7k|    }
  535|       |
  536|  15.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 15.7k, False: 0]
  ------------------
  537|  15.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 15.7k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  15.7k|        return begin_before_fill;
  542|  15.7k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  15.7k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  31.5k|    auto check_align = [](wchar_t ch) {
  492|  31.5k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 31.5k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 31.5k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 31.5k]
  ------------------
  498|      0|                return align_type::center;
  499|  31.5k|            default:
  ------------------
  |  Branch (499:13): [True: 31.5k, False: 0]
  ------------------
  500|  31.5k|                return align_type::none;
  501|  31.5k|        }
  502|  31.5k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  15.7k|{
  554|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  15.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 15.7k, False: 0]
  |  Branch (556:33): [True: 0, False: 15.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  15.7k|    return begin;
  567|  15.7k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  15.7k|    {
 1051|  15.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  15.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 15.7k, False: 0]
  ------------------
 1053|  15.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 15.7k, False: 0]
  ------------------
 1054|  15.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 15.7k]
  ------------------
 1055|  15.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  15.7k|        Handler::on_localized();
 1063|  15.7k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.56M|{
  968|  1.56M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.56M|    handler.check_args_exhausted();
  970|  1.56M|    return handler.get_error();
  971|  1.56M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.56M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.56M|    auto begin = format.data();
  937|  1.56M|    auto it = begin;
  938|  1.56M|    const auto end = format.data() + format.size();
  939|       |
  940|  2.98M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.56M, False: 1.42M]
  ------------------
  941|  1.56M|        const auto ch = *it++;
  942|  1.56M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.56M, False: 0]
  ------------------
  943|  1.56M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.56M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.56M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 141k, False: 1.42M]
  ------------------
  947|   141k|                return;
  948|   141k|            }
  949|  1.56M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.56M|    }
  960|       |
  961|  1.42M|    handler.on_literal_text(begin, end);
  962|  1.42M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.56M|{
  866|  1.56M|    struct id_adapter {
  867|  1.56M|        constexpr void operator()()
  868|  1.56M|        {
  869|  1.56M|            arg_id = handler.on_arg_id();
  870|  1.56M|        }
  871|  1.56M|        constexpr void operator()(std::size_t id)
  872|  1.56M|        {
  873|  1.56M|            arg_id = handler.on_arg_id(id);
  874|  1.56M|        }
  875|       |
  876|  1.56M|        constexpr void on_error(const char* msg)
  877|  1.56M|        {
  878|  1.56M|            SCN_UNLIKELY_ATTR
  879|  1.56M|            handler.on_error(msg);
  880|  1.56M|        }
  881|       |
  882|  1.56M|        Handler& handler;
  883|  1.56M|        std::size_t arg_id;
  884|  1.56M|    };
  885|       |
  886|  1.56M|    ++begin;
  887|  1.56M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.56M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.56M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.56M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.56M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.56M|    else {
  899|  1.56M|        auto adapter = id_adapter{handler, 0};
  900|  1.56M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.56M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.56M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.56M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.56M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.56M, False: 0]
  ------------------
  911|  1.56M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.56M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.56M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  3.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  |  Branch (153:45): [True: 0, False: 1.56M]
  |  |  |  Branch (153:45): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.56M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.56M|    }
  927|  1.56M|    return begin + 1;
  928|  1.56M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.56M|{
  400|  1.56M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.56M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.56M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.56M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.56M|    handler();
  406|  1.56M|    return begin;
  407|  1.56M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.56M|        {
  869|  1.56M|            arg_id = handler.on_arg_id();
  870|  1.56M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.56M|    {
 1046|  1.56M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.56M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.56M|{
  795|  1.56M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.56M|        if (*begin == CharT{'['}) {
  797|  1.56M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.56M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.56M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.56M|                return begin;
  803|  1.56M|            }
  804|  1.56M|            handler.on_character_set_string(set);
  805|  1.56M|            return begin;
  806|  1.56M|        }
  807|  1.56M|        if (*begin == CharT{'/'}) {
  808|  1.56M|            return parse_presentation_regex(begin, end, handler);
  809|  1.56M|        }
  810|  1.56M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.56M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.56M|            handler.on_error("Invalid type specifier in format string");
  813|  1.56M|            return begin;
  814|  1.56M|        }
  815|  1.56M|        handler.on_type(type);
  816|  1.56M|        return begin;
  817|  1.56M|    };
  818|       |
  819|  1.56M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.56M, False: 0]
  |  Branch (819:28): [True: 1.56M, False: 0]
  ------------------
  820|  1.56M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.56M, False: 0]
  |  Branch (820:36): [True: 1.12M, False: 443k]
  ------------------
  821|  1.12M|        return do_presentation();
  822|  1.12M|    }
  823|       |
  824|   443k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   443k|    begin = parse_align(begin, end, handler);
  830|   443k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   443k|    begin = parse_width(begin, end, handler);
  836|   443k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   443k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 443k, False: 0]
  ------------------
  842|   443k|        handler.on_localized();
  843|   443k|        ++begin;
  844|   443k|    }
  845|   443k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   443k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 443k, False: 0]
  |  Branch (850:25): [True: 0, False: 443k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   443k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   443k|    return begin;
  859|   443k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  1.82M|{
  464|  1.82M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.32M, False: 500k]
  |  Branch (464:33): [True: 1.32M, False: 0]
  ------------------
  465|  1.82M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 500k, False: 0]
  |  Branch (465:33): [True: 500k, False: 0]
  ------------------
  466|  1.82M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.12M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.12M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.12M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.12M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.12M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.12M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.12M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.12M|        handler.on_type(type);
  816|  1.12M|        return begin;
  817|  1.12M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.32M|{
  412|  1.32M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.32M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.32M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.32M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.32M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.32M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.32M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.32M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.32M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.32M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.32M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   551k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 551k, False: 769k]
  ------------------
  431|   551k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.32M]
  ------------------
  432|   551k|            return presentation_type::float_hex;
  433|  66.1k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 66.1k, False: 1.25M]
  ------------------
  434|  66.1k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.32M]
  ------------------
  435|  66.1k|            return presentation_type::float_scientific;
  436|   263k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 263k, False: 1.05M]
  ------------------
  437|   263k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.32M]
  ------------------
  438|   263k|            return presentation_type::float_fixed;
  439|   439k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 439k, False: 881k]
  ------------------
  440|   439k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.32M]
  ------------------
  441|   439k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.32M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.32M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.32M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.32M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.32M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.32M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.32M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.32M|    }
  459|  1.32M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   443k|{
  489|   443k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   443k|        switch (ch) {
  493|   443k|            case L'<':
  494|   443k|                return align_type::left;
  495|   443k|            case L'>':
  496|   443k|                return align_type::right;
  497|   443k|            case L'^':
  498|   443k|                return align_type::center;
  499|   443k|            default:
  500|   443k|                return align_type::none;
  501|   443k|        }
  502|   443k|    };
  503|       |
  504|   443k|    auto potential_fill_len = code_point_length(begin, end);
  505|   443k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  |  Branch (153:45): [True: 0, False: 443k]
  |  |  |  Branch (153:45): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  506|   443k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   443k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   443k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   443k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   443k|    const auto begin_before_fill = begin;
  516|   443k|    begin += potential_fill_len;
  517|       |
  518|   443k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 443k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   443k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   443k|    const auto begin_after_fill = begin;
  524|   443k|    ++begin;
  525|       |
  526|   443k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 443k, False: 0]
  ------------------
  527|   443k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   443k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 443k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   443k|    }
  535|       |
  536|   443k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 443k, False: 0]
  ------------------
  537|   443k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 443k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   443k|        return begin_before_fill;
  542|   443k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   443k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   500k|{
  471|   500k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   500k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   500k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   500k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   500k|        return 1;
  474|   500k|    }
  475|   500k|    else {
  476|   500k|        const auto lengths =
  477|   500k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   500k|            "\3\4";
  479|   500k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   500k|        return len;
  481|   500k|    }
  482|   500k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   886k|    auto check_align = [](wchar_t ch) {
  492|   886k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 886k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 886k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 886k]
  ------------------
  498|      0|                return align_type::center;
  499|   886k|            default:
  ------------------
  |  Branch (499:13): [True: 886k, False: 0]
  ------------------
  500|   886k|                return align_type::none;
  501|   886k|        }
  502|   886k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   443k|{
  554|   443k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   443k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 443k, False: 0]
  |  Branch (556:33): [True: 0, False: 443k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   443k|    return begin;
  567|   443k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   443k|    {
 1051|   443k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   443k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 443k, False: 0]
  ------------------
 1053|   443k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 443k, False: 0]
  ------------------
 1054|   443k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 443k]
  ------------------
 1055|   443k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   443k|        Handler::on_localized();
 1063|   443k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   255k|{
  968|   255k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   255k|    handler.check_args_exhausted();
  970|   255k|    return handler.get_error();
  971|   255k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   255k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   255k|    auto begin = format.data();
  937|   255k|    auto it = begin;
  938|   255k|    const auto end = format.data() + format.size();
  939|       |
  940|   368k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 255k, False: 113k]
  ------------------
  941|   255k|        const auto ch = *it++;
  942|   255k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 255k, False: 0]
  ------------------
  943|   255k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   255k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   255k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 141k, False: 113k]
  ------------------
  947|   141k|                return;
  948|   141k|            }
  949|   255k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   255k|    }
  960|       |
  961|   113k|    handler.on_literal_text(begin, end);
  962|   113k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   255k|{
  866|   255k|    struct id_adapter {
  867|   255k|        constexpr void operator()()
  868|   255k|        {
  869|   255k|            arg_id = handler.on_arg_id();
  870|   255k|        }
  871|   255k|        constexpr void operator()(std::size_t id)
  872|   255k|        {
  873|   255k|            arg_id = handler.on_arg_id(id);
  874|   255k|        }
  875|       |
  876|   255k|        constexpr void on_error(const char* msg)
  877|   255k|        {
  878|   255k|            SCN_UNLIKELY_ATTR
  879|   255k|            handler.on_error(msg);
  880|   255k|        }
  881|       |
  882|   255k|        Handler& handler;
  883|   255k|        std::size_t arg_id;
  884|   255k|    };
  885|       |
  886|   255k|    ++begin;
  887|   255k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   255k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 255k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   255k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 255k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   255k|    else {
  899|   255k|        auto adapter = id_adapter{handler, 0};
  900|   255k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   255k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   255k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 255k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   255k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 255k, False: 0]
  ------------------
  911|   255k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   255k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   255k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  |  Branch (153:45): [True: 0, False: 255k]
  |  |  |  Branch (153:45): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|   255k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   255k|    }
  927|   255k|    return begin + 1;
  928|   255k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   255k|{
  400|   255k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   255k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 255k, False: 0]
  |  Branch (401:26): [True: 0, False: 255k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   255k|    handler();
  406|   255k|    return begin;
  407|   255k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   255k|        {
  869|   255k|            arg_id = handler.on_arg_id();
  870|   255k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   255k|    {
 1046|   255k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   255k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   255k|{
  795|   255k|    auto do_presentation = [&]() -> const CharT* {
  796|   255k|        if (*begin == CharT{'['}) {
  797|   255k|            auto set = parse_presentation_set(begin, end, handler);
  798|   255k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   255k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   255k|                return begin;
  803|   255k|            }
  804|   255k|            handler.on_character_set_string(set);
  805|   255k|            return begin;
  806|   255k|        }
  807|   255k|        if (*begin == CharT{'/'}) {
  808|   255k|            return parse_presentation_regex(begin, end, handler);
  809|   255k|        }
  810|   255k|        presentation_type type = parse_presentation_type(*begin++);
  811|   255k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   255k|            handler.on_error("Invalid type specifier in format string");
  813|   255k|            return begin;
  814|   255k|        }
  815|   255k|        handler.on_type(type);
  816|   255k|        return begin;
  817|   255k|    };
  818|       |
  819|   255k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 255k, False: 0]
  |  Branch (819:28): [True: 255k, False: 0]
  ------------------
  820|   255k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 255k, False: 0]
  |  Branch (820:36): [True: 198k, False: 56.7k]
  ------------------
  821|   198k|        return do_presentation();
  822|   198k|    }
  823|       |
  824|  56.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  56.7k|    begin = parse_align(begin, end, handler);
  830|  56.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  56.7k|    begin = parse_width(begin, end, handler);
  836|  56.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  56.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 56.7k, False: 0]
  ------------------
  842|  56.7k|        handler.on_localized();
  843|  56.7k|        ++begin;
  844|  56.7k|    }
  845|  56.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  56.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 56.7k, False: 0]
  |  Branch (850:25): [True: 0, False: 56.7k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  56.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  56.7k|    return begin;
  859|  56.7k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   198k|    auto do_presentation = [&]() -> const CharT* {
  796|   198k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 198k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   198k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 198k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   198k|        presentation_type type = parse_presentation_type(*begin++);
  811|   198k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|   198k|        handler.on_type(type);
  816|   198k|        return begin;
  817|   198k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  56.7k|{
  489|  56.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  56.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  56.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  56.7k|        switch (ch) {
  493|  56.7k|            case L'<':
  494|  56.7k|                return align_type::left;
  495|  56.7k|            case L'>':
  496|  56.7k|                return align_type::right;
  497|  56.7k|            case L'^':
  498|  56.7k|                return align_type::center;
  499|  56.7k|            default:
  500|  56.7k|                return align_type::none;
  501|  56.7k|        }
  502|  56.7k|    };
  503|       |
  504|  56.7k|    auto potential_fill_len = code_point_length(begin, end);
  505|  56.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  |  Branch (153:45): [True: 0, False: 56.7k]
  |  |  |  Branch (153:45): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  506|  56.7k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  56.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  56.7k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  56.7k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  56.7k|    const auto begin_before_fill = begin;
  516|  56.7k|    begin += potential_fill_len;
  517|       |
  518|  56.7k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 56.7k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  56.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  56.7k|    const auto begin_after_fill = begin;
  524|  56.7k|    ++begin;
  525|       |
  526|  56.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 56.7k, False: 0]
  ------------------
  527|  56.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.7k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  56.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 56.7k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  56.7k|    }
  535|       |
  536|  56.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 56.7k, False: 0]
  ------------------
  537|  56.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 56.7k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  56.7k|        return begin_before_fill;
  542|  56.7k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  56.7k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   113k|    auto check_align = [](wchar_t ch) {
  492|   113k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 113k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 113k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 113k]
  ------------------
  498|      0|                return align_type::center;
  499|   113k|            default:
  ------------------
  |  Branch (499:13): [True: 113k, False: 0]
  ------------------
  500|   113k|                return align_type::none;
  501|   113k|        }
  502|   113k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  56.7k|{
  554|  56.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  56.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  56.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  56.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 56.7k, False: 0]
  |  Branch (556:33): [True: 0, False: 56.7k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  56.7k|    return begin;
  567|  56.7k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  56.7k|    {
 1051|  56.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  56.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 56.7k, False: 0]
  ------------------
 1053|  56.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 56.7k, False: 0]
  ------------------
 1054|  56.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 56.7k]
  ------------------
 1055|  56.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  56.7k|        Handler::on_localized();
 1063|  56.7k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.44M|{
  226|  2.44M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.44M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.44M|                  "\n"
  230|  2.44M|                  "Unsupported range type given as input to a scanning "
  231|  2.44M|                  "function.\n"
  232|  2.44M|                  "A range needs to have a character type (value type) "
  233|  2.44M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.44M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.44M|                  "to be included.\n"
  236|  2.44M|                  "See the scnlib documentation for more details.");
  237|  2.44M|    static_assert(
  238|  2.44M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.44M|        "\n"
  240|  2.44M|        "Unsupported range type given as input to a scanning "
  241|  2.44M|        "function.\n"
  242|  2.44M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.44M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.44M|        "not supported.");
  245|  2.44M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.44M|                  "\n"
  247|  2.44M|                  "Unsupported range type given as input to a scanning "
  248|  2.44M|                  "function.\n"
  249|  2.44M|                  "file_marker_found cannot be used as an "
  250|  2.44M|                  "source range type to scn::scan.\n"
  251|  2.44M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.44M|                  "and do not provide an explicit source range, "
  253|  2.44M|                  "or use scn::scan with a FILE* directly.");
  254|  2.44M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.44M|                  "\n"
  256|  2.44M|                  "Unsupported range type given as input to a scanning "
  257|  2.44M|                  "function.\n"
  258|  2.44M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.44M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.44M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.44M|                  "\n"
  262|  2.44M|                  "Unsupported range type given as input to a scanning "
  263|  2.44M|                  "function.\n"
  264|  2.44M|                  "A range needs to model forward_range and have a valid "
  265|  2.44M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.44M|                  "Examples of scannable ranges are std::string, "
  267|  2.44M|                  "std::string_view, "
  268|  2.44M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.44M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.44M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.44M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.44M|{
  153|  2.44M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.44M|        return std::basic_string_view{ranges::data(r),
  155|  2.44M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.44M|    }
  162|  2.44M|    else {
  163|  2.44M|        return invalid_char_type{};
  164|  2.44M|    }
  165|  2.44M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   102k|{
  226|   102k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   102k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   102k|                  "\n"
  230|   102k|                  "Unsupported range type given as input to a scanning "
  231|   102k|                  "function.\n"
  232|   102k|                  "A range needs to have a character type (value type) "
  233|   102k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   102k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   102k|                  "to be included.\n"
  236|   102k|                  "See the scnlib documentation for more details.");
  237|   102k|    static_assert(
  238|   102k|        !std::is_same_v<T, custom_char_traits>,
  239|   102k|        "\n"
  240|   102k|        "Unsupported range type given as input to a scanning "
  241|   102k|        "function.\n"
  242|   102k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   102k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   102k|        "not supported.");
  245|   102k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   102k|                  "\n"
  247|   102k|                  "Unsupported range type given as input to a scanning "
  248|   102k|                  "function.\n"
  249|   102k|                  "file_marker_found cannot be used as an "
  250|   102k|                  "source range type to scn::scan.\n"
  251|   102k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   102k|                  "and do not provide an explicit source range, "
  253|   102k|                  "or use scn::scan with a FILE* directly.");
  254|   102k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   102k|                  "\n"
  256|   102k|                  "Unsupported range type given as input to a scanning "
  257|   102k|                  "function.\n"
  258|   102k|                  "In order to be scannable, a range needs to satisfy "
  259|   102k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   102k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   102k|                  "\n"
  262|   102k|                  "Unsupported range type given as input to a scanning "
  263|   102k|                  "function.\n"
  264|   102k|                  "A range needs to model forward_range and have a valid "
  265|   102k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   102k|                  "Examples of scannable ranges are std::string, "
  267|   102k|                  "std::string_view, "
  268|   102k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   102k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   102k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   102k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   102k|{
  196|   102k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   102k|        return file_marker_found{};
  198|   102k|    }
  199|   102k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   102k|        if constexpr (ranges::input_range<Range>) {
  201|   102k|            return insufficient_range{};
  202|   102k|        }
  203|   102k|        else {
  204|   102k|            return invalid_input_range{};
  205|   102k|        }
  206|   102k|    }
  207|   102k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   102k|        return invalid_char_type{};
  209|   102k|    }
  210|   102k|    else {
  211|   102k|        return make_forward_scan_buffer(r);
  212|   102k|    }
  213|   102k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.23M|{
  226|  2.23M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.23M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.23M|                  "\n"
  230|  2.23M|                  "Unsupported range type given as input to a scanning "
  231|  2.23M|                  "function.\n"
  232|  2.23M|                  "A range needs to have a character type (value type) "
  233|  2.23M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.23M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.23M|                  "to be included.\n"
  236|  2.23M|                  "See the scnlib documentation for more details.");
  237|  2.23M|    static_assert(
  238|  2.23M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.23M|        "\n"
  240|  2.23M|        "Unsupported range type given as input to a scanning "
  241|  2.23M|        "function.\n"
  242|  2.23M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.23M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.23M|        "not supported.");
  245|  2.23M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.23M|                  "\n"
  247|  2.23M|                  "Unsupported range type given as input to a scanning "
  248|  2.23M|                  "function.\n"
  249|  2.23M|                  "file_marker_found cannot be used as an "
  250|  2.23M|                  "source range type to scn::scan.\n"
  251|  2.23M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.23M|                  "and do not provide an explicit source range, "
  253|  2.23M|                  "or use scn::scan with a FILE* directly.");
  254|  2.23M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.23M|                  "\n"
  256|  2.23M|                  "Unsupported range type given as input to a scanning "
  257|  2.23M|                  "function.\n"
  258|  2.23M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.23M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.23M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.23M|                  "\n"
  262|  2.23M|                  "Unsupported range type given as input to a scanning "
  263|  2.23M|                  "function.\n"
  264|  2.23M|                  "A range needs to model forward_range and have a valid "
  265|  2.23M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.23M|                  "Examples of scannable ranges are std::string, "
  267|  2.23M|                  "std::string_view, "
  268|  2.23M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.23M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.23M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.23M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.23M|{
  153|  2.23M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.23M|        return std::basic_string_view{ranges::data(r),
  155|  2.23M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.23M|    }
  162|  2.23M|    else {
  163|  2.23M|        return invalid_char_type{};
  164|  2.23M|    }
  165|  2.23M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   340k|{
  226|   340k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   340k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   340k|                  "\n"
  230|   340k|                  "Unsupported range type given as input to a scanning "
  231|   340k|                  "function.\n"
  232|   340k|                  "A range needs to have a character type (value type) "
  233|   340k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   340k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   340k|                  "to be included.\n"
  236|   340k|                  "See the scnlib documentation for more details.");
  237|   340k|    static_assert(
  238|   340k|        !std::is_same_v<T, custom_char_traits>,
  239|   340k|        "\n"
  240|   340k|        "Unsupported range type given as input to a scanning "
  241|   340k|        "function.\n"
  242|   340k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   340k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   340k|        "not supported.");
  245|   340k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   340k|                  "\n"
  247|   340k|                  "Unsupported range type given as input to a scanning "
  248|   340k|                  "function.\n"
  249|   340k|                  "file_marker_found cannot be used as an "
  250|   340k|                  "source range type to scn::scan.\n"
  251|   340k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   340k|                  "and do not provide an explicit source range, "
  253|   340k|                  "or use scn::scan with a FILE* directly.");
  254|   340k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   340k|                  "\n"
  256|   340k|                  "Unsupported range type given as input to a scanning "
  257|   340k|                  "function.\n"
  258|   340k|                  "In order to be scannable, a range needs to satisfy "
  259|   340k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   340k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   340k|                  "\n"
  262|   340k|                  "Unsupported range type given as input to a scanning "
  263|   340k|                  "function.\n"
  264|   340k|                  "A range needs to model forward_range and have a valid "
  265|   340k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   340k|                  "Examples of scannable ranges are std::string, "
  267|   340k|                  "std::string_view, "
  268|   340k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   340k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   340k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   340k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   340k|{
  196|   340k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   340k|        return file_marker_found{};
  198|   340k|    }
  199|   340k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   340k|        if constexpr (ranges::input_range<Range>) {
  201|   340k|            return insufficient_range{};
  202|   340k|        }
  203|   340k|        else {
  204|   340k|            return invalid_input_range{};
  205|   340k|        }
  206|   340k|    }
  207|   340k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   340k|        return invalid_char_type{};
  209|   340k|    }
  210|   340k|    else {
  211|   340k|        return make_forward_scan_buffer(r);
  212|   340k|    }
  213|   340k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  7.89M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  1.78M|    {
   45|  1.78M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  1.78M|    {
   66|  1.78M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.78M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.78M|        do_check_arg_id(id);
   74|  1.78M|        return id;
   75|  1.78M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  1.78M|{
  210|  1.78M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.78M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.78M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.78M|    {
   61|  1.78M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.78M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  3.57M|    {
   50|  3.57M|        return m_format.data();
   51|  3.57M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  1.82M|    {
   45|  1.82M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  1.82M|    {
   66|  1.82M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.82M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.82M|        do_check_arg_id(id);
   74|  1.82M|        return id;
   75|  1.82M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  1.82M|{
  210|  1.82M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.82M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.82M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.82M|    {
   61|  1.82M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.82M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  3.64M|    {
   50|  3.64M|        return m_format.data();
   51|  3.64M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  6.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   977k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.87M|    {
  482|  4.87M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.87M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.87M|    {
  473|  4.87M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.87M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.23M|    {
  482|  2.23M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.23M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  2.23M|    {
  473|  2.23M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.23M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.24M|    {
  482|  2.24M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.24M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.24M|    {
  473|  2.24M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.24M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.63M|    {
  549|  1.63M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.63M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.63M|    {
  541|  1.63M|        return ranges::distance(lhs, rhs);
  542|  1.63M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   260k|    {
  513|   260k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   260k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   260k|    {
  498|   260k|        it.batch_advance(n);
  499|   260k|        return it;
  500|   260k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.99M|    {
  482|  1.99M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.99M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.99M|    {
  473|  1.99M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.99M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.42M|    {
  549|  1.42M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.42M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.42M|    {
  541|  1.42M|        return ranges::distance(lhs, rhs);
  542|  1.42M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   693k|    {
  513|   693k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   693k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   693k|    {
  498|   693k|        it.batch_advance(n);
  499|   693k|        return it;
  500|   693k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   113k|    {
  549|   113k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   113k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   113k|    {
  534|   113k|        return rhs.position() - lhs.position();
  535|   113k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.13M|    {
  482|  1.13M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.13M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISO_E4typeEE4typeE_EEOSH_:
  472|  1.13M|    {
  473|  1.13M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.13M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.34M|{
  343|  2.34M|    return {ranges::next(ranges::begin(source), n),
  344|  2.34M|            make_vscan_result_range_end(source)};
  345|  2.34M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.34M|{
  330|  2.34M|    return ranges::end(source);
  331|  2.34M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   722k|    {
  253|   722k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.34M|    {
  104|  2.34M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  1.40M|    {
   39|  1.40M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.34M|    {
  121|  2.34M|        return ranges::begin(m_range);
  122|  2.34M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   806k|    {
  253|   806k|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  1.56M|    {
   39|  1.56M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   818k|    {
  253|   818k|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  1.58M|    {
   39|  1.58M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.04M|{
  343|  2.04M|    return {ranges::next(ranges::begin(source), n),
  344|  2.04M|            make_vscan_result_range_end(source)};
  345|  2.04M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.04M|{
  330|  2.04M|    return ranges::end(source);
  331|  2.04M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   630k|    {
  253|   630k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.04M|    {
  104|  2.04M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.04M|    {
  121|  2.04M|        return ranges::begin(m_range);
  122|  2.04M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   702k|    {
  253|   702k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   713k|    {
  253|   713k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   155k|{
  343|   155k|    return {ranges::next(ranges::begin(source), n),
  344|   155k|            make_vscan_result_range_end(source)};
  345|   155k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   155k|{
  330|   155k|    return ranges::end(source);
  331|   155k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ESF_ONS6_5tupleIJfEEE:
  252|  51.9k|    {
  253|  51.9k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   155k|    {
  104|   155k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   155k|    {
  121|   155k|        return ranges::begin(m_range);
  122|   155k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ESF_ONS6_5tupleIJdEEE:
  252|  51.9k|    {
  253|  51.9k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ESF_ONS6_5tupleIJeEEE:
  252|  51.9k|    {
  253|  51.9k|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   340k|{
  117|   340k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   340k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   340k|{
   77|   340k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   340k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   340k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   340k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   681k|{
   55|   681k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 649k]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|   649k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   681k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   340k|{
  201|   340k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   340k|                                                      format, {});
  203|   340k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   340k|{
  163|   340k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   340k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   340k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   340k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  74.8k|{
  248|  74.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  74.8k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  74.8k|{
  229|  74.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  74.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  74.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  74.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  72.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  72.2k|    static_cast<    \
  |  |  247|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  72.2k|    static_cast<    \
  |  |  247|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  74.8k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   377k|{
  117|   377k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   377k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   377k|{
   77|   377k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   377k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   377k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   377k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   377k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   755k|{
   55|   755k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 724k]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|   724k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   724k|    static_cast<    \
  |  |  247|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   724k|    static_cast<    \
  |  |  247|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   755k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   377k|{
  201|   377k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   377k|                                                      format, {});
  203|   377k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   377k|{
  163|   377k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   377k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   377k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   377k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   377k|    static_cast<    \
  |  |  247|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   377k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  85.1k|{
  248|  85.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  85.1k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  85.1k|{
  229|  85.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  85.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  85.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 82.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  85.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  82.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  82.5k|    static_cast<    \
  |  |  247|  82.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  82.5k|    static_cast<    \
  |  |  247|  82.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  85.1k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   382k|{
  117|   382k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   382k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   382k|{
   77|   382k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   382k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   382k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   382k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   382k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   765k|{
   55|   765k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 734k]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|   734k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   734k|    static_cast<    \
  |  |  247|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   734k|    static_cast<    \
  |  |  247|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   765k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   382k|{
  201|   382k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   382k|                                                      format, {});
  203|   382k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   382k|{
  163|   382k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   382k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   382k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   382k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   382k|    static_cast<    \
  |  |  247|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   382k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  86.7k|{
  248|  86.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  86.7k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  86.7k|{
  229|  86.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  86.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  86.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 84.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  86.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  84.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  84.1k|    static_cast<    \
  |  |  247|  84.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  84.1k|    static_cast<    \
  |  |  247|  84.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  86.7k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.7k|{
  117|  15.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.7k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.7k|{
   77|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  31.5k|{
   55|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  31.5k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.7k|{
  201|  15.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.7k|                                                      format, {});
  203|  15.7k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.7k|{
  163|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.7k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.63k|{
  248|  2.63k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.63k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.63k|{
  229|  2.63k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  2.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.63k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.7k|{
  117|  15.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.7k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.7k|{
   77|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  31.5k|{
   55|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  31.5k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.7k|{
  201|  15.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.7k|                                                      format, {});
  203|  15.7k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.7k|{
  163|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.7k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.63k|{
  248|  2.63k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.63k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.63k|{
  229|  2.63k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  2.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.63k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.7k|{
  117|  15.7k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.7k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.7k|{
   77|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  31.5k|{
   55|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  31.5k|        return unexpected(result.error());
   57|  31.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  31.5k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.7k|{
  201|  15.7k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.7k|                                                      format, {});
  203|  15.7k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.7k|{
  163|  15.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.7k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.63k|{
  248|  2.63k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.63k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.63k|{
  229|  2.63k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.63k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.63k|    }                                                  \
  |  |  |  |   70|  2.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.63k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   312k|{
   77|   312k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   312k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   312k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   312k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   312k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   624k|{
   55|   624k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 567k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|   567k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   567k|    static_cast<    \
  |  |  247|   567k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   567k|    static_cast<    \
  |  |  247|   567k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   624k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   312k|{
  163|   312k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   312k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   312k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   312k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   312k|    static_cast<    \
  |  |  247|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   312k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.4k|{
  229|  67.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  67.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  62.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.7k|    static_cast<    \
  |  |  247|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.7k|    static_cast<    \
  |  |  247|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.4k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   343k|{
   77|   343k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   343k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   343k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   343k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   343k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   687k|{
   55|   687k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 631k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|   631k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   631k|    static_cast<    \
  |  |  247|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   631k|    static_cast<    \
  |  |  247|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   687k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   343k|{
  163|   343k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   343k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   343k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   343k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   343k|    static_cast<    \
  |  |  247|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   343k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  76.4k|{
  229|  76.4k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  76.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  76.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  76.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  71.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  71.6k|    static_cast<    \
  |  |  247|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  71.6k|    static_cast<    \
  |  |  247|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  76.4k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   348k|{
   77|   348k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   348k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   348k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   348k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   348k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   696k|{
   55|   696k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 640k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|   640k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   640k|    static_cast<    \
  |  |  247|   640k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   640k|    static_cast<    \
  |  |  247|   640k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   696k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   348k|{
  163|   348k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   348k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   348k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   348k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   348k|    static_cast<    \
  |  |  247|   348k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   348k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  77.8k|{
  229|  77.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  77.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 73.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  73.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.1k|    static_cast<    \
  |  |  247|  73.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.1k|    static_cast<    \
  |  |  247|  73.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  77.8k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  51.9k|{
   77|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  51.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  51.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   103k|{
   55|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 47.2k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|  47.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   103k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  51.9k|{
  163|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  51.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  51.9k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.45k|{
  229|  9.45k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.72k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.45k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  51.9k|{
   77|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  51.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  51.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   103k|{
   55|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 47.2k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|  47.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   103k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  51.9k|{
  163|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  51.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  51.9k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.45k|{
  229|  9.45k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.72k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.45k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  51.9k|{
   77|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  51.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  51.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   103k|{
   55|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 47.2k]
  |  |  ------------------
  ------------------
   56|  56.7k|        return unexpected(result.error());
   57|  56.7k|    }
   58|  47.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  47.2k|    static_cast<    \
  |  |  247|  47.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   103k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  51.9k|{
  163|  51.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  51.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  51.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  51.9k|    static_cast<    \
  |  |  247|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  51.9k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  9.45k|{
  229|  9.45k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  9.45k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.72k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.72k|    static_cast<    \
  |  |  247|  4.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  9.45k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   102k|{
  486|   102k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   102k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   102k|    {
  378|   102k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   102k|    {
  360|   102k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   102k|    {
  129|   102k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   102k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   410k|    {
  382|   410k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 432, False: 410k]
  ------------------
  383|    432|            return false;
  384|    432|        }
  385|   410k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 307k, False: 102k]
  ------------------
  386|   307k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   307k|                                          this->m_current_view.begin(),
  388|   307k|                                          this->m_current_view.end());
  389|   307k|        }
  390|   410k|        m_latest = *m_cursor;
  391|   410k|        ++m_cursor;
  392|   410k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   410k|        return true;
  394|   410k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   102k|    {
   49|   102k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   102k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   340k|{
  486|   340k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   340k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   340k|    {
  378|   340k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   340k|    {
  360|   340k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   340k|    {
  129|   340k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   340k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  2.80M|    {
  382|  2.80M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 2.89k, False: 2.80M]
  ------------------
  383|  2.89k|            return false;
  384|  2.89k|        }
  385|  2.80M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 2.46M, False: 340k]
  ------------------
  386|  2.46M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  2.46M|                                          this->m_current_view.begin(),
  388|  2.46M|                                          this->m_current_view.end());
  389|  2.46M|        }
  390|  2.80M|        m_latest = *m_cursor;
  391|  2.80M|        ++m_cursor;
  392|  2.80M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  2.80M|        return true;
  394|  2.80M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   340k|    {
   49|   340k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   340k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   340k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  6.69M|    {
  173|  6.69M|        return m_end == nullptr;
  174|  6.69M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   205k|    {
  189|   205k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 205k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   205k|        return parent()->get_segment_starting_at(position());
  195|   205k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  3.70M|    {
  183|  3.70M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  3.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  3.70M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   205k|    {
   79|   205k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 205k]
  |  |  ------------------
  ------------------
   80|   205k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   205k|        const auto start = pos - m_putback_buffer.size();
   84|   205k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   205k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   260k|    {
  178|   260k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   260k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   465k|    {
  168|   465k|        return m_position;
  169|   465k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   307k|    {
  101|   307k|        return m_is_contiguous;
  102|   307k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  63.0M|    {
  173|  63.0M|        return m_end == nullptr;
  174|  63.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  3.20M|    {
  189|  3.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 3.20M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  3.20M|        return parent()->get_segment_starting_at(position());
  195|  3.20M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  34.8M|    {
  183|  34.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  34.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  3.20M|    {
   79|  3.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  3.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41M, False: 1.78M]
  |  |  ------------------
  ------------------
   80|  3.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  1.41M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  1.41M|        }
   83|  1.78M|        const auto start = pos - m_putback_buffer.size();
   84|  1.78M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  3.20M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   878k|    {
  178|   878k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   878k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  6.56M|    {
  168|  6.56M|        return m_position;
  169|  6.56M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.02M|    {
  101|  1.02M|        return m_is_contiguous;
  102|  1.02M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   102k|{
  322|   102k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 102k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   102k|    return ranges::subrange{forward_iterator{this, 0},
  327|   102k|                            ranges_std::default_sentinel};
  328|   102k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   102k|    {
  155|   102k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   102k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   102k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   615k|    {
  258|   615k|        return x.is_at_end();
  259|   615k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|   718k|    {
  302|   718k|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 718k]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|   718k|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 718k]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|   718k|        return !read_at_position();
  309|   718k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  1.69M|    {
  282|  1.69M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  1.69M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 1.69M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  1.69M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  1.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.28M, False: 410k]
  |  |  ------------------
  ------------------
  289|  1.28M|            return true;
  290|  1.28M|        }
  291|       |
  292|   820k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 410k, False: 410k]
  ------------------
  293|   410k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 432, False: 410k]
  ------------------
  294|    432|                return false;
  295|    432|            }
  296|   410k|        }
  297|   410k|        return true;
  298|   410k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  2.77M|    {
   59|  2.77M|        return m_putback_buffer.size() + m_current_view.size();
   60|  2.77M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   102k|    {
  269|   102k|        return !x.is_at_end();
  270|   102k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|   567k|    {
  217|   567k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|   567k|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 567k]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|   567k|        auto res = read_at_position();
  226|   567k|        SCN_EXPECT(res);
  ------------------
  |  |  242|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|   567k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|   567k|    {
   90|   567k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 567k, False: 117]
  |  |  ------------------
  ------------------
   91|   567k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|   567k|            return m_putback_buffer[pos];
   93|   567k|        }
   94|    117|        const auto start = pos - m_putback_buffer.size();
   95|    117|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|    117|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    117|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|   567k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   410k|    {
  203|   410k|        ++m_position;
  204|   410k|        std::ignore = read_at_position();
  205|   410k|        return *this;
  206|   410k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   260k|    {
  252|   260k|        return !(lhs == rhs);
  253|   260k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   362k|    {
  247|   362k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 362k, False: 0]
  |  Branch (247:46): [True: 102k, False: 260k]
  ------------------
  248|   362k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   260k|    {
  232|   260k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   260k|        return *this;
  235|   260k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   102k|    {
   54|   102k|        sync(0);
   55|   102k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   340k|{
  322|   340k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 340k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   340k|    return ranges::subrange{forward_iterator{this, 0},
  327|   340k|                            ranges_std::default_sentinel};
  328|   340k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   340k|    {
  155|   340k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   340k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   340k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.38M|    {
  258|  2.38M|        return x.is_at_end();
  259|  2.38M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  5.85M|    {
  302|  5.85M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 5.85M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  5.85M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 5.85M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  5.85M|        return !read_at_position();
  309|  5.85M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  17.5M|    {
  282|  17.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  17.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  17.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 17.5M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  17.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  17.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 14.7M, False: 2.80M]
  |  |  ------------------
  ------------------
  289|  14.7M|            return true;
  290|  14.7M|        }
  291|       |
  292|  5.61M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 2.80M, False: 2.80M]
  ------------------
  293|  2.80M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 2.89k, False: 2.80M]
  ------------------
  294|  2.89k|                return false;
  295|  2.89k|            }
  296|  2.80M|        }
  297|  2.80M|        return true;
  298|  2.80M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  24.0M|    {
   59|  24.0M|        return m_putback_buffer.size() + m_current_view.size();
   60|  24.0M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  3.47M|    {
  269|  3.47M|        return !x.is_at_end();
  270|  3.47M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.62M|    {
  217|  5.62M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.62M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.62M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.62M|        auto res = read_at_position();
  226|  5.62M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.62M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.62M|    {
   90|  5.62M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.15M, False: 1.47M]
  |  |  ------------------
  ------------------
   91|  5.62M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.15M|            return m_putback_buffer[pos];
   93|  4.15M|        }
   94|  1.47M|        const auto start = pos - m_putback_buffer.size();
   95|  1.47M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.62M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  6.10M|    {
  203|  6.10M|        ++m_position;
  204|  6.10M|        std::ignore = read_at_position();
  205|  6.10M|        return *this;
  206|  6.10M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  4.11M|    {
  252|  4.11M|        return !(lhs == rhs);
  253|  4.11M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  4.79M|    {
  247|  4.79M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 4.79M, False: 0]
  |  Branch (247:46): [True: 1.78M, False: 3.00M]
  ------------------
  248|  4.79M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   693k|    {
  232|   693k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   693k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   693k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   693k|        return *this;
  235|   693k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   184k|    {
   54|   184k|        sync(0);
   55|   184k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   813k|{
   72|   813k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   813k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   813k|    }
   75|   813k|    else if constexpr (sizeof(U) == 2) {
   76|   813k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   813k|    }
   78|   813k|    else {
   79|       |        // utf-32
   80|   813k|        static_assert(sizeof(U) == 4);
   81|   813k|        SCN_UNUSED(ch);
   82|   813k|        return 1;
   83|   813k|    }
   84|   813k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   813k|{
   36|   813k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   813k|    SCN_GCC_COMPAT_PUSH
   39|   813k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   813k|    constexpr char lengths[] =
   41|   813k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   813k|        "\1\1\1\1\1\1\1\1"
   43|   813k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   813k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   813k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   813k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   813k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   813k|    SCN_GCC_COMPAT_POP
   50|   813k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  81.0M|{
   72|  81.0M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  81.0M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  81.0M|    }
   75|  81.0M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  81.0M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  81.0M|    }
   78|  81.0M|    else {
   79|       |        // utf-32
   80|  81.0M|        static_assert(sizeof(U) == 4);
   81|  81.0M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  81.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  81.0M|        return 1;
   83|  81.0M|    }
   84|  81.0M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   740k|{
   36|   740k|#define SCN_VISIT(Type)                                         \
   37|   740k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   740k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   740k|    }                                                           \
   40|   740k|    else {                                                      \
   41|   740k|        return vis(monostate_val);                              \
   42|   740k|    }
   43|       |
   44|   740k|    monostate monostate_val{};
   45|       |
   46|   740k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 740k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 740k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 740k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 740k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 740k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 740k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 740k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 740k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 740k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 740k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 740k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 740k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 740k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 740k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 740k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   224k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 224k, False: 515k]
  ------------------
   78|   224k|            SCN_VISIT(float);
  ------------------
  |  |   37|   224k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   224k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   224k|    }                                                           \
  |  |   40|   224k|    else {                                                      \
  |  |   41|   224k|        return vis(monostate_val);                              \
  |  |   42|   224k|    }
  ------------------
   79|   255k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 255k, False: 484k]
  ------------------
   80|   255k|            SCN_VISIT(double);
  ------------------
  |  |   37|   255k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   255k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   255k|    }                                                           \
  |  |   40|   255k|    else {                                                      \
  |  |   41|   255k|        return vis(monostate_val);                              \
  |  |   42|   255k|    }
  ------------------
   81|   260k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 260k, False: 479k]
  ------------------
   82|   260k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   260k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   260k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   260k|    }                                                           \
  |  |   40|   260k|    else {                                                      \
  |  |   41|   260k|        return vis(monostate_val);                              \
  |  |   42|   260k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 740k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 740k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 740k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 740k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 740k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 740k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 740k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 740k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 740k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   740k|            SCN_CLANG_POP
  114|   740k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   740k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  23.6k|{
   36|  23.6k|#define SCN_VISIT(Type)                                         \
   37|  23.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  23.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  23.6k|    }                                                           \
   40|  23.6k|    else {                                                      \
   41|  23.6k|        return vis(monostate_val);                              \
   42|  23.6k|    }
   43|       |
   44|  23.6k|    monostate monostate_val{};
   45|       |
   46|  23.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 23.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 23.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 23.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 23.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 23.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 23.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 23.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 23.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 23.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 23.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 23.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 23.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 23.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 23.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 23.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  7.89k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 7.89k, False: 15.7k]
  ------------------
   78|  7.89k|            SCN_VISIT(float);
  ------------------
  |  |   37|  7.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.89k|    }                                                           \
  |  |   40|  7.89k|    else {                                                      \
  |  |   41|  7.89k|        return vis(monostate_val);                              \
  |  |   42|  7.89k|    }
  ------------------
   79|  7.89k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 7.89k, False: 15.7k]
  ------------------
   80|  7.89k|            SCN_VISIT(double);
  ------------------
  |  |   37|  7.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.89k|    }                                                           \
  |  |   40|  7.89k|    else {                                                      \
  |  |   41|  7.89k|        return vis(monostate_val);                              \
  |  |   42|  7.89k|    }
  ------------------
   81|  7.89k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 7.89k, False: 15.7k]
  ------------------
   82|  7.89k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  7.89k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.89k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.89k|    }                                                           \
  |  |   40|  7.89k|    else {                                                      \
  |  |   41|  7.89k|        return vis(monostate_val);                              \
  |  |   42|  7.89k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 23.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 23.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 23.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 23.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 23.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 23.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 23.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 23.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 23.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  23.6k|            SCN_CLANG_POP
  114|  23.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  23.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.70M|{
   36|  1.70M|#define SCN_VISIT(Type)                                         \
   37|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.70M|    }                                                           \
   40|  1.70M|    else {                                                      \
   41|  1.70M|        return vis(monostate_val);                              \
   42|  1.70M|    }
   43|       |
   44|  1.70M|    monostate monostate_val{};
   45|       |
   46|  1.70M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.70M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.70M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.70M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.70M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.70M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.70M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.70M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.70M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.70M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.70M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.70M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.70M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.70M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.70M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.70M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   531k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 531k, False: 1.17M]
  ------------------
   78|   531k|            SCN_VISIT(float);
  ------------------
  |  |   37|   531k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   531k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   531k|    }                                                           \
  |  |   40|   531k|    else {                                                      \
  |  |   41|   531k|        return vis(monostate_val);                              \
  |  |   42|   531k|    }
  ------------------
   79|   585k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 585k, False: 1.12M]
  ------------------
   80|   585k|            SCN_VISIT(double);
  ------------------
  |  |   37|   585k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   585k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   585k|    }                                                           \
  |  |   40|   585k|    else {                                                      \
  |  |   41|   585k|        return vis(monostate_val);                              \
  |  |   42|   585k|    }
  ------------------
   81|   592k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 592k, False: 1.11M]
  ------------------
   82|   592k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   592k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   592k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   592k|    }                                                           \
  |  |   40|   592k|    else {                                                      \
  |  |   41|   592k|        return vis(monostate_val);                              \
  |  |   42|   592k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.70M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.70M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.70M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.70M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.70M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.70M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.70M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.70M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.70M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.70M|            SCN_CLANG_POP
  114|  1.70M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.70M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  78.9k|{
   36|  78.9k|#define SCN_VISIT(Type)                                         \
   37|  78.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  78.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  78.9k|    }                                                           \
   40|  78.9k|    else {                                                      \
   41|  78.9k|        return vis(monostate_val);                              \
   42|  78.9k|    }
   43|       |
   44|  78.9k|    monostate monostate_val{};
   45|       |
   46|  78.9k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 78.9k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 78.9k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 78.9k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 78.9k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 78.9k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 78.9k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 78.9k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 78.9k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 78.9k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 78.9k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 78.9k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 78.9k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 78.9k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 78.9k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 78.9k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  26.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 26.3k, False: 52.6k]
  ------------------
   78|  26.3k|            SCN_VISIT(float);
  ------------------
  |  |   37|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.3k|    }                                                           \
  |  |   40|  26.3k|    else {                                                      \
  |  |   41|  26.3k|        return vis(monostate_val);                              \
  |  |   42|  26.3k|    }
  ------------------
   79|  26.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 26.3k, False: 52.6k]
  ------------------
   80|  26.3k|            SCN_VISIT(double);
  ------------------
  |  |   37|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.3k|    }                                                           \
  |  |   40|  26.3k|    else {                                                      \
  |  |   41|  26.3k|        return vis(monostate_val);                              \
  |  |   42|  26.3k|    }
  ------------------
   81|  26.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 26.3k, False: 52.6k]
  ------------------
   82|  26.3k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.3k|    }                                                           \
  |  |   40|  26.3k|    else {                                                      \
  |  |   41|  26.3k|        return vis(monostate_val);                              \
  |  |   42|  26.3k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 78.9k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 78.9k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 78.9k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 78.9k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 78.9k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 78.9k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 78.9k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 78.9k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 78.9k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  78.9k|            SCN_CLANG_POP
  114|  78.9k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  78.9k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   665k|{
   36|   665k|#define SCN_VISIT(Type)                                         \
   37|   665k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   665k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   665k|    }                                                           \
   40|   665k|    else {                                                      \
   41|   665k|        return vis(monostate_val);                              \
   42|   665k|    }
   43|       |
   44|   665k|    monostate monostate_val{};
   45|       |
   46|   665k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 665k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 665k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 665k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 665k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 665k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 665k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 665k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 665k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 665k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 665k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 665k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 665k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 665k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 665k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 665k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   202k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 202k, False: 462k]
  ------------------
   78|   202k|            SCN_VISIT(float);
  ------------------
  |  |   37|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   202k|    }                                                           \
  |  |   40|   202k|    else {                                                      \
  |  |   41|   202k|        return vis(monostate_val);                              \
  |  |   42|   202k|    }
  ------------------
   79|   229k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 229k, False: 435k]
  ------------------
   80|   229k|            SCN_VISIT(double);
  ------------------
  |  |   37|   229k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   229k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   229k|    }                                                           \
  |  |   40|   229k|    else {                                                      \
  |  |   41|   229k|        return vis(monostate_val);                              \
  |  |   42|   229k|    }
  ------------------
   81|   233k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 233k, False: 431k]
  ------------------
   82|   233k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   233k|    }                                                           \
  |  |   40|   233k|    else {                                                      \
  |  |   41|   233k|        return vis(monostate_val);                              \
  |  |   42|   233k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 665k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 665k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 665k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 665k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 665k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 665k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 665k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 665k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 665k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   665k|            SCN_CLANG_POP
  114|   665k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   665k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.56M|{
   36|  1.56M|#define SCN_VISIT(Type)                                         \
   37|  1.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.56M|    }                                                           \
   40|  1.56M|    else {                                                      \
   41|  1.56M|        return vis(monostate_val);                              \
   42|  1.56M|    }
   43|       |
   44|  1.56M|    monostate monostate_val{};
   45|       |
   46|  1.56M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.56M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.56M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.56M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.56M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.56M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.56M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.56M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.56M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.56M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.56M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.56M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.56M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.56M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.56M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.56M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   489k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 489k, False: 1.07M]
  ------------------
   78|   489k|            SCN_VISIT(float);
  ------------------
  |  |   37|   489k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   489k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   489k|    }                                                           \
  |  |   40|   489k|    else {                                                      \
  |  |   41|   489k|        return vis(monostate_val);                              \
  |  |   42|   489k|    }
  ------------------
   79|   535k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 535k, False: 1.03M]
  ------------------
   80|   535k|            SCN_VISIT(double);
  ------------------
  |  |   37|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   535k|    }                                                           \
  |  |   40|   535k|    else {                                                      \
  |  |   41|   535k|        return vis(monostate_val);                              \
  |  |   42|   535k|    }
  ------------------
   81|   541k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 541k, False: 1.02M]
  ------------------
   82|   541k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   541k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   541k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   541k|    }                                                           \
  |  |   40|   541k|    else {                                                      \
  |  |   41|   541k|        return vis(monostate_val);                              \
  |  |   42|   541k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.56M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.56M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.56M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.56M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.56M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.56M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.56M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.56M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.56M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.56M|            SCN_CLANG_POP
  114|  1.56M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.56M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  85.0k|{
   36|  85.0k|#define SCN_VISIT(Type)                                         \
   37|  85.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  85.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  85.0k|    }                                                           \
   40|  85.0k|    else {                                                      \
   41|  85.0k|        return vis(monostate_val);                              \
   42|  85.0k|    }
   43|       |
   44|  85.0k|    monostate monostate_val{};
   45|       |
   46|  85.0k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 85.0k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 85.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 85.0k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 85.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 85.0k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 85.0k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 85.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 85.0k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 85.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 85.0k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 85.0k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 85.0k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 85.0k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 85.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 85.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  28.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 28.3k, False: 56.7k]
  ------------------
   78|  28.3k|            SCN_VISIT(float);
  ------------------
  |  |   37|  28.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.3k|    }                                                           \
  |  |   40|  28.3k|    else {                                                      \
  |  |   41|  28.3k|        return vis(monostate_val);                              \
  |  |   42|  28.3k|    }
  ------------------
   79|  28.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 28.3k, False: 56.7k]
  ------------------
   80|  28.3k|            SCN_VISIT(double);
  ------------------
  |  |   37|  28.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.3k|    }                                                           \
  |  |   40|  28.3k|    else {                                                      \
  |  |   41|  28.3k|        return vis(monostate_val);                              \
  |  |   42|  28.3k|    }
  ------------------
   81|  28.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 28.3k, False: 56.7k]
  ------------------
   82|  28.3k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  28.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  28.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  28.3k|    }                                                           \
  |  |   40|  28.3k|    else {                                                      \
  |  |   41|  28.3k|        return vis(monostate_val);                              \
  |  |   42|  28.3k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 85.0k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 85.0k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 85.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 85.0k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 85.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 85.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 85.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 85.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 85.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  85.0k|            SCN_CLANG_POP
  114|  85.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  85.0k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   255k|{
   36|   255k|#define SCN_VISIT(Type)                                         \
   37|   255k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   255k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   255k|    }                                                           \
   40|   255k|    else {                                                      \
   41|   255k|        return vis(monostate_val);                              \
   42|   255k|    }
   43|       |
   44|   255k|    monostate monostate_val{};
   45|       |
   46|   255k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 255k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 255k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 255k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 255k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 255k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 255k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 255k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 255k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 255k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 255k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 255k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 255k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 255k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 255k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 255k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  85.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 85.0k, False: 170k]
  ------------------
   78|  85.0k|            SCN_VISIT(float);
  ------------------
  |  |   37|  85.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.0k|    }                                                           \
  |  |   40|  85.0k|    else {                                                      \
  |  |   41|  85.0k|        return vis(monostate_val);                              \
  |  |   42|  85.0k|    }
  ------------------
   79|  85.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 85.0k, False: 170k]
  ------------------
   80|  85.0k|            SCN_VISIT(double);
  ------------------
  |  |   37|  85.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.0k|    }                                                           \
  |  |   40|  85.0k|    else {                                                      \
  |  |   41|  85.0k|        return vis(monostate_val);                              \
  |  |   42|  85.0k|    }
  ------------------
   81|  85.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 85.0k, False: 170k]
  ------------------
   82|  85.0k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  85.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  85.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  85.0k|    }                                                           \
  |  |   40|  85.0k|    else {                                                      \
  |  |   41|  85.0k|        return vis(monostate_val);                              \
  |  |   42|  85.0k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 255k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 255k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 255k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 255k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 255k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 255k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 255k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 255k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 255k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   255k|            SCN_CLANG_POP
  114|   255k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   255k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.10M|{
  174|  1.10M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.10M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.10M|{
  111|  1.10M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.10M|    auto result = vscan_impl(buffer, format, args);
  114|  1.10M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 1.05M]
  |  |  ------------------
  ------------------
  115|  47.3k|        return unexpected(result.error());
  116|  47.3k|    }
  117|  1.05M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.10M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.10M|{
  192|  1.10M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.10M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.10M|{
  127|  1.10M|#if !SCN_DISABLE_LOCALE
  128|  1.10M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.10M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.10M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.10M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.10M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 1.05M]
  |  |  ------------------
  ------------------
  135|  47.3k|        return unexpected(result.error());
  136|  47.3k|    }
  137|  1.05M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.10M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   246k|{
  205|   246k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   246k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   246k|{
  151|   246k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   246k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   246k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.89k, False: 238k]
  |  |  ------------------
  ------------------
  155|  7.89k|        return unexpected(result.error());
  156|  7.89k|    }
  157|   238k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   246k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  47.3k|{
  174|  47.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  47.3k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  47.3k|{
  111|  47.3k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  47.3k|    auto result = vscan_impl(buffer, format, args);
  114|  47.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 0]
  |  |  ------------------
  ------------------
  115|  47.3k|        return unexpected(result.error());
  116|  47.3k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  47.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  47.3k|{
  192|  47.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  47.3k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  47.3k|{
  127|  47.3k|#if !SCN_DISABLE_LOCALE
  128|  47.3k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  47.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  47.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  47.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  47.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 0]
  |  |  ------------------
  ------------------
  135|  47.3k|        return unexpected(result.error());
  136|  47.3k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  47.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  7.89k|{
  205|  7.89k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  7.89k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  7.89k|{
  151|  7.89k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  7.89k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  7.89k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.89k, False: 0]
  |  |  ------------------
  ------------------
  155|  7.89k|        return unexpected(result.error());
  156|  7.89k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  7.89k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.00M|{
  111|  1.00M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.00M|    auto result = vscan_impl(buffer, format, args);
  114|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 919k]
  |  |  ------------------
  ------------------
  115|  85.1k|        return unexpected(result.error());
  116|  85.1k|    }
  117|   919k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.00M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.00M|{
  127|  1.00M|#if !SCN_DISABLE_LOCALE
  128|  1.00M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.00M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.00M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.00M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.00M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 919k]
  |  |  ------------------
  ------------------
  135|  85.1k|        return unexpected(result.error());
  136|  85.1k|    }
  137|   919k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.00M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   221k|{
  151|   221k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   221k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   221k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.1k, False: 207k]
  |  |  ------------------
  ------------------
  155|  14.1k|        return unexpected(result.error());
  156|  14.1k|    }
  157|   207k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   221k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   155k|{
  111|   155k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   155k|    auto result = vscan_impl(buffer, format, args);
  114|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 70.8k]
  |  |  ------------------
  ------------------
  115|  85.1k|        return unexpected(result.error());
  116|  85.1k|    }
  117|  70.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  70.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   155k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   155k|{
  127|   155k|#if !SCN_DISABLE_LOCALE
  128|   155k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   155k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   155k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   155k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 70.8k]
  |  |  ------------------
  ------------------
  135|  85.1k|        return unexpected(result.error());
  136|  85.1k|    }
  137|  70.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  70.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   155k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  28.3k|{
  151|  28.3k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  28.3k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  28.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.1k, False: 14.1k]
  |  |  ------------------
  ------------------
  155|  14.1k|        return unexpected(result.error());
  156|  14.1k|    }
  157|  14.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  28.3k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   312k|{
   90|   312k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   312k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.00M|{
   45|  1.00M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.00M|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   312k|{
  125|   312k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   312k|                                                         format, {});
  127|   312k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.00M|{
   61|  1.00M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.00M|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  67.4k|{
  159|  67.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  67.4k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   221k|{
   73|   221k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   221k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   343k|{
   90|   343k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   343k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   343k|{
  125|   343k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   343k|                                                         format, {});
  127|   343k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  76.4k|{
  159|  76.4k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  76.4k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   348k|{
   90|   348k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   348k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   348k|{
  125|   348k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   348k|                                                         format, {});
  127|   348k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  77.8k|{
  159|  77.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  77.8k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  51.9k|{
   90|  51.9k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  51.9k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   155k|{
   45|   155k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   155k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  51.9k|{
  125|  51.9k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  51.9k|                                                         format, {});
  127|  51.9k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   155k|{
   61|   155k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   155k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.45k|{
  159|  9.45k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.45k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  28.3k|{
   73|  28.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  28.3k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  51.9k|{
   90|  51.9k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  51.9k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  51.9k|{
  125|  51.9k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  51.9k|                                                         format, {});
  127|  51.9k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.45k|{
  159|  9.45k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.45k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  51.9k|{
   90|  51.9k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  51.9k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  51.9k|{
  125|  51.9k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  51.9k|                                                         format, {});
  127|  51.9k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  9.45k|{
  159|  9.45k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  9.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  9.45k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  9.47M|            {
 2693|  9.47M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.47M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  9.47M|            {
 2672|  9.47M|                return decay_copy(t.begin());
 2673|  9.47M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   100M|    {
 2606|   100M|        return std::forward<T>(t);
 2607|   100M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.87M|            {
 3178|  4.87M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.87M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.87M|            {
 3158|  4.87M|                return t.data();
 3159|  4.87M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.87M|    {
 6095|  4.87M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.6k, False: 4.85M]
  ------------------
 6096|  4.87M|                   ? nullptr
 6097|  4.87M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.87M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.87M|            {
 3127|  4.87M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.87M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.87M|            {
 3098|  4.87M|                return bool((std::forward<T>(t).empty()));
 3099|  4.87M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  13.5M|        {
 6454|  13.5M|            return data_.begin_ == data_.end_;
 6455|  13.5M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  9.73M|    {
 6049|  9.73M|        return static_cast<const D&>(*this);
 6050|  9.73M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  18.1M|            {
 2693|  18.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  18.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  18.1M|            {
 2672|  18.1M|                return decay_copy(t.begin());
 2673|  18.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  57.8M|        {
 6444|  57.8M|            return data_.begin_;
 6445|  57.8M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.87M|            {
 3038|  4.87M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.87M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.87M|            {
 3000|  4.87M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.87M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  23.7M|    {
 2606|  23.7M|        return std::forward<T>(t);
 2607|  23.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  13.6M|        {
 6462|  13.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  13.6M|                return data_.size_;
 6464|  13.6M|            }
 6465|  13.6M|            else {
 6466|  13.6M|                return data_.end_ - data_.begin_;
 6467|  13.6M|            }
 6468|  13.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.49M|            {
 3788|  8.49M|                ranges::advance(x, n);
 3789|  8.49M|                return x;
 3790|  8.49M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.49M|            {
 3678|  8.49M|                fn::impl(i, n);
 3679|  8.49M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.49M|            {
 3562|  8.49M|                r += n;
 3563|  8.49M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  37.9M|            {
 2693|  37.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  37.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  37.9M|            {
 2672|  37.9M|                return decay_copy(t.begin());
 2673|  37.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  10.8M|            {
 2759|  10.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.8M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.8M|            {
 2739|  10.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  27.4M|        {
 6449|  27.4M|            return data_.end_;
 6450|  27.4M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.6M|            {
 2759|  10.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.6M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.6M|            {
 2739|  10.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.6M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  21.5M|        {
 6375|  21.5M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  21.5M|        {
 6294|  21.5M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   102k|            {
 2693|   102k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   102k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   102k|            {
 2672|   102k|                return decay_copy(t.begin());
 2673|   102k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|   718k|    {
 2606|   718k|        return std::forward<T>(t);
 2607|   718k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   102k|            {
 2693|   102k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   102k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   102k|            {
 2672|   102k|                return decay_copy(t.begin());
 2673|   102k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   102k|        {
 6444|   102k|            return data_.begin_;
 6445|   102k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   410k|            {
 2759|   410k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   410k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   410k|            {
 2739|   410k|                return decay_copy(std::forward<T>(t).end());
 2740|   410k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   410k|        {
 6449|   410k|            return data_.end_;
 6450|   410k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   102k|            {
 2759|   102k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   102k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   102k|            {
 2739|   102k|                return decay_copy(std::forward<T>(t).end());
 2740|   102k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   102k|        {
 6375|   102k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   102k|        {
 6294|   102k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.58M|            {
 2693|  1.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.58M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.58M|            {
 2672|  1.58M|                return decay_copy(t.begin());
 2673|  1.58M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   169M|    {
 2606|   169M|        return std::forward<T>(t);
 2607|   169M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.23M|            {
 3178|  2.23M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.23M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.23M|            {
 3158|  2.23M|                return t.data();
 3159|  2.23M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.23M|    {
 6095|  2.23M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.9k, False: 2.21M]
  ------------------
 6096|  2.23M|                   ? nullptr
 6097|  2.23M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.23M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.23M|            {
 3127|  2.23M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.23M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.23M|            {
 3098|  2.23M|                return bool((std::forward<T>(t).empty()));
 3099|  2.23M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  4.22M|        {
 6454|  4.22M|            return data_.begin_ == data_.end_;
 6455|  4.22M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  4.44M|    {
 6049|  4.44M|        return static_cast<const D&>(*this);
 6050|  4.44M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  16.3M|            {
 2693|  16.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  16.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  16.3M|            {
 2672|  16.3M|                return decay_copy(t.begin());
 2673|  16.3M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  58.6M|        {
 6444|  58.6M|            return data_.begin_;
 6445|  58.6M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.23M|            {
 3038|  2.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.23M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.23M|            {
 3000|  2.23M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.23M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  10.1M|        {
 6462|  10.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  10.1M|                return data_.size_;
 6464|  10.1M|            }
 6465|  10.1M|            else {
 6466|  10.1M|                return data_.end_ - data_.begin_;
 6467|  10.1M|            }
 6468|  10.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  9.89M|            {
 3788|  9.89M|                ranges::advance(x, n);
 3789|  9.89M|                return x;
 3790|  9.89M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  9.89M|            {
 3678|  9.89M|                fn::impl(i, n);
 3679|  9.89M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  9.89M|            {
 3562|  9.89M|                r += n;
 3563|  9.89M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  40.7M|            {
 2693|  40.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  40.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  40.7M|            {
 2672|  40.7M|                return decay_copy(t.begin());
 2673|  40.7M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  57.9M|            {
 2759|  57.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  57.9M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  57.9M|            {
 2739|  57.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  57.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   109M|        {
 6449|   109M|            return data_.end_;
 6450|   109M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.49M|            {
 2759|  4.49M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.49M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.49M|            {
 2739|  4.49M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.49M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  20.4M|        {
 6375|  20.4M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  20.4M|        {
 6294|  20.4M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   184k|            {
 2693|   184k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   184k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   184k|            {
 2672|   184k|                return decay_copy(t.begin());
 2673|   184k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.14M|    {
 2606|  4.14M|        return std::forward<T>(t);
 2607|  4.14M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   496k|            {
 2693|   496k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   496k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   496k|            {
 2672|   496k|                return decay_copy(t.begin());
 2673|   496k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   652k|        {
 6444|   652k|            return data_.begin_;
 6445|   652k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.96M|            {
 2759|  2.96M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.96M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.96M|            {
 2739|  2.96M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.96M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  2.96M|        {
 6449|  2.96M|            return data_.end_;
 6450|  2.96M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   155k|            {
 3788|   155k|                ranges::advance(x, n);
 3789|   155k|                return x;
 3790|   155k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   155k|            {
 3678|   155k|                fn::impl(i, n);
 3679|   155k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   155k|            {
 3562|   155k|                r += n;
 3563|   155k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   340k|            {
 2759|   340k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   340k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   340k|            {
 2739|   340k|                return decay_copy(std::forward<T>(t).end());
 2740|   340k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   496k|        {
 6375|   496k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   496k|        {
 6294|   496k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   155k|            {
 2693|   155k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   155k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   155k|            {
 2672|   155k|                return decay_copy(t.begin());
 2673|   155k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  2.93M|        {
 6444|  2.93M|            return data_.begin_;
 6445|  2.93M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  15.1M|        {
 6444|  15.1M|            return data_.begin_;
 6445|  15.1M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  17.3M|    {
 6044|  17.3M|        return static_cast<D&>(*this);
 6045|  17.3M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  8.68M|            {
 3098|  8.68M|                return bool((std::forward<T>(t).empty()));
 3099|  8.68M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  8.68M|            {
 3127|  8.68M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  8.68M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  8.68M|    {
 6085|  8.68M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 6.19k, False: 8.68M]
  ------------------
 6086|  8.68M|                   ? nullptr
 6087|  8.68M|                   : std::addressof(*ranges::begin(derived()));
 6088|  8.68M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  13.3M|            {
 2739|  13.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  13.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  13.3M|            {
 2759|  13.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  13.3M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.98M|    {
 6044|  3.98M|        return static_cast<D&>(*this);
 6045|  3.98M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.99M|            {
 3098|  1.99M|                return bool((std::forward<T>(t).empty()));
 3099|  1.99M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.99M|            {
 3127|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.99M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.99M|    {
 6085|  1.99M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 6.09k, False: 1.98M]
  ------------------
 6086|  1.99M|                   ? nullptr
 6087|  1.99M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.99M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  48.3M|            {
 2739|  48.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  48.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  48.3M|            {
 2759|  48.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  48.3M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.60M|            {
 3780|  3.60M|                ++x;
 3781|  3.60M|                return x;
 3782|  3.60M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.74M|            {
 3038|  8.74M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.74M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.74M|            {
 3000|  8.74M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.74M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  8.68M|            {
 3178|  8.68M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  8.68M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  8.68M|            {
 3158|  8.68M|                return t.data();
 3159|  8.68M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  12.7M|    {
 2606|  12.7M|        return std::forward<T>(t);
 2607|  12.7M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  7.02M|            {
 3077|  7.02M|                return fn::impl(std::forward<T>(t));
 3078|  7.02M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  7.02M|            {
 3067|  7.02M|                return static_cast<ssize_return_t<T>>(
 3068|  7.02M|                    ranges::size(std::forward<T>(t)));
 3069|  7.02M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  8.15M|            {
 3038|  8.15M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.15M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  8.15M|            {
 3000|  8.15M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.15M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.64M|            {
 3597|  1.64M|                i = std::move(bound);
 3598|  1.64M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  4.54M|            {
 3077|  4.54M|                return fn::impl(std::forward<T>(t));
 3078|  4.54M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  4.54M|            {
 3067|  4.54M|                return static_cast<ssize_return_t<T>>(
 3068|  4.54M|                    ranges::size(std::forward<T>(t)));
 3069|  4.54M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.54M|            {
 3038|  4.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.54M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  4.54M|            {
 3000|  4.54M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.54M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.30M|        {
 6793|  1.30M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.30M|                                    proj);
 6795|  1.30M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.30M|        {
 6761|  7.43M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.42M, False: 10.3k]
  ------------------
 6762|  7.42M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.29M, False: 6.13M]
  ------------------
 6763|  1.29M|                    return first;
 6764|  1.29M|                }
 6765|  6.13M|                ++first;
 6766|  6.13M|            }
 6767|  10.3k|            return first;
 6768|  1.30M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.42M|            {
 1300|  7.42M|                return fn::impl(std::forward<F>(f),
 1301|  7.42M|                                std::forward<Args>(args)...);
 1302|  7.42M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  7.42M|            {
 1289|  7.42M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.42M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  53.7M|            {
 1300|  53.7M|                return fn::impl(std::forward<F>(f),
 1301|  53.7M|                                std::forward<Args>(args)...);
 1302|  53.7M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  53.7M|            {
 1289|  53.7M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  53.7M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  53.7M|    {
 1142|  53.7M|        return std::forward<T>(t);
 1143|  53.7M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.64M|            {
 3798|  1.64M|                ranges::advance(x, bound);
 3799|  1.64M|                return x;
 3800|  1.64M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.64M|            {
 3686|  1.64M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.64M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.04M|            {
 3756|  7.04M|                return fn::impl(std::move(first), std::move(last));
 3757|  7.04M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.04M|            {
 3716|  7.04M|                return s - i;
 3717|  7.04M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|   607k|        {
 6375|   607k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|   607k|        {
 6294|   607k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.39M|            {
 2693|  1.39M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.39M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  1.39M|            {
 2672|  1.39M|                return decay_copy(t.begin());
 2673|  1.39M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  2.85M|    {
 2606|  2.85M|        return std::forward<T>(t);
 2607|  2.85M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   631k|            {
 2759|   631k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   631k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   631k|            {
 2739|   631k|                return decay_copy(std::forward<T>(t).end());
 2740|   631k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  9.30M|    {
 2606|  9.30M|        return std::forward<T>(t);
 2607|  9.30M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.14M|        {
 6449|  1.14M|            return data_.end_;
 6450|  1.14M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   102k|            {
 3780|   102k|                ++x;
 3781|   102k|                return x;
 3782|   102k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   102k|        {
 6793|   102k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   102k|                                    proj);
 6795|   102k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   102k|        {
 6761|   102k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 102k, False: 0]
  ------------------
 6762|   102k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 102k, False: 0]
  ------------------
 6763|   102k|                    return first;
 6764|   102k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|   102k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   102k|            {
 1300|   102k|                return fn::impl(std::forward<F>(f),
 1301|   102k|                                std::forward<Args>(args)...);
 1302|   102k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   102k|            {
 1289|   102k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   102k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   102k|            {
 1300|   102k|                return fn::impl(std::forward<F>(f),
 1301|   102k|                                std::forward<Args>(args)...);
 1302|   102k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   102k|            {
 1289|   102k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   102k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   102k|    {
 1142|   102k|        return std::forward<T>(t);
 1143|   102k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   512k|            {
 2759|   512k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   512k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   512k|            {
 2739|   512k|                return decay_copy(std::forward<T>(t).end());
 2740|   512k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  1.45M|            {
 2693|  1.45M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.45M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.45M|            {
 2672|  1.45M|                return decay_copy(t.begin());
 2673|  1.45M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.99M|            {
 3178|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.99M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.99M|            {
 3158|  1.99M|                return t.data();
 3159|  1.99M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.88M|            {
 3038|  7.88M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.88M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.88M|            {
 3000|  7.88M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.88M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.47M|            {
 3597|  1.47M|                i = std::move(bound);
 3598|  1.47M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.24M|            {
 3780|  3.24M|                ++x;
 3781|  3.24M|                return x;
 3782|  3.24M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  5.88M|            {
 3077|  5.88M|                return fn::impl(std::forward<T>(t));
 3078|  5.88M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  5.88M|            {
 3067|  5.88M|                return static_cast<ssize_return_t<T>>(
 3068|  5.88M|                    ranges::size(std::forward<T>(t)));
 3069|  5.88M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.17M|        {
 6793|  1.17M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.17M|                                    proj);
 6795|  1.17M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.17M|        {
 6761|  5.77M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.76M, False: 10.7k]
  ------------------
 6762|  5.76M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.16M, False: 4.60M]
  ------------------
 6763|  1.16M|                    return first;
 6764|  1.16M|                }
 6765|  4.60M|                ++first;
 6766|  4.60M|            }
 6767|  10.7k|            return first;
 6768|  1.17M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  5.76M|            {
 1300|  5.76M|                return fn::impl(std::forward<F>(f),
 1301|  5.76M|                                std::forward<Args>(args)...);
 1302|  5.76M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  5.76M|            {
 1289|  5.76M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.76M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  5.76M|            {
 1300|  5.76M|                return fn::impl(std::forward<F>(f),
 1301|  5.76M|                                std::forward<Args>(args)...);
 1302|  5.76M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  5.76M|            {
 1289|  5.76M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.76M|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  5.76M|    {
 1142|  5.76M|        return std::forward<T>(t);
 1143|  5.76M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.47M|            {
 3798|  1.47M|                ranges::advance(x, bound);
 3799|  1.47M|                return x;
 3800|  1.47M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.47M|            {
 3686|  1.47M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.47M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  2.78M|            {
 3756|  2.78M|                return fn::impl(std::move(first), std::move(last));
 3757|  2.78M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  2.78M|            {
 3716|  2.78M|                return s - i;
 3717|  2.78M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.64M|        {
 6375|  3.64M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.64M|        {
 6294|  3.64M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  5.35M|            {
 2693|  5.35M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.35M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  5.35M|            {
 2672|  5.35M|                return decay_copy(t.begin());
 2673|  5.35M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  14.9M|    {
 2606|  14.9M|        return std::forward<T>(t);
 2607|  14.9M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.91M|            {
 2759|  3.91M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.91M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.91M|            {
 2739|  3.91M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.91M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  8.16M|        {
 6449|  8.16M|            return data_.end_;
 6450|  8.16M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  3.47M|        {
 6444|  3.47M|            return data_.begin_;
 6445|  3.47M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  3.47M|        {
 6449|  3.47M|            return data_.end_;
 6450|  3.47M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  1.26M|        {
 6375|  1.26M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  1.26M|        {
 6294|  1.26M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   679k|            {
 3780|   679k|                ++x;
 3781|   679k|                return x;
 3782|   679k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   524k|        {
 6793|   524k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   524k|                                    proj);
 6795|   524k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   524k|        {
 6761|  1.26M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.26M, False: 345]
  ------------------
 6762|  1.26M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 523k, False: 736k]
  ------------------
 6763|   523k|                    return first;
 6764|   523k|                }
 6765|   736k|                ++first;
 6766|   736k|            }
 6767|    345|            return first;
 6768|   524k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.26M|            {
 1300|  1.26M|                return fn::impl(std::forward<F>(f),
 1301|  1.26M|                                std::forward<Args>(args)...);
 1302|  1.26M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.26M|            {
 1289|  1.26M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.26M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.26M|            {
 1300|  1.26M|                return fn::impl(std::forward<F>(f),
 1301|  1.26M|                                std::forward<Args>(args)...);
 1302|  1.26M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.26M|            {
 1289|  1.26M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.26M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.26M|    {
 1142|  1.26M|        return std::forward<T>(t);
 1143|  1.26M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.25M|            {
 2759|  4.25M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.25M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.25M|            {
 2739|  4.25M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.25M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  9.55M|            {
 2693|  9.55M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.55M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  9.55M|            {
 2672|  9.55M|                return decay_copy(t.begin());
 2673|  9.55M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|   184k|            {
 3756|   184k|                return fn::impl(std::move(first), std::move(last));
 3757|   184k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|   184k|            {
 3724|   184k|                iter_difference_t<I> counter{0};
 3725|   920k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 736k, False: 184k]
  ------------------
 3726|   736k|                    ++i;
 3727|   736k|                    ++counter;
 3728|   736k|                }
 3729|   184k|                return counter;
 3730|   184k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3787|   155k|            {
 3788|   155k|                ranges::advance(x, n);
 3789|   155k|                return x;
 3790|   155k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3677|   155k|            {
 3678|   155k|                fn::impl(i, n);
 3679|   155k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3587|   155k|            {
 3588|   779k|                while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (3588:24): [True: 623k, False: 155k]
  ------------------
 3589|   623k|                    ++i;
 3590|   623k|                }
 3591|   155k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  1.13M|            {
 3178|  1.13M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.13M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.13M|            {
 3158|  1.13M|                return t.data();
 3159|  1.13M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.88M|        {
 6793|  5.88M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.88M|                                    proj);
 6795|  5.88M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.88M|        {
 6761|  47.2M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 42.1M, False: 5.07M]
  ------------------
 6762|  42.1M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 811k, False: 41.3M]
  ------------------
 6763|   811k|                    return first;
 6764|   811k|                }
 6765|  41.3M|                ++first;
 6766|  41.3M|            }
 6767|  5.07M|            return first;
 6768|  5.88M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  42.1M|            {
 1300|  42.1M|                return fn::impl(std::forward<F>(f),
 1301|  42.1M|                                std::forward<Args>(args)...);
 1302|  42.1M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  42.1M|            {
 1289|  42.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  42.1M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.35M|        {
 6793|  2.35M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.35M|                                    proj);
 6795|  2.35M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.35M|        {
 6761|  4.27M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.24M, False: 26.1k]
  ------------------
 6762|  4.24M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.32M, False: 1.91M]
  ------------------
 6763|  2.32M|                    return first;
 6764|  2.32M|                }
 6765|  1.91M|                ++first;
 6766|  1.91M|            }
 6767|  26.1k|            return first;
 6768|  2.35M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  4.24M|            {
 1300|  4.24M|                return fn::impl(std::forward<F>(f),
 1301|  4.24M|                                std::forward<Args>(args)...);
 1302|  4.24M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  4.24M|            {
 1289|  4.24M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.24M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.29M|    {
   44|  2.29M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  3.06k|{
   50|  3.06k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  3.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  3.06k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  53.1k|{
   50|  53.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  53.1k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|  1.98k|{
   50|  1.98k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  1.98k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   205k|    {
   44|   205k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  39.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.12M|    {
   44|  2.12M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   495k|    {
   44|   495k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  56.6k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   141k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|   101k|{
   50|   101k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   101k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  14.9M|    {
 1191|  14.9M|        return has_value();
 1192|  14.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  29.5M|    {
  189|  29.5M|        return m_has_value;
  190|  29.5M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   808k|    {
 1197|   808k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   808k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   808k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   808k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   808k|    {
  172|   808k|        return m_unexpected;
  173|   808k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  5.81M|    {
   72|  5.81M|        return m_unexpected;
   73|  5.81M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  2.83M|    {
   58|  2.83M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  2.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  2.83M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   102k|    {
 1078|   102k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   102k|    {
  151|   102k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  8.17M|    {
   67|  8.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  8.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  8.17M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.44M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  4.70M|    {
 1251|  4.70M|        return value();
 1252|  4.70M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  13.8M|    {
 1221|  13.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.8M|    {
  155|  13.8M|        return m_value;
  156|  13.8M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.34M|    {
 1034|  2.34M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.34M|    {
  142|  2.34M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.44M|    {
 1191|  2.44M|        return has_value();
 1192|  2.44M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.89M|    {
  189|  4.89M|        return m_has_value;
  190|  4.89M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   102k|    {
 1197|   102k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   102k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   102k|    {
  172|   102k|        return m_unexpected;
  173|   102k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   756k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.10M|    {
 1251|  2.10M|        return value();
 1252|  2.10M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.34M|    {
 1221|  2.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.34M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.34M|    {
  155|  2.34M|        return m_value;
  156|  2.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   722k|    {
 1034|   722k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   722k|    {
  142|   722k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   756k|    {
 1191|   756k|        return has_value();
 1192|   756k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.47M|    {
  189|  1.47M|        return m_has_value;
  190|  1.47M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   722k|    {
 1274|   722k|        return std::addressof(value());
 1275|   722k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   722k|    {
 1221|   722k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   722k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   722k|    {
  155|   722k|        return m_value;
  156|   722k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   238k|    {
 1263|   238k|        return std::move(value());
 1264|   238k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   841k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   806k|    {
 1034|   806k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   806k|    {
  142|   806k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   841k|    {
 1191|   841k|        return has_value();
 1192|   841k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.64M|    {
  189|  1.64M|        return m_has_value;
  190|  1.64M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   806k|    {
 1274|   806k|        return std::addressof(value());
 1275|   806k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   806k|    {
 1221|   806k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   806k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   806k|    {
  155|   806k|        return m_value;
  156|   806k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   852k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   818k|    {
 1034|   818k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   818k|    {
  142|   818k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   852k|    {
 1191|   852k|        return has_value();
 1192|   852k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.67M|    {
  189|  1.67M|        return m_has_value;
  190|  1.67M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   818k|    {
 1274|   818k|        return std::addressof(value());
 1275|   818k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   818k|    {
 1221|   818k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   818k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   818k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   818k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   818k|    {
  155|   818k|        return m_value;
  156|   818k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   102k|    {
 1078|   102k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   102k|    {
  151|   102k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   102k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   102k|    {
 1191|   102k|        return has_value();
 1192|   102k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   205k|    {
  189|   205k|        return m_has_value;
  190|   205k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   102k|    {
 1197|   102k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   102k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   102k|    {
  172|   102k|        return m_unexpected;
  173|   102k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  34.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  34.1k|    {
 1191|  34.1k|        return has_value();
 1192|  34.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  34.1k|    {
  189|  34.1k|        return m_has_value;
  190|  34.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  34.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  34.1k|    {
 1191|  34.1k|        return has_value();
 1192|  34.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  34.1k|    {
  189|  34.1k|        return m_has_value;
  190|  34.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  34.1k|    {
 1078|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  34.1k|    {
  151|  34.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  34.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  34.1k|    {
 1191|  34.1k|        return has_value();
 1192|  34.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  34.1k|    {
  189|  34.1k|        return m_has_value;
  190|  34.1k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   184k|    {
 1078|   184k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   184k|    {
  151|   184k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.04M|    {
 1034|  2.04M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.04M|    {
  142|  2.04M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.23M|    {
 1191|  2.23M|        return has_value();
 1192|  2.23M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.46M|    {
  189|  4.46M|        return m_has_value;
  190|  4.46M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   184k|    {
 1197|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   184k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   184k|    {
  172|   184k|        return m_unexpected;
  173|   184k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   692k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.83M|    {
 1251|  1.83M|        return value();
 1252|  1.83M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.04M|    {
 1221|  2.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.04M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.04M|    {
  155|  2.04M|        return m_value;
  156|  2.04M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   630k|    {
 1034|   630k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   630k|    {
  142|   630k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   692k|    {
 1191|   692k|        return has_value();
 1192|   692k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.32M|    {
  189|  1.32M|        return m_has_value;
  190|  1.32M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   630k|    {
 1274|   630k|        return std::addressof(value());
 1275|   630k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   630k|    {
 1221|   630k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   630k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   630k|    {
  155|   630k|        return m_value;
  156|   630k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   207k|    {
 1263|   207k|        return std::move(value());
 1264|   207k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   764k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   702k|    {
 1034|   702k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   702k|    {
  142|   702k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   764k|    {
 1191|   764k|        return has_value();
 1192|   764k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.46M|    {
  189|  1.46M|        return m_has_value;
  190|  1.46M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   702k|    {
 1274|   702k|        return std::addressof(value());
 1275|   702k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   702k|    {
 1221|   702k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   702k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   702k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   702k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   702k|    {
  155|   702k|        return m_value;
  156|   702k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   774k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   713k|    {
 1034|   713k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   713k|    {
  142|   713k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   774k|    {
 1191|   774k|        return has_value();
 1192|   774k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.48M|    {
  189|  1.48M|        return m_has_value;
  190|  1.48M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   713k|    {
 1274|   713k|        return std::addressof(value());
 1275|   713k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   713k|    {
 1221|   713k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   713k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   713k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   713k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   713k|    {
  155|   713k|        return m_value;
  156|   713k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   184k|    {
 1078|   184k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   184k|    {
  151|   184k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   340k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   155k|    {
 1034|   155k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   155k|    {
  142|   155k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   340k|    {
 1191|   340k|        return has_value();
 1192|   340k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   680k|    {
  189|   680k|        return m_has_value;
  190|   680k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   184k|    {
 1197|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   184k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   184k|    {
  172|   184k|        return m_unexpected;
  173|   184k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   113k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   141k|    {
 1251|   141k|        return value();
 1252|   141k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   155k|    {
 1221|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   155k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   155k|    {
  155|   155k|        return m_value;
  156|   155k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  51.9k|    {
 1034|  51.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  51.9k|    {
  142|  51.9k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   113k|    {
 1191|   113k|        return has_value();
 1192|   113k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   165k|    {
  189|   165k|        return m_has_value;
  190|   165k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  51.9k|    {
 1274|  51.9k|        return std::addressof(value());
 1275|  51.9k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  51.9k|    {
 1221|  51.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  51.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  51.9k|    {
  155|  51.9k|        return m_value;
  156|  51.9k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  14.1k|    {
 1263|  14.1k|        return std::move(value());
 1264|  14.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   113k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  51.9k|    {
 1034|  51.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  51.9k|    {
  142|  51.9k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   113k|    {
 1191|   113k|        return has_value();
 1192|   113k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   165k|    {
  189|   165k|        return m_has_value;
  190|   165k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  51.9k|    {
 1274|  51.9k|        return std::addressof(value());
 1275|  51.9k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  51.9k|    {
 1221|  51.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  51.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  51.9k|    {
  155|  51.9k|        return m_value;
  156|  51.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  61.4k|    {
 1078|  61.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  61.4k|    {
  151|  61.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   113k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  51.9k|    {
 1034|  51.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  51.9k|    {
  142|  51.9k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   113k|    {
 1191|   113k|        return has_value();
 1192|   113k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   165k|    {
  189|   165k|        return m_has_value;
  190|   165k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  51.9k|    {
 1274|  51.9k|        return std::addressof(value());
 1275|  51.9k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  51.9k|    {
 1221|  51.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  51.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  51.9k|    {
  155|  51.9k|        return m_value;
  156|  51.9k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.44M|    {
 1405|  2.44M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.44M|                                            std::forward<F>(f));
 1407|  2.44M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.44M|{
  927|  2.44M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.44M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.44M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.44M|            return result(*std::forward<Exp>(exp));
  931|  2.44M|        }
  932|       |
  933|  2.44M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.44M|        return result(unexpect, monostate{});
  935|  2.44M|    }
  936|  2.44M|    else {
  937|  2.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.42M, False: 25.1k]
  |  |  ------------------
  ------------------
  939|  2.44M|                   ? result(*std::forward<Exp>(exp))
  940|  2.44M|                   : result(unexpect,
  941|  25.1k|                            std::invoke(std::forward<F>(f),
  942|  25.1k|                                        std::forward<Exp>(exp).error()));
  943|  2.44M|    }
  944|  2.44M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  9.40M|    {
  189|  9.40M|        return m_has_value;
  190|  9.40M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.42M|    {
 1263|  2.42M|        return std::move(value());
 1264|  2.42M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.31M|    {
 1221|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.31M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.31M|    {
  155|  3.31M|        return m_value;
  156|  3.31M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  9.49M|    {
 1034|  9.49M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.49M|    {
  142|  9.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  25.1k|    {
 1207|  25.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  25.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  25.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  31.9k|    {
  172|  31.9k|        return m_unexpected;
  173|  31.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   312k|    {
   72|   312k|        return m_unexpected;
   73|   312k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.32M|    {
 1088|  2.32M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.48M|    {
  151|  2.48M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  14.5M|    {
 1191|  14.5M|        return has_value();
 1192|  14.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  21.9M|    {
  189|  21.9M|        return m_has_value;
  190|  21.9M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   209k|    {
 1197|   209k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   209k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   209k|    {
  172|   209k|        return m_unexpected;
  173|   209k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   160k|    {
 1078|   160k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.52M|    {
 1263|  5.52M|        return std::move(value());
 1264|  5.52M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.26M|    {
 1221|  7.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.26M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  7.26M|    {
  155|  7.26M|        return m_value;
  156|  7.26M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   159k|    {
   58|   159k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   159k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   159k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   808k|    {
 1078|   808k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   808k|    {
  151|   808k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  66.6k|    {
   58|  66.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  66.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  66.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  31.9k|    {
 1078|  31.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  31.9k|    {
  151|  31.9k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   156k|    {
   67|   156k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   156k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  6.02M|    {
 1034|  6.02M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.02M|    {
  142|  6.02M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  3.60M|    {
 1191|  3.60M|        return has_value();
 1192|  3.60M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  6.79k|    {
 1197|  6.79k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.79k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  65.3k|    {
   58|  65.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  65.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  65.3k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.44M|    {
 1078|  2.44M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  19.0M|    {
   72|  19.0M|        return m_unexpected;
   73|  19.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.44M|    {
  151|  2.44M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  5.23M|    {
   67|  5.23M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.23M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  5.23M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   892k|    {
 1251|   892k|        return value();
 1252|   892k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   913k|    {
 1034|   913k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   913k|    {
  142|   913k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  20.2M|    {
   58|  20.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  20.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  20.2M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.46M|    {
 1078|  9.46M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  20.2M|    {
   72|  20.2M|        return m_unexpected;
   73|  20.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.46M|    {
  151|  9.46M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  20.2M|    {
   67|  20.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  20.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  20.2M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  16.2M|    {
 1191|  16.2M|        return has_value();
 1192|  16.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  27.6M|    {
  189|  27.6M|        return m_has_value;
  190|  27.6M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.45M|    {
 1197|  6.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.45M|    {
  172|  6.45M|        return m_unexpected;
  173|  6.45M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.49M|    {
 1034|  2.49M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.49M|    {
  142|  2.49M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  89.6k|    {
   58|  89.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  89.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  89.6k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    164|    {
 1078|    164|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    164|    {
  151|    164|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.59M|    {
 1251|  2.59M|        return value();
 1252|  2.59M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.59M|    {
 1221|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.59M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.59M|    {
  155|  2.59M|        return m_value;
  156|  2.59M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  69.5k|    {
 1191|  69.5k|        return has_value();
 1192|  69.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.98M|    {
  189|  4.98M|        return m_has_value;
  190|  4.98M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.42M|    {
 1263|  2.42M|        return std::move(value());
 1264|  2.42M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.49M|    {
 1221|  2.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.49M|    {
  155|  2.49M|        return m_value;
  156|  2.49M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  1.00M|    {
 1034|  1.00M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.00M|    {
  142|  1.00M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.73M|    {
 1251|  1.73M|        return value();
 1252|  1.73M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   155k|    {
 1034|   155k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   155k|    {
  142|   155k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  5.08M|    {
   58|  5.08M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.08M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  9.09M|    {
 1263|  9.09M|        return std::move(value());
 1264|  9.09M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.42M|    {
 1405|  2.42M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.42M|                                            std::forward<F>(f));
 1407|  2.42M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.42M|{
  927|  2.42M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.42M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.42M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.42M|            return result(*std::forward<Exp>(exp));
  931|  2.42M|        }
  932|       |
  933|  2.42M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.42M|        return result(unexpect, monostate{});
  935|  2.42M|    }
  936|  2.42M|    else {
  937|  2.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.42M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.42M|                   ? result(*std::forward<Exp>(exp))
  940|  2.42M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.42M|    }
  944|  2.42M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.42M|    {
 1034|  2.42M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.42M|    {
  142|  2.42M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.42M|    {
 1191|  2.42M|        return has_value();
 1192|  2.42M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.84M|    {
  189|  4.84M|        return m_has_value;
  190|  4.84M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.42M|    {
 1263|  2.42M|        return std::move(value());
 1264|  2.42M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.42M|    {
 1221|  2.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.42M|    {
  155|  2.42M|        return m_value;
  156|  2.42M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  2.29M|    {
 1395|  2.29M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.29M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.29M|{
  927|  2.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.29M|            return result(*std::forward<Exp>(exp));
  931|  2.29M|        }
  932|       |
  933|  2.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.29M|        return result(unexpect, monostate{});
  935|  2.29M|    }
  936|  2.29M|    else {
  937|  2.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.29M]
  |  |  ------------------
  ------------------
  939|  2.29M|                   ? result(*std::forward<Exp>(exp))
  940|  2.29M|                   : result(unexpect,
  941|  2.29M|                            std::invoke(std::forward<F>(f),
  942|  2.29M|                                        std::forward<Exp>(exp).error()));
  943|  2.29M|    }
  944|  2.29M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  69.3k|    {
 1274|  69.3k|        return std::addressof(value());
 1275|  69.3k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  13.3M|    {
 1034|  13.3M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  13.3M|    {
  142|  13.3M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    177|    {
 1078|    177|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    177|    {
  151|    177|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   465k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   465k|    {
 1034|   465k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   465k|    {
  142|   465k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   102k|    {
 1405|   102k|        return detail::transform_error_impl(std::move(*this),
 1406|   102k|                                            std::forward<F>(f));
 1407|   102k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   102k|{
  927|   102k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   102k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   102k|        if (SCN_LIKELY(exp.has_value())) {
  930|   102k|            return result(*std::forward<Exp>(exp));
  931|   102k|        }
  932|       |
  933|   102k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   102k|        return result(unexpect, monostate{});
  935|   102k|    }
  936|   102k|    else {
  937|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 102k, False: 0]
  |  |  ------------------
  ------------------
  939|   102k|                   ? result(*std::forward<Exp>(exp))
  940|   102k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   102k|    }
  944|   102k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   828k|    {
  189|   828k|        return m_has_value;
  190|   828k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   362k|    {
 1263|   362k|        return std::move(value());
 1264|   362k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   362k|    {
 1221|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   362k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   362k|    {
  155|   362k|        return m_value;
  156|   362k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   102k|    {
 1034|   102k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   102k|    {
  142|   102k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   512k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    177|    {
 1207|    177|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    177|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    177|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    177|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    177|    {
  172|    177|        return m_unexpected;
  173|    177|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   205k|    {
 1088|   205k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   410k|    {
  151|   410k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   102k|    {
 1191|   102k|        return has_value();
 1192|   102k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   102k|    {
 1078|   102k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   102k|    {
  151|   102k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   828k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   465k|    {
 1078|   465k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   465k|    {
  151|   465k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|   931k|    {
 1191|   931k|        return has_value();
 1192|   931k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.80M|    {
  189|  1.80M|        return m_has_value;
  190|  1.80M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   410k|    {
 1197|   410k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   410k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   410k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   410k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   410k|    {
  172|   410k|        return m_unexpected;
  173|   410k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   102k|    {
 1034|   102k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   102k|    {
  142|   102k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   102k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   260k|    {
 1221|   260k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   260k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   260k|    {
  155|   260k|        return m_value;
  156|   260k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   205k|    {
  189|   205k|        return m_has_value;
  190|   205k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   102k|    {
 1263|   102k|        return std::move(value());
 1264|   102k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   102k|    {
 1221|   102k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   102k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   102k|    {
  155|   102k|        return m_value;
  156|   102k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   260k|    {
 1405|   260k|        return detail::transform_error_impl(std::move(*this),
 1406|   260k|                                            std::forward<F>(f));
 1407|   260k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   260k|{
  927|   260k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   260k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   260k|        if (SCN_LIKELY(exp.has_value())) {
  930|   260k|            return result(*std::forward<Exp>(exp));
  931|   260k|        }
  932|       |
  933|   260k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   260k|        return result(unexpect, monostate{});
  935|   260k|    }
  936|   260k|    else {
  937|   260k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   260k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   260k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 260k, False: 177]
  |  |  ------------------
  ------------------
  939|   260k|                   ? result(*std::forward<Exp>(exp))
  940|   260k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   260k|    }
  944|   260k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   260k|    {
 1034|   260k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   260k|    {
  142|   260k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   260k|    {
 1263|   260k|        return std::move(value());
 1264|   260k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   205k|    {
 1078|   205k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   102k|    {
 1221|   102k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   102k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.02M|    {
  189|  1.02M|        return m_has_value;
  190|  1.02M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   102k|    {
  155|   102k|        return m_value;
  156|   102k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   102k|    {
 1405|   102k|        return detail::transform_error_impl(std::move(*this),
 1406|   102k|                                            std::forward<F>(f));
 1407|   102k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   102k|{
  927|   102k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   102k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   102k|        if (SCN_LIKELY(exp.has_value())) {
  930|   102k|            return result(*std::forward<Exp>(exp));
  931|   102k|        }
  932|       |
  933|   102k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   102k|        return result(unexpect, monostate{});
  935|   102k|    }
  936|   102k|    else {
  937|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 102k, False: 0]
  |  |  ------------------
  ------------------
  939|   102k|                   ? result(*std::forward<Exp>(exp))
  940|   102k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   102k|    }
  944|   102k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   102k|    {
 1034|   102k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   102k|    {
  142|   102k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   102k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   102k|    {
 1191|   102k|        return has_value();
 1192|   102k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   205k|    {
  189|   205k|        return m_has_value;
  190|   205k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   102k|    {
 1263|   102k|        return std::move(value());
 1264|   102k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   102k|    {
 1221|   102k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   102k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   102k|    {
  155|   102k|        return m_value;
  156|   102k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   205k|    {
 1395|   205k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   205k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   205k|{
  927|   205k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   205k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   205k|        if (SCN_LIKELY(exp.has_value())) {
  930|   205k|            return result(*std::forward<Exp>(exp));
  931|   205k|        }
  932|       |
  933|   205k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   205k|        return result(unexpect, monostate{});
  935|   205k|    }
  936|   205k|    else {
  937|   205k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   205k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   205k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 205k]
  |  |  ------------------
  ------------------
  939|   205k|                   ? result(*std::forward<Exp>(exp))
  940|   205k|                   : result(unexpect,
  941|   205k|                            std::invoke(std::forward<F>(f),
  942|   205k|                                        std::forward<Exp>(exp).error()));
  943|   205k|    }
  944|   205k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   615k|    {
 1191|   615k|        return has_value();
 1192|   615k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   307k|    {
 1197|   307k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   307k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   307k|    {
  172|   307k|        return m_unexpected;
  173|   307k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   102k|    {
 1263|   102k|        return std::move(value());
 1264|   102k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   122k|    {
 1078|   122k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   122k|    {
  151|   122k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  11.2M|    {
 1034|  11.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.2M|    {
  142|  11.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.23M|    {
 1405|  2.23M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.23M|                                            std::forward<F>(f));
 1407|  2.23M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.23M|{
  927|  2.23M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.23M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.23M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.23M|            return result(*std::forward<Exp>(exp));
  931|  2.23M|        }
  932|       |
  933|  2.23M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.23M|        return result(unexpect, monostate{});
  935|  2.23M|    }
  936|  2.23M|    else {
  937|  2.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.20M, False: 27.0k]
  |  |  ------------------
  ------------------
  939|  2.23M|                   ? result(*std::forward<Exp>(exp))
  940|  2.23M|                   : result(unexpect,
  941|  27.0k|                            std::invoke(std::forward<F>(f),
  942|  27.0k|                                        std::forward<Exp>(exp).error()));
  943|  2.23M|    }
  944|  2.23M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  20.2M|    {
  189|  20.2M|        return m_has_value;
  190|  20.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.00M|    {
 1263|  8.00M|        return std::move(value());
 1264|  8.00M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.78M|    {
 1221|  8.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.78M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  8.78M|    {
  155|  8.78M|        return m_value;
  156|  8.78M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  8.46M|    {
 1034|  8.46M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.46M|    {
  142|  8.46M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   115k|    {
 1207|   115k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   115k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   122k|    {
  172|   122k|        return m_unexpected;
  173|   122k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.15M|    {
 1088|  2.15M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.42M|    {
  151|  2.42M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   277k|    {
 1078|   277k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  3.24M|    {
 1191|  3.24M|        return has_value();
 1192|  3.24M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  7.02k|    {
 1197|  7.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  7.02k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.26M|    {
 1078|  2.26M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.35M|    {
  151|  2.35M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   779k|    {
 1251|   779k|        return value();
 1252|   779k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   799k|    {
 1034|   799k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   799k|    {
  142|   799k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  8.56M|    {
 1078|  8.56M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  8.56M|    {
  151|  8.56M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  20.5M|    {
 1191|  20.5M|        return has_value();
 1192|  20.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  36.7M|    {
  189|  36.7M|        return m_has_value;
  190|  36.7M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  6.01M|    {
 1197|  6.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.01M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.01M|    {
  172|  6.01M|        return m_unexpected;
  173|  6.01M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.26M|    {
 1034|  2.26M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.26M|    {
  142|  2.26M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.26M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    164|    {
 1078|    164|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    164|    {
  151|    164|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.25M|    {
 1251|  2.25M|        return value();
 1252|  2.25M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.05M|    {
 1221|  8.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.05M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.05M|    {
  155|  8.05M|        return m_value;
  156|  8.05M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  63.3k|    {
 1191|  63.3k|        return has_value();
 1192|  63.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.53M|    {
  189|  4.53M|        return m_has_value;
  190|  4.53M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.20M|    {
 1263|  2.20M|        return std::move(value());
 1264|  2.20M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.26M|    {
 1221|  2.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.26M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.26M|    {
  155|  2.26M|        return m_value;
  156|  2.26M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  5.88M|    {
 1405|  5.88M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.88M|                                            std::forward<F>(f));
 1407|  5.88M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.88M|{
  927|  5.88M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.88M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.88M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.88M|            return result(*std::forward<Exp>(exp));
  931|  5.88M|        }
  932|       |
  933|  5.88M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.88M|        return result(unexpect, monostate{});
  935|  5.88M|    }
  936|  5.88M|    else {
  937|  5.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.79M, False: 88.7k]
  |  |  ------------------
  ------------------
  939|  5.88M|                   ? result(*std::forward<Exp>(exp))
  940|  5.88M|                   : result(unexpect,
  941|  88.7k|                            std::invoke(std::forward<F>(f),
  942|  88.7k|                                        std::forward<Exp>(exp).error()));
  943|  5.88M|    }
  944|  5.88M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.67M|    {
 1034|  6.67M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.67M|    {
  142|  6.67M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|  88.7k|    {
 1088|  88.7k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.79M|    {
 1263|  5.79M|        return std::move(value());
 1264|  5.79M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.52M|    {
 1251|  1.52M|        return value();
 1252|  1.52M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.48M|    {
 1221|  6.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.48M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  20.0M|    {
  189|  20.0M|        return m_has_value;
  190|  20.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.48M|    {
  155|  6.48M|        return m_value;
  156|  6.48M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   146k|    {
 1034|   146k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   146k|    {
  142|   146k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.20M|    {
 1405|  2.20M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.20M|                                            std::forward<F>(f));
 1407|  2.20M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.20M|{
  927|  2.20M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.20M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.20M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.20M|            return result(*std::forward<Exp>(exp));
  931|  2.20M|        }
  932|       |
  933|  2.20M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.20M|        return result(unexpect, monostate{});
  935|  2.20M|    }
  936|  2.20M|    else {
  937|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.20M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.20M|                   ? result(*std::forward<Exp>(exp))
  940|  2.20M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.20M|    }
  944|  2.20M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.20M|    {
 1034|  2.20M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.20M|    {
  142|  2.20M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.20M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.20M|    {
 1191|  2.20M|        return has_value();
 1192|  2.20M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.40M|    {
  189|  4.40M|        return m_has_value;
  190|  4.40M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.20M|    {
 1263|  2.20M|        return std::move(value());
 1264|  2.20M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.20M|    {
 1221|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.20M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.20M|    {
  155|  2.20M|        return m_value;
  156|  2.20M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  2.12M|    {
 1395|  2.12M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.12M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.12M|{
  927|  2.12M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.12M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.12M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.12M|            return result(*std::forward<Exp>(exp));
  931|  2.12M|        }
  932|       |
  933|  2.12M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.12M|        return result(unexpect, monostate{});
  935|  2.12M|    }
  936|  2.12M|    else {
  937|  2.12M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.12M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.12M]
  |  |  ------------------
  ------------------
  939|  2.12M|                   ? result(*std::forward<Exp>(exp))
  940|  2.12M|                   : result(unexpect,
  941|  2.12M|                            std::invoke(std::forward<F>(f),
  942|  2.12M|                                        std::forward<Exp>(exp).error()));
  943|  2.12M|    }
  944|  2.12M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  63.2k|    {
 1274|  63.2k|        return std::addressof(value());
 1275|  63.2k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  13.2M|    {
 1191|  13.2M|        return has_value();
 1192|  13.2M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   367k|    {
 1197|   367k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   367k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   367k|    {
  172|   367k|        return m_unexpected;
  173|   367k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.95M|    {
 1263|  4.95M|        return std::move(value());
 1264|  4.95M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   396k|    {
 1078|   396k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   892k|    {
  151|   892k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.70M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   807k|    {
 1034|   807k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   807k|    {
  142|   807k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  2.04M|    {
 1191|  2.04M|        return has_value();
 1192|  2.04M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.24M|    {
  189|  3.24M|        return m_has_value;
  190|  3.24M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   552k|    {
 1197|   552k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   552k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   552k|    {
  172|   552k|        return m_unexpected;
  173|   552k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   113k|    {
 1251|   113k|        return value();
 1252|   113k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   651k|    {
 1221|   651k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   651k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   651k|    {
  155|   651k|        return m_value;
  156|   651k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|  1.03k|    {
 1078|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|  1.03k|    {
  151|  1.03k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.89M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.89M|    {
 1034|  1.89M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.89M|    {
  142|  1.89M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   340k|    {
 1405|   340k|        return detail::transform_error_impl(std::move(*this),
 1406|   340k|                                            std::forward<F>(f));
 1407|   340k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   340k|{
  927|   340k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   340k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   340k|        if (SCN_LIKELY(exp.has_value())) {
  930|   340k|            return result(*std::forward<Exp>(exp));
  931|   340k|        }
  932|       |
  933|   340k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   340k|        return result(unexpect, monostate{});
  935|   340k|    }
  936|   340k|    else {
  937|   340k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   340k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   340k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 339k, False: 327]
  |  |  ------------------
  ------------------
  939|   340k|                   ? result(*std::forward<Exp>(exp))
  940|   340k|                   : result(unexpect,
  941|    327|                            std::invoke(std::forward<F>(f),
  942|    327|                                        std::forward<Exp>(exp).error()));
  943|   340k|    }
  944|   340k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  3.27M|    {
  189|  3.27M|        return m_has_value;
  190|  3.27M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.21M|    {
 1263|  1.21M|        return std::move(value());
 1264|  1.21M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.37M|    {
 1221|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.37M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.37M|    {
  155|  1.37M|        return m_value;
  156|  1.37M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    744|    {
 1207|    744|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    744|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  1.03k|    {
  172|  1.03k|        return m_unexpected;
  173|  1.03k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   496k|    {
 1088|   496k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   680k|    {
 1191|   680k|        return has_value();
 1192|   680k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|    288|    {
 1197|    288|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    288|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    288|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    288|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   340k|    {
 1078|   340k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   341k|    {
  151|   341k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.30M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   155k|    {
 1251|   155k|        return value();
 1252|   155k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   155k|    {
 1034|   155k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   155k|    {
  142|   155k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.74M|    {
 1078|  1.74M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.74M|    {
  151|  1.74M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.64M|    {
 1191|  3.64M|        return has_value();
 1192|  3.64M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.55M|    {
  189|  6.55M|        return m_has_value;
  190|  6.55M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  1.02M|    {
 1197|  1.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.02M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.02M|    {
  172|  1.02M|        return m_unexpected;
  173|  1.02M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   339k|    {
 1034|   339k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   339k|    {
  142|   339k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   339k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   524k|    {
 1251|   524k|        return value();
 1252|   524k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.40M|    {
 1221|  1.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.40M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.40M|    {
  155|  1.40M|        return m_value;
  156|  1.40M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   679k|    {
  189|   679k|        return m_has_value;
  190|   679k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   339k|    {
 1263|   339k|        return std::move(value());
 1264|   339k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   339k|    {
 1221|   339k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   339k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   339k|    {
  155|   339k|        return m_value;
  156|   339k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   878k|    {
 1405|   878k|        return detail::transform_error_impl(std::move(*this),
 1406|   878k|                                            std::forward<F>(f));
 1407|   878k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   878k|{
  927|   878k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   878k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   878k|        if (SCN_LIKELY(exp.has_value())) {
  930|   878k|            return result(*std::forward<Exp>(exp));
  931|   878k|        }
  932|       |
  933|   878k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   878k|        return result(unexpect, monostate{});
  935|   878k|    }
  936|   878k|    else {
  937|   878k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   878k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   878k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 877k, False: 417]
  |  |  ------------------
  ------------------
  939|   878k|                   ? result(*std::forward<Exp>(exp))
  940|   878k|                   : result(unexpect,
  941|    417|                            std::invoke(std::forward<F>(f),
  942|    417|                                        std::forward<Exp>(exp).error()));
  943|   878k|    }
  944|   878k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.06M|    {
 1034|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.06M|    {
  142|  1.06M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    417|    {
 1088|    417|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   877k|    {
 1263|   877k|        return std::move(value());
 1264|   877k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   339k|    {
 1405|   339k|        return detail::transform_error_impl(std::move(*this),
 1406|   339k|                                            std::forward<F>(f));
 1407|   339k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   339k|{
  927|   339k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   339k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   339k|        if (SCN_LIKELY(exp.has_value())) {
  930|   339k|            return result(*std::forward<Exp>(exp));
  931|   339k|        }
  932|       |
  933|   339k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   339k|        return result(unexpect, monostate{});
  935|   339k|    }
  936|   339k|    else {
  937|   339k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   339k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 339k, False: 0]
  |  |  ------------------
  ------------------
  939|   339k|                   ? result(*std::forward<Exp>(exp))
  940|   339k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   339k|    }
  944|   339k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   339k|    {
 1034|   339k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   339k|    {
  142|   339k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   339k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   339k|    {
 1191|   339k|        return has_value();
 1192|   339k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   679k|    {
  189|   679k|        return m_has_value;
  190|   679k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   339k|    {
 1263|   339k|        return std::move(value());
 1264|   339k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   339k|    {
 1221|   339k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   339k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   339k|    {
  155|   339k|        return m_value;
  156|   339k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   495k|    {
 1395|   495k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   495k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   495k|{
  927|   495k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   495k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   495k|        if (SCN_LIKELY(exp.has_value())) {
  930|   495k|            return result(*std::forward<Exp>(exp));
  931|   495k|        }
  932|       |
  933|   495k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   495k|        return result(unexpect, monostate{});
  935|   495k|    }
  936|   495k|    else {
  937|   495k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   495k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   495k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 495k]
  |  |  ------------------
  ------------------
  939|   495k|                   ? result(*std::forward<Exp>(exp))
  940|   495k|                   : result(unexpect,
  941|   495k|                            std::invoke(std::forward<F>(f),
  942|   495k|                                        std::forward<Exp>(exp).error()));
  943|   495k|    }
  944|   495k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   538k|    {
 1263|   538k|        return std::move(value());
 1264|   538k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|   278k|    {
 1034|   278k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|   278k|    {
  142|   278k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.26k|{
  200|  5.26k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.26k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.26k|{
  180|  5.26k|    return p;
  181|  5.26k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.26k|{
  200|  5.26k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.26k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.26k|{
  180|  5.26k|    return p;
  181|  5.26k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.26k|{
  200|  5.26k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.26k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.26k|{
  180|  5.26k|    return p;
  181|  5.26k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  27.8M|{
  200|  27.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  27.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  27.8M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  27.8M|{
  180|  27.8M|    return p;
  181|  27.8M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.1M|{
  200|  11.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.1M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  11.1M|{
  180|  11.1M|    return p;
  181|  11.1M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.1M|{
  200|  11.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.1M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  13.6M|{
  180|  13.6M|    return p;
  181|  13.6M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.52M|{
  200|  2.52M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  2.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.52M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  18.3k|    {
  242|  18.3k|        return static_cast<size_type>(m_end - m_ptr);
  243|  18.3k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.63k|    {
  181|  2.63k|        return m_ptr;
  182|  2.63k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.63k|    {
  185|  2.63k|        return m_end;
  186|  2.63k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.63k|    {
  238|  2.63k|        return m_ptr;
  239|  2.63k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.63k|    {
  120|  2.63k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  31.5k|    {
  181|  31.5k|        return m_ptr;
  182|  31.5k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  31.5k|    {
  185|  31.5k|        return m_end;
  186|  31.5k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.63k|    {
  120|  2.63k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  56.7k|    {
  181|  56.7k|        return m_ptr;
  182|  56.7k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  56.7k|    {
  185|  56.7k|        return m_end;
  186|  56.7k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.63k|    {
  120|  2.63k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  5.57M|    {
  120|  5.57M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  5.57M|    {
  238|  5.57M|        return m_ptr;
  239|  5.57M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  5.57M|    {
  242|  5.57M|        return static_cast<size_type>(m_end - m_ptr);
  243|  5.57M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  5.73M|{
   60|  5.73M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  5.73M|                                          const CharT*, const CharT*>) {
   62|  5.73M|        return {first, last};
   63|  5.73M|    }
   64|  5.73M|    else {
   65|  5.73M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  5.73M|    }
   67|  5.73M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  9.15M|{
   44|  9.15M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  9.15M|                                          decltype(first), decltype(last)> &&
   46|  9.15M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  9.15M|        return {first, last};
   48|  9.15M|    }
   49|  9.15M|    else {
   50|  9.15M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  9.15M|                                       to_address(first), to_address(last)))};
   52|  9.15M|    }
   53|  9.15M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  12.0M|{
   75|  12.0M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  12.0M|                      typename std::basic_string_view<CharT>::iterator,
   77|  12.0M|                      decltype(it)> &&
   78|  12.0M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  12.0M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  12.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  12.0M|        return it;
   81|  12.0M|    }
   82|  12.0M|    else {
   83|  12.0M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  12.0M|    }
   85|  12.0M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   102k|{
   54|   102k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   102k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   102k|        return true;
   57|   102k|    }
   58|   102k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   102k|                           ranges::iterator_t<Range>,
   60|   102k|                           typename detail::basic_scan_buffer<
   61|   102k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   102k|        auto beg = ranges::begin(r);
   63|   102k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 102k, False: 0]
  ------------------
   64|   102k|            return false;
   65|   102k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   102k|    else {
   79|   102k|        return false;
   80|   102k|    }
   81|   102k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   102k|{
  112|   102k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   102k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   102k|        return r;
  115|   102k|    }
  116|   102k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   102k|                           ranges::iterator_t<Range>,
  118|   102k|                           typename detail::basic_scan_buffer<
  119|   102k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   102k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   102k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   102k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   102k|                ranges::begin(r), ranges::end(r)));
  124|   102k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   102k|        }
  126|   102k|        else {
  127|   102k|            return ranges::begin(r).contiguous_segment();
  128|   102k|        }
  129|   102k|    }
  130|   102k|    else {
  131|   102k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   102k|    }
  133|   102k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   260k|{
  166|   260k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   260k|        return ranges_polyfill::usize(r);
  168|   260k|    }
  169|   260k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   260k|                           ranges::iterator_t<Range>,
  171|   260k|                           typename detail::basic_scan_buffer<
  172|   260k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   260k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   260k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   260k|                                       ranges::begin(r).position());
  176|   260k|        }
  177|   260k|        else {
  178|   260k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 260k, False: 0]
  ------------------
  179|   260k|                return static_cast<size_t>(
  180|   260k|                    ranges::begin(r).parent()->chars_available() -
  181|   260k|                    ranges::begin(r).position());
  182|   260k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   260k|        }
  185|   260k|    }
  186|   260k|    else {
  187|   260k|        return 0;
  188|   260k|    }
  189|   260k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   340k|{
   54|   340k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   340k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   340k|        return true;
   57|   340k|    }
   58|   340k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   340k|                           ranges::iterator_t<Range>,
   60|   340k|                           typename detail::basic_scan_buffer<
   61|   340k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   340k|        auto beg = ranges::begin(r);
   63|   340k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 340k, False: 0]
  ------------------
   64|   340k|            return false;
   65|   340k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   340k|    else {
   79|   340k|        return false;
   80|   340k|    }
   81|   340k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   340k|{
  112|   340k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   340k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   340k|        return r;
  115|   340k|    }
  116|   340k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   340k|                           ranges::iterator_t<Range>,
  118|   340k|                           typename detail::basic_scan_buffer<
  119|   340k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   340k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   340k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   340k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   340k|                ranges::begin(r), ranges::end(r)));
  124|   340k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   340k|        }
  126|   340k|        else {
  127|   340k|            return ranges::begin(r).contiguous_segment();
  128|   340k|        }
  129|   340k|    }
  130|   340k|    else {
  131|   340k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   340k|    }
  133|   340k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   878k|{
  166|   878k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   878k|        return ranges_polyfill::usize(r);
  168|   878k|    }
  169|   878k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   878k|                           ranges::iterator_t<Range>,
  171|   878k|                           typename detail::basic_scan_buffer<
  172|   878k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   878k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   878k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   878k|                                       ranges::begin(r).position());
  176|   878k|        }
  177|   878k|        else {
  178|   878k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 878k, False: 0]
  ------------------
  179|   878k|                return static_cast<size_t>(
  180|   878k|                    ranges::begin(r).parent()->chars_available() -
  181|   878k|                    ranges::begin(r).position());
  182|   878k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   878k|        }
  185|   878k|    }
  186|   878k|    else {
  187|   878k|        return 0;
  188|   878k|    }
  189|   878k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.42M|{
  235|  2.42M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.42M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.42M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.42M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.42M|    }
  240|  2.42M|    else {
  241|  2.42M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.42M|    }
  243|  2.42M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.42M|    {
   50|  2.42M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  7.12M|    {
   63|  7.12M|        return sv;
   64|  7.12M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  8.29M|    {
  142|  8.29M|        return m_view;
  143|  8.29M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  5.05M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  5.05M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  2.24M|    {
  137|  2.24M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.24M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  2.24M|    {
  181|  2.24M|        using value_t = ranges::range_value_t<Range>;
  182|  2.24M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.24M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.24M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.24M|            m_storage.reset();
  186|  2.24M|            m_view = string_view_type{ranges::data(range),
  187|  2.24M|                                      ranges_polyfill::usize(range)};
  188|  2.24M|        }
  189|  2.24M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  2.24M|                                          std::basic_string<CharT>>) {
  191|  2.24M|            m_storage.emplace(SCN_FWD(range));
  192|  2.24M|            m_view = string_view_type{*m_storage};
  193|  2.24M|        }
  194|  2.24M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.24M|                                          typename detail::basic_scan_buffer<
  196|  2.24M|                                              value_t>::forward_iterator> &&
  197|  2.24M|                           ranges::common_range<Range>) {
  198|  2.24M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.24M|            auto end_seg = range.end().contiguous_segment();
  200|  2.24M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.24M|                             detail::to_address(end_seg.end()))) {
  202|  2.24M|                auto& str = m_storage.emplace();
  203|  2.24M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.24M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.24M|                m_view = string_view_type{str};
  206|  2.24M|                return;
  207|  2.24M|            }
  208|       |
  209|  2.24M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.24M|                                                            end_seg.data());
  211|  2.24M|            m_storage.reset();
  212|  2.24M|        }
  213|  2.24M|        else {
  214|  2.24M|            auto& str = m_storage.emplace();
  215|  2.24M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.24M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.24M|            }
  218|  2.24M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.24M|                      std::back_inserter(str));
  220|  2.24M|            m_view = string_view_type{str};
  221|  2.24M|        }
  222|  2.24M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  2.74M|    {
  147|  2.74M|        return m_storage.has_value();
  148|  2.74M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  1.61M|    {
  152|  1.61M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.61M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  9.99M|    {
  142|  9.99M|        return m_view;
  143|  9.99M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  6.19M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  5.08M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.99M|    {
  137|  1.99M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.99M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.99M|    {
  181|  1.99M|        using value_t = ranges::range_value_t<Range>;
  182|  1.99M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.99M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.99M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.99M|            m_storage.reset();
  186|  1.99M|            m_view = string_view_type{ranges::data(range),
  187|  1.99M|                                      ranges_polyfill::usize(range)};
  188|  1.99M|        }
  189|  1.99M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.99M|                                          std::basic_string<CharT>>) {
  191|  1.99M|            m_storage.emplace(SCN_FWD(range));
  192|  1.99M|            m_view = string_view_type{*m_storage};
  193|  1.99M|        }
  194|  1.99M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.99M|                                          typename detail::basic_scan_buffer<
  196|  1.99M|                                              value_t>::forward_iterator> &&
  197|  1.99M|                           ranges::common_range<Range>) {
  198|  1.99M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.99M|            auto end_seg = range.end().contiguous_segment();
  200|  1.99M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.99M|                             detail::to_address(end_seg.end()))) {
  202|  1.99M|                auto& str = m_storage.emplace();
  203|  1.99M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.99M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.99M|                m_view = string_view_type{str};
  206|  1.99M|                return;
  207|  1.99M|            }
  208|       |
  209|  1.99M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.99M|                                                            end_seg.data());
  211|  1.99M|            m_storage.reset();
  212|  1.99M|        }
  213|  1.99M|        else {
  214|  1.99M|            auto& str = m_storage.emplace();
  215|  1.99M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.99M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.99M|            }
  218|  1.99M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.99M|                      std::back_inserter(str));
  220|  1.99M|            m_view = string_view_type{str};
  221|  1.99M|        }
  222|  1.99M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  2.55M|    {
  147|  2.55M|        return m_storage.has_value();
  148|  2.55M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  1.50M|    {
  152|  1.50M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.50M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  1.10M|{
  235|  1.10M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.10M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.10M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.10M|        return string_view_wrapper{SCN_FWD(range)};
  239|  1.10M|    }
  240|  1.10M|    else {
  241|  1.10M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  1.10M|    }
  243|  1.10M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  1.10M|    {
   97|  1.10M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  1.10M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  1.26M|    {
  181|  1.26M|        using value_t = ranges::range_value_t<Range>;
  182|  1.26M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.26M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.26M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.26M|            m_storage.reset();
  186|  1.26M|            m_view = string_view_type{ranges::data(range),
  187|  1.26M|                                      ranges_polyfill::usize(range)};
  188|  1.26M|        }
  189|  1.26M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.26M|                                          std::basic_string<CharT>>) {
  191|  1.26M|            m_storage.emplace(SCN_FWD(range));
  192|  1.26M|            m_view = string_view_type{*m_storage};
  193|  1.26M|        }
  194|  1.26M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  1.26M|                                          typename detail::basic_scan_buffer<
  196|  1.26M|                                              value_t>::forward_iterator> &&
  197|  1.26M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  1.26M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.26M|            auto end_seg = range.end().contiguous_segment();
  200|  1.26M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.10M, False: 155k]
  |  |  ------------------
  ------------------
  201|  1.26M|                             detail::to_address(end_seg.end()))) {
  202|  1.10M|                auto& str = m_storage.emplace();
  203|  1.10M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.10M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.10M|                m_view = string_view_type{str};
  206|  1.10M|                return;
  207|  1.10M|            }
  208|       |
  209|   155k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   155k|                                                            end_seg.data());
  211|   155k|            m_storage.reset();
  212|   155k|        }
  213|  1.26M|        else {
  214|  1.26M|            auto& str = m_storage.emplace();
  215|  1.26M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.26M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.26M|            }
  218|  1.26M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.26M|                      std::back_inserter(str));
  220|  1.26M|            m_view = string_view_type{str};
  221|  1.26M|        }
  222|  1.26M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|   155k|    {
  137|   155k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   155k|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  1.13M|{
  235|  1.13M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.13M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.13M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.13M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.13M|    }
  240|  1.13M|    else {
  241|  1.13M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.13M|    }
  243|  1.13M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  1.13M|    {
   50|  1.13M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  1.13M|    {
  137|  1.13M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.13M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  1.13M|    {
  181|  1.13M|        using value_t = ranges::range_value_t<Range>;
  182|  1.13M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.13M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.13M|            m_storage.reset();
  186|  1.13M|            m_view = string_view_type{ranges::data(range),
  187|  1.13M|                                      ranges_polyfill::usize(range)};
  188|  1.13M|        }
  189|  1.13M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.13M|                                          std::basic_string<CharT>>) {
  191|  1.13M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.13M|            m_view = string_view_type{*m_storage};
  193|  1.13M|        }
  194|  1.13M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.13M|                                          typename detail::basic_scan_buffer<
  196|  1.13M|                                              value_t>::forward_iterator> &&
  197|  1.13M|                           ranges::common_range<Range>) {
  198|  1.13M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.13M|            auto end_seg = range.end().contiguous_segment();
  200|  1.13M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.13M|                             detail::to_address(end_seg.end()))) {
  202|  1.13M|                auto& str = m_storage.emplace();
  203|  1.13M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.13M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.13M|                m_view = string_view_type{str};
  206|  1.13M|                return;
  207|  1.13M|            }
  208|       |
  209|  1.13M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.13M|                                                            end_seg.data());
  211|  1.13M|            m_storage.reset();
  212|  1.13M|        }
  213|  1.13M|        else {
  214|  1.13M|            auto& str = m_storage.emplace();
  215|  1.13M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.13M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.13M|            }
  218|  1.13M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.13M|                      std::back_inserter(str));
  220|  1.13M|            m_view = string_view_type{str};
  221|  1.13M|        }
  222|  1.13M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|  1.05M|    {
  137|  1.05M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.05M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|  1.05M|    {
  181|  1.05M|        using value_t = ranges::range_value_t<Range>;
  182|  1.05M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.05M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.05M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.05M|            m_storage.reset();
  186|  1.05M|            m_view = string_view_type{ranges::data(range),
  187|  1.05M|                                      ranges_polyfill::usize(range)};
  188|  1.05M|        }
  189|  1.05M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.05M|                                          std::basic_string<CharT>>) {
  191|  1.05M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.05M|            m_view = string_view_type{*m_storage};
  193|  1.05M|        }
  194|  1.05M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.05M|                                          typename detail::basic_scan_buffer<
  196|  1.05M|                                              value_t>::forward_iterator> &&
  197|  1.05M|                           ranges::common_range<Range>) {
  198|  1.05M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.05M|            auto end_seg = range.end().contiguous_segment();
  200|  1.05M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.05M|                             detail::to_address(end_seg.end()))) {
  202|  1.05M|                auto& str = m_storage.emplace();
  203|  1.05M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.05M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.05M|                m_view = string_view_type{str};
  206|  1.05M|                return;
  207|  1.05M|            }
  208|       |
  209|  1.05M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.05M|                                                            end_seg.data());
  211|  1.05M|            m_storage.reset();
  212|  1.05M|        }
  213|  1.05M|        else {
  214|  1.05M|            auto& str = m_storage.emplace();
  215|  1.05M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.05M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.05M|            }
  218|  1.05M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.05M|                      std::back_inserter(str));
  220|  1.05M|            m_view = string_view_type{str};
  221|  1.05M|        }
  222|  1.05M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  8.48M|{
   97|  8.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  8.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.9k, False: 8.45M]
  |  |  ------------------
  ------------------
   98|  31.9k|        return eof_error::eof;
   99|  31.9k|    }
  100|  8.45M|    return eof_error::good;
  101|  8.48M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  8.48M|{
   91|  8.48M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  8.48M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  8.48M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  8.48M|    {
   84|  8.48M|        return begin == end;
   85|  8.48M|    }
   86|  8.48M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   307k|{
   97|   307k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|   307k|    return eof_error::good;
  101|   307k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   307k|{
   91|   307k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   307k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   307k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   307k|    {
   84|   307k|        return begin == end;
   85|   307k|    }
   86|   307k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  7.69M|{
   97|  7.69M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  7.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.0k, False: 7.65M]
  |  |  ------------------
  ------------------
   98|  34.0k|        return eof_error::eof;
   99|  34.0k|    }
  100|  7.65M|    return eof_error::good;
  101|  7.69M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  7.69M|{
   91|  7.69M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  7.69M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  7.69M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  7.69M|    {
   84|  7.69M|        return begin == end;
   85|  7.69M|    }
   86|  7.69M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.36M|{
   97|  1.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 615, False: 1.36M]
  |  |  ------------------
  ------------------
   98|    615|        return eof_error::eof;
   99|    615|    }
  100|  1.36M|    return eof_error::good;
  101|  1.36M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.36M|{
   91|  1.36M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.36M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.36M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.36M|    {
   84|  1.36M|        return begin == end;
   85|  1.36M|    }
   86|  1.36M|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  1.13M|{
  120|  1.13M|    return find_classic_impl(
  121|  1.13M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  1.13M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  1.13M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.53M|{
  128|  2.53M|    return find_classic_impl(
  129|  2.53M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.53M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.53M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  1.13M|{
   44|  1.13M|    auto it = source.begin();
   45|       |
   46|  6.27M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.99M, False: 278k]
  ------------------
   47|  5.99M|        auto sv =
   48|  5.99M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.99M|                .substr(0, 8);
   50|       |
   51|  5.99M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.88M, False: 105k]
  ------------------
   52|  5.88M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.88M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.88M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 811k, False: 5.07M]
  ------------------
   55|   811k|                break;
   56|   811k|            }
   57|  5.07M|            continue;
   58|  5.88M|        }
   59|       |
   60|   361k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 299k, False: 62.0k]
  ------------------
   61|   299k|            auto tmp =
   62|   299k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   299k|            auto res = get_next_code_point(tmp);
   64|   299k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 43.6k, False: 255k]
  ------------------
   65|  43.6k|                return it;
   66|  43.6k|            }
   67|   255k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   255k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   255k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   255k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   255k|        }
   71|   105k|    }
   72|       |
   73|  1.08M|    return detail::make_string_view_iterator(source, it);
   74|  1.13M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  8.55M|{
   31|  8.55M|    static_assert(sizeof(*source.data()) == 1);
   32|  8.55M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  8.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  8.55M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  8.55M|    return has_byte_greater(word, 127) != 0;
   37|  8.55M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  42.1M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|   299k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  2.53M|{
   44|  2.53M|    auto it = source.begin();
   45|       |
   46|  2.56M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.56M, False: 4.57k]
  ------------------
   47|  2.56M|        auto sv =
   48|  2.56M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.56M|                .substr(0, 8);
   50|       |
   51|  2.56M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.35M, False: 208k]
  ------------------
   52|  2.35M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.35M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.35M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.32M, False: 26.1k]
  ------------------
   55|  2.32M|                break;
   56|  2.32M|            }
   57|  26.1k|            continue;
   58|  2.35M|        }
   59|       |
   60|   309k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 301k, False: 8.57k]
  ------------------
   61|   301k|            auto tmp =
   62|   301k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   301k|            auto res = get_next_code_point(tmp);
   64|   301k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 200k, False: 101k]
  ------------------
   65|   200k|                return it;
   66|   200k|            }
   67|   101k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   101k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   101k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   101k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   101k|        }
   71|   208k|    }
   72|       |
   73|  2.33M|    return detail::make_string_view_iterator(source, it);
   74|  2.53M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  4.24M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   301k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.42M|{
  300|  2.42M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.42M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.42M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.42M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.42M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.42M|        return ranges::next(ranges::begin(range),
  306|  2.42M|                            ranges::distance(buf.view().begin(), it));
  307|  2.42M|    }
  308|  2.42M|    else {
  309|  2.42M|        auto it = ranges::begin(range);
  310|       |
  311|  2.42M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.42M|            auto seg = get_contiguous_beginning(range);
  313|  2.42M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.42M|                seg_it != seg.end()) {
  315|  2.42M|                return ranges_polyfill::batch_next(
  316|  2.42M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.42M|            }
  318|  2.42M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.42M|        }
  320|       |
  321|  2.42M|        return read_while_code_point(
  322|  2.42M|            SCN_FWD(range),
  323|  2.42M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.42M|    }
  325|  2.42M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.89M|{
  459|  2.89M|    auto it = read_code_unit(range);
  460|  2.89M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.08k, False: 2.89M]
  |  |  ------------------
  ------------------
  461|  3.08k|        return unexpected(make_eof_parse_error(it.error()));
  462|  3.08k|    }
  463|       |
  464|  5.32M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.32M, False: 2.10M]
  ------------------
  465|  5.32M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 788k, False: 4.53M]
  ------------------
  466|   788k|            return *it;
  467|   788k|        }
  468|  5.32M|    }
  469|       |
  470|  2.10M|    return unexpected(parse_error::error);
  471|  2.89M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.45M|{
  418|  6.45M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.45M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.45M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.45M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 50.7k, False: 6.40M]
  ------------------
  423|  50.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  50.7k|        }
  425|  6.40M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 6.18M, False: 221k]
  ------------------
  426|  6.18M|            return unexpected(parse_error::error);
  427|  6.18M|        }
  428|   221k|        return ranges::next(ranges::begin(range), str.size());
  429|  6.40M|    }
  430|  6.45M|    else {
  431|  6.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.45M|            if (ch < 'A' || ch > 'Z') {
  433|  6.45M|                return ch;
  434|  6.45M|            }
  435|  6.45M|            return static_cast<char_type>(ch +
  436|  6.45M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.45M|        };
  438|       |
  439|  6.45M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  6.45M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.45M|        if (SCN_UNLIKELY(!std::equal(
  443|  6.45M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.45M|                    return ascii_tolower(a) ==
  445|  6.45M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.45M|                }))) {
  447|  6.45M|            return unexpected(parse_error::error);
  448|  6.45M|        }
  449|       |
  450|  6.45M|        return it;
  451|  6.45M|    }
  452|  6.45M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  6.44M|{
  407|  6.44M|    unsigned char running_diff{0};
  408|  24.2M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 17.7M, False: 6.44M]
  ------------------
  409|  17.7M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  17.7M|    }
  411|  6.44M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 201k, False: 6.24M]
  |  Branch (411:33): [True: 40.8k, False: 6.20M]
  ------------------
  412|  6.44M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  42.6k|{
  418|  42.6k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  42.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  42.6k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  42.6k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 537, False: 42.0k]
  ------------------
  423|    537|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    537|        }
  425|  42.0k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 21.1k, False: 20.9k]
  ------------------
  426|  21.1k|            return unexpected(parse_error::error);
  427|  21.1k|        }
  428|  20.9k|        return ranges::next(ranges::begin(range), str.size());
  429|  42.0k|    }
  430|  42.6k|    else {
  431|  42.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  42.6k|            if (ch < 'A' || ch > 'Z') {
  433|  42.6k|                return ch;
  434|  42.6k|            }
  435|  42.6k|            return static_cast<char_type>(ch +
  436|  42.6k|                                          static_cast<char_type>('a' - 'A'));
  437|  42.6k|        };
  438|       |
  439|  42.6k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  42.6k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  42.6k|        if (SCN_UNLIKELY(!std::equal(
  443|  42.6k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  42.6k|                    return ascii_tolower(a) ==
  445|  42.6k|                           static_cast<detail::char_t<Range>>(b);
  446|  42.6k|                }))) {
  447|  42.6k|            return unexpected(parse_error::error);
  448|  42.6k|        }
  449|       |
  450|  42.6k|        return it;
  451|  42.6k|    }
  452|  42.6k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   715k|{
  332|   715k|    auto it = read_code_unit(range);
  333|   715k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.70k, False: 712k]
  |  |  ------------------
  ------------------
  334|  3.70k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.70k|    }
  336|       |
  337|   712k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 608k, False: 103k]
  |  |  ------------------
  ------------------
  338|   712k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   608k|        return unexpected(parse_error::error);
  340|   608k|    }
  341|       |
  342|   103k|    return *it;
  343|   712k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  7.36k|{
  139|  7.36k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  7.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  7.36k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  7.36k|{
  131|  7.36k|    return ranges::find_if(range, pred);
  132|  7.36k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.29M|{
  159|  1.29M|    auto it = read_while_code_unit(range, pred);
  160|  1.29M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 548k, False: 744k]
  ------------------
  161|   548k|        return unexpected(parse_error::error);
  162|   548k|    }
  163|   744k|    return it;
  164|  1.29M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.29M|{
  139|  1.29M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.29M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.29M|{
  131|  1.29M|    return ranges::find_if(range, pred);
  132|  1.29M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   102k|{
  300|   102k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   102k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   102k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   102k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   102k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   102k|        return ranges::next(ranges::begin(range),
  306|   102k|                            ranges::distance(buf.view().begin(), it));
  307|   102k|    }
  308|   102k|    else {
  309|   102k|        auto it = ranges::begin(range);
  310|       |
  311|   102k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   102k|            auto seg = get_contiguous_beginning(range);
  313|   102k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   102k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 102k, False: 0]
  ------------------
  315|   102k|                return ranges_polyfill::batch_next(
  316|   102k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   102k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   102k|    }
  325|   102k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   102k|{
  459|   102k|    auto it = read_code_unit(range);
  460|   102k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   205k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 205k, False: 102k]
  ------------------
  465|   205k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 205k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   205k|    }
  469|       |
  470|   102k|    return unexpected(parse_error::error);
  471|   102k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   260k|{
  418|   260k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   260k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   260k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   260k|        if (ranges::size(range) < str.size()) {
  423|   260k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   260k|        }
  425|   260k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   260k|            return unexpected(parse_error::error);
  427|   260k|        }
  428|   260k|        return ranges::next(ranges::begin(range), str.size());
  429|   260k|    }
  430|   260k|    else {
  431|   260k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   260k|            if (ch < 'A' || ch > 'Z') {
  433|   260k|                return ch;
  434|   260k|            }
  435|   260k|            return static_cast<char_type>(ch +
  436|   260k|                                          static_cast<char_type>('a' - 'A'));
  437|   260k|        };
  438|       |
  439|   260k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   260k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   260k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   260k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   260k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   260k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   260k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 260k, False: 0]
  |  |  ------------------
  ------------------
  443|   260k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   260k|                    return ascii_tolower(a) ==
  445|   260k|                           static_cast<detail::char_t<Range>>(b);
  446|   260k|                }))) {
  447|   260k|            return unexpected(parse_error::error);
  448|   260k|        }
  449|       |
  450|      0|        return it;
  451|   260k|    }
  452|   260k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   260k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   260k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 260k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   260k|                return ch;
  434|   260k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   260k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   102k|{
  139|   102k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   102k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   102k|{
  131|   102k|    return ranges::find_if(range, pred);
  132|   102k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   102k|{
  159|   102k|    auto it = read_while_code_unit(range, pred);
  160|   102k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 102k, False: 0]
  ------------------
  161|   102k|        return unexpected(parse_error::error);
  162|   102k|    }
  163|      0|    return it;
  164|   102k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.21M|{
  300|  2.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.21M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.21M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.21M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.21M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.21M|        return ranges::next(ranges::begin(range),
  306|  2.21M|                            ranges::distance(buf.view().begin(), it));
  307|  2.21M|    }
  308|  2.21M|    else {
  309|  2.21M|        auto it = ranges::begin(range);
  310|       |
  311|  2.21M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.21M|            auto seg = get_contiguous_beginning(range);
  313|  2.21M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.21M|                seg_it != seg.end()) {
  315|  2.21M|                return ranges_polyfill::batch_next(
  316|  2.21M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.21M|            }
  318|  2.21M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.21M|        }
  320|       |
  321|  2.21M|        return read_while_code_point(
  322|  2.21M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.21M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.21M|    }
  325|  2.21M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.21M|{
  264|  2.21M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.21M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.21M|{
  231|  2.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.21M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.21M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.21M|    }
  235|  2.21M|    else {
  236|  2.21M|        auto it = ranges::begin(range);
  237|  2.21M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.21M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.21M|            seg_it != seg.end()) {
  241|  2.21M|            return ranges_polyfill::batch_next(
  242|  2.21M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.21M|        }
  244|       |
  245|  2.21M|        while (it != ranges::end(range)) {
  246|  2.21M|            const auto [iter, value] =
  247|  2.21M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.21M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.21M|            if (pred(cp)) {
  250|  2.21M|                return it;
  251|  2.21M|            }
  252|  2.21M|            it = iter;
  253|  2.21M|        }
  254|       |
  255|  2.21M|        return it;
  256|  2.21M|    }
  257|  2.21M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.21M|{
  178|  2.21M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.21M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.21M|    std::array<char32_t, 16> cp_buf{};
  182|  2.21M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.21M|    auto it = ranges::begin(range);
  184|  2.22M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.21M, False: 6.07k]
  ------------------
  185|  2.21M|        auto chunk_begin = it;
  186|  2.21M|        size_t code_point_count = 0;
  187|  2.21M|        uint8_t code_unit_idx = 0;
  188|  36.0M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 34.0M, False: 2.04M]
  |  Branch (188:52): [True: 33.8M, False: 171k]
  ------------------
  189|  33.8M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 33.8M, False: 0]
  ------------------
  190|  33.8M|                idx_buf[code_point_count] = code_unit_idx;
  191|  33.8M|                ++code_point_count;
  192|  33.8M|            }
  193|  33.8M|            ++it;
  194|  33.8M|            ++code_unit_idx;
  195|  33.8M|        }
  196|       |
  197|  2.21M|        auto input = detail::make_string_view_from_pointers(
  198|  2.21M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.21M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.21M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.21M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.21M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  3.93M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 3.92M, False: 12.0k]
  ------------------
  217|  3.92M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.20M, False: 1.72M]
  ------------------
  218|  2.20M|                return chunk_begin + idx_buf[i];
  219|  2.20M|            }
  220|  3.92M|        }
  221|  2.21M|    }
  222|       |
  223|  6.07k|    return it;
  224|  2.21M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  3.92M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.61M|{
  459|  2.61M|    auto it = read_code_unit(range);
  460|  2.61M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.17k, False: 2.61M]
  |  |  ------------------
  ------------------
  461|  3.17k|        return unexpected(make_eof_parse_error(it.error()));
  462|  3.17k|    }
  463|       |
  464|  4.83M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.83M, False: 1.91M]
  ------------------
  465|  4.83M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 695k, False: 4.13M]
  ------------------
  466|   695k|            return *it;
  467|   695k|        }
  468|  4.83M|    }
  469|       |
  470|  1.91M|    return unexpected(parse_error::error);
  471|  2.61M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.85M|{
  418|  5.85M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.85M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.85M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.85M|        if (ranges::size(range) < str.size()) {
  423|  5.85M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  5.85M|        }
  425|  5.85M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  5.85M|            return unexpected(parse_error::error);
  427|  5.85M|        }
  428|  5.85M|        return ranges::next(ranges::begin(range), str.size());
  429|  5.85M|    }
  430|  5.85M|    else {
  431|  5.85M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.85M|            if (ch < 'A' || ch > 'Z') {
  433|  5.85M|                return ch;
  434|  5.85M|            }
  435|  5.85M|            return static_cast<char_type>(ch +
  436|  5.85M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.85M|        };
  438|       |
  439|  5.85M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  5.85M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.85M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.85M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88.1k, False: 5.76M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  88.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  88.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  88.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  88.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  88.1k|    }                                                  \
  |  |  |  |   70|  5.85M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  5.76M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.76M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  5.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.55M, False: 202k]
  |  |  ------------------
  ------------------
  443|  5.76M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.76M|                    return ascii_tolower(a) ==
  445|  5.76M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.76M|                }))) {
  447|  5.55M|            return unexpected(parse_error::error);
  448|  5.55M|        }
  449|       |
  450|   202k|        return it;
  451|  5.76M|    }
  452|  5.85M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  6.67M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.67M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 5.80M, False: 877k]
  |  Branch (432:29): [True: 750k, False: 127k]
  ------------------
  433|  6.55M|                return ch;
  434|  6.55M|            }
  435|   127k|            return static_cast<char_type>(ch +
  436|   127k|                                          static_cast<char_type>('a' - 'A'));
  437|  6.67M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  36.5k|{
  418|  36.5k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  36.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  36.5k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  36.5k|        if (ranges::size(range) < str.size()) {
  423|  36.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  36.5k|        }
  425|  36.5k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  36.5k|            return unexpected(parse_error::error);
  427|  36.5k|        }
  428|  36.5k|        return ranges::next(ranges::begin(range), str.size());
  429|  36.5k|    }
  430|  36.5k|    else {
  431|  36.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  36.5k|            if (ch < 'A' || ch > 'Z') {
  433|  36.5k|                return ch;
  434|  36.5k|            }
  435|  36.5k|            return static_cast<char_type>(ch +
  436|  36.5k|                                          static_cast<char_type>('a' - 'A'));
  437|  36.5k|        };
  438|       |
  439|  36.5k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 537, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    537|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    537|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    537|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    537|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    537|    }                                                  \
  |  |  |  |   70|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  36.0k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  36.0k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.5k, False: 19.4k]
  |  |  ------------------
  ------------------
  443|  36.0k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  36.0k|                    return ascii_tolower(a) ==
  445|  36.0k|                           static_cast<detail::char_t<Range>>(b);
  446|  36.0k|                }))) {
  447|  16.5k|            return unexpected(parse_error::error);
  448|  16.5k|        }
  449|       |
  450|  19.4k|        return it;
  451|  36.0k|    }
  452|  36.5k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|   116k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   116k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 15.5k, False: 100k]
  |  Branch (432:29): [True: 100k, False: 420]
  ------------------
  433|   115k|                return ch;
  434|   115k|            }
  435|    420|            return static_cast<char_type>(ch +
  436|    420|                                          static_cast<char_type>('a' - 'A'));
  437|   116k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   632k|{
  332|   632k|    auto it = read_code_unit(range);
  333|   632k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.84k, False: 628k]
  |  |  ------------------
  ------------------
  334|  3.84k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.84k|    }
  336|       |
  337|   628k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 544k, False: 84.0k]
  |  |  ------------------
  ------------------
  338|   628k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   544k|        return unexpected(parse_error::error);
  340|   544k|    }
  341|       |
  342|  84.0k|    return *it;
  343|   628k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  7.23k|{
  139|  7.23k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  7.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  7.23k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  7.23k|{
  131|  7.23k|    return ranges::find_if(range, pred);
  132|  7.23k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.16M|{
  159|  1.16M|    auto it = read_while_code_unit(range, pred);
  160|  1.16M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 525k, False: 641k]
  ------------------
  161|   525k|        return unexpected(parse_error::error);
  162|   525k|    }
  163|   641k|    return it;
  164|  1.16M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.16M|{
  139|  1.16M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.16M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.16M|{
  131|  1.16M|    return ranges::find_if(range, pred);
  132|  1.16M|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|  1.05M|{
  231|  1.05M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  1.05M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  1.05M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  1.05M|    }
  235|  1.05M|    else {
  236|  1.05M|        auto it = ranges::begin(range);
  237|  1.05M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  1.05M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  1.05M|            seg_it != seg.end()) {
  241|  1.05M|            return ranges_polyfill::batch_next(
  242|  1.05M|                it, ranges::distance(seg.begin(), seg_it));
  243|  1.05M|        }
  244|       |
  245|  1.05M|        while (it != ranges::end(range)) {
  246|  1.05M|            const auto [iter, value] =
  247|  1.05M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.05M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.05M|            if (pred(cp)) {
  250|  1.05M|                return it;
  251|  1.05M|            }
  252|  1.05M|            it = iter;
  253|  1.05M|        }
  254|       |
  255|  1.05M|        return it;
  256|  1.05M|    }
  257|  1.05M|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|  1.05M|{
  178|  1.05M|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.05M|                  ranges::sized_range<Range>);
  180|       |
  181|  1.05M|    std::array<char32_t, 16> cp_buf{};
  182|  1.05M|    std::array<uint8_t, 16> idx_buf{};
  183|  1.05M|    auto it = ranges::begin(range);
  184|  3.33M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.02M, False: 308k]
  ------------------
  185|  3.02M|        auto chunk_begin = it;
  186|  3.02M|        size_t code_point_count = 0;
  187|  3.02M|        uint8_t code_unit_idx = 0;
  188|  47.6M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 44.9M, False: 2.68M]
  |  Branch (188:52): [True: 44.5M, False: 340k]
  ------------------
  189|  44.5M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 44.5M, False: 0]
  ------------------
  190|  44.5M|                idx_buf[code_point_count] = code_unit_idx;
  191|  44.5M|                ++code_point_count;
  192|  44.5M|            }
  193|  44.5M|            ++it;
  194|  44.5M|            ++code_unit_idx;
  195|  44.5M|        }
  196|       |
  197|  3.02M|        auto input = detail::make_string_view_from_pointers(
  198|  3.02M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.02M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.02M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.02M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  39.3M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 37.1M, False: 2.27M]
  ------------------
  217|  37.1M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 747k, False: 36.3M]
  ------------------
  218|   747k|                return chunk_begin + idx_buf[i];
  219|   747k|            }
  220|  37.1M|        }
  221|  3.02M|    }
  222|       |
  223|   308k|    return it;
  224|  1.05M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   340k|{
  178|   340k|    static_assert(ranges::contiguous_range<Range> &&
  179|   340k|                  ranges::sized_range<Range>);
  180|       |
  181|   340k|    std::array<char32_t, 16> cp_buf{};
  182|   340k|    std::array<uint8_t, 16> idx_buf{};
  183|   340k|    auto it = ranges::begin(range);
  184|   524k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 340k, False: 184k]
  ------------------
  185|   340k|        auto chunk_begin = it;
  186|   340k|        size_t code_point_count = 0;
  187|   340k|        uint8_t code_unit_idx = 0;
  188|   680k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 680k, False: 0]
  |  Branch (188:52): [True: 340k, False: 340k]
  ------------------
  189|   340k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 340k, False: 0]
  ------------------
  190|   340k|                idx_buf[code_point_count] = code_unit_idx;
  191|   340k|                ++code_point_count;
  192|   340k|            }
  193|   340k|            ++it;
  194|   340k|            ++code_unit_idx;
  195|   340k|        }
  196|       |
  197|   340k|        auto input = detail::make_string_view_from_pointers(
  198|   340k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   340k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   340k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   340k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 340k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   524k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 340k, False: 184k]
  ------------------
  217|   340k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 155k, False: 184k]
  ------------------
  218|   155k|                return chunk_begin + idx_buf[i];
  219|   155k|            }
  220|   340k|        }
  221|   340k|    }
  222|       |
  223|   184k|    return it;
  224|   340k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   340k|{
  300|   340k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   340k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   340k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   340k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   340k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   340k|        return ranges::next(ranges::begin(range),
  306|   340k|                            ranges::distance(buf.view().begin(), it));
  307|   340k|    }
  308|   340k|    else {
  309|   340k|        auto it = ranges::begin(range);
  310|       |
  311|   340k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   340k|            auto seg = get_contiguous_beginning(range);
  313|   340k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   340k|                seg_it != seg.end()) {
  315|   340k|                return ranges_polyfill::batch_next(
  316|   340k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   340k|            }
  318|   340k|            ranges_polyfill::batch_next(it, seg.size());
  319|   340k|        }
  320|       |
  321|   340k|        return read_while_code_point(
  322|   340k|            SCN_FWD(range),
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   340k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   340k|    }
  325|   340k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   340k|{
  264|   340k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   340k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   340k|{
  231|   340k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   340k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   340k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   340k|    }
  235|   340k|    else {
  236|   340k|        auto it = ranges::begin(range);
  237|   340k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   340k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   340k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 155k, False: 184k]
  ------------------
  241|   155k|            return ranges_polyfill::batch_next(
  242|   155k|                it, ranges::distance(seg.begin(), seg_it));
  243|   155k|        }
  244|       |
  245|  1.10M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 1.10M, False: 195]
  ------------------
  246|  1.10M|            const auto [iter, value] =
  247|  1.10M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.10M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.10M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 184k, False: 921k]
  ------------------
  250|   184k|                return it;
  251|   184k|            }
  252|   921k|            it = iter;
  253|   921k|        }
  254|       |
  255|    195|        return it;
  256|   184k|    }
  257|   340k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  1.10M|{
   42|  1.10M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  1.10M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  1.10M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  1.10M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 1.10M, False: 0]
  ------------------
   59|  1.10M|        ++it;
   60|  1.10M|        return {it, make_contiguous_buffer(
   61|  1.10M|                        ranges::subrange{ranges::begin(range), it})};
   62|  1.10M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  1.10M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  1.44M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   495k|{
  459|   495k|    auto it = read_code_unit(range);
  460|   495k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132, False: 495k]
  |  |  ------------------
  ------------------
  461|    132|        return unexpected(make_eof_parse_error(it.error()));
  462|    132|    }
  463|       |
  464|   835k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 835k, False: 339k]
  ------------------
  465|   835k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 155k, False: 679k]
  ------------------
  466|   155k|            return *it;
  467|   155k|        }
  468|   835k|    }
  469|       |
  470|   339k|    return unexpected(parse_error::error);
  471|   495k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   878k|{
  418|   878k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   878k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   878k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   878k|        if (ranges::size(range) < str.size()) {
  423|   878k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   878k|        }
  425|   878k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   878k|            return unexpected(parse_error::error);
  427|   878k|        }
  428|   878k|        return ranges::next(ranges::begin(range), str.size());
  429|   878k|    }
  430|   878k|    else {
  431|   878k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   878k|            if (ch < 'A' || ch > 'Z') {
  433|   878k|                return ch;
  434|   878k|            }
  435|   878k|            return static_cast<char_type>(ch +
  436|   878k|                                          static_cast<char_type>('a' - 'A'));
  437|   878k|        };
  438|       |
  439|   878k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   878k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   878k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   878k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 417, False: 877k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    417|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    417|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    417|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    417|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    417|    }                                                  \
  |  |  |  |   70|   878k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   877k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   877k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 877k, False: 0]
  |  |  ------------------
  ------------------
  443|   877k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   877k|                    return ascii_tolower(a) ==
  445|   877k|                           static_cast<detail::char_t<Range>>(b);
  446|   877k|                }))) {
  447|   877k|            return unexpected(parse_error::error);
  448|   877k|        }
  449|       |
  450|      0|        return it;
  451|   877k|    }
  452|   878k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   977k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   977k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 977k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   977k|                return ch;
  434|   977k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   977k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   524k|{
  139|   524k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   524k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   524k|{
  131|   524k|    return ranges::find_if(range, pred);
  132|   524k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|   184k|{
  332|   184k|    auto it = read_code_unit(range);
  333|   184k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 184k]
  |  |  ------------------
  ------------------
  334|    156|        return unexpected(make_eof_parse_error(it.error()));
  335|    156|    }
  336|       |
  337|   184k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 184k, False: 0]
  |  |  ------------------
  ------------------
  338|   184k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   184k|        return unexpected(parse_error::error);
  340|   184k|    }
  341|       |
  342|      0|    return *it;
  343|   184k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   524k|{
  159|   524k|    auto it = read_while_code_unit(range, pred);
  160|   524k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 339k, False: 184k]
  ------------------
  161|   339k|        return unexpected(parse_error::error);
  162|   339k|    }
  163|   184k|    return it;
  164|   524k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.13M|{
  270|  1.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.13M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.13M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.13M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  1.13M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.13M|        return ranges::next(ranges::begin(range),
  276|  1.13M|                            ranges::distance(buf.view().begin(), it));
  277|  1.13M|    }
  278|  1.13M|    else {
  279|  1.13M|        auto it = ranges::begin(range);
  280|       |
  281|  1.13M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  1.13M|            auto seg = get_contiguous_beginning(range);
  283|  1.13M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.13M|                seg_it != seg.end()) {
  285|  1.13M|                return ranges_polyfill::batch_next(
  286|  1.13M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.13M|            }
  288|  1.13M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.13M|        }
  290|       |
  291|  1.13M|        return read_until_code_point(
  292|  1.13M|            ranges::subrange{it, ranges::end(range)},
  293|  1.13M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.13M|    }
  295|  1.13M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.05M|{
  270|  1.05M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.05M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.05M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.05M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  1.05M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.05M|        return ranges::next(ranges::begin(range),
  276|  1.05M|                            ranges::distance(buf.view().begin(), it));
  277|  1.05M|    }
  278|  1.05M|    else {
  279|  1.05M|        auto it = ranges::begin(range);
  280|       |
  281|  1.05M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  1.05M|            auto seg = get_contiguous_beginning(range);
  283|  1.05M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.05M|                seg_it != seg.end()) {
  285|  1.05M|                return ranges_polyfill::batch_next(
  286|  1.05M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.05M|            }
  288|  1.05M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.05M|        }
  290|       |
  291|  1.05M|        return read_until_code_point(
  292|  1.05M|            ranges::subrange{it, ranges::end(range)},
  293|  1.05M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.05M|    }
  295|  1.05M|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  37.1M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.60M|{
   36|  3.60M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.79k, False: 3.60M]
  |  |  ------------------
  ------------------
   37|  6.79k|        return unexpected(e);
   38|  6.79k|    }
   39|       |
   40|  3.60M|    return ranges::next(ranges::begin(range));
   41|  3.60M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.64M|{
   30|  1.64M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.64M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   102k|{
   36|   102k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   102k|    return ranges::next(ranges::begin(range));
   41|   102k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   260k|{
   48|   260k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   260k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   260k|        const auto sz = ranges::ssize(range);
   52|   260k|        if (sz < count) {
   53|   260k|            return unexpected(eof_error::eof);
   54|   260k|        }
   55|       |
   56|   260k|        return ranges::next(ranges::begin(range), count);
   57|   260k|    }
   58|   260k|    else {
   59|   260k|        auto it = ranges::begin(range);
   60|   260k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 157k, False: 102k]
  ------------------
   61|   157k|            return ranges_polyfill::batch_next(it, count);
   62|   157k|        }
   63|       |
   64|   410k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 307k, False: 102k]
  ------------------
   65|   307k|             ++i, (void)++it) {
   66|   307k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 307k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   307k|        }
   70|       |
   71|   102k|        return it;
   72|   102k|    }
   73|   260k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.24M|{
   36|  3.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.02k, False: 3.24M]
  |  |  ------------------
  ------------------
   37|  7.02k|        return unexpected(e);
   38|  7.02k|    }
   39|       |
   40|  3.24M|    return ranges::next(ranges::begin(range));
   41|  3.24M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  5.88M|{
   48|  5.88M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  5.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  5.88M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  5.88M|        const auto sz = ranges::ssize(range);
   52|  5.88M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 88.7k, False: 5.79M]
  ------------------
   53|  88.7k|            return unexpected(eof_error::eof);
   54|  88.7k|        }
   55|       |
   56|  5.79M|        return ranges::next(ranges::begin(range), count);
   57|  5.88M|    }
   58|  5.88M|    else {
   59|  5.88M|        auto it = ranges::begin(range);
   60|  5.88M|        if (guaranteed_minimum_size(range) >= count) {
   61|  5.88M|            return ranges_polyfill::batch_next(it, count);
   62|  5.88M|        }
   63|       |
   64|  5.88M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  5.88M|             ++i, (void)++it) {
   66|  5.88M|            if (it == ranges::end(range)) {
   67|  5.88M|                return unexpected(eof_error::eof);
   68|  5.88M|            }
   69|  5.88M|        }
   70|       |
   71|  5.88M|        return it;
   72|  5.88M|    }
   73|  5.88M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.47M|{
   30|  1.47M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.47M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   680k|{
   36|   680k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 288, False: 679k]
  |  |  ------------------
  ------------------
   37|    288|        return unexpected(e);
   38|    288|    }
   39|       |
   40|   679k|    return ranges::next(ranges::begin(range));
   41|   680k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   878k|{
   48|   878k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   878k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   878k|        const auto sz = ranges::ssize(range);
   52|   878k|        if (sz < count) {
   53|   878k|            return unexpected(eof_error::eof);
   54|   878k|        }
   55|       |
   56|   878k|        return ranges::next(ranges::begin(range), count);
   57|   878k|    }
   58|   878k|    else {
   59|   878k|        auto it = ranges::begin(range);
   60|   878k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 538k, False: 340k]
  ------------------
   61|   538k|            return ranges_polyfill::batch_next(it, count);
   62|   538k|        }
   63|       |
   64|  1.36M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 1.02M, False: 339k]
  ------------------
   65|  1.02M|             ++i, (void)++it) {
   66|  1.02M|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 417, False: 1.01M]
  ------------------
   67|    417|                return unexpected(eof_error::eof);
   68|    417|            }
   69|  1.02M|        }
   70|       |
   71|   339k|        return it;
   72|   340k|    }
   73|   878k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.30M|{
   33|  2.30M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.30M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   999k|{
   39|   999k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   999k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 499k, False: 499k]
  ------------------
   41|   999k|                    : std::locale{};
   42|   999k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   504k|    {
  112|   504k|        auto stdloc = loc.get<std::locale>();
  113|   504k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   504k|        grouping = numpunct.grouping();
  115|   504k|        thousands_sep =
  116|   504k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 504k]
  ------------------
  117|   504k|        decimal_point = numpunct.decimal_point();
  118|   504k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   504k|{
   49|   504k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 504k, False: 0]
  ------------------
   50|   504k|        return std::use_facet<Facet>(stdloc);
   51|   504k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   504k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  2.52M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  2.18M|    {
   89|  2.18M|        std::setlocale(cat, "C");
   90|  2.18M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  2.18M|    {
   60|  2.18M|        const auto loc = std::setlocale(cat, nullptr);
   61|  2.18M|        std::strcpy(m_locbuf, loc);
   62|  2.18M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  2.18M|    {
   65|       |        // Restore locale to what it was before
   66|  2.18M|        std::setlocale(m_category, m_locbuf);
   67|  2.18M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   495k|    {
  112|   495k|        auto stdloc = loc.get<std::locale>();
  113|   495k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   495k|        grouping = numpunct.grouping();
  115|   495k|        thousands_sep =
  116|   495k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 495k]
  ------------------
  117|   495k|        decimal_point = numpunct.decimal_point();
  118|   495k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   495k|{
   49|   495k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 495k, False: 0]
  ------------------
   50|   495k|        return std::use_facet<Facet>(stdloc);
   51|   495k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   495k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  2.54M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.42M|{
   46|  2.42M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.42M, False: 0]
  ------------------
   47|  2.42M|        auto it = read_while_classic_space(range);
   48|  2.42M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.42M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.57k, False: 2.42M]
  |  |  ------------------
  ------------------
   50|  4.57k|            return unexpected(e);
   51|  4.57k|        }
   52|       |
   53|  2.42M|        return it;
   54|  2.42M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.42M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  2.55M|    {
  126|  2.55M|        return true;
  127|  2.55M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   102k|{
   46|   102k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 102k, False: 0]
  ------------------
   47|   102k|        auto it = read_while_classic_space(range);
   48|   102k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   102k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   102k|        return it;
   54|   102k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   102k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  3.60M|    {
   35|  3.60M|        return m_msg == nullptr;
   36|  3.60M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.78M|    {
  131|  1.78M|        reader_error_handler eh{};
  132|  1.78M|        get_derived().check_specs_impl(specs, eh);
  133|  1.78M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.78M|        return {};
  137|  1.78M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  1.78M|    {
  142|  1.78M|        return static_cast<Derived&>(*this);
  143|  1.78M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.21M|{
   46|  2.21M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.21M, False: 0]
  ------------------
   47|  2.21M|        auto it = read_while_classic_space(range);
   48|  2.21M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.21M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.07k, False: 2.20M]
  |  |  ------------------
  ------------------
   50|  6.07k|            return unexpected(e);
   51|  6.07k|        }
   52|       |
   53|  2.20M|        return it;
   54|  2.21M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.21M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  2.57M|    {
  126|  2.57M|        return true;
  127|  2.57M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.82M|    {
  131|  1.82M|        reader_error_handler eh{};
  132|  1.82M|        get_derived().check_specs_impl(specs, eh);
  133|  1.82M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.82M|        return {};
  137|  1.82M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  1.82M|    {
  142|  1.82M|        return static_cast<Derived&>(*this);
  143|  1.82M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   340k|{
   46|   340k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 340k, False: 0]
  ------------------
   47|   340k|        auto it = read_while_classic_space(range);
   48|   340k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   340k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 195, False: 339k]
  |  |  ------------------
  ------------------
   50|    195|            return unexpected(e);
   51|    195|        }
   52|       |
   53|   339k|        return it;
   54|   340k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   340k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   735k|{
  640|   735k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   735k|                                  m_nan_payload_buffer, value);
  642|   735k|    value = this->setsign(value);
  643|   735k|    return n;
  644|   735k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   710k|{
  640|   710k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   710k|                                  m_nan_payload_buffer, value);
  642|   710k|    value = this->setsign(value);
  643|   710k|    return n;
  644|   710k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   819k|{
  640|   819k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   819k|                                  m_nan_payload_buffer, value);
  642|   819k|    value = this->setsign(value);
  643|   819k|    return n;
  644|   819k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   781k|{
  640|   781k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   781k|                                  m_nan_payload_buffer, value);
  642|   781k|    value = this->setsign(value);
  643|   781k|    return n;
  644|   781k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   829k|{
  640|   829k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   829k|                                  m_nan_payload_buffer, value);
  642|   829k|    value = this->setsign(value);
  643|   829k|    return n;
  644|   829k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   790k|{
  640|   790k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   790k|                                  m_nan_payload_buffer, value);
  642|   790k|    value = this->setsign(value);
  643|   790k|    return n;
  644|   790k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   735k|{
  557|   735k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.48k, False: 729k]
  ------------------
  558|  6.48k|        value = std::numeric_limits<T>::infinity();
  559|  6.48k|        return 3;
  560|  6.48k|    }
  561|   729k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.71k, False: 722k]
  ------------------
  562|  6.71k|        value = std::numeric_limits<T>::infinity();
  563|  6.71k|        return 8;
  564|  6.71k|    }
  565|   722k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 32.1k, False: 690k]
  ------------------
  566|  32.1k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  32.1k|        return 3;
  568|  32.1k|    }
  569|   690k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.88k, False: 688k]
  ------------------
  570|  1.88k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.88k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.88k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.88k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.88k|    }
  601|       |
  602|   688k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   688k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   688k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   688k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 152k, False: 535k]
  ------------------
  604|   152k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.28k, False: 150k]
  |  |  ------------------
  ------------------
  605|  2.28k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.28k|                                         "Invalid floating-point digit");
  607|  2.28k|        }
  608|   152k|    }
  609|   686k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.28k, False: 680k]
  |  |  ------------------
  ------------------
  610|  6.28k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  6.28k|                                     "Invalid floating-point digit");
  612|  6.28k|    }
  613|       |
  614|   680k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   680k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   680k|            double tmp{};
  619|   680k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   680k|            value = tmp;
  621|   680k|            return ret;
  622|   680k|        }
  623|   680k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   680k|            return fast_float_fallback(data, value);
  627|   680k|        }
  628|   680k|    }
  629|   680k|    else {
  630|       |        // Default to fast_float
  631|   680k|        return fast_float_impl<CharT, T>{data}(value);
  632|   680k|    }
  633|   680k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  496|   680k|    {
  497|   680k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  130|  2.57M|    {
  131|  2.57M|        return {kind, options};
  132|  2.57M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  500|   680k|    {
  501|   680k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 150k, False: 529k]
  ------------------
  502|   680k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 19.2k, False: 510k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   169k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   169k|                                              value);
  506|   169k|        }
  507|       |
  508|   510k|        const auto flags = get_flags();
  509|   510k|        const auto view = get_view();
  510|   510k|        const auto result = fast_float::from_chars(
  511|   510k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   510k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   510k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.48k, False: 505k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  4.48k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  4.48k|                                              value);
  521|  4.48k|        }
  522|       |
  523|   505k|        return result.ptr - view.data();
  524|   510k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   174k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   174k|    {
  467|   174k|#if !SCN_DISABLE_STRTOD
  468|   174k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   174k|    }
  475|   174k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  312|   174k|    {
  313|   174k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  144|   336k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  316|   174k|    {
  317|   174k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   174k|                           generic_strtod);
  319|   174k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   174k|    {
  151|   174k|        CharT* end{};
  152|   174k|        errno = 0;
  153|   174k|        value = strtod_cb(src, &end);
  154|   174k|        const auto saved_errno = errno;
  155|   174k|        auto chars_read = end - src;
  156|       |
  157|   174k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   174k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.30k, False: 168k]
  |  |  ------------------
  ------------------
  159|  5.30k|            return unexpected(e);
  160|  5.30k|        }
  161|       |
  162|   168k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 149k, False: 19.0k]
  ------------------
  163|   168k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 149k, False: 0]
  ------------------
  164|   149k|            chars_read -= 2;
  165|   149k|        }
  166|       |
  167|   168k|        return chars_read;
  168|   174k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  196|   336k|    {
  197|   336k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 83.8k, False: 252k]
  |  Branch (197:37): [True: 0, False: 83.8k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   336k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 35.3k, False: 300k]
  ------------------
  204|   336k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 35.3k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   336k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 9.65k, False: 326k]
  |  Branch (210:34): [True: 1.51k, False: 8.13k]
  ------------------
  211|  1.51k|            SCN_UNLIKELY_ATTR
  212|  1.51k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|  1.51k|        }
  214|       |
  215|   334k|        SCN_GCC_COMPAT_PUSH
  216|   334k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   334k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 334k, False: 0]
  ------------------
  219|   334k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 334k, False: 0]
  ------------------
  220|   334k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 8.13k, False: 326k]
  ------------------
  221|  8.13k|            SCN_UNLIKELY_ATTR
  222|  8.13k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  8.13k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   326k|            return {};
  228|   334k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  105|   346k|{
  106|   346k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (106:12): [True: 85.3k, False: 260k]
  |  Branch (106:25): [True: 0, False: 260k]
  ------------------
  107|   346k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   174k|    {
  174|   174k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 174k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   174k|            auto first_space = read_until_classic_space(input.view());
  177|   174k|            input.assign(
  178|   174k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   174k|        }
  180|       |
  181|   174k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 150k, False: 23.7k]
  ------------------
  182|   150k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   150k|                input.get_allocated_string().insert(0, "0x");
  184|   150k|            }
  185|   150k|            else {
  186|   150k|                input.get_allocated_string().insert(0, L"0x");
  187|   150k|            }
  188|   150k|        }
  189|       |
  190|   174k|        return input.get_allocated_string().c_str();
  191|   174k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  323|   174k|    {
  324|   174k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   174k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   174k|        }
  327|   174k|        else {
  328|   174k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   174k|        }
  330|   174k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  231|   174k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   174k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   174k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   174k|            return std::strtof(str, str_end);
  258|   174k|        }
  259|   174k|        else if constexpr (std::is_same_v<T, double>) {
  260|   174k|            return std::strtod(str, str_end);
  261|   174k|        }
  262|   174k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   174k|            return std::strtold(str, str_end);
  264|   174k|        }
  265|   174k|#endif
  266|   174k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  479|  2.09M|    {
  480|  2.09M|        unsigned format_flags{};
  481|  2.09M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (481:13): [True: 2.08M, False: 12.3k]
  ------------------
  482|  2.08M|            format_flags |= fast_float::fixed;
  483|  2.08M|        }
  484|  2.09M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (484:13): [True: 1.83M, False: 265k]
  ------------------
  485|  1.83M|            format_flags |= fast_float::scientific;
  486|  1.83M|        }
  487|       |
  488|  2.09M|        return static_cast<fast_float::chars_format>(format_flags);
  489|  2.09M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  528|   510k|    {
  529|   510k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   510k|            return m_input.view();
  531|   510k|        }
  532|   510k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   510k|            return std::u16string_view{
  534|   510k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   510k|                m_input.view().size()};
  536|   510k|        }
  537|   510k|        else {
  538|   510k|            return std::u32string_view{
  539|   510k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   510k|                m_input.view().size()};
  541|   510k|        }
  542|   510k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   710k|{
  557|   710k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.03k, False: 705k]
  ------------------
  558|  5.03k|        value = std::numeric_limits<T>::infinity();
  559|  5.03k|        return 3;
  560|  5.03k|    }
  561|   705k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.21k, False: 699k]
  ------------------
  562|  6.21k|        value = std::numeric_limits<T>::infinity();
  563|  6.21k|        return 8;
  564|  6.21k|    }
  565|   699k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 31.1k, False: 668k]
  ------------------
  566|  31.1k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  31.1k|        return 3;
  568|  31.1k|    }
  569|   668k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.87k, False: 666k]
  ------------------
  570|  1.87k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.87k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.87k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.87k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.87k|    }
  601|       |
  602|   666k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   666k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 148k, False: 517k]
  ------------------
  604|   148k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.52k, False: 142k]
  |  |  ------------------
  ------------------
  605|  6.52k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.52k|                                         "Invalid floating-point digit");
  607|  6.52k|        }
  608|   148k|    }
  609|   659k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   659k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.0k, False: 642k]
  |  |  ------------------
  ------------------
  610|  17.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.0k|                                     "Invalid floating-point digit");
  612|  17.0k|    }
  613|       |
  614|   642k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   642k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   642k|            double tmp{};
  619|   642k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   642k|            value = tmp;
  621|   642k|            return ret;
  622|   642k|        }
  623|   642k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   642k|            return fast_float_fallback(data, value);
  627|   642k|        }
  628|   642k|    }
  629|   642k|    else {
  630|       |        // Default to fast_float
  631|   642k|        return fast_float_impl<CharT, T>{data}(value);
  632|   642k|    }
  633|   642k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  496|   642k|    {
  497|   642k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  130|  2.40M|    {
  131|  2.40M|        return {kind, options};
  132|  2.40M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  500|   642k|    {
  501|   642k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 142k, False: 500k]
  ------------------
  502|   642k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 16.1k, False: 484k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   158k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   158k|                                              value);
  506|   158k|        }
  507|       |
  508|   484k|        const auto flags = get_flags();
  509|   484k|        const auto view = get_view();
  510|   484k|        const auto result = fast_float::from_chars(
  511|   484k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   484k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 484k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   484k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.73k, False: 480k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  3.73k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  3.73k|                                              value);
  521|  3.73k|        }
  522|       |
  523|   480k|        return result.ptr - view.data();
  524|   484k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   162k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   162k|    {
  467|   162k|#if !SCN_DISABLE_STRTOD
  468|   162k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   162k|    }
  475|   162k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  312|   162k|    {
  313|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  316|   162k|    {
  317|   162k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   162k|                           generic_strtod);
  319|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   162k|    {
  151|   162k|        CharT* end{};
  152|   162k|        errno = 0;
  153|   162k|        value = strtod_cb(src, &end);
  154|   162k|        const auto saved_errno = errno;
  155|   162k|        auto chars_read = end - src;
  156|       |
  157|   162k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   162k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.34k, False: 157k]
  |  |  ------------------
  ------------------
  159|  4.34k|            return unexpected(e);
  160|  4.34k|        }
  161|       |
  162|   157k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 141k, False: 15.9k]
  ------------------
  163|   157k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 141k, False: 0]
  ------------------
  164|   141k|            chars_read -= 2;
  165|   141k|        }
  166|       |
  167|   157k|        return chars_read;
  168|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   162k|    {
  174|   162k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 162k, False: 8]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   162k|            auto first_space = read_until_classic_space(input.view());
  177|   162k|            input.assign(
  178|   162k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   162k|        }
  180|       |
  181|   162k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 142k, False: 19.9k]
  ------------------
  182|   142k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   142k|                input.get_allocated_string().insert(0, "0x");
  184|   142k|            }
  185|   142k|            else {
  186|   142k|                input.get_allocated_string().insert(0, L"0x");
  187|   142k|            }
  188|   142k|        }
  189|       |
  190|   162k|        return input.get_allocated_string().c_str();
  191|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  323|   162k|    {
  324|   162k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   162k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   162k|        }
  327|   162k|        else {
  328|   162k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   162k|        }
  330|   162k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  269|   162k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   162k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   162k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   162k|            return std::wcstof(str, str_end);
  296|   162k|        }
  297|   162k|        else if constexpr (std::is_same_v<T, double>) {
  298|   162k|            return std::wcstod(str, str_end);
  299|   162k|        }
  300|   162k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   162k|            return std::wcstold(str, str_end);
  302|   162k|        }
  303|   162k|#endif
  304|   162k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  528|   484k|    {
  529|   484k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   484k|            return m_input.view();
  531|   484k|        }
  532|   484k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   484k|            return std::u16string_view{
  534|   484k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   484k|                m_input.view().size()};
  536|   484k|        }
  537|   484k|        else {
  538|   484k|            return std::u32string_view{
  539|   484k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   484k|                m_input.view().size()};
  541|   484k|        }
  542|   484k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   819k|{
  557|   819k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 7.45k, False: 811k]
  ------------------
  558|  7.45k|        value = std::numeric_limits<T>::infinity();
  559|  7.45k|        return 3;
  560|  7.45k|    }
  561|   811k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 7.07k, False: 804k]
  ------------------
  562|  7.07k|        value = std::numeric_limits<T>::infinity();
  563|  7.07k|        return 8;
  564|  7.07k|    }
  565|   804k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 34.4k, False: 770k]
  ------------------
  566|  34.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  34.4k|        return 3;
  568|  34.4k|    }
  569|   770k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.92k, False: 768k]
  ------------------
  570|  1.92k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.92k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.92k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.92k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.92k|    }
  601|       |
  602|   768k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   768k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   768k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   768k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 166k, False: 601k]
  ------------------
  604|   166k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.55k, False: 163k]
  |  |  ------------------
  ------------------
  605|  2.55k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.55k|                                         "Invalid floating-point digit");
  607|  2.55k|        }
  608|   166k|    }
  609|   765k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.24k, False: 758k]
  |  |  ------------------
  ------------------
  610|  7.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.24k|                                     "Invalid floating-point digit");
  612|  7.24k|    }
  613|       |
  614|   758k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   758k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   758k|            double tmp{};
  619|   758k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   758k|            value = tmp;
  621|   758k|            return ret;
  622|   758k|        }
  623|   758k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   758k|            return fast_float_fallback(data, value);
  627|   758k|        }
  628|   758k|    }
  629|   758k|    else {
  630|       |        // Default to fast_float
  631|   758k|        return fast_float_impl<CharT, T>{data}(value);
  632|   758k|    }
  633|   758k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  496|   758k|    {
  497|   758k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  500|   758k|    {
  501|   758k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 163k, False: 594k]
  ------------------
  502|   758k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 25.4k, False: 569k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   189k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   189k|                                              value);
  506|   189k|        }
  507|       |
  508|   569k|        const auto flags = get_flags();
  509|   569k|        const auto view = get_view();
  510|   569k|        const auto result = fast_float::from_chars(
  511|   569k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   569k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 569k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   569k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.21k, False: 567k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  2.21k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  2.21k|                                              value);
  521|  2.21k|        }
  522|       |
  523|   567k|        return result.ptr - view.data();
  524|   569k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   191k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   191k|    {
  467|   191k|#if !SCN_DISABLE_STRTOD
  468|   191k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   191k|    }
  475|   191k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  312|   191k|    {
  313|   191k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  144|   367k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  316|   191k|    {
  317|   191k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   191k|                           generic_strtod);
  319|   191k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   191k|    {
  151|   191k|        CharT* end{};
  152|   191k|        errno = 0;
  153|   191k|        value = strtod_cb(src, &end);
  154|   191k|        const auto saved_errno = errno;
  155|   191k|        auto chars_read = end - src;
  156|       |
  157|   191k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   191k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.46k, False: 188k]
  |  |  ------------------
  ------------------
  159|  2.46k|            return unexpected(e);
  160|  2.46k|        }
  161|       |
  162|   188k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 163k, False: 25.3k]
  ------------------
  163|   188k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 163k, False: 0]
  ------------------
  164|   163k|            chars_read -= 2;
  165|   163k|        }
  166|       |
  167|   188k|        return chars_read;
  168|   191k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  196|   367k|    {
  197|   367k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 89.1k, False: 278k]
  |  Branch (197:37): [True: 0, False: 89.1k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   367k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 47.4k, False: 320k]
  ------------------
  204|   367k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 47.4k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   367k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 4.59k, False: 362k]
  |  Branch (210:34): [True: 667, False: 3.92k]
  ------------------
  211|    667|            SCN_UNLIKELY_ATTR
  212|    667|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    667|        }
  214|       |
  215|   366k|        SCN_GCC_COMPAT_PUSH
  216|   366k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   366k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 366k, False: 0]
  ------------------
  219|   366k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 366k, False: 0]
  ------------------
  220|   366k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 3.92k, False: 362k]
  ------------------
  221|  3.92k|            SCN_UNLIKELY_ATTR
  222|  3.92k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  3.92k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   362k|            return {};
  228|   366k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  109|   372k|{
  110|   372k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (110:12): [True: 89.7k, False: 282k]
  |  Branch (110:24): [True: 0, False: 282k]
  ------------------
  111|   372k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   191k|    {
  174|   191k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 191k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   191k|            auto first_space = read_until_classic_space(input.view());
  177|   191k|            input.assign(
  178|   191k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   191k|        }
  180|       |
  181|   191k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 163k, False: 27.6k]
  ------------------
  182|   163k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   163k|                input.get_allocated_string().insert(0, "0x");
  184|   163k|            }
  185|   163k|            else {
  186|   163k|                input.get_allocated_string().insert(0, L"0x");
  187|   163k|            }
  188|   163k|        }
  189|       |
  190|   191k|        return input.get_allocated_string().c_str();
  191|   191k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  323|   191k|    {
  324|   191k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   191k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   191k|        }
  327|   191k|        else {
  328|   191k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   191k|        }
  330|   191k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  231|   191k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   191k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   191k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   191k|            return std::strtof(str, str_end);
  258|   191k|        }
  259|   191k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   191k|            return std::strtod(str, str_end);
  261|   191k|        }
  262|   191k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   191k|            return std::strtold(str, str_end);
  264|   191k|        }
  265|   191k|#endif
  266|   191k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  528|   569k|    {
  529|   569k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   569k|            return m_input.view();
  531|   569k|        }
  532|   569k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   569k|            return std::u16string_view{
  534|   569k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   569k|                m_input.view().size()};
  536|   569k|        }
  537|   569k|        else {
  538|   569k|            return std::u32string_view{
  539|   569k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   569k|                m_input.view().size()};
  541|   569k|        }
  542|   569k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   781k|{
  557|   781k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.91k, False: 775k]
  ------------------
  558|  5.91k|        value = std::numeric_limits<T>::infinity();
  559|  5.91k|        return 3;
  560|  5.91k|    }
  561|   775k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.57k, False: 768k]
  ------------------
  562|  6.57k|        value = std::numeric_limits<T>::infinity();
  563|  6.57k|        return 8;
  564|  6.57k|    }
  565|   768k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 33.3k, False: 735k]
  ------------------
  566|  33.3k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  33.3k|        return 3;
  568|  33.3k|    }
  569|   735k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.91k, False: 733k]
  ------------------
  570|  1.91k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.91k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.91k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.91k|    }
  601|       |
  602|   733k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   733k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   733k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   733k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 159k, False: 574k]
  ------------------
  604|   159k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.67k, False: 152k]
  |  |  ------------------
  ------------------
  605|  6.67k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.67k|                                         "Invalid floating-point digit");
  607|  6.67k|        }
  608|   159k|    }
  609|   726k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.6k, False: 709k]
  |  |  ------------------
  ------------------
  610|  17.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.6k|                                     "Invalid floating-point digit");
  612|  17.6k|    }
  613|       |
  614|   709k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   709k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   709k|            double tmp{};
  619|   709k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   709k|            value = tmp;
  621|   709k|            return ret;
  622|   709k|        }
  623|   709k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   709k|            return fast_float_fallback(data, value);
  627|   709k|        }
  628|   709k|    }
  629|   709k|    else {
  630|       |        // Default to fast_float
  631|   709k|        return fast_float_impl<CharT, T>{data}(value);
  632|   709k|    }
  633|   709k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  496|   709k|    {
  497|   709k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  500|   709k|    {
  501|   709k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 152k, False: 556k]
  ------------------
  502|   709k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 21.9k, False: 534k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   174k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   174k|                                              value);
  506|   174k|        }
  507|       |
  508|   534k|        const auto flags = get_flags();
  509|   534k|        const auto view = get_view();
  510|   534k|        const auto result = fast_float::from_chars(
  511|   534k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   534k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 534k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   534k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.94k, False: 532k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  1.94k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  1.94k|                                              value);
  521|  1.94k|        }
  522|       |
  523|   532k|        return result.ptr - view.data();
  524|   534k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   176k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   176k|    {
  467|   176k|#if !SCN_DISABLE_STRTOD
  468|   176k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   176k|    }
  475|   176k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  312|   176k|    {
  313|   176k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  316|   176k|    {
  317|   176k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   176k|                           generic_strtod);
  319|   176k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   176k|    {
  151|   176k|        CharT* end{};
  152|   176k|        errno = 0;
  153|   176k|        value = strtod_cb(src, &end);
  154|   176k|        const auto saved_errno = errno;
  155|   176k|        auto chars_read = end - src;
  156|       |
  157|   176k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   176k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.12k, False: 174k]
  |  |  ------------------
  ------------------
  159|  2.12k|            return unexpected(e);
  160|  2.12k|        }
  161|       |
  162|   174k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 152k, False: 21.9k]
  ------------------
  163|   174k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 152k, False: 0]
  ------------------
  164|   152k|            chars_read -= 2;
  165|   152k|        }
  166|       |
  167|   174k|        return chars_read;
  168|   176k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   176k|    {
  174|   176k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 176k, False: 8]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   176k|            auto first_space = read_until_classic_space(input.view());
  177|   176k|            input.assign(
  178|   176k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   176k|        }
  180|       |
  181|   176k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 152k, False: 23.9k]
  ------------------
  182|   152k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   152k|                input.get_allocated_string().insert(0, "0x");
  184|   152k|            }
  185|   152k|            else {
  186|   152k|                input.get_allocated_string().insert(0, L"0x");
  187|   152k|            }
  188|   152k|        }
  189|       |
  190|   176k|        return input.get_allocated_string().c_str();
  191|   176k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  323|   176k|    {
  324|   176k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   176k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   176k|        }
  327|   176k|        else {
  328|   176k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   176k|        }
  330|   176k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  269|   176k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   176k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   176k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   176k|            return std::wcstof(str, str_end);
  296|   176k|        }
  297|   176k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   176k|            return std::wcstod(str, str_end);
  299|   176k|        }
  300|   176k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   176k|            return std::wcstold(str, str_end);
  302|   176k|        }
  303|   176k|#endif
  304|   176k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  528|   534k|    {
  529|   534k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   534k|            return m_input.view();
  531|   534k|        }
  532|   534k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   534k|            return std::u16string_view{
  534|   534k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   534k|                m_input.view().size()};
  536|   534k|        }
  537|   534k|        else {
  538|   534k|            return std::u32string_view{
  539|   534k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   534k|                m_input.view().size()};
  541|   534k|        }
  542|   534k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   829k|{
  557|   829k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 7.71k, False: 821k]
  ------------------
  558|  7.71k|        value = std::numeric_limits<T>::infinity();
  559|  7.71k|        return 3;
  560|  7.71k|    }
  561|   821k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 7.17k, False: 814k]
  ------------------
  562|  7.17k|        value = std::numeric_limits<T>::infinity();
  563|  7.17k|        return 8;
  564|  7.17k|    }
  565|   814k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 34.6k, False: 780k]
  ------------------
  566|  34.6k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  34.6k|        return 3;
  568|  34.6k|    }
  569|   780k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.97k, False: 778k]
  ------------------
  570|  1.97k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.97k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.97k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.97k|    }
  601|       |
  602|   778k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   778k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   778k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   778k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 166k, False: 611k]
  ------------------
  604|   166k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.66k, False: 163k]
  |  |  ------------------
  ------------------
  605|  2.66k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.66k|                                         "Invalid floating-point digit");
  607|  2.66k|        }
  608|   166k|    }
  609|   775k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.85k, False: 767k]
  |  |  ------------------
  ------------------
  610|  7.85k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.85k|                                     "Invalid floating-point digit");
  612|  7.85k|    }
  613|       |
  614|   767k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   767k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   767k|            double tmp{};
  619|   767k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   767k|            value = tmp;
  621|   767k|            return ret;
  622|   767k|        }
  623|   767k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   767k|            return fast_float_fallback(data, value);
  627|   767k|        }
  628|   767k|    }
  629|   767k|    else {
  630|       |        // Default to fast_float
  631|   767k|        return fast_float_impl<CharT, T>{data}(value);
  632|   767k|    }
  633|   767k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   767k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   767k|    {
  467|   767k|#if !SCN_DISABLE_STRTOD
  468|   767k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   767k|    }
  475|   767k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  312|   767k|    {
  313|   767k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  144|  1.48M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  316|   767k|    {
  317|   767k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   767k|                           generic_strtod);
  319|   767k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   767k|    {
  151|   767k|        CharT* end{};
  152|   767k|        errno = 0;
  153|   767k|        value = strtod_cb(src, &end);
  154|   767k|        const auto saved_errno = errno;
  155|   767k|        auto chars_read = end - src;
  156|       |
  157|   767k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   767k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 814, False: 766k]
  |  |  ------------------
  ------------------
  159|    814|            return unexpected(e);
  160|    814|        }
  161|       |
  162|   766k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 163k, False: 603k]
  ------------------
  163|   766k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 163k, False: 0]
  ------------------
  164|   163k|            chars_read -= 2;
  165|   163k|        }
  166|       |
  167|   766k|        return chars_read;
  168|   767k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  196|  1.48M|    {
  197|  1.48M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 385k, False: 1.09M]
  |  Branch (197:37): [True: 0, False: 385k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|  1.48M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 47.4k, False: 1.43M]
  ------------------
  204|  1.48M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 47.4k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|  1.48M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 1.53k, False: 1.48M]
  |  Branch (210:34): [True: 197, False: 1.34k]
  ------------------
  211|    197|            SCN_UNLIKELY_ATTR
  212|    197|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    197|        }
  214|       |
  215|  1.48M|        SCN_GCC_COMPAT_PUSH
  216|  1.48M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|  1.48M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 1.48M, False: 0]
  ------------------
  219|  1.48M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 1.48M, False: 0]
  ------------------
  220|  1.48M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 1.29k, False: 1.48M]
  ------------------
  221|  1.29k|            SCN_UNLIKELY_ATTR
  222|  1.29k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  1.29k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|  1.48M|            return {};
  228|  1.48M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  113|  1.48M|{
  114|  1.48M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (114:12): [True: 386k, False: 1.10M]
  |  Branch (114:26): [True: 0, False: 1.10M]
  ------------------
  115|  1.48M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   767k|    {
  174|   767k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 767k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   767k|            auto first_space = read_until_classic_space(input.view());
  177|   767k|            input.assign(
  178|   767k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   767k|        }
  180|       |
  181|   767k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 163k, False: 603k]
  ------------------
  182|   163k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   163k|                input.get_allocated_string().insert(0, "0x");
  184|   163k|            }
  185|   163k|            else {
  186|   163k|                input.get_allocated_string().insert(0, L"0x");
  187|   163k|            }
  188|   163k|        }
  189|       |
  190|   767k|        return input.get_allocated_string().c_str();
  191|   767k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  323|   767k|    {
  324|   767k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   767k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   767k|        }
  327|   767k|        else {
  328|   767k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   767k|        }
  330|   767k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  231|   767k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   767k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   767k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   767k|            return std::strtof(str, str_end);
  258|   767k|        }
  259|   767k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   767k|            return std::strtod(str, str_end);
  261|   767k|        }
  262|   767k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (262:28): [Folded - Ignored]
  ------------------
  263|   767k|            return std::strtold(str, str_end);
  264|   767k|        }
  265|   767k|#endif
  266|   767k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   790k|{
  557|   790k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.18k, False: 784k]
  ------------------
  558|  6.18k|        value = std::numeric_limits<T>::infinity();
  559|  6.18k|        return 3;
  560|  6.18k|    }
  561|   784k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.66k, False: 777k]
  ------------------
  562|  6.66k|        value = std::numeric_limits<T>::infinity();
  563|  6.66k|        return 8;
  564|  6.66k|    }
  565|   777k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 33.4k, False: 744k]
  ------------------
  566|  33.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  33.4k|        return 3;
  568|  33.4k|    }
  569|   744k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.96k, False: 742k]
  ------------------
  570|  1.96k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.96k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.96k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.96k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.96k|    }
  601|       |
  602|   742k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   742k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 159k, False: 583k]
  ------------------
  604|   159k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.71k, False: 152k]
  |  |  ------------------
  ------------------
  605|  6.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.71k|                                         "Invalid floating-point digit");
  607|  6.71k|        }
  608|   159k|    }
  609|   735k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.1k, False: 717k]
  |  |  ------------------
  ------------------
  610|  18.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  18.1k|                                     "Invalid floating-point digit");
  612|  18.1k|    }
  613|       |
  614|   717k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   717k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   717k|            double tmp{};
  619|   717k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   717k|            value = tmp;
  621|   717k|            return ret;
  622|   717k|        }
  623|   717k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   717k|            return fast_float_fallback(data, value);
  627|   717k|        }
  628|   717k|    }
  629|   717k|    else {
  630|       |        // Default to fast_float
  631|   717k|        return fast_float_impl<CharT, T>{data}(value);
  632|   717k|    }
  633|   717k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   717k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   717k|    {
  467|   717k|#if !SCN_DISABLE_STRTOD
  468|   717k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   717k|    }
  475|   717k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  312|   717k|    {
  313|   717k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  316|   717k|    {
  317|   717k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   717k|                           generic_strtod);
  319|   717k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   717k|    {
  151|   717k|        CharT* end{};
  152|   717k|        errno = 0;
  153|   717k|        value = strtod_cb(src, &end);
  154|   717k|        const auto saved_errno = errno;
  155|   717k|        auto chars_read = end - src;
  156|       |
  157|   717k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   717k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 682, False: 716k]
  |  |  ------------------
  ------------------
  159|    682|            return unexpected(e);
  160|    682|        }
  161|       |
  162|   716k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 152k, False: 564k]
  ------------------
  163|   716k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 152k, False: 0]
  ------------------
  164|   152k|            chars_read -= 2;
  165|   152k|        }
  166|       |
  167|   716k|        return chars_read;
  168|   717k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   717k|    {
  174|   717k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 717k, False: 44]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   717k|            auto first_space = read_until_classic_space(input.view());
  177|   717k|            input.assign(
  178|   717k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   717k|        }
  180|       |
  181|   717k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 152k, False: 565k]
  ------------------
  182|   152k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   152k|                input.get_allocated_string().insert(0, "0x");
  184|   152k|            }
  185|   152k|            else {
  186|   152k|                input.get_allocated_string().insert(0, L"0x");
  187|   152k|            }
  188|   152k|        }
  189|       |
  190|   717k|        return input.get_allocated_string().c_str();
  191|   717k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  323|   717k|    {
  324|   717k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   717k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   717k|        }
  327|   717k|        else {
  328|   717k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   717k|        }
  330|   717k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  269|   717k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   717k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   717k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   717k|            return std::wcstof(str, str_end);
  296|   717k|        }
  297|   717k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   717k|            return std::wcstod(str, str_end);
  299|   717k|        }
  300|   717k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (300:28): [Folded - Ignored]
  ------------------
  301|   717k|            return std::wcstold(str, str_end);
  302|   717k|        }
  303|   717k|#endif
  304|   717k|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   222k|    {
  577|   222k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   222k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   222k|        float_reader<CharT> rd{};
  581|   222k|        return read_impl<range_nocvref_t>(
  582|   222k|            range, rd,
  583|   222k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   222k|                return r.read_source(SCN_FWD(args)...);
  585|   222k|            },
  586|   222k|            value);
  587|   222k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|   756k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  1.49M|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   748k|    {
  633|   748k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   748k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.8k, False: 735k]
  |  |  ------------------
  ------------------
  635|  12.8k|            return unexpected(r.error());
  636|  12.8k|        }
  637|       |
  638|   735k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   735k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   735k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   735k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|   735k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   722k|        return ranges::next(ranges::begin(range), n);
  640|   735k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   735k|    {
   98|   735k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   735k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 213k, False: 522k]
  ------------------
  102|       |
  103|   735k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   735k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   735k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   735k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.8k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.8k|    }                                                  \
  |  |  |  |   70|   735k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   722k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   735k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   222k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   222k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   222k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.93M|    {
   73|  1.93M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.93M|        return read_source_impl(range);
   79|  1.93M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.42M|    {
  112|  2.42M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.42M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.42M|        auto it = sign_result.first;
  115|  2.42M|        m_sign = sign_result.second;
  116|       |
  117|  2.42M|        auto digits_begin = it;
  118|  2.42M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.42M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.42M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.42M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  |  Branch (153:45): [True: 0, False: 2.42M]
  |  |  |  Branch (153:45): [True: 0, False: 2.42M]
  |  |  ------------------
  ------------------
  122|  2.42M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.42M|            else {
  133|  2.42M|                auto cb = [&](auto&& rr)
  134|  2.42M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.42M|                    auto res = read_all(rr);
  136|  2.42M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.42M|                        return unexpected_scan_error(
  138|  2.42M|                            scan_error::invalid_scanned_value,
  139|  2.42M|                            "Invalid float value");
  140|  2.42M|                    }
  141|  2.42M|                    return res;
  142|  2.42M|                };
  143|  2.42M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 39.9k, False: 2.38M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  39.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  39.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  39.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  39.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  39.9k|    }                                                  \
  |  |   70|  2.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.38M|            }
  145|  2.42M|        }
  146|  2.38M|        else {
  147|  2.38M|            SCN_TRY_ASSIGN(
  148|  2.38M|                it,
  149|  2.38M|                do_read_source_impl(
  150|  2.38M|                    r,
  151|  2.38M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.38M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.38M|        }
  154|       |
  155|  2.38M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.38M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.36M, False: 21.6k]
  |  Branch (157:48): [True: 2.34M, False: 20.9k]
  ------------------
  158|  2.38M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 2.24M, False: 101k]
  ------------------
  159|  2.38M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 2.23M, False: 5.78k]
  ------------------
  160|  2.23M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  2.23M|        }
  162|       |
  163|  2.38M|        handle_separators();
  164|       |
  165|  2.38M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.38M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.38M|        return it;
  178|  2.38M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.42M|    {
  226|  2.42M|        auto it = ranges::begin(range);
  227|  2.42M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.38M, False: 42.6k]
  ------------------
  228|  2.38M|            return unexpected(r.error());
  229|  2.38M|        }
  230|  42.6k|        else {
  231|  42.6k|            it = *r;
  232|  42.6k|        }
  233|       |
  234|  42.6k|        if (auto r = read_matching_string_classic_nocase(
  235|  42.6k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  42.6k|            !r) {
  ------------------
  |  Branch (236:13): [True: 21.6k, False: 20.9k]
  ------------------
  237|  21.6k|            m_kind = float_kind::inf_short;
  238|  21.6k|            return it;
  239|  21.6k|        }
  240|  20.9k|        else {
  241|  20.9k|            m_kind = float_kind::inf_long;
  242|  20.9k|            return *r;
  243|  20.9k|        }
  244|  42.6k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.38M|    {
  249|  2.38M|        auto it = ranges::begin(range);
  250|  2.38M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.27M, False: 108k]
  ------------------
  251|  2.27M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.27M|                scan_error::invalid_scanned_value,
  253|  2.27M|                "Invalid floating-point NaN value"));
  254|  2.27M|        }
  255|   108k|        else {
  256|   108k|            it = *r;
  257|   108k|        }
  258|       |
  259|   108k|        if (auto r = read_matching_code_unit(
  260|   108k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|   108k|            !r) {
  ------------------
  |  Branch (261:13): [True: 101k, False: 7.36k]
  ------------------
  262|   101k|            m_kind = float_kind::nan_simple;
  263|   101k|            return it;
  264|   101k|        }
  265|  7.36k|        else {
  266|  7.36k|            it = *r;
  267|  7.36k|        }
  268|       |
  269|  7.36k|        auto payload_beg_it = it;
  270|  7.36k|        it = read_while_code_unit(
  271|  7.36k|            ranges::subrange{it, ranges::end(range)},
  272|  7.36k|            [](char_type ch) SCN_NOEXCEPT {
  273|  7.36k|                return is_ascii_char(ch) &&
  274|  7.36k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  7.36k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  7.36k|            });
  277|  7.36k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  7.36k|        m_kind = float_kind::nan_with_payload;
  280|  7.36k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 5.78k, False: 1.57k]
  ------------------
  281|  7.36k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  5.78k|            return *r;
  283|  5.78k|        }
  284|  1.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.57k|                                     "Invalid floating-point NaN payload");
  286|  7.36k|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|  28.6k|            [](char_type ch) SCN_NOEXCEPT {
  273|  28.6k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 28.4k, False: 143]
  ------------------
  274|  28.6k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 22.1k, False: 6.28k]
  |  Branch (274:39): [True: 9.81k, False: 12.3k]
  |  Branch (274:54): [True: 4.20k, False: 14.4k]
  |  Branch (274:67): [True: 4.10k, False: 103]
  ------------------
  275|  28.4k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 8.16k, False: 6.38k]
  |  Branch (275:39): [True: 3.58k, False: 4.57k]
  |  Branch (275:53): [True: 4.47k, False: 6.48k]
  ------------------
  276|  28.6k|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.64M|    {
  220|  1.64M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.64M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   399k|    {
  292|   399k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 69.5k, False: 330k]
  ------------------
  293|  69.5k|            auto beg_exp_it = ranges::begin(range);
  294|  69.5k|            auto it = *r;
  295|       |
  296|  69.5k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 69.3k, False: 164]
  ------------------
  297|  69.5k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  69.3k|                it = r_sign->first;
  299|  69.3k|            }
  300|       |
  301|  69.5k|            if (auto r_exp = read_while1_code_unit(
  302|  69.5k|                    ranges::subrange{it, ranges::end(range)},
  303|  69.5k|                    [](char_type ch)
  304|  69.5k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  69.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  69.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 876, False: 68.6k]
  |  |  ------------------
  ------------------
  306|    876|                it = beg_exp_it;
  307|    876|            }
  308|  68.6k|            else {
  309|  68.6k|                it = *r_exp;
  310|  68.6k|            }
  311|       |
  312|  69.5k|            return it;
  313|  69.5k|        }
  314|   330k|        else {
  315|   330k|            return ranges::begin(range);
  316|   330k|        }
  317|   399k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|   215k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   623k|    {
  365|   623k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   623k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 410k, False: 213k]
  |  Branch (366:50): [True: 24.2k, False: 385k]
  ------------------
  367|       |
  368|   623k|        auto it = ranges::begin(range);
  369|   623k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   623k|        if (auto r =
  372|   623k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   623k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.8k, False: 599k]
  |  |  ------------------
  ------------------
  374|  23.8k|            return r.transform_error(
  375|  23.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  23.8k|                                              "Invalid floating-point value"));
  377|  23.8k|        }
  378|   599k|        else {
  379|   599k|            digits_count += ranges::distance(it, *r);
  380|   599k|            it = *r;
  381|   599k|        }
  382|       |
  383|   599k|        m_integral_part_length = digits_count;
  384|   599k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 90.7k, False: 509k]
  ------------------
  385|   599k|                ranges::subrange{it, ranges::end(range)},
  386|   599k|                m_locale_options.decimal_point)) {
  387|  90.7k|            it = *r;
  388|  90.7k|        }
  389|       |
  390|   599k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 76.3k, False: 523k]
  ------------------
  391|   599k|                                     false)) {
  392|  76.3k|            digits_count += ranges::distance(it, *r);
  393|  76.3k|            it = *r;
  394|  76.3k|        }
  395|       |
  396|   599k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   599k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 599k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   599k|        auto beg_exp_it = it;
  402|   599k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 399k, False: 200k]
  ------------------
  403|   399k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   399k|        }
  405|   599k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 23.4k, False: 576k]
  |  Branch (405:29): [True: 13.5k, False: 9.94k]
  ------------------
  406|  13.5k|            return unexpected_scan_error(
  407|  13.5k|                scan_error::invalid_scanned_value,
  408|  13.5k|                "No exponent given to scientific float");
  409|  13.5k|        }
  410|       |
  411|   586k|        m_kind =
  412|   586k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 517k, False: 68.6k]
  ------------------
  413|       |
  414|   586k|        return it;
  415|   599k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.22M|    {
  185|  1.22M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  |  Branch (153:45): [True: 0, False: 1.22M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.22M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.22M|        return read_while1_code_unit(
  195|  1.22M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.22M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.22M|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|  7.18M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.42M|    {
  423|  2.42M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.42M|        const bool allowed_nonhex =
  425|  2.42M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.42M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.42M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.38M, False: 42.6k]
  |  Branch (428:45): [True: 0, False: 2.38M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.42M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 42.6k, False: 2.38M]
  ------------------
  434|  42.6k|            return *r;
  435|  42.6k|        }
  436|       |
  437|  2.38M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.27M, False: 107k]
  |  Branch (437:45): [True: 1.57k, False: 2.27M]
  ------------------
  438|  1.57k|            return unexpected(r.error());
  439|  1.57k|        }
  440|  2.38M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 107k, False: 2.27M]
  ------------------
  441|   107k|            return *r;
  442|   107k|        }
  443|       |
  444|  2.27M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.64M, False: 623k]
  |  Branch (444:28): [True: 506k, False: 1.14M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   506k|            auto it = ranges::begin(range);
  448|       |
  449|   506k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 20.2k, False: 486k]
  ------------------
  450|  20.2k|                m_kind = float_kind::hex_with_prefix;
  451|  20.2k|                it = *r;
  452|  20.2k|            }
  453|   486k|            else {
  454|   486k|                m_kind = float_kind::hex_without_prefix;
  455|   486k|            }
  456|       |
  457|   506k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   506k|        }
  459|  1.76M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 623k, False: 1.14M]
  |  Branch (459:34): [True: 623k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   623k|            m_kind = float_kind::generic;
  463|   623k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   623k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   623k|        }
  465|  1.14M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.14M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 1.09M]
  |  |  ------------------
  ------------------
  471|  49.8k|                m_kind = float_kind::hex_with_prefix;
  472|  49.8k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  49.8k|            }
  474|       |
  475|  1.09M|            m_kind = float_kind::generic;
  476|  1.09M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.14M|        }
  478|  2.27M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   556k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   556k|                    auto res = read_all(rr);
  136|   556k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 320, False: 555k]
  |  |  ------------------
  ------------------
  137|    320|                        return unexpected_scan_error(
  138|    320|                            scan_error::invalid_scanned_value,
  139|    320|                            "Invalid float value");
  140|    320|                    }
  141|   555k|                    return res;
  142|   556k|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.09M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.09M|                    auto res = read_all(rr);
  136|  1.09M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 640, False: 1.09M]
  |  |  ------------------
  ------------------
  137|    640|                        return unexpected_scan_error(
  138|    640|                            scan_error::invalid_scanned_value,
  139|    640|                            "Invalid float value");
  140|    640|                    }
  141|  1.09M|                    return res;
  142|  1.09M|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  2.38M|    {
  482|  2.38M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.38M, False: 0]
  ------------------
  483|  2.38M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.38M, False: 0]
  ------------------
  484|  2.38M|            return;
  485|  2.38M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   252k|    {
  577|   252k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   252k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   252k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   252k|        float_reader<CharT> rd{};
  581|   252k|        return read_impl<range_nocvref_t>(
  582|   252k|            range, rd,
  583|   252k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   252k|                return r.read_source(SCN_FWD(args)...);
  585|   252k|            },
  586|   252k|            value);
  587|   252k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   832k|    {
  633|   832k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   832k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 819k]
  |  |  ------------------
  ------------------
  635|  13.3k|            return unexpected(r.error());
  636|  13.3k|        }
  637|       |
  638|   819k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   819k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   819k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   819k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.2k, False: 806k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.2k|    }                                                  \
  |  |  |  |   70|   819k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   806k|        return ranges::next(ranges::begin(range), n);
  640|   819k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   819k|    {
   98|   819k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   819k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 239k, False: 579k]
  ------------------
  102|       |
  103|   819k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   819k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   819k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   819k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.2k, False: 806k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.2k|    }                                                  \
  |  |  |  |   70|   819k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   806k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   819k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   252k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   252k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   252k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   257k|    {
  577|   257k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   257k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   257k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   257k|        float_reader<CharT> rd{};
  581|   257k|        return read_impl<range_nocvref_t>(
  582|   257k|            range, rd,
  583|   257k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   257k|                return r.read_source(SCN_FWD(args)...);
  585|   257k|            },
  586|   257k|            value);
  587|   257k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   843k|    {
  633|   843k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   843k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.7k, False: 829k]
  |  |  ------------------
  ------------------
  635|  13.7k|            return unexpected(r.error());
  636|  13.7k|        }
  637|       |
  638|   829k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   829k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   829k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   829k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 818k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   829k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   818k|        return ranges::next(ranges::begin(range), n);
  640|   829k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   829k|    {
   98|   829k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   829k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 245k, False: 583k]
  ------------------
  102|       |
  103|   829k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   829k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   829k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   829k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 818k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   829k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   818k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   818k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   829k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   257k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   257k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   257k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.89k|    {
  577|  7.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.89k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.89k|        float_reader<CharT> rd{};
  581|  7.89k|        return read_impl<range_nocvref_t>(
  582|  7.89k|            range, rd,
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  585|  7.89k|            },
  586|  7.89k|            value);
  587|  7.89k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  34.1k|    {
  633|  34.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  34.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.1k, False: 0]
  |  |  ------------------
  ------------------
  635|  34.1k|            return unexpected(r.error());
  636|  34.1k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.89k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|  86.7k|    {
   73|  86.7k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  86.7k|        return read_source_impl(range);
   79|  86.7k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   102k|    {
  112|   102k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   102k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   102k|        auto it = sign_result.first;
  115|   102k|        m_sign = sign_result.second;
  116|       |
  117|   102k|        auto digits_begin = it;
  118|   102k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   102k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   102k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   102k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   102k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   102k|                SCN_TRY_ASSIGN(
  124|   102k|                    it,
  125|   102k|                    do_read_source_impl(
  126|   102k|                        r,
  127|   102k|                        [&](auto&& rr) {
  128|   102k|                            return read_regular_float(SCN_FWD(rr));
  129|   102k|                        },
  130|   102k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   102k|            }
  132|   102k|            else {
  133|   102k|                auto cb = [&](auto&& rr)
  134|   102k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   102k|                    auto res = read_all(rr);
  136|   102k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   102k|                        return unexpected_scan_error(
  138|   102k|                            scan_error::invalid_scanned_value,
  139|   102k|                            "Invalid float value");
  140|   102k|                    }
  141|   102k|                    return res;
  142|   102k|                };
  143|   102k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   102k|            }
  145|   102k|        }
  146|   102k|        else {
  147|   102k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 102k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   102k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   102k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   102k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   102k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   102k|    }                                                  \
  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   102k|    {
  423|   102k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   102k|        const bool allowed_nonhex =
  425|   102k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   102k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   102k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 102k, False: 0]
  |  Branch (428:45): [True: 0, False: 102k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   102k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 102k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   102k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 102k, False: 0]
  |  Branch (437:45): [True: 0, False: 102k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   102k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 102k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   102k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 55.2k, False: 47.3k]
  |  Branch (444:28): [True: 15.7k, False: 39.4k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  15.7k|            auto it = ranges::begin(range);
  448|       |
  449|  15.7k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 15.7k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  15.7k|            else {
  454|  15.7k|                m_kind = float_kind::hex_without_prefix;
  455|  15.7k|            }
  456|       |
  457|  15.7k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  15.7k|        }
  459|  86.7k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 47.3k, False: 39.4k]
  |  Branch (459:34): [True: 47.3k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  47.3k|            m_kind = float_kind::generic;
  463|  47.3k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  47.3k|        }
  465|  39.4k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  39.4k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 39.4k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  39.4k|            m_kind = float_kind::generic;
  476|  39.4k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  39.4k|        }
  478|   102k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   102k|    {
  226|   102k|        auto it = ranges::begin(range);
  227|   102k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 102k, False: 0]
  ------------------
  228|   102k|            return unexpected(r.error());
  229|   102k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   102k|    {
  249|   102k|        auto it = ranges::begin(range);
  250|   102k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 102k, False: 0]
  ------------------
  251|   102k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   102k|                scan_error::invalid_scanned_value,
  253|   102k|                "Invalid floating-point NaN value"));
  254|   102k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|  55.2k|    {
  220|  55.2k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  55.2k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  15.7k|    {
  323|  15.7k|        auto it = ranges::begin(range);
  324|       |
  325|  15.7k|        std::ptrdiff_t digits_count = 0;
  326|  15.7k|        if (auto r =
  327|  15.7k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  15.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.7k, False: 0]
  |  |  ------------------
  ------------------
  329|  15.7k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  15.7k|                scan_error::invalid_scanned_value,
  331|  15.7k|                "Invalid hexadecimal floating-point value"));
  332|  15.7k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  15.7k|    {
  203|  15.7k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.7k]
  |  |  |  Branch (153:45): [True: 0, False: 15.7k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  15.7k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  15.7k|        return read_while1_code_unit(
  213|  15.7k|            SCN_FWD(range),
  ------------------
  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  15.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  15.7k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|  15.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|  86.7k|    {
  365|  86.7k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  86.7k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 71.0k, False: 15.7k]
  |  Branch (366:50): [True: 15.7k, False: 55.2k]
  ------------------
  367|       |
  368|  86.7k|        auto it = ranges::begin(range);
  369|  86.7k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  86.7k|        if (auto r =
  372|  86.7k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  86.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 86.7k, False: 0]
  |  |  ------------------
  ------------------
  374|  86.7k|            return r.transform_error(
  375|  86.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  86.7k|                                              "Invalid floating-point value"));
  377|  86.7k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|  86.7k|    {
  185|  86.7k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 86.7k]
  |  |  |  Branch (153:45): [True: 0, False: 86.7k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  86.7k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  86.7k|        return read_while1_code_unit(
  195|  86.7k|            SCN_FWD(range),
  ------------------
  |  |  248|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  86.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  86.7k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|  86.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.89k|    {
  577|  7.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.89k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.89k|        float_reader<CharT> rd{};
  581|  7.89k|        return read_impl<range_nocvref_t>(
  582|  7.89k|            range, rd,
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  585|  7.89k|            },
  586|  7.89k|            value);
  587|  7.89k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  34.1k|    {
  633|  34.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  34.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.1k, False: 0]
  |  |  ------------------
  ------------------
  635|  34.1k|            return unexpected(r.error());
  636|  34.1k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.89k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.89k|    {
  577|  7.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.89k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.89k|        float_reader<CharT> rd{};
  581|  7.89k|        return read_impl<range_nocvref_t>(
  582|  7.89k|            range, rd,
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  585|  7.89k|            },
  586|  7.89k|            value);
  587|  7.89k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  34.1k|    {
  633|  34.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  34.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.1k, False: 0]
  |  |  ------------------
  ------------------
  635|  34.1k|            return unexpected(r.error());
  636|  34.1k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.89k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.89k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.89k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.78M|    {
  570|  1.78M|        detail::check_float_type_specs(specs, eh);
  571|  1.78M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.77M|    {
  644|  1.77M|        unsigned options{};
  645|  1.77M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 504k, False: 1.26M]
  ------------------
  646|   504k|            options |= float_reader_base::allow_thsep;
  647|   504k|        }
  648|       |
  649|  1.77M|        SCN_GCC_COMPAT_PUSH
  650|  1.77M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.77M|        switch (specs.type) {
  653|   238k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 238k, False: 1.53M]
  ------------------
  654|   238k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  41.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 41.2k, False: 1.72M]
  ------------------
  657|  41.2k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   555k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 555k, False: 1.21M]
  ------------------
  660|   555k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   430k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 430k, False: 1.33M]
  ------------------
  663|   430k|                return options | float_reader_base::allow_scientific |
  664|   430k|                       float_reader_base::allow_fixed;
  665|       |
  666|   504k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 504k, False: 1.26M]
  ------------------
  667|   504k|                return options | float_reader_base::allow_scientific |
  668|   504k|                       float_reader_base::allow_fixed |
  669|   504k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.77M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.77M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.77M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  1.77M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  3.57M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   526k|    {
  596|   526k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   526k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   526k|#if !SCN_DISABLE_LOCALE
  600|   526k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 148k, False: 378k]
  ------------------
  601|   148k|            return read_impl<range_nocvref_t>(
  602|   148k|                range, rd,
  603|   148k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   148k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   148k|                },
  606|   148k|                value, loc);
  607|   148k|        }
  608|   378k|#endif
  609|       |
  610|   378k|        return read_impl<range_nocvref_t>(
  611|   378k|            range, rd,
  612|   378k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   378k|                return r.read_source(SCN_FWD(args)...);
  614|   378k|            },
  615|   378k|            value);
  616|   526k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   148k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   148k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   148k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   488k|    {
   86|   488k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   488k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   488k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   488k|        return read_source_impl(range);
   92|   488k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   378k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   378k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   378k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   579k|    {
  596|   579k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   579k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   579k|#if !SCN_DISABLE_LOCALE
  600|   579k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 168k, False: 410k]
  ------------------
  601|   168k|            return read_impl<range_nocvref_t>(
  602|   168k|                range, rd,
  603|   168k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   168k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   168k|                },
  606|   168k|                value, loc);
  607|   168k|        }
  608|   410k|#endif
  609|       |
  610|   410k|        return read_impl<range_nocvref_t>(
  611|   410k|            range, rd,
  612|   410k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   410k|                return r.read_source(SCN_FWD(args)...);
  614|   410k|            },
  615|   410k|            value);
  616|   579k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   168k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   168k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   168k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   410k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   410k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   410k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   585k|    {
  596|   585k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   585k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   585k|#if !SCN_DISABLE_LOCALE
  600|   585k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 171k, False: 414k]
  ------------------
  601|   171k|            return read_impl<range_nocvref_t>(
  602|   171k|                range, rd,
  603|   171k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   171k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   171k|                },
  606|   171k|                value, loc);
  607|   171k|        }
  608|   414k|#endif
  609|       |
  610|   414k|        return read_impl<range_nocvref_t>(
  611|   414k|            range, rd,
  612|   414k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   414k|                return r.read_source(SCN_FWD(args)...);
  614|   414k|            },
  615|   414k|            value);
  616|   585k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   171k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   171k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   171k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   414k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   414k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   414k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  26.3k|    {
  596|  26.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  26.3k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  26.3k|#if !SCN_DISABLE_LOCALE
  600|  26.3k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.26k, False: 21.0k]
  ------------------
  601|  5.26k|            return read_impl<range_nocvref_t>(
  602|  5.26k|                range, rd,
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.26k|                },
  606|  5.26k|                value, loc);
  607|  5.26k|        }
  608|  21.0k|#endif
  609|       |
  610|  21.0k|        return read_impl<range_nocvref_t>(
  611|  21.0k|            range, rd,
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  614|  21.0k|            },
  615|  21.0k|            value);
  616|  26.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.26k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  15.7k|    {
   86|  15.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  15.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  15.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  15.7k|        return read_source_impl(range);
   92|  15.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  21.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  26.3k|    {
  596|  26.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  26.3k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  26.3k|#if !SCN_DISABLE_LOCALE
  600|  26.3k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.26k, False: 21.0k]
  ------------------
  601|  5.26k|            return read_impl<range_nocvref_t>(
  602|  5.26k|                range, rd,
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.26k|                },
  606|  5.26k|                value, loc);
  607|  5.26k|        }
  608|  21.0k|#endif
  609|       |
  610|  21.0k|        return read_impl<range_nocvref_t>(
  611|  21.0k|            range, rd,
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  614|  21.0k|            },
  615|  21.0k|            value);
  616|  26.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.26k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  21.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  26.3k|    {
  596|  26.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  26.3k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  26.3k|#if !SCN_DISABLE_LOCALE
  600|  26.3k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.26k, False: 21.0k]
  ------------------
  601|  5.26k|            return read_impl<range_nocvref_t>(
  602|  5.26k|                range, rd,
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.26k|                },
  606|  5.26k|                value, loc);
  607|  5.26k|        }
  608|  21.0k|#endif
  609|       |
  610|  21.0k|        return read_impl<range_nocvref_t>(
  611|  21.0k|            range, rd,
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  614|  21.0k|            },
  615|  21.0k|            value);
  616|  26.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.26k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.26k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.26k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  21.0k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  21.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  21.0k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   200k|    {
  577|   200k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   200k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   200k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   200k|        float_reader<CharT> rd{};
  581|   200k|        return read_impl<range_nocvref_t>(
  582|   200k|            range, rd,
  583|   200k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   200k|                return r.read_source(SCN_FWD(args)...);
  585|   200k|            },
  586|   200k|            value);
  587|   200k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|   742k|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   683k|    {
  633|   683k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   683k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.4k, False: 658k]
  |  |  ------------------
  ------------------
  635|  25.4k|            return unexpected(r.error());
  636|  25.4k|        }
  637|       |
  638|   658k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   658k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   658k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   658k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.9k, False: 630k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.9k|    }                                                  \
  |  |  |  |   70|   658k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   630k|        return ranges::next(ranges::begin(range), n);
  640|   658k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   710k|    {
   98|   710k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   710k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 187k, False: 523k]
  ------------------
  102|       |
  103|   710k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   710k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   710k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   710k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.9k, False: 682k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.9k|    }                                                  \
  |  |  |  |   70|   710k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   682k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   710k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   200k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   200k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   200k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.76M|    {
   73|  1.76M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.76M|        return read_source_impl(range);
   79|  1.76M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.20M|    {
  112|  2.20M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.20M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.20M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.20M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.20M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.20M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.20M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.20M|        auto it = sign_result.first;
  115|  2.20M|        m_sign = sign_result.second;
  116|       |
  117|  2.20M|        auto digits_begin = it;
  118|  2.20M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.20M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.20M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.20M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.20M]
  |  |  |  Branch (153:45): [True: 0, False: 2.20M]
  |  |  |  Branch (153:45): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
  122|  2.20M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.20M|            else {
  133|  2.20M|                auto cb = [&](auto&& rr)
  134|  2.20M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.20M|                    auto res = read_all(rr);
  136|  2.20M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.20M|                        return unexpected_scan_error(
  138|  2.20M|                            scan_error::invalid_scanned_value,
  139|  2.20M|                            "Invalid float value");
  140|  2.20M|                    }
  141|  2.20M|                    return res;
  142|  2.20M|                };
  143|  2.20M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.20M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.20M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 77.3k, False: 2.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  77.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  77.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  77.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  77.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  77.3k|    }                                                  \
  |  |   70|  2.20M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.12M|            }
  145|  2.20M|        }
  146|  2.12M|        else {
  147|  2.12M|            SCN_TRY_ASSIGN(
  148|  2.12M|                it,
  149|  2.12M|                do_read_source_impl(
  150|  2.12M|                    r,
  151|  2.12M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.12M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.12M|        }
  154|       |
  155|  2.12M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  2.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.12M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.10M, False: 17.1k]
  |  Branch (157:48): [True: 2.09M, False: 19.4k]
  ------------------
  158|  2.12M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.99M, False: 98.0k]
  ------------------
  159|  2.12M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.98M, False: 5.74k]
  ------------------
  160|  1.98M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.98M|        }
  162|       |
  163|  2.12M|        handle_separators();
  164|       |
  165|  2.12M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.12M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.12M|        return it;
  178|  2.12M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.20M|    {
  226|  2.20M|        auto it = ranges::begin(range);
  227|  2.20M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.16M, False: 36.5k]
  ------------------
  228|  2.16M|            return unexpected(r.error());
  229|  2.16M|        }
  230|  36.5k|        else {
  231|  36.5k|            it = *r;
  232|  36.5k|        }
  233|       |
  234|  36.5k|        if (auto r = read_matching_string_classic_nocase(
  235|  36.5k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  36.5k|            !r) {
  ------------------
  |  Branch (236:13): [True: 17.1k, False: 19.4k]
  ------------------
  237|  17.1k|            m_kind = float_kind::inf_short;
  238|  17.1k|            return it;
  239|  17.1k|        }
  240|  19.4k|        else {
  241|  19.4k|            m_kind = float_kind::inf_long;
  242|  19.4k|            return *r;
  243|  19.4k|        }
  244|  36.5k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.16M|    {
  249|  2.16M|        auto it = ranges::begin(range);
  250|  2.16M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.06M, False: 105k]
  ------------------
  251|  2.06M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.06M|                scan_error::invalid_scanned_value,
  253|  2.06M|                "Invalid floating-point NaN value"));
  254|  2.06M|        }
  255|   105k|        else {
  256|   105k|            it = *r;
  257|   105k|        }
  258|       |
  259|   105k|        if (auto r = read_matching_code_unit(
  260|   105k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|   105k|            !r) {
  ------------------
  |  Branch (261:13): [True: 98.0k, False: 7.23k]
  ------------------
  262|  98.0k|            m_kind = float_kind::nan_simple;
  263|  98.0k|            return it;
  264|  98.0k|        }
  265|  7.23k|        else {
  266|  7.23k|            it = *r;
  267|  7.23k|        }
  268|       |
  269|  7.23k|        auto payload_beg_it = it;
  270|  7.23k|        it = read_while_code_unit(
  271|  7.23k|            ranges::subrange{it, ranges::end(range)},
  272|  7.23k|            [](char_type ch) SCN_NOEXCEPT {
  273|  7.23k|                return is_ascii_char(ch) &&
  274|  7.23k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  7.23k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  7.23k|            });
  277|  7.23k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  7.23k|        m_kind = float_kind::nan_with_payload;
  280|  7.23k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 5.74k, False: 1.48k]
  ------------------
  281|  7.23k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  5.74k|            return *r;
  283|  5.74k|        }
  284|  1.48k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.48k|                                     "Invalid floating-point NaN payload");
  286|  7.23k|    }
_ZZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlwE_clEw:
  272|  28.2k|            [](char_type ch) SCN_NOEXCEPT {
  273|  28.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 28.1k, False: 83]
  ------------------
  274|  28.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 21.9k, False: 6.22k]
  |  Branch (274:39): [True: 9.78k, False: 12.1k]
  |  Branch (274:54): [True: 4.01k, False: 14.3k]
  |  Branch (274:67): [True: 3.91k, False: 103]
  ------------------
  275|  28.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 8.16k, False: 6.32k]
  |  Branch (275:39): [True: 3.58k, False: 4.57k]
  |  Branch (275:53): [True: 4.47k, False: 6.42k]
  ------------------
  276|  28.2k|            });
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.47M|    {
  220|  1.47M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.47M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   349k|    {
  292|   349k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 63.3k, False: 285k]
  ------------------
  293|  63.3k|            auto beg_exp_it = ranges::begin(range);
  294|  63.3k|            auto it = *r;
  295|       |
  296|  63.3k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 63.2k, False: 164]
  ------------------
  297|  63.3k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  63.2k|                it = r_sign->first;
  299|  63.2k|            }
  300|       |
  301|  63.3k|            if (auto r_exp = read_while1_code_unit(
  302|  63.3k|                    ranges::subrange{it, ranges::end(range)},
  303|  63.3k|                    [](char_type ch)
  304|  63.3k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  63.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 866, False: 62.5k]
  |  |  ------------------
  ------------------
  306|    866|                it = beg_exp_it;
  307|    866|            }
  308|  62.5k|            else {
  309|  62.5k|                it = *r_exp;
  310|  62.5k|            }
  311|       |
  312|  63.3k|            return it;
  313|  63.3k|        }
  314|   285k|        else {
  315|   285k|            return ranges::begin(range);
  316|   285k|        }
  317|   349k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|   193k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   583k|    {
  365|   583k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   583k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 386k, False: 196k]
  |  Branch (366:50): [True: 35.5k, False: 351k]
  ------------------
  367|       |
  368|   583k|        auto it = ranges::begin(range);
  369|   583k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   583k|        if (auto r =
  372|   583k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   583k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 63.6k, False: 519k]
  |  |  ------------------
  ------------------
  374|  63.6k|            return r.transform_error(
  375|  63.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  63.6k|                                              "Invalid floating-point value"));
  377|  63.6k|        }
  378|   519k|        else {
  379|   519k|            digits_count += ranges::distance(it, *r);
  380|   519k|            it = *r;
  381|   519k|        }
  382|       |
  383|   519k|        m_integral_part_length = digits_count;
  384|   519k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 71.1k, False: 448k]
  ------------------
  385|   519k|                ranges::subrange{it, ranges::end(range)},
  386|   519k|                m_locale_options.decimal_point)) {
  387|  71.1k|            it = *r;
  388|  71.1k|        }
  389|       |
  390|   519k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 58.7k, False: 461k]
  ------------------
  391|   519k|                                     false)) {
  392|  58.7k|            digits_count += ranges::distance(it, *r);
  393|  58.7k|            it = *r;
  394|  58.7k|        }
  395|       |
  396|   519k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 519k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   519k|        auto beg_exp_it = it;
  402|   519k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 349k, False: 170k]
  ------------------
  403|   349k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   349k|        }
  405|   519k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 19.9k, False: 499k]
  |  Branch (405:29): [True: 11.2k, False: 8.71k]
  ------------------
  406|  11.2k|            return unexpected_scan_error(
  407|  11.2k|                scan_error::invalid_scanned_value,
  408|  11.2k|                "No exponent given to scientific float");
  409|  11.2k|        }
  410|       |
  411|   508k|        m_kind =
  412|   508k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 446k, False: 62.5k]
  ------------------
  413|       |
  414|   508k|        return it;
  415|   519k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.10M|    {
  185|  1.10M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  |  Branch (153:45): [True: 0, False: 1.10M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.10M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.10M|        return read_while1_code_unit(
  195|  1.10M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.10M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.10M|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|  5.54M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.20M|    {
  423|  2.20M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.20M|        const bool allowed_nonhex =
  425|  2.20M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.20M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.20M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.16M, False: 36.5k]
  |  Branch (428:45): [True: 0, False: 2.16M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.20M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 36.5k, False: 2.16M]
  ------------------
  434|  36.5k|            return *r;
  435|  36.5k|        }
  436|       |
  437|  2.16M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.06M, False: 103k]
  |  Branch (437:45): [True: 1.48k, False: 2.06M]
  ------------------
  438|  1.48k|            return unexpected(r.error());
  439|  1.48k|        }
  440|  2.16M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 103k, False: 2.06M]
  ------------------
  441|   103k|            return *r;
  442|   103k|        }
  443|       |
  444|  2.06M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.47M, False: 583k]
  |  Branch (444:28): [True: 456k, False: 1.02M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   456k|            auto it = ranges::begin(range);
  448|       |
  449|   456k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 17.3k, False: 438k]
  ------------------
  450|  17.3k|                m_kind = float_kind::hex_with_prefix;
  451|  17.3k|                it = *r;
  452|  17.3k|            }
  453|   438k|            else {
  454|   438k|                m_kind = float_kind::hex_without_prefix;
  455|   438k|            }
  456|       |
  457|   456k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   456k|        }
  459|  1.60M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 583k, False: 1.02M]
  |  Branch (459:34): [True: 583k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   583k|            m_kind = float_kind::generic;
  463|   583k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   583k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   583k|        }
  465|  1.02M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.02M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 42.7k, False: 979k]
  |  |  ------------------
  ------------------
  471|  42.7k|                m_kind = float_kind::hex_with_prefix;
  472|  42.7k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  42.7k|            }
  474|       |
  475|   979k|            m_kind = float_kind::generic;
  476|   979k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   979k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.02M|        }
  478|  2.06M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   499k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   499k|                    auto res = read_all(rr);
  136|   499k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 338, False: 498k]
  |  |  ------------------
  ------------------
  137|    338|                        return unexpected_scan_error(
  138|    338|                            scan_error::invalid_scanned_value,
  139|    338|                            "Invalid float value");
  140|    338|                    }
  141|   498k|                    return res;
  142|   499k|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   979k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   979k|                    auto res = read_all(rr);
  136|   979k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   979k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 685, False: 978k]
  |  |  ------------------
  ------------------
  137|    685|                        return unexpected_scan_error(
  138|    685|                            scan_error::invalid_scanned_value,
  139|    685|                            "Invalid float value");
  140|    685|                    }
  141|   978k|                    return res;
  142|   979k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  2.28M|    {
  482|  2.28M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.28M, False: 0]
  ------------------
  483|  2.28M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.28M, False: 0]
  ------------------
  484|  2.28M|            return;
  485|  2.28M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   226k|    {
  577|   226k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   226k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   226k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   226k|        float_reader<CharT> rd{};
  581|   226k|        return read_impl<range_nocvref_t>(
  582|   226k|            range, rd,
  583|   226k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   226k|                return r.read_source(SCN_FWD(args)...);
  585|   226k|            },
  586|   226k|            value);
  587|   226k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   755k|    {
  633|   755k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   755k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.7k, False: 729k]
  |  |  ------------------
  ------------------
  635|  25.7k|            return unexpected(r.error());
  636|  25.7k|        }
  637|       |
  638|   729k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   729k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   729k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   729k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26.4k, False: 702k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.4k|    }                                                  \
  |  |  |  |   70|   729k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   702k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   702k|        return ranges::next(ranges::begin(range), n);
  640|   729k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   781k|    {
   98|   781k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   781k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 209k, False: 571k]
  ------------------
  102|       |
  103|   781k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   781k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   781k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   781k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26.4k, False: 754k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.4k|    }                                                  \
  |  |  |  |   70|   781k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   754k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   754k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   781k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   226k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   226k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   226k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   230k|    {
  577|   230k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   230k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   230k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   230k|        float_reader<CharT> rd{};
  581|   230k|        return read_impl<range_nocvref_t>(
  582|   230k|            range, rd,
  583|   230k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   230k|                return r.read_source(SCN_FWD(args)...);
  585|   230k|            },
  586|   230k|            value);
  587|   230k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   765k|    {
  633|   765k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   765k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.1k, False: 738k]
  |  |  ------------------
  ------------------
  635|  26.1k|            return unexpected(r.error());
  636|  26.1k|        }
  637|       |
  638|   738k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   738k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   738k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   738k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.5k, False: 713k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.5k|    }                                                  \
  |  |  |  |   70|   738k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   713k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   713k|        return ranges::next(ranges::begin(range), n);
  640|   738k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   790k|    {
   98|   790k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   790k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 215k, False: 575k]
  ------------------
  102|       |
  103|   790k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   790k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   790k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   790k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.5k, False: 765k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.5k|    }                                                  \
  |  |  |  |   70|   790k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   765k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   790k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   230k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   230k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   230k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.82M|    {
  570|  1.82M|        detail::check_float_type_specs(specs, eh);
  571|  1.82M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.80M|    {
  644|  1.80M|        unsigned options{};
  645|  1.80M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 495k, False: 1.30M]
  ------------------
  646|   495k|            options |= float_reader_base::allow_thsep;
  647|   495k|        }
  648|       |
  649|  1.80M|        SCN_GCC_COMPAT_PUSH
  650|  1.80M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.80M|        switch (specs.type) {
  653|   261k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 261k, False: 1.53M]
  ------------------
  654|   261k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  65.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 65.0k, False: 1.73M]
  ------------------
  657|  65.0k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   544k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 544k, False: 1.25M]
  ------------------
  660|   544k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   435k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 435k, False: 1.36M]
  ------------------
  663|   435k|                return options | float_reader_base::allow_scientific |
  664|   435k|                       float_reader_base::allow_fixed;
  665|       |
  666|   495k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 495k, False: 1.30M]
  ------------------
  667|   495k|                return options | float_reader_base::allow_scientific |
  668|   495k|                       float_reader_base::allow_fixed |
  669|   495k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.80M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.80M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.80M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  1.80M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   483k|    {
  596|   483k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   483k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   483k|#if !SCN_DISABLE_LOCALE
  600|   483k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 133k, False: 350k]
  ------------------
  601|   133k|            return read_impl<range_nocvref_t>(
  602|   133k|                range, rd,
  603|   133k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   133k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   133k|                },
  606|   133k|                value, loc);
  607|   133k|        }
  608|   350k|#endif
  609|       |
  610|   350k|        return read_impl<range_nocvref_t>(
  611|   350k|            range, rd,
  612|   350k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   350k|                return r.read_source(SCN_FWD(args)...);
  614|   350k|            },
  615|   350k|            value);
  616|   483k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   133k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   133k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   133k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   438k|    {
   86|   438k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   438k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   438k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   438k|        return read_source_impl(range);
   92|   438k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   350k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   350k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   350k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   528k|    {
  596|   528k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   528k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   528k|#if !SCN_DISABLE_LOCALE
  600|   528k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 151k, False: 377k]
  ------------------
  601|   151k|            return read_impl<range_nocvref_t>(
  602|   151k|                range, rd,
  603|   151k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   151k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   151k|                },
  606|   151k|                value, loc);
  607|   151k|        }
  608|   377k|#endif
  609|       |
  610|   377k|        return read_impl<range_nocvref_t>(
  611|   377k|            range, rd,
  612|   377k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   377k|                return r.read_source(SCN_FWD(args)...);
  614|   377k|            },
  615|   377k|            value);
  616|   528k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   151k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   151k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   151k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   377k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   377k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   377k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   534k|    {
  596|   534k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   534k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   534k|#if !SCN_DISABLE_LOCALE
  600|   534k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 153k, False: 380k]
  ------------------
  601|   153k|            return read_impl<range_nocvref_t>(
  602|   153k|                range, rd,
  603|   153k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   153k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   153k|                },
  606|   153k|                value, loc);
  607|   153k|        }
  608|   380k|#endif
  609|       |
  610|   380k|        return read_impl<range_nocvref_t>(
  611|   380k|            range, rd,
  612|   380k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   380k|                return r.read_source(SCN_FWD(args)...);
  614|   380k|            },
  615|   380k|            value);
  616|   534k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   153k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   153k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   153k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   380k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   380k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   380k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  28.3k|    {
  577|  28.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  28.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  28.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  28.3k|        float_reader<CharT> rd{};
  581|  28.3k|        return read_impl<range_nocvref_t>(
  582|  28.3k|            range, rd,
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  585|  28.3k|            },
  586|  28.3k|            value);
  587|  28.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   113k|    {
  633|   113k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   113k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.3k, False: 51.9k]
  |  |  ------------------
  ------------------
  635|  61.3k|            return unexpected(r.error());
  636|  61.3k|        }
  637|       |
  638|  51.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  51.9k|        return ranges::next(ranges::begin(range), n);
  640|  51.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  28.3k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   283k|    {
   73|   283k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 283k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   283k|        return read_source_impl(range);
   79|   283k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   339k|    {
  112|   339k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 339k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   339k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   339k|        auto it = sign_result.first;
  115|   339k|        m_sign = sign_result.second;
  116|       |
  117|   339k|        auto digits_begin = it;
  118|   339k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   339k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   339k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   339k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   339k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   339k|                SCN_TRY_ASSIGN(
  124|   339k|                    it,
  125|   339k|                    do_read_source_impl(
  126|   339k|                        r,
  127|   339k|                        [&](auto&& rr) {
  128|   339k|                            return read_regular_float(SCN_FWD(rr));
  129|   339k|                        },
  130|   339k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   339k|            }
  132|   339k|            else {
  133|   339k|                auto cb = [&](auto&& rr)
  134|   339k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   339k|                    auto res = read_all(rr);
  136|   339k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   339k|                        return unexpected_scan_error(
  138|   339k|                            scan_error::invalid_scanned_value,
  139|   339k|                            "Invalid float value");
  140|   339k|                    }
  141|   339k|                    return res;
  142|   339k|                };
  143|   339k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   339k|            }
  145|   339k|        }
  146|   339k|        else {
  147|   339k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 184k, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   184k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   184k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   184k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   184k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   184k|    }                                                  \
  |  |   70|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|   155k|                it,
  149|   155k|                do_read_source_impl(
  150|   155k|                    r,
  151|   155k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|   155k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|   155k|        }
  154|       |
  155|   155k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|   155k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 155k, False: 0]
  |  Branch (157:48): [True: 155k, False: 0]
  ------------------
  158|   155k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 155k, False: 0]
  ------------------
  159|   155k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 155k, False: 0]
  ------------------
  160|   155k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|   155k|        }
  162|       |
  163|   155k|        handle_separators();
  164|       |
  165|   155k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 155k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|   155k|        return it;
  178|   155k|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   339k|    {
  423|   339k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   339k|        const bool allowed_nonhex =
  425|   339k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   339k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   339k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 339k, False: 0]
  |  Branch (428:45): [True: 0, False: 339k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   339k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 339k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   339k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 339k, False: 0]
  |  Branch (437:45): [True: 0, False: 339k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   339k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 339k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   339k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 198k, False: 141k]
  |  Branch (444:28): [True: 56.6k, False: 141k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  56.6k|            auto it = ranges::begin(range);
  448|       |
  449|  56.6k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 56.6k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  56.6k|            else {
  454|  56.6k|                m_kind = float_kind::hex_without_prefix;
  455|  56.6k|            }
  456|       |
  457|  56.6k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  56.6k|        }
  459|   283k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 141k, False: 141k]
  |  Branch (459:34): [True: 141k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   141k|            m_kind = float_kind::generic;
  463|   141k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   141k|        }
  465|   141k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   141k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   141k|            m_kind = float_kind::generic;
  476|   141k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   141k|        }
  478|   339k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   339k|    {
  226|   339k|        auto it = ranges::begin(range);
  227|   339k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 339k, False: 0]
  ------------------
  228|   339k|            return unexpected(r.error());
  229|   339k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   339k|    {
  249|   339k|        auto it = ranges::begin(range);
  250|   339k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 339k, False: 0]
  ------------------
  251|   339k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   339k|                scan_error::invalid_scanned_value,
  253|   339k|                "Invalid floating-point NaN value"));
  254|   339k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   198k|    {
  220|   198k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   198k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  56.6k|    {
  323|  56.6k|        auto it = ranges::begin(range);
  324|       |
  325|  56.6k|        std::ptrdiff_t digits_count = 0;
  326|  56.6k|        if (auto r =
  327|  56.6k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  56.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  56.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.3k, False: 28.3k]
  |  |  ------------------
  ------------------
  329|  28.3k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  28.3k|                scan_error::invalid_scanned_value,
  331|  28.3k|                "Invalid hexadecimal floating-point value"));
  332|  28.3k|        }
  333|  28.3k|        else {
  334|  28.3k|            digits_count += ranges::distance(it, *r);
  335|  28.3k|            it = *r;
  336|  28.3k|        }
  337|       |
  338|  28.3k|        m_integral_part_length = digits_count;
  339|  28.3k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 28.3k]
  ------------------
  340|  28.3k|                ranges::subrange{it, ranges::end(range)},
  341|  28.3k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|  28.3k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 28.3k]
  ------------------
  346|  28.3k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|  28.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 28.3k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|  28.3k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|  28.3k|        return it;
  359|  28.3k|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  85.0k|    {
  203|  85.0k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.0k]
  |  |  |  Branch (153:45): [True: 0, False: 85.0k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  85.0k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  85.0k|        return read_while1_code_unit(
  213|  85.0k|            SCN_FWD(range),
  ------------------
  |  |  248|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  85.0k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  85.0k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|   198k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|   155k|    {
  292|   155k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 155k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|   155k|        else {
  315|   155k|            return ranges::begin(range);
  316|   155k|        }
  317|   155k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   283k|    {
  365|   283k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   283k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 226k, False: 56.6k]
  |  Branch (366:50): [True: 28.3k, False: 198k]
  ------------------
  367|       |
  368|   283k|        auto it = ranges::begin(range);
  369|   283k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   283k|        if (auto r =
  372|   283k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   283k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 127k, False: 155k]
  |  |  ------------------
  ------------------
  374|   127k|            return r.transform_error(
  375|   127k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   127k|                                              "Invalid floating-point value"));
  377|   127k|        }
  378|   155k|        else {
  379|   155k|            digits_count += ranges::distance(it, *r);
  380|   155k|            it = *r;
  381|   155k|        }
  382|       |
  383|   155k|        m_integral_part_length = digits_count;
  384|   155k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 155k]
  ------------------
  385|   155k|                ranges::subrange{it, ranges::end(range)},
  386|   155k|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|   155k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 155k]
  ------------------
  391|   155k|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|   155k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   155k|        auto beg_exp_it = it;
  402|   155k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 127k, False: 28.3k]
  ------------------
  403|   127k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   127k|        }
  405|   155k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 28.3k, False: 127k]
  |  Branch (405:29): [True: 28.3k, False: 0]
  ------------------
  406|  28.3k|            return unexpected_scan_error(
  407|  28.3k|                scan_error::invalid_scanned_value,
  408|  28.3k|                "No exponent given to scientific float");
  409|  28.3k|        }
  410|       |
  411|   127k|        m_kind =
  412|   127k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 127k, False: 0]
  ------------------
  413|       |
  414|   127k|        return it;
  415|   155k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   439k|    {
  185|   439k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   439k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 439k]
  |  |  |  Branch (153:45): [True: 0, False: 439k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   439k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   439k|        return read_while1_code_unit(
  195|   439k|            SCN_FWD(range),
  ------------------
  |  |  248|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   439k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   439k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|  1.06M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  28.3k|    {
  577|  28.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  28.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  28.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  28.3k|        float_reader<CharT> rd{};
  581|  28.3k|        return read_impl<range_nocvref_t>(
  582|  28.3k|            range, rd,
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  585|  28.3k|            },
  586|  28.3k|            value);
  587|  28.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   113k|    {
  633|   113k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   113k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.3k, False: 51.9k]
  |  |  ------------------
  ------------------
  635|  61.3k|            return unexpected(r.error());
  636|  61.3k|        }
  637|       |
  638|  51.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  51.9k|        return ranges::next(ranges::begin(range), n);
  640|  51.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  28.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  28.3k|    {
  577|  28.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  28.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  28.3k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  28.3k|        float_reader<CharT> rd{};
  581|  28.3k|        return read_impl<range_nocvref_t>(
  582|  28.3k|            range, rd,
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  585|  28.3k|            },
  586|  28.3k|            value);
  587|  28.3k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   113k|    {
  633|   113k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   113k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 61.3k, False: 51.9k]
  |  |  ------------------
  ------------------
  635|  61.3k|            return unexpected(r.error());
  636|  61.3k|        }
  637|       |
  638|  51.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  51.9k|        return ranges::next(ranges::begin(range), n);
  640|  51.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  28.3k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  28.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  28.3k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  85.0k|    {
  596|  85.0k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  85.0k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  85.0k|#if !SCN_DISABLE_LOCALE
  600|  85.0k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 18.8k, False: 66.1k]
  ------------------
  601|  18.8k|            return read_impl<range_nocvref_t>(
  602|  18.8k|                range, rd,
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  18.8k|                },
  606|  18.8k|                value, loc);
  607|  18.8k|        }
  608|  66.1k|#endif
  609|       |
  610|  66.1k|        return read_impl<range_nocvref_t>(
  611|  66.1k|            range, rd,
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  614|  66.1k|            },
  615|  66.1k|            value);
  616|  85.0k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  18.8k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  56.6k|    {
   86|  56.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  56.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  56.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 56.6k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  56.6k|        return read_source_impl(range);
   92|  56.6k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  66.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  85.0k|    {
  596|  85.0k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  85.0k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  85.0k|#if !SCN_DISABLE_LOCALE
  600|  85.0k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 18.8k, False: 66.1k]
  ------------------
  601|  18.8k|            return read_impl<range_nocvref_t>(
  602|  18.8k|                range, rd,
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  18.8k|                },
  606|  18.8k|                value, loc);
  607|  18.8k|        }
  608|  66.1k|#endif
  609|       |
  610|  66.1k|        return read_impl<range_nocvref_t>(
  611|  66.1k|            range, rd,
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  614|  66.1k|            },
  615|  66.1k|            value);
  616|  85.0k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  18.8k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  66.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  85.0k|    {
  596|  85.0k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  85.0k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  85.0k|#if !SCN_DISABLE_LOCALE
  600|  85.0k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 18.8k, False: 66.1k]
  ------------------
  601|  18.8k|            return read_impl<range_nocvref_t>(
  602|  18.8k|                range, rd,
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  18.8k|                },
  606|  18.8k|                value, loc);
  607|  18.8k|        }
  608|  66.1k|#endif
  609|       |
  610|  66.1k|        return read_impl<range_nocvref_t>(
  611|  66.1k|            range, rd,
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  614|  66.1k|            },
  615|  66.1k|            value);
  616|  85.0k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  18.8k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  18.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  18.8k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  66.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  66.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  66.1k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|   735k|    {
  524|   735k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   735k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 94.2k, False: 641k]
  ------------------
  526|  94.2k|            return -value;
  527|  94.2k|        }
  528|   641k|        return value;
  529|   735k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|   710k|    {
  524|   710k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   710k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 85.7k, False: 624k]
  ------------------
  526|  85.7k|            return -value;
  527|  85.7k|        }
  528|   624k|        return value;
  529|   710k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|   819k|    {
  524|   819k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   819k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   819k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   819k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 105k, False: 713k]
  ------------------
  526|   105k|            return -value;
  527|   105k|        }
  528|   713k|        return value;
  529|   819k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|   781k|    {
  524|   781k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   781k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 95.5k, False: 685k]
  ------------------
  526|  95.5k|            return -value;
  527|  95.5k|        }
  528|   685k|        return value;
  529|   781k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|   829k|    {
  524|   829k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   829k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 108k, False: 721k]
  ------------------
  526|   108k|            return -value;
  527|   108k|        }
  528|   721k|        return value;
  529|   829k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|   790k|    {
  524|   790k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   790k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 98.1k, False: 692k]
  ------------------
  526|  98.1k|            return -value;
  527|  98.1k|        }
  528|   692k|        return value;
  529|   790k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.42M|{
   69|  2.42M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.42M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.72M, False: 701k]
  ------------------
   71|  1.72M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.72M, False: 0]
  ------------------
   72|  1.72M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.72M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.72M|    }
   76|       |
   77|   701k|    auto& it = *r;
   78|   701k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 308k, False: 392k]
  ------------------
   79|   308k|        return std::pair{it, sign_type::minus_sign};
   80|   308k|    }
   81|   392k|    return std::pair{it, sign_type::plus_sign};
   82|   701k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  19.6M|{
   51|  19.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  19.6M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  69.5k|{
   69|  69.5k|    auto r = read_one_of_code_unit(range, "+-");
   70|  69.5k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 51.5k, False: 17.9k]
  ------------------
   71|  51.5k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 51.3k, False: 164]
  ------------------
   72|  51.3k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  51.3k|        }
   74|    164|        return unexpected(eof_error::eof);
   75|  51.5k|    }
   76|       |
   77|  17.9k|    auto& it = *r;
   78|  17.9k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 5.23k, False: 12.7k]
  ------------------
   79|  5.23k|        return std::pair{it, sign_type::minus_sign};
   80|  5.23k|    }
   81|  12.7k|    return std::pair{it, sign_type::plus_sign};
   82|  17.9k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   102k|{
   69|   102k|    auto r = read_one_of_code_unit(range, "+-");
   70|   102k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 102k, False: 0]
  ------------------
   71|   102k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 102k, False: 0]
  ------------------
   72|   102k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   102k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   102k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.20M|{
   69|  2.20M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.20M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.58M, False: 614k]
  ------------------
   71|  1.58M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.58M, False: 0]
  ------------------
   72|  1.58M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.58M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.58M|    }
   76|       |
   77|   614k|    auto& it = *r;
   78|   614k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 280k, False: 334k]
  ------------------
   79|   280k|        return std::pair{it, sign_type::minus_sign};
   80|   280k|    }
   81|   334k|    return std::pair{it, sign_type::plus_sign};
   82|   614k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  9.58M|{
   55|  9.58M|#if WCHAR_MIN < 0
   56|  9.58M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 9.58M, False: 4.08k]
  |  Branch (56:20): [True: 9.47M, False: 105k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  9.47M|        return char_to_int(static_cast<char>(ch));
   61|  9.47M|    }
   62|   109k|    return 255;
   63|  9.58M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  63.3k|{
   69|  63.3k|    auto r = read_one_of_code_unit(range, "+-");
   70|  63.3k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 45.8k, False: 17.5k]
  ------------------
   71|  45.8k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 45.7k, False: 164]
  ------------------
   72|  45.7k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  45.7k|        }
   74|    164|        return unexpected(eof_error::eof);
   75|  45.8k|    }
   76|       |
   77|  17.5k|    auto& it = *r;
   78|  17.5k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 5.12k, False: 12.3k]
  ------------------
   79|  5.12k|        return std::pair{it, sign_type::minus_sign};
   80|  5.12k|    }
   81|  12.3k|    return std::pair{it, sign_type::plus_sign};
   82|  17.5k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   339k|{
   69|   339k|    auto r = read_one_of_code_unit(range, "+-");
   70|   339k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 184k, False: 155k]
  ------------------
   71|   184k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 184k, False: 0]
  ------------------
   72|   184k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   184k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   184k|    }
   76|       |
   77|   155k|    auto& it = *r;
   78|   155k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 155k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|   155k|    return std::pair{it, sign_type::plus_sign};
   82|   155k|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.44M|{
   43|  2.44M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.6k, False: 2.42M]
  |  |  ------------------
  ------------------
   44|  20.6k|        return unexpected(e);
   45|  20.6k|    }
   46|       |
   47|  2.42M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.42M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.42M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.42M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|   224k|    {
  122|   224k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   224k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   224k|                          basic_contiguous_scan_context<char_type>>) {
  126|   224k|            auto rd = make_reader<T, char_type>();
  127|   224k|            return impl(rd, range, value);
  128|   224k|        }
  129|   224k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   224k|            auto rd = make_reader<T, char_type>();
  131|   224k|            if (!is_segment_contiguous(range)) {
  132|   224k|                return impl(rd, range, value);
  133|   224k|            }
  134|   224k|            auto crange = get_as_contiguous(range);
  135|   224k|            SCN_TRY(it, impl(rd, crange, value));
  136|   224k|            return ranges_polyfill::batch_next(
  137|   224k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   224k|        }
  139|   224k|        else {
  140|   224k|            SCN_EXPECT(false);
  141|   224k|            SCN_UNREACHABLE;
  142|   224k|        }
  143|   224k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   224k|    {
  112|   224k|        SCN_TRY(it,
  ------------------
  |  |   71|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   222k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   222k|                    .transform_error(make_eof_scan_error));
  115|   222k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   222k|                               loc);
  117|   224k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|   255k|    {
  122|   255k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   255k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   255k|                          basic_contiguous_scan_context<char_type>>) {
  126|   255k|            auto rd = make_reader<T, char_type>();
  127|   255k|            return impl(rd, range, value);
  128|   255k|        }
  129|   255k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   255k|            auto rd = make_reader<T, char_type>();
  131|   255k|            if (!is_segment_contiguous(range)) {
  132|   255k|                return impl(rd, range, value);
  133|   255k|            }
  134|   255k|            auto crange = get_as_contiguous(range);
  135|   255k|            SCN_TRY(it, impl(rd, crange, value));
  136|   255k|            return ranges_polyfill::batch_next(
  137|   255k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   255k|        }
  139|   255k|        else {
  140|   255k|            SCN_EXPECT(false);
  141|   255k|            SCN_UNREACHABLE;
  142|   255k|        }
  143|   255k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   255k|    {
  112|   255k|        SCN_TRY(it,
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.44k, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.44k|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   252k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   252k|                    .transform_error(make_eof_scan_error));
  115|   252k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   252k|                               loc);
  117|   255k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|   260k|    {
  122|   260k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   260k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   260k|                          basic_contiguous_scan_context<char_type>>) {
  126|   260k|            auto rd = make_reader<T, char_type>();
  127|   260k|            return impl(rd, range, value);
  128|   260k|        }
  129|   260k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   260k|            auto rd = make_reader<T, char_type>();
  131|   260k|            if (!is_segment_contiguous(range)) {
  132|   260k|                return impl(rd, range, value);
  133|   260k|            }
  134|   260k|            auto crange = get_as_contiguous(range);
  135|   260k|            SCN_TRY(it, impl(rd, crange, value));
  136|   260k|            return ranges_polyfill::batch_next(
  137|   260k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   260k|        }
  139|   260k|        else {
  140|   260k|            SCN_EXPECT(false);
  141|   260k|            SCN_UNREACHABLE;
  142|   260k|        }
  143|   260k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   260k|    {
  112|   260k|        SCN_TRY(it,
  ------------------
  |  |   71|   260k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   260k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   260k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.61k, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.61k|    }                                                  \
  |  |  |  |   70|   260k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   257k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   257k|                    .transform_error(make_eof_scan_error));
  115|   257k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   257k|                               loc);
  117|   260k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   102k|{
   43|   102k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   102k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 102k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   102k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   102k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.89k|    {
  122|  7.89k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.89k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.89k|            auto rd = make_reader<T, char_type>();
  127|  7.89k|            return impl(rd, range, value);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            auto rd = make_reader<T, char_type>();
  131|  7.89k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.89k, False: 0]
  ------------------
  132|  7.89k|                return impl(rd, range, value);
  133|  7.89k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.89k|        else {
  140|  7.89k|            SCN_EXPECT(false);
  141|  7.89k|            SCN_UNREACHABLE;
  142|  7.89k|        }
  143|  7.89k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.89k|    {
  112|  7.89k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.89k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.89k|                    .transform_error(make_eof_scan_error));
  115|  7.89k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.89k|                               loc);
  117|  7.89k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.89k|    {
  122|  7.89k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.89k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.89k|            auto rd = make_reader<T, char_type>();
  127|  7.89k|            return impl(rd, range, value);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            auto rd = make_reader<T, char_type>();
  131|  7.89k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.89k, False: 0]
  ------------------
  132|  7.89k|                return impl(rd, range, value);
  133|  7.89k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.89k|        else {
  140|  7.89k|            SCN_EXPECT(false);
  141|  7.89k|            SCN_UNREACHABLE;
  142|  7.89k|        }
  143|  7.89k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.89k|    {
  112|  7.89k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.89k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.89k|                    .transform_error(make_eof_scan_error));
  115|  7.89k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.89k|                               loc);
  117|  7.89k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.89k|    {
  122|  7.89k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.89k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.89k|            auto rd = make_reader<T, char_type>();
  127|  7.89k|            return impl(rd, range, value);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            auto rd = make_reader<T, char_type>();
  131|  7.89k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.89k, False: 0]
  ------------------
  132|  7.89k|                return impl(rd, range, value);
  133|  7.89k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.89k|        else {
  140|  7.89k|            SCN_EXPECT(false);
  141|  7.89k|            SCN_UNREACHABLE;
  142|  7.89k|        }
  143|  7.89k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.89k|    {
  112|  7.89k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.89k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.89k|                    .transform_error(make_eof_scan_error));
  115|  7.89k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.89k|                               loc);
  117|  7.89k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|   531k|    {
  223|   531k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   531k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   531k|                          basic_contiguous_scan_context<char_type>>) {
  227|   531k|            auto rd = make_reader<T, char_type>();
  228|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   531k|            return impl(rd, range, value);
  233|   531k|        }
  234|   531k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   531k|            auto rd = make_reader<T, char_type>();
  236|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   531k|                return unexpected(e);
  238|   531k|            }
  239|       |
  240|   531k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   531k|                return impl(rd, range, value);
  242|   531k|            }
  243|       |
  244|   531k|            auto crange = get_as_contiguous(range);
  245|   531k|            SCN_TRY(it, impl(rd, crange, value));
  246|   531k|            return ranges_polyfill::batch_next(
  247|   531k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   531k|        }
  249|   531k|        else {
  250|   531k|            SCN_EXPECT(false);
  251|   531k|            SCN_UNREACHABLE;
  252|   531k|        }
  253|   531k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   531k|    {
  205|   531k|        SCN_TRY(it,
  ------------------
  |  |   71|   531k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   531k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   531k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.43k, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.43k|    }                                                  \
  |  |  |  |   70|   531k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   526k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   526k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   526k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   526k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 526k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   526k|        return rd.read_specs(subr, specs, value, loc);
  218|   526k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|   585k|    {
  223|   585k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   585k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   585k|                          basic_contiguous_scan_context<char_type>>) {
  227|   585k|            auto rd = make_reader<T, char_type>();
  228|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 585k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   585k|            return impl(rd, range, value);
  233|   585k|        }
  234|   585k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   585k|            auto rd = make_reader<T, char_type>();
  236|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   585k|                return unexpected(e);
  238|   585k|            }
  239|       |
  240|   585k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   585k|                return impl(rd, range, value);
  242|   585k|            }
  243|       |
  244|   585k|            auto crange = get_as_contiguous(range);
  245|   585k|            SCN_TRY(it, impl(rd, crange, value));
  246|   585k|            return ranges_polyfill::batch_next(
  247|   585k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   585k|        }
  249|   585k|        else {
  250|   585k|            SCN_EXPECT(false);
  251|   585k|            SCN_UNREACHABLE;
  252|   585k|        }
  253|   585k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   585k|    {
  205|   585k|        SCN_TRY(it,
  ------------------
  |  |   71|   585k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.14k, False: 579k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.14k|    }                                                  \
  |  |  |  |   70|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   579k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   579k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   579k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   579k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   579k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 579k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   579k|        return rd.read_specs(subr, specs, value, loc);
  218|   579k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|   592k|    {
  223|   592k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   592k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   592k|                          basic_contiguous_scan_context<char_type>>) {
  227|   592k|            auto rd = make_reader<T, char_type>();
  228|   592k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 592k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   592k|            return impl(rd, range, value);
  233|   592k|        }
  234|   592k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   592k|            auto rd = make_reader<T, char_type>();
  236|   592k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   592k|                return unexpected(e);
  238|   592k|            }
  239|       |
  240|   592k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   592k|                return impl(rd, range, value);
  242|   592k|            }
  243|       |
  244|   592k|            auto crange = get_as_contiguous(range);
  245|   592k|            SCN_TRY(it, impl(rd, crange, value));
  246|   592k|            return ranges_polyfill::batch_next(
  247|   592k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   592k|        }
  249|   592k|        else {
  250|   592k|            SCN_EXPECT(false);
  251|   592k|            SCN_UNREACHABLE;
  252|   592k|        }
  253|   592k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   592k|    {
  205|   592k|        SCN_TRY(it,
  ------------------
  |  |   71|   592k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   592k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   592k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.47k, False: 585k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.47k|    }                                                  \
  |  |  |  |   70|   592k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   585k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   585k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   585k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   585k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 585k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   585k|        return rd.read_specs(subr, specs, value, loc);
  218|   585k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.3k|    {
  223|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.3k|            auto rd = make_reader<T, char_type>();
  228|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.3k|                return unexpected(e);
  230|  26.3k|            }
  231|       |
  232|  26.3k|            return impl(rd, range, value);
  233|  26.3k|        }
  234|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.3k|            auto rd = make_reader<T, char_type>();
  236|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.3k|                return impl(rd, range, value);
  242|  26.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.3k|        else {
  250|  26.3k|            SCN_EXPECT(false);
  251|  26.3k|            SCN_UNREACHABLE;
  252|  26.3k|        }
  253|  26.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.3k|    {
  205|  26.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.3k|    {
  223|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.3k|            auto rd = make_reader<T, char_type>();
  228|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.3k|                return unexpected(e);
  230|  26.3k|            }
  231|       |
  232|  26.3k|            return impl(rd, range, value);
  233|  26.3k|        }
  234|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.3k|            auto rd = make_reader<T, char_type>();
  236|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.3k|                return impl(rd, range, value);
  242|  26.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.3k|        else {
  250|  26.3k|            SCN_EXPECT(false);
  251|  26.3k|            SCN_UNREACHABLE;
  252|  26.3k|        }
  253|  26.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.3k|    {
  205|  26.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.3k|    {
  223|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.3k|            auto rd = make_reader<T, char_type>();
  228|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.3k|                return unexpected(e);
  230|  26.3k|            }
  231|       |
  232|  26.3k|            return impl(rd, range, value);
  233|  26.3k|        }
  234|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.3k|            auto rd = make_reader<T, char_type>();
  236|  26.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.3k|                return impl(rd, range, value);
  242|  26.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.3k|        else {
  250|  26.3k|            SCN_EXPECT(false);
  251|  26.3k|            SCN_UNREACHABLE;
  252|  26.3k|        }
  253|  26.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.3k|    {
  205|  26.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.3k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.23M|{
   43|  2.23M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.9k, False: 2.21M]
  |  |  ------------------
  ------------------
   44|  20.9k|        return unexpected(e);
   45|  20.9k|    }
   46|       |
   47|  2.21M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.21M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.21M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.21M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|   202k|    {
  122|   202k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   202k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   202k|                          basic_contiguous_scan_context<char_type>>) {
  126|   202k|            auto rd = make_reader<T, char_type>();
  127|   202k|            return impl(rd, range, value);
  128|   202k|        }
  129|   202k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   202k|            auto rd = make_reader<T, char_type>();
  131|   202k|            if (!is_segment_contiguous(range)) {
  132|   202k|                return impl(rd, range, value);
  133|   202k|            }
  134|   202k|            auto crange = get_as_contiguous(range);
  135|   202k|            SCN_TRY(it, impl(rd, crange, value));
  136|   202k|            return ranges_polyfill::batch_next(
  137|   202k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   202k|        }
  139|   202k|        else {
  140|   202k|            SCN_EXPECT(false);
  141|   202k|            SCN_UNREACHABLE;
  142|   202k|        }
  143|   202k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   202k|    {
  112|   202k|        SCN_TRY(it,
  ------------------
  |  |   71|   202k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   202k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   202k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|   202k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   200k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   200k|                    .transform_error(make_eof_scan_error));
  115|   200k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   200k|                               loc);
  117|   202k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|   229k|    {
  122|   229k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   229k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   229k|                          basic_contiguous_scan_context<char_type>>) {
  126|   229k|            auto rd = make_reader<T, char_type>();
  127|   229k|            return impl(rd, range, value);
  128|   229k|        }
  129|   229k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   229k|            auto rd = make_reader<T, char_type>();
  131|   229k|            if (!is_segment_contiguous(range)) {
  132|   229k|                return impl(rd, range, value);
  133|   229k|            }
  134|   229k|            auto crange = get_as_contiguous(range);
  135|   229k|            SCN_TRY(it, impl(rd, crange, value));
  136|   229k|            return ranges_polyfill::batch_next(
  137|   229k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   229k|        }
  139|   229k|        else {
  140|   229k|            SCN_EXPECT(false);
  141|   229k|            SCN_UNREACHABLE;
  142|   229k|        }
  143|   229k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   229k|    {
  112|   229k|        SCN_TRY(it,
  ------------------
  |  |   71|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.59k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.59k|    }                                                  \
  |  |  |  |   70|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   226k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   226k|                    .transform_error(make_eof_scan_error));
  115|   226k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   226k|                               loc);
  117|   229k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|   233k|    {
  122|   233k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   233k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   233k|                          basic_contiguous_scan_context<char_type>>) {
  126|   233k|            auto rd = make_reader<T, char_type>();
  127|   233k|            return impl(rd, range, value);
  128|   233k|        }
  129|   233k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   233k|            auto rd = make_reader<T, char_type>();
  131|   233k|            if (!is_segment_contiguous(range)) {
  132|   233k|                return impl(rd, range, value);
  133|   233k|            }
  134|   233k|            auto crange = get_as_contiguous(range);
  135|   233k|            SCN_TRY(it, impl(rd, crange, value));
  136|   233k|            return ranges_polyfill::batch_next(
  137|   233k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   233k|        }
  139|   233k|        else {
  140|   233k|            SCN_EXPECT(false);
  141|   233k|            SCN_UNREACHABLE;
  142|   233k|        }
  143|   233k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   233k|    {
  112|   233k|        SCN_TRY(it,
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.76k, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.76k|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   230k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   230k|                    .transform_error(make_eof_scan_error));
  115|   230k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   230k|                               loc);
  117|   233k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|   489k|    {
  223|   489k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   489k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   489k|                          basic_contiguous_scan_context<char_type>>) {
  227|   489k|            auto rd = make_reader<T, char_type>();
  228|   489k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   489k|            return impl(rd, range, value);
  233|   489k|        }
  234|   489k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   489k|            auto rd = make_reader<T, char_type>();
  236|   489k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   489k|                return unexpected(e);
  238|   489k|            }
  239|       |
  240|   489k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   489k|                return impl(rd, range, value);
  242|   489k|            }
  243|       |
  244|   489k|            auto crange = get_as_contiguous(range);
  245|   489k|            SCN_TRY(it, impl(rd, crange, value));
  246|   489k|            return ranges_polyfill::batch_next(
  247|   489k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   489k|        }
  249|   489k|        else {
  250|   489k|            SCN_EXPECT(false);
  251|   489k|            SCN_UNREACHABLE;
  252|   489k|        }
  253|   489k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   489k|    {
  205|   489k|        SCN_TRY(it,
  ------------------
  |  |   71|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.87k, False: 483k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.87k|    }                                                  \
  |  |  |  |   70|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   483k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   483k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   483k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   483k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 483k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   483k|        return rd.read_specs(subr, specs, value, loc);
  218|   483k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|   535k|    {
  223|   535k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   535k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   535k|                          basic_contiguous_scan_context<char_type>>) {
  227|   535k|            auto rd = make_reader<T, char_type>();
  228|   535k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 535k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   535k|            return impl(rd, range, value);
  233|   535k|        }
  234|   535k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   535k|            auto rd = make_reader<T, char_type>();
  236|   535k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   535k|                return unexpected(e);
  238|   535k|            }
  239|       |
  240|   535k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   535k|                return impl(rd, range, value);
  242|   535k|            }
  243|       |
  244|   535k|            auto crange = get_as_contiguous(range);
  245|   535k|            SCN_TRY(it, impl(rd, crange, value));
  246|   535k|            return ranges_polyfill::batch_next(
  247|   535k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   535k|        }
  249|   535k|        else {
  250|   535k|            SCN_EXPECT(false);
  251|   535k|            SCN_UNREACHABLE;
  252|   535k|        }
  253|   535k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   535k|    {
  205|   535k|        SCN_TRY(it,
  ------------------
  |  |   71|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.60k, False: 528k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.60k|    }                                                  \
  |  |  |  |   70|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   528k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   528k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   528k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   528k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 528k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   528k|        return rd.read_specs(subr, specs, value, loc);
  218|   528k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|   541k|    {
  223|   541k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   541k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   541k|                          basic_contiguous_scan_context<char_type>>) {
  227|   541k|            auto rd = make_reader<T, char_type>();
  228|   541k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 541k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   541k|            return impl(rd, range, value);
  233|   541k|        }
  234|   541k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   541k|            auto rd = make_reader<T, char_type>();
  236|   541k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   541k|                return unexpected(e);
  238|   541k|            }
  239|       |
  240|   541k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   541k|                return impl(rd, range, value);
  242|   541k|            }
  243|       |
  244|   541k|            auto crange = get_as_contiguous(range);
  245|   541k|            SCN_TRY(it, impl(rd, crange, value));
  246|   541k|            return ranges_polyfill::batch_next(
  247|   541k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   541k|        }
  249|   541k|        else {
  250|   541k|            SCN_EXPECT(false);
  251|   541k|            SCN_UNREACHABLE;
  252|   541k|        }
  253|   541k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   541k|    {
  205|   541k|        SCN_TRY(it,
  ------------------
  |  |   71|   541k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.94k, False: 534k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.94k|    }                                                  \
  |  |  |  |   70|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   534k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   534k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   534k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   534k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 534k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   534k|        return rd.read_specs(subr, specs, value, loc);
  218|   534k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   340k|{
   43|   340k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132, False: 340k]
  |  |  ------------------
  ------------------
   44|    132|        return unexpected(e);
   45|    132|    }
   46|       |
   47|   340k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 340k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   340k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   340k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  28.3k|    {
  122|  28.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  28.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  28.3k|            auto rd = make_reader<T, char_type>();
  127|  28.3k|            return impl(rd, range, value);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            auto rd = make_reader<T, char_type>();
  131|  28.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 28.3k, False: 0]
  ------------------
  132|  28.3k|                return impl(rd, range, value);
  133|  28.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  28.3k|        else {
  140|  28.3k|            SCN_EXPECT(false);
  141|  28.3k|            SCN_UNREACHABLE;
  142|  28.3k|        }
  143|  28.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  28.3k|    {
  112|  28.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 28.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  28.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  28.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  28.3k|                    .transform_error(make_eof_scan_error));
  115|  28.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  28.3k|                               loc);
  117|  28.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  28.3k|    {
  122|  28.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  28.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  28.3k|            auto rd = make_reader<T, char_type>();
  127|  28.3k|            return impl(rd, range, value);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            auto rd = make_reader<T, char_type>();
  131|  28.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 28.3k, False: 0]
  ------------------
  132|  28.3k|                return impl(rd, range, value);
  133|  28.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  28.3k|        else {
  140|  28.3k|            SCN_EXPECT(false);
  141|  28.3k|            SCN_UNREACHABLE;
  142|  28.3k|        }
  143|  28.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  28.3k|    {
  112|  28.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 28.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  28.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  28.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  28.3k|                    .transform_error(make_eof_scan_error));
  115|  28.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  28.3k|                               loc);
  117|  28.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  28.3k|    {
  122|  28.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  28.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  28.3k|            auto rd = make_reader<T, char_type>();
  127|  28.3k|            return impl(rd, range, value);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            auto rd = make_reader<T, char_type>();
  131|  28.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 28.3k, False: 0]
  ------------------
  132|  28.3k|                return impl(rd, range, value);
  133|  28.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  28.3k|        else {
  140|  28.3k|            SCN_EXPECT(false);
  141|  28.3k|            SCN_UNREACHABLE;
  142|  28.3k|        }
  143|  28.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  28.3k|    {
  112|  28.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  28.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 28.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  28.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  28.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  28.3k|                    .transform_error(make_eof_scan_error));
  115|  28.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  28.3k|                               loc);
  117|  28.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.0k|    {
  223|  85.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.0k|            auto rd = make_reader<T, char_type>();
  228|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.0k|                return unexpected(e);
  230|  85.0k|            }
  231|       |
  232|  85.0k|            return impl(rd, range, value);
  233|  85.0k|        }
  234|  85.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.0k|            auto rd = make_reader<T, char_type>();
  236|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.0k|                return impl(rd, range, value);
  242|  85.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.0k|        else {
  250|  85.0k|            SCN_EXPECT(false);
  251|  85.0k|            SCN_UNREACHABLE;
  252|  85.0k|        }
  253|  85.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.0k|    {
  205|  85.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 82, False: 85.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     82|    }                                                  \
  |  |  |  |   70|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.0k|    {
  223|  85.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.0k|            auto rd = make_reader<T, char_type>();
  228|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.0k|                return unexpected(e);
  230|  85.0k|            }
  231|       |
  232|  85.0k|            return impl(rd, range, value);
  233|  85.0k|        }
  234|  85.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.0k|            auto rd = make_reader<T, char_type>();
  236|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.0k|                return impl(rd, range, value);
  242|  85.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.0k|        else {
  250|  85.0k|            SCN_EXPECT(false);
  251|  85.0k|            SCN_UNREACHABLE;
  252|  85.0k|        }
  253|  85.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.0k|    {
  205|  85.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 82, False: 85.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     82|    }                                                  \
  |  |  |  |   70|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  85.0k|    {
  223|  85.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  85.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  85.0k|            auto rd = make_reader<T, char_type>();
  228|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  85.0k|                return unexpected(e);
  230|  85.0k|            }
  231|       |
  232|  85.0k|            return impl(rd, range, value);
  233|  85.0k|        }
  234|  85.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  85.0k|            auto rd = make_reader<T, char_type>();
  236|  85.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  85.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 85.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  85.0k|                return impl(rd, range, value);
  242|  85.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  85.0k|        else {
  250|  85.0k|            SCN_EXPECT(false);
  251|  85.0k|            SCN_UNREACHABLE;
  252|  85.0k|        }
  253|  85.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  85.0k|    {
  205|  85.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 82, False: 85.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     82|    }                                                  \
  |  |  |  |   70|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  85.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  85.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  85.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  85.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 85.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  85.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  85.0k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   813k|{
  110|   813k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   813k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   600k|{
  263|   600k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   600k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   600k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 119k, False: 480k]
  |  |  ------------------
  ------------------
  267|   119k|        return {get_start_of_next_code_point(input),
  268|   119k|                detail::invalid_code_point};
  269|   119k|    }
  270|   480k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.88k, False: 477k]
  |  |  ------------------
  ------------------
  271|  2.88k|        return {input.end(), detail::invalid_code_point};
  272|  2.88k|    }
  273|       |
  274|   477k|    constexpr auto enc = get_encoding<CharT>();
  275|   477k|    std::size_t result{1};
  276|   477k|    char32_t output{};
  277|   477k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   477k|        result = simdutf::convert_utf8_to_utf32(
  279|   477k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   477k|    }
  281|   477k|    else if constexpr (enc == encoding::utf16) {
  282|   477k|        result = simdutf::convert_utf16_to_utf32(
  283|   477k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   477k|    }
  285|   477k|    else if constexpr (enc == encoding::utf32) {
  286|   477k|        SCN_EXPECT(len == 1);
  287|   477k|        output = static_cast<char32_t>(input[0]);
  288|   477k|    }
  289|       |
  290|   477k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 452k]
  |  |  ------------------
  ------------------
  291|  24.9k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  24.9k|                detail::invalid_code_point};
  293|  24.9k|    }
  294|       |
  295|   452k|    return {input.begin() + len, output};
  296|   477k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|   144k|{
  248|   144k|    auto it = input.begin();
  249|   323k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 212k, False: 110k]
  ------------------
  250|   212k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 33.7k, False: 179k]
  ------------------
  251|  33.7k|            break;
  252|  33.7k|        }
  253|   212k|    }
  254|       |
  255|   144k|    return it;
  256|   144k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  81.0M|{
  110|  81.0M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  81.0M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  5.57M|{
  449|  5.57M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 5.57M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  5.57M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  5.57M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  5.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  5.57M|                    input.size() * sizeof(SourceCharT));
  457|  5.57M|        return input.size();
  458|  5.57M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  1.10M|{
  116|  1.10M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  1.10M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  1.10M|    constexpr auto enc = get_encoding<CharT>();
  124|  1.10M|    char32_t output{};
  125|  1.10M|    size_t ret{};
  126|  1.10M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.10M|#ifndef NDEBUG
  128|  1.10M|        if (validate_unicode(input)) {
  129|  1.10M|            auto len =
  130|  1.10M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  1.10M|            SCN_EXPECT(len == 1);
  132|  1.10M|        }
  133|  1.10M|#endif
  134|  1.10M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  1.10M|    }
  136|  1.10M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  1.10M|#ifndef NDEBUG
  138|  1.10M|        if (validate_unicode(input)) {
  139|  1.10M|            auto len = simdutf::utf32_length_from_utf16(
  140|  1.10M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  1.10M|            SCN_EXPECT(len == 1);
  142|  1.10M|        }
  143|  1.10M|#endif
  144|  1.10M|        ret = simdutf::convert_utf16_to_utf32(
  145|  1.10M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  1.10M|    }
  147|  1.10M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  1.10M|        output = static_cast<char32_t>(input[0]);
  149|  1.10M|        ret = output < detail::invalid_code_point;
  150|  1.10M|    }
  151|       |
  152|  1.10M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  1.10M|    return static_cast<char32_t>(output);
  156|  1.10M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  43.0M|{
   29|       |    // Pattern_White_Space property
   30|  43.0M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 42.7M, False: 323k]
  |  Branch (30:27): [True: 2.65M, False: 40.1M]
  ------------------
   31|  43.0M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 564k, False: 39.8M]
  ------------------
   32|  43.0M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 484k, False: 39.3M]
  ------------------
   33|  43.0M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.68k, False: 39.3M]
  ------------------
   34|  43.0M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 4.56k, False: 39.3M]
  ------------------
   35|  43.0M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 8.97k, False: 39.3M]
  ------------------
   36|  43.0M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 39.3M]
  ------------------
   37|  43.0M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  28.6k|{
   69|  28.6k|    return static_cast<unsigned char>(ch) <= 127;
   70|  28.6k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  28.2k|{
   74|  28.2k|#if WCHAR_MIN < 0
   75|  28.2k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 28.2k, False: 0]
  |  Branch (75:23): [True: 28.1k, False: 83]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  28.2k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  46.3M|{
   58|  46.3M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  46.3M|        static_cast<unsigned char>(ch))];
   60|  46.3M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  8.55M|{
   92|  8.55M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  8.55M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.70M|    {
   57|  1.70M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  5.05M|    {
   61|  5.05M|        return m_current;
   62|  5.05M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.34M|    {
   66|  3.34M|        return m_range.end();
   67|  3.34M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.63M|    {
   81|  1.63M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.63M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.63M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.63M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.63M|        }
   87|  1.63M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.63M|    static_cast<    \
  |  |  247|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.63M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.70M|    {
   71|  1.70M|        return ranges::subrange{begin(), end()};
   72|  1.70M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.56M|    {
   57|  1.56M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.55M|    {
   61|  4.55M|        return m_current;
   62|  4.55M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  2.98M|    {
   66|  2.98M|        return m_range.end();
   67|  2.98M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.42M|    {
   81|  1.42M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.42M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.42M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.42M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.42M|        }
   87|  1.42M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.42M|    static_cast<    \
  |  |  247|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.56M|    {
   71|  1.56M|        return ranges::subrange{begin(), end()};
   72|  1.56M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.42M|    {
  205|  2.42M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.42M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   222k|    {
  196|   222k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   222k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   222k|              cvref<T> obj = *get<T>(fn);
  187|   222k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   222k|                  obj(static_cast<decltype(args)>(args)...);
  189|   222k|              }
  190|   222k|              else {
  191|   222k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   222k|              }
  193|   222k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   222k|    {
  126|   222k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   222k|            return static_cast<T*>(s.m_cp);
  128|   222k|        }
  129|   222k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   222k|            return static_cast<T*>(s.m_p);
  131|   222k|        }
  132|   222k|        else {
  133|   222k|            return reinterpret_cast<T*>(s.m_fp);
  134|   222k|        }
  135|   222k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  15.0M|    {
  205|  15.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  15.0M|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.40M|    {
  196|  1.40M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  7.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.52M|              cvref<T> obj = *get<T>(fn);
  187|  7.52M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.52M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.52M|              }
  190|  7.52M|              else {
  191|  7.52M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.52M|              }
  193|  7.52M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  7.52M|    {
  126|  7.52M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.52M|            return static_cast<T*>(s.m_cp);
  128|  7.52M|        }
  129|  7.52M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.52M|            return static_cast<T*>(s.m_p);
  131|  7.52M|        }
  132|  7.52M|        else {
  133|  7.52M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.52M|        }
  135|  7.52M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.40M|        {
  104|  1.40M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|  7.36k|    {
  196|  7.36k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|  28.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.6k|              cvref<T> obj = *get<T>(fn);
  187|  28.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.6k|              }
  190|  28.6k|              else {
  191|  28.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.6k|              }
  193|  28.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|  28.6k|    {
  126|  28.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.6k|            return static_cast<T*>(s.m_cp);
  128|  28.6k|        }
  129|  28.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.6k|            return static_cast<T*>(s.m_p);
  131|  28.6k|        }
  132|  28.6k|        else {
  133|  28.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.6k|        }
  135|  28.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|  7.36k|        {
  104|  7.36k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|  69.5k|    {
  196|  69.5k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   215k|              cvref<T> obj = *get<T>(fn);
  187|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   215k|                  obj(static_cast<decltype(args)>(args)...);
  189|   215k|              }
  190|   215k|              else {
  191|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   215k|              }
  193|   215k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|   215k|    {
  126|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   215k|            return static_cast<T*>(s.m_cp);
  128|   215k|        }
  129|   215k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   215k|            return static_cast<T*>(s.m_p);
  131|   215k|        }
  132|   215k|        else {
  133|   215k|            return reinterpret_cast<T*>(s.m_fp);
  134|   215k|        }
  135|   215k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|  69.5k|        {
  104|  69.5k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|  1.22M|    {
  196|  1.22M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|  7.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.18M|              cvref<T> obj = *get<T>(fn);
  187|  7.18M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.18M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.18M|              }
  190|  7.18M|              else {
  191|  7.18M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.18M|              }
  193|  7.18M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|  7.18M|    {
  126|  7.18M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.18M|            return static_cast<T*>(s.m_cp);
  128|  7.18M|        }
  129|  7.18M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.18M|            return static_cast<T*>(s.m_p);
  131|  7.18M|        }
  132|  7.18M|        else {
  133|  7.18M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.18M|        }
  135|  7.18M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|  1.22M|        {
  104|  1.22M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   222k|        {
  104|   222k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   252k|    {
  196|   252k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   252k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   252k|              cvref<T> obj = *get<T>(fn);
  187|   252k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   252k|                  obj(static_cast<decltype(args)>(args)...);
  189|   252k|              }
  190|   252k|              else {
  191|   252k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   252k|              }
  193|   252k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   252k|    {
  126|   252k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   252k|            return static_cast<T*>(s.m_cp);
  128|   252k|        }
  129|   252k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   252k|            return static_cast<T*>(s.m_p);
  131|   252k|        }
  132|   252k|        else {
  133|   252k|            return reinterpret_cast<T*>(s.m_fp);
  134|   252k|        }
  135|   252k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   252k|        {
  104|   252k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   257k|    {
  196|   257k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   257k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   257k|              cvref<T> obj = *get<T>(fn);
  187|   257k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   257k|                  obj(static_cast<decltype(args)>(args)...);
  189|   257k|              }
  190|   257k|              else {
  191|   257k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   257k|              }
  193|   257k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   257k|    {
  126|   257k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   257k|            return static_cast<T*>(s.m_cp);
  128|   257k|        }
  129|   257k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   257k|            return static_cast<T*>(s.m_p);
  131|   257k|        }
  132|   257k|        else {
  133|   257k|            return reinterpret_cast<T*>(s.m_fp);
  134|   257k|        }
  135|   257k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   257k|        {
  104|   257k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  47.8M|    {
  205|  47.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  47.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  47.8M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.55M|    {
  196|  2.55M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  5.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.37M|              cvref<T> obj = *get<T>(fn);
  187|  5.37M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.37M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.37M|              }
  190|  5.37M|              else {
  191|  5.37M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.37M|              }
  193|  5.37M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  5.37M|    {
  126|  5.37M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.37M|            return static_cast<T*>(s.m_cp);
  128|  5.37M|        }
  129|  5.37M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.37M|            return static_cast<T*>(s.m_p);
  131|  5.37M|        }
  132|  5.37M|        else {
  133|  5.37M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.37M|        }
  135|  5.37M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.55M|        {
  104|  2.55M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   102k|    {
  205|   102k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   102k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.89k|    {
  196|  7.89k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.89k|              cvref<T> obj = *get<T>(fn);
  187|  7.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.89k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.89k|              }
  190|  7.89k|              else {
  191|  7.89k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.89k|              }
  193|  7.89k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.89k|    {
  126|  7.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.89k|            return static_cast<T*>(s.m_cp);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            return static_cast<T*>(s.m_p);
  131|  7.89k|        }
  132|  7.89k|        else {
  133|  7.89k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.89k|        }
  135|  7.89k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  15.7k|    {
  196|  15.7k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  15.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.7k|              cvref<T> obj = *get<T>(fn);
  187|  15.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.7k|              }
  190|  15.7k|              else {
  191|  15.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.7k|              }
  193|  15.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  15.7k|    {
  126|  15.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.7k|            return static_cast<T*>(s.m_cp);
  128|  15.7k|        }
  129|  15.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.7k|            return static_cast<T*>(s.m_p);
  131|  15.7k|        }
  132|  15.7k|        else {
  133|  15.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.7k|        }
  135|  15.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  15.7k|        {
  104|  15.7k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  86.7k|    {
  196|  86.7k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  86.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  86.7k|              cvref<T> obj = *get<T>(fn);
  187|  86.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  86.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  86.7k|              }
  190|  86.7k|              else {
  191|  86.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  86.7k|              }
  193|  86.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  86.7k|    {
  126|  86.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  86.7k|            return static_cast<T*>(s.m_cp);
  128|  86.7k|        }
  129|  86.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  86.7k|            return static_cast<T*>(s.m_p);
  131|  86.7k|        }
  132|  86.7k|        else {
  133|  86.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  86.7k|        }
  135|  86.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  86.7k|        {
  104|  86.7k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.89k|        {
  104|  7.89k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.89k|    {
  196|  7.89k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.89k|              cvref<T> obj = *get<T>(fn);
  187|  7.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.89k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.89k|              }
  190|  7.89k|              else {
  191|  7.89k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.89k|              }
  193|  7.89k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.89k|    {
  126|  7.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.89k|            return static_cast<T*>(s.m_cp);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            return static_cast<T*>(s.m_p);
  131|  7.89k|        }
  132|  7.89k|        else {
  133|  7.89k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.89k|        }
  135|  7.89k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.89k|        {
  104|  7.89k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.89k|    {
  196|  7.89k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.89k|              cvref<T> obj = *get<T>(fn);
  187|  7.89k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.89k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.89k|              }
  190|  7.89k|              else {
  191|  7.89k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.89k|              }
  193|  7.89k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.89k|    {
  126|  7.89k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.89k|            return static_cast<T*>(s.m_cp);
  128|  7.89k|        }
  129|  7.89k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.89k|            return static_cast<T*>(s.m_p);
  131|  7.89k|        }
  132|  7.89k|        else {
  133|  7.89k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.89k|        }
  135|  7.89k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.89k|        {
  104|  7.89k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   148k|    {
  196|   148k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   148k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   148k|              cvref<T> obj = *get<T>(fn);
  187|   148k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   148k|                  obj(static_cast<decltype(args)>(args)...);
  189|   148k|              }
  190|   148k|              else {
  191|   148k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   148k|              }
  193|   148k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   148k|    {
  126|   148k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   148k|            return static_cast<T*>(s.m_cp);
  128|   148k|        }
  129|   148k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   148k|            return static_cast<T*>(s.m_p);
  131|   148k|        }
  132|   148k|        else {
  133|   148k|            return reinterpret_cast<T*>(s.m_fp);
  134|   148k|        }
  135|   148k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   148k|        {
  104|   148k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   378k|    {
  196|   378k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   378k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   378k|              cvref<T> obj = *get<T>(fn);
  187|   378k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   378k|                  obj(static_cast<decltype(args)>(args)...);
  189|   378k|              }
  190|   378k|              else {
  191|   378k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   378k|              }
  193|   378k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   378k|    {
  126|   378k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   378k|            return static_cast<T*>(s.m_cp);
  128|   378k|        }
  129|   378k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   378k|            return static_cast<T*>(s.m_p);
  131|   378k|        }
  132|   378k|        else {
  133|   378k|            return reinterpret_cast<T*>(s.m_fp);
  134|   378k|        }
  135|   378k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   378k|        {
  104|   378k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   168k|    {
  196|   168k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   168k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   168k|              cvref<T> obj = *get<T>(fn);
  187|   168k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   168k|                  obj(static_cast<decltype(args)>(args)...);
  189|   168k|              }
  190|   168k|              else {
  191|   168k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   168k|              }
  193|   168k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   168k|    {
  126|   168k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   168k|            return static_cast<T*>(s.m_cp);
  128|   168k|        }
  129|   168k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   168k|            return static_cast<T*>(s.m_p);
  131|   168k|        }
  132|   168k|        else {
  133|   168k|            return reinterpret_cast<T*>(s.m_fp);
  134|   168k|        }
  135|   168k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   168k|        {
  104|   168k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   410k|    {
  196|   410k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   410k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   410k|              cvref<T> obj = *get<T>(fn);
  187|   410k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   410k|                  obj(static_cast<decltype(args)>(args)...);
  189|   410k|              }
  190|   410k|              else {
  191|   410k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   410k|              }
  193|   410k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   410k|    {
  126|   410k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   410k|            return static_cast<T*>(s.m_cp);
  128|   410k|        }
  129|   410k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   410k|            return static_cast<T*>(s.m_p);
  131|   410k|        }
  132|   410k|        else {
  133|   410k|            return reinterpret_cast<T*>(s.m_fp);
  134|   410k|        }
  135|   410k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   410k|        {
  104|   410k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   171k|    {
  196|   171k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   171k|              cvref<T> obj = *get<T>(fn);
  187|   171k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   171k|                  obj(static_cast<decltype(args)>(args)...);
  189|   171k|              }
  190|   171k|              else {
  191|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   171k|              }
  193|   171k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   171k|    {
  126|   171k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   171k|            return static_cast<T*>(s.m_cp);
  128|   171k|        }
  129|   171k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   171k|            return static_cast<T*>(s.m_p);
  131|   171k|        }
  132|   171k|        else {
  133|   171k|            return reinterpret_cast<T*>(s.m_fp);
  134|   171k|        }
  135|   171k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   171k|        {
  104|   171k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   414k|    {
  196|   414k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   414k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   414k|              cvref<T> obj = *get<T>(fn);
  187|   414k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   414k|                  obj(static_cast<decltype(args)>(args)...);
  189|   414k|              }
  190|   414k|              else {
  191|   414k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   414k|              }
  193|   414k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   414k|    {
  126|   414k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   414k|            return static_cast<T*>(s.m_cp);
  128|   414k|        }
  129|   414k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   414k|            return static_cast<T*>(s.m_p);
  131|   414k|        }
  132|   414k|        else {
  133|   414k|            return reinterpret_cast<T*>(s.m_fp);
  134|   414k|        }
  135|   414k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   414k|        {
  104|   414k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.26k|    {
  196|  5.26k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.26k|              cvref<T> obj = *get<T>(fn);
  187|  5.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.26k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.26k|              }
  190|  5.26k|              else {
  191|  5.26k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.26k|              }
  193|  5.26k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.26k|    {
  126|  5.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.26k|            return static_cast<T*>(s.m_cp);
  128|  5.26k|        }
  129|  5.26k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.26k|            return static_cast<T*>(s.m_p);
  131|  5.26k|        }
  132|  5.26k|        else {
  133|  5.26k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.26k|        }
  135|  5.26k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.26k|        {
  104|  5.26k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  21.0k|    {
  196|  21.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  21.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.0k|              cvref<T> obj = *get<T>(fn);
  187|  21.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.0k|              }
  190|  21.0k|              else {
  191|  21.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.0k|              }
  193|  21.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  21.0k|    {
  126|  21.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.0k|            return static_cast<T*>(s.m_cp);
  128|  21.0k|        }
  129|  21.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.0k|            return static_cast<T*>(s.m_p);
  131|  21.0k|        }
  132|  21.0k|        else {
  133|  21.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.0k|        }
  135|  21.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  21.0k|        {
  104|  21.0k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.26k|    {
  196|  5.26k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.26k|              cvref<T> obj = *get<T>(fn);
  187|  5.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.26k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.26k|              }
  190|  5.26k|              else {
  191|  5.26k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.26k|              }
  193|  5.26k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.26k|    {
  126|  5.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.26k|            return static_cast<T*>(s.m_cp);
  128|  5.26k|        }
  129|  5.26k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.26k|            return static_cast<T*>(s.m_p);
  131|  5.26k|        }
  132|  5.26k|        else {
  133|  5.26k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.26k|        }
  135|  5.26k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.26k|        {
  104|  5.26k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  21.0k|    {
  196|  21.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  21.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.0k|              cvref<T> obj = *get<T>(fn);
  187|  21.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.0k|              }
  190|  21.0k|              else {
  191|  21.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.0k|              }
  193|  21.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  21.0k|    {
  126|  21.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.0k|            return static_cast<T*>(s.m_cp);
  128|  21.0k|        }
  129|  21.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.0k|            return static_cast<T*>(s.m_p);
  131|  21.0k|        }
  132|  21.0k|        else {
  133|  21.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.0k|        }
  135|  21.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  21.0k|        {
  104|  21.0k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.26k|    {
  196|  5.26k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.26k|              cvref<T> obj = *get<T>(fn);
  187|  5.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.26k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.26k|              }
  190|  5.26k|              else {
  191|  5.26k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.26k|              }
  193|  5.26k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.26k|    {
  126|  5.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.26k|            return static_cast<T*>(s.m_cp);
  128|  5.26k|        }
  129|  5.26k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.26k|            return static_cast<T*>(s.m_p);
  131|  5.26k|        }
  132|  5.26k|        else {
  133|  5.26k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.26k|        }
  135|  5.26k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.26k|        {
  104|  5.26k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  21.0k|    {
  196|  21.0k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  21.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  21.0k|              cvref<T> obj = *get<T>(fn);
  187|  21.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  21.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  21.0k|              }
  190|  21.0k|              else {
  191|  21.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  21.0k|              }
  193|  21.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  21.0k|    {
  126|  21.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  21.0k|            return static_cast<T*>(s.m_cp);
  128|  21.0k|        }
  129|  21.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.0k|            return static_cast<T*>(s.m_p);
  131|  21.0k|        }
  132|  21.0k|        else {
  133|  21.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  21.0k|        }
  135|  21.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  21.0k|        {
  104|  21.0k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.21M|    {
  196|  2.21M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  3.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.92M|              cvref<T> obj = *get<T>(fn);
  187|  3.92M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.92M|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.92M|              }
  190|  3.92M|              else {
  191|  3.92M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.92M|              }
  193|  3.92M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  3.92M|    {
  126|  3.92M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.92M|            return static_cast<T*>(s.m_cp);
  128|  3.92M|        }
  129|  3.92M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.92M|            return static_cast<T*>(s.m_p);
  131|  3.92M|        }
  132|  3.92M|        else {
  133|  3.92M|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.92M|        }
  135|  3.92M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.21M|        {
  104|  2.21M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.20M|    {
  205|  2.20M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.20M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   200k|    {
  196|   200k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   200k|              cvref<T> obj = *get<T>(fn);
  187|   200k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   200k|                  obj(static_cast<decltype(args)>(args)...);
  189|   200k|              }
  190|   200k|              else {
  191|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   200k|              }
  193|   200k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   200k|    {
  126|   200k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   200k|            return static_cast<T*>(s.m_cp);
  128|   200k|        }
  129|   200k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   200k|            return static_cast<T*>(s.m_p);
  131|   200k|        }
  132|   200k|        else {
  133|   200k|            return reinterpret_cast<T*>(s.m_fp);
  134|   200k|        }
  135|   200k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  14.0M|    {
  205|  14.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  14.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  14.0M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.69M|    {
  196|  1.69M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  7.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.02M|              cvref<T> obj = *get<T>(fn);
  187|  7.02M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.02M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.02M|              }
  190|  7.02M|              else {
  191|  7.02M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.02M|              }
  193|  7.02M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  7.02M|    {
  126|  7.02M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.02M|            return static_cast<T*>(s.m_cp);
  128|  7.02M|        }
  129|  7.02M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.02M|            return static_cast<T*>(s.m_p);
  131|  7.02M|        }
  132|  7.02M|        else {
  133|  7.02M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.02M|        }
  135|  7.02M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.69M|        {
  104|  1.69M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_:
  195|  7.23k|    {
  196|  7.23k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  28.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.2k|              cvref<T> obj = *get<T>(fn);
  187|  28.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.2k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.2k|              }
  190|  28.2k|              else {
  191|  28.2k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.2k|              }
  193|  28.2k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlwE_EEDaNS3_7storageE:
  125|  28.2k|    {
  126|  28.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.2k|            return static_cast<T*>(s.m_cp);
  128|  28.2k|        }
  129|  28.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.2k|            return static_cast<T*>(s.m_p);
  131|  28.2k|        }
  132|  28.2k|        else {
  133|  28.2k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.2k|        }
  135|  28.2k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_LPv0EEEPSK_:
  103|  7.23k|        {
  104|  7.23k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  63.3k|    {
  196|  63.3k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   193k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   193k|              cvref<T> obj = *get<T>(fn);
  187|   193k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   193k|                  obj(static_cast<decltype(args)>(args)...);
  189|   193k|              }
  190|   193k|              else {
  191|   193k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   193k|              }
  193|   193k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|   193k|    {
  126|   193k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   193k|            return static_cast<T*>(s.m_cp);
  128|   193k|        }
  129|   193k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   193k|            return static_cast<T*>(s.m_p);
  131|   193k|        }
  132|   193k|        else {
  133|   193k|            return reinterpret_cast<T*>(s.m_fp);
  134|   193k|        }
  135|   193k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  63.3k|        {
  104|  63.3k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|  1.10M|    {
  196|  1.10M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|  5.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.54M|              cvref<T> obj = *get<T>(fn);
  187|  5.54M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.54M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.54M|              }
  190|  5.54M|              else {
  191|  5.54M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.54M|              }
  193|  5.54M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|  5.54M|    {
  126|  5.54M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.54M|            return static_cast<T*>(s.m_cp);
  128|  5.54M|        }
  129|  5.54M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.54M|            return static_cast<T*>(s.m_p);
  131|  5.54M|        }
  132|  5.54M|        else {
  133|  5.54M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.54M|        }
  135|  5.54M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|  1.10M|        {
  104|  1.10M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   200k|        {
  104|   200k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   226k|    {
  196|   226k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   226k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   226k|              cvref<T> obj = *get<T>(fn);
  187|   226k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   226k|                  obj(static_cast<decltype(args)>(args)...);
  189|   226k|              }
  190|   226k|              else {
  191|   226k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   226k|              }
  193|   226k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   226k|    {
  126|   226k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   226k|            return static_cast<T*>(s.m_cp);
  128|   226k|        }
  129|   226k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   226k|            return static_cast<T*>(s.m_p);
  131|   226k|        }
  132|   226k|        else {
  133|   226k|            return reinterpret_cast<T*>(s.m_fp);
  134|   226k|        }
  135|   226k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   226k|        {
  104|   226k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   230k|    {
  196|   230k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   230k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   230k|              cvref<T> obj = *get<T>(fn);
  187|   230k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   230k|                  obj(static_cast<decltype(args)>(args)...);
  189|   230k|              }
  190|   230k|              else {
  191|   230k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   230k|              }
  193|   230k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   230k|    {
  126|   230k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   230k|            return static_cast<T*>(s.m_cp);
  128|   230k|        }
  129|   230k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   230k|            return static_cast<T*>(s.m_p);
  131|   230k|        }
  132|   230k|        else {
  133|   230k|            return reinterpret_cast<T*>(s.m_fp);
  134|   230k|        }
  135|   230k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   230k|        {
  104|   230k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   133k|    {
  196|   133k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   133k|              cvref<T> obj = *get<T>(fn);
  187|   133k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   133k|                  obj(static_cast<decltype(args)>(args)...);
  189|   133k|              }
  190|   133k|              else {
  191|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   133k|              }
  193|   133k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   133k|    {
  126|   133k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   133k|            return static_cast<T*>(s.m_cp);
  128|   133k|        }
  129|   133k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   133k|            return static_cast<T*>(s.m_p);
  131|   133k|        }
  132|   133k|        else {
  133|   133k|            return reinterpret_cast<T*>(s.m_fp);
  134|   133k|        }
  135|   133k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   133k|        {
  104|   133k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   350k|    {
  196|   350k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   350k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   350k|              cvref<T> obj = *get<T>(fn);
  187|   350k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   350k|                  obj(static_cast<decltype(args)>(args)...);
  189|   350k|              }
  190|   350k|              else {
  191|   350k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   350k|              }
  193|   350k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   350k|    {
  126|   350k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   350k|            return static_cast<T*>(s.m_cp);
  128|   350k|        }
  129|   350k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   350k|            return static_cast<T*>(s.m_p);
  131|   350k|        }
  132|   350k|        else {
  133|   350k|            return reinterpret_cast<T*>(s.m_fp);
  134|   350k|        }
  135|   350k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   350k|        {
  104|   350k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   151k|    {
  196|   151k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   151k|              cvref<T> obj = *get<T>(fn);
  187|   151k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   151k|                  obj(static_cast<decltype(args)>(args)...);
  189|   151k|              }
  190|   151k|              else {
  191|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   151k|              }
  193|   151k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   151k|    {
  126|   151k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   151k|            return static_cast<T*>(s.m_cp);
  128|   151k|        }
  129|   151k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   151k|            return static_cast<T*>(s.m_p);
  131|   151k|        }
  132|   151k|        else {
  133|   151k|            return reinterpret_cast<T*>(s.m_fp);
  134|   151k|        }
  135|   151k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   151k|        {
  104|   151k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   377k|    {
  196|   377k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   377k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   377k|              cvref<T> obj = *get<T>(fn);
  187|   377k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   377k|                  obj(static_cast<decltype(args)>(args)...);
  189|   377k|              }
  190|   377k|              else {
  191|   377k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   377k|              }
  193|   377k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   377k|    {
  126|   377k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   377k|            return static_cast<T*>(s.m_cp);
  128|   377k|        }
  129|   377k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   377k|            return static_cast<T*>(s.m_p);
  131|   377k|        }
  132|   377k|        else {
  133|   377k|            return reinterpret_cast<T*>(s.m_fp);
  134|   377k|        }
  135|   377k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   377k|        {
  104|   377k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   153k|    {
  196|   153k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   153k|              cvref<T> obj = *get<T>(fn);
  187|   153k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   153k|                  obj(static_cast<decltype(args)>(args)...);
  189|   153k|              }
  190|   153k|              else {
  191|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   153k|              }
  193|   153k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   153k|    {
  126|   153k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   153k|            return static_cast<T*>(s.m_cp);
  128|   153k|        }
  129|   153k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   153k|            return static_cast<T*>(s.m_p);
  131|   153k|        }
  132|   153k|        else {
  133|   153k|            return reinterpret_cast<T*>(s.m_fp);
  134|   153k|        }
  135|   153k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   153k|        {
  104|   153k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   380k|    {
  196|   380k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   380k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   380k|              cvref<T> obj = *get<T>(fn);
  187|   380k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   380k|                  obj(static_cast<decltype(args)>(args)...);
  189|   380k|              }
  190|   380k|              else {
  191|   380k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   380k|              }
  193|   380k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   380k|    {
  126|   380k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   380k|            return static_cast<T*>(s.m_cp);
  128|   380k|        }
  129|   380k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   380k|            return static_cast<T*>(s.m_p);
  131|   380k|        }
  132|   380k|        else {
  133|   380k|            return reinterpret_cast<T*>(s.m_fp);
  134|   380k|        }
  135|   380k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   380k|        {
  104|   380k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   340k|    {
  196|   340k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  1.44M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.44M|              cvref<T> obj = *get<T>(fn);
  187|  1.44M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.44M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.44M|              }
  190|  1.44M|              else {
  191|  1.44M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.44M|              }
  193|  1.44M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  1.44M|    {
  126|  1.44M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.44M|            return static_cast<T*>(s.m_cp);
  128|  1.44M|        }
  129|  1.44M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.44M|            return static_cast<T*>(s.m_p);
  131|  1.44M|        }
  132|  1.44M|        else {
  133|  1.44M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.44M|        }
  135|  1.44M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   340k|        {
  104|   340k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   339k|    {
  205|   339k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   339k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  28.3k|    {
  196|  28.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.3k|              cvref<T> obj = *get<T>(fn);
  187|  28.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.3k|              }
  190|  28.3k|              else {
  191|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.3k|              }
  193|  28.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.3k|    {
  126|  28.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.3k|            return static_cast<T*>(s.m_cp);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            return static_cast<T*>(s.m_p);
  131|  28.3k|        }
  132|  28.3k|        else {
  133|  28.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.3k|        }
  135|  28.3k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|  85.0k|    {
  196|  85.0k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   198k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   198k|              cvref<T> obj = *get<T>(fn);
  187|   198k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   198k|                  obj(static_cast<decltype(args)>(args)...);
  189|   198k|              }
  190|   198k|              else {
  191|   198k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   198k|              }
  193|   198k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   198k|    {
  126|   198k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   198k|            return static_cast<T*>(s.m_cp);
  128|   198k|        }
  129|   198k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   198k|            return static_cast<T*>(s.m_p);
  131|   198k|        }
  132|   198k|        else {
  133|   198k|            return reinterpret_cast<T*>(s.m_fp);
  134|   198k|        }
  135|   198k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|  85.0k|        {
  104|  85.0k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   439k|    {
  196|   439k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.06M|              cvref<T> obj = *get<T>(fn);
  187|  1.06M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.06M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.06M|              }
  190|  1.06M|              else {
  191|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.06M|              }
  193|  1.06M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|  1.06M|    {
  126|  1.06M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.06M|            return static_cast<T*>(s.m_cp);
  128|  1.06M|        }
  129|  1.06M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.06M|            return static_cast<T*>(s.m_p);
  131|  1.06M|        }
  132|  1.06M|        else {
  133|  1.06M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.06M|        }
  135|  1.06M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   439k|        {
  104|   439k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  28.3k|        {
  104|  28.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  28.3k|    {
  196|  28.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.3k|              cvref<T> obj = *get<T>(fn);
  187|  28.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.3k|              }
  190|  28.3k|              else {
  191|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.3k|              }
  193|  28.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.3k|    {
  126|  28.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.3k|            return static_cast<T*>(s.m_cp);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            return static_cast<T*>(s.m_p);
  131|  28.3k|        }
  132|  28.3k|        else {
  133|  28.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.3k|        }
  135|  28.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  28.3k|        {
  104|  28.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  28.3k|    {
  196|  28.3k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.3k|              cvref<T> obj = *get<T>(fn);
  187|  28.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.3k|              }
  190|  28.3k|              else {
  191|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.3k|              }
  193|  28.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  28.3k|    {
  126|  28.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.3k|            return static_cast<T*>(s.m_cp);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            return static_cast<T*>(s.m_p);
  131|  28.3k|        }
  132|  28.3k|        else {
  133|  28.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.3k|        }
  135|  28.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  28.3k|        {
  104|  28.3k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  18.8k|    {
  196|  18.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  18.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.8k|              cvref<T> obj = *get<T>(fn);
  187|  18.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.8k|              }
  190|  18.8k|              else {
  191|  18.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.8k|              }
  193|  18.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  18.8k|    {
  126|  18.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.8k|            return static_cast<T*>(s.m_cp);
  128|  18.8k|        }
  129|  18.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.8k|            return static_cast<T*>(s.m_p);
  131|  18.8k|        }
  132|  18.8k|        else {
  133|  18.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.8k|        }
  135|  18.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  18.8k|        {
  104|  18.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  66.1k|    {
  196|  66.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  66.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  66.1k|              cvref<T> obj = *get<T>(fn);
  187|  66.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  66.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  66.1k|              }
  190|  66.1k|              else {
  191|  66.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  66.1k|              }
  193|  66.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  66.1k|    {
  126|  66.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  66.1k|            return static_cast<T*>(s.m_cp);
  128|  66.1k|        }
  129|  66.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  66.1k|            return static_cast<T*>(s.m_p);
  131|  66.1k|        }
  132|  66.1k|        else {
  133|  66.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  66.1k|        }
  135|  66.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  66.1k|        {
  104|  66.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  18.8k|    {
  196|  18.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  18.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.8k|              cvref<T> obj = *get<T>(fn);
  187|  18.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.8k|              }
  190|  18.8k|              else {
  191|  18.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.8k|              }
  193|  18.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  18.8k|    {
  126|  18.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.8k|            return static_cast<T*>(s.m_cp);
  128|  18.8k|        }
  129|  18.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.8k|            return static_cast<T*>(s.m_p);
  131|  18.8k|        }
  132|  18.8k|        else {
  133|  18.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.8k|        }
  135|  18.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  18.8k|        {
  104|  18.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  66.1k|    {
  196|  66.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  66.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  66.1k|              cvref<T> obj = *get<T>(fn);
  187|  66.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  66.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  66.1k|              }
  190|  66.1k|              else {
  191|  66.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  66.1k|              }
  193|  66.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  66.1k|    {
  126|  66.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  66.1k|            return static_cast<T*>(s.m_cp);
  128|  66.1k|        }
  129|  66.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  66.1k|            return static_cast<T*>(s.m_p);
  131|  66.1k|        }
  132|  66.1k|        else {
  133|  66.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  66.1k|        }
  135|  66.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  66.1k|        {
  104|  66.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  18.8k|    {
  196|  18.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  18.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.8k|              cvref<T> obj = *get<T>(fn);
  187|  18.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.8k|              }
  190|  18.8k|              else {
  191|  18.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.8k|              }
  193|  18.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  18.8k|    {
  126|  18.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.8k|            return static_cast<T*>(s.m_cp);
  128|  18.8k|        }
  129|  18.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.8k|            return static_cast<T*>(s.m_p);
  131|  18.8k|        }
  132|  18.8k|        else {
  133|  18.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.8k|        }
  135|  18.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  18.8k|        {
  104|  18.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  66.1k|    {
  196|  66.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  66.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  66.1k|              cvref<T> obj = *get<T>(fn);
  187|  66.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  66.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  66.1k|              }
  190|  66.1k|              else {
  191|  66.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  66.1k|              }
  193|  66.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  66.1k|    {
  126|  66.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  66.1k|            return static_cast<T*>(s.m_cp);
  128|  66.1k|        }
  129|  66.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  66.1k|            return static_cast<T*>(s.m_p);
  131|  66.1k|        }
  132|  66.1k|        else {
  133|  66.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  66.1k|        }
  135|  66.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  66.1k|        {
  104|  66.1k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|  1.05M|    {
  196|  1.05M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  37.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  37.1M|              cvref<T> obj = *get<T>(fn);
  187|  37.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  37.1M|                  obj(static_cast<decltype(args)>(args)...);
  189|  37.1M|              }
  190|  37.1M|              else {
  191|  37.1M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  37.1M|              }
  193|  37.1M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  37.1M|    {
  126|  37.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  37.1M|            return static_cast<T*>(s.m_cp);
  128|  37.1M|        }
  129|  37.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  37.1M|            return static_cast<T*>(s.m_p);
  131|  37.1M|        }
  132|  37.1M|        else {
  133|  37.1M|            return reinterpret_cast<T*>(s.m_fp);
  134|  37.1M|        }
  135|  37.1M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|  1.05M|        {
  104|  1.05M|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  52.5k|{
   44|  52.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  52.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  52.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  17.8M|{
   30|  17.8M|    return e != eof_error::good;
   31|  17.8M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   154k|{
   91|   154k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   154k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  13.9M|    {
   69|  13.9M|        return a.m_code == b.m_code;
   70|  13.9M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  34.3M|    {
   55|  34.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  34.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  34.3M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  5.12M|    return [code, msg](parse_error err) {
  115|  5.12M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.12M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  5.12M|{
  100|  5.12M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 5.12M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  5.12M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 59.2k, False: 5.06M]
  ------------------
  105|  59.2k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|  59.2k|    }
  107|       |
  108|  5.06M|    return scan_error{code, msg};
  109|  5.12M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  5.12M|{
  114|  5.12M|    return [code, msg](parse_error err) {
  115|  5.12M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.12M|    };
  117|  5.12M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.10M|{
  587|  1.10M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.10M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|  47.3k|{
  595|  47.3k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|  47.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  47.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|  47.3k|    else {
  600|  47.3k|        source.sync_all();
  601|  47.3k|    }
  602|  47.3k|    return n;
  603|  47.3k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.00M|{
  611|  1.00M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.00M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   155k|{
  619|   155k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   155k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   155k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.8k, False: 85.1k]
  |  |  ------------------
  ------------------
  621|  70.8k|        source.sync(*n);
  622|  70.8k|    }
  623|  85.1k|    else {
  624|  85.1k|        source.sync_all();
  625|  85.1k|    }
  626|   155k|    return n;
  627|   155k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.10M|{
  544|  1.10M|    return vscan_internal(source, format, args);
  545|  1.10M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|  47.3k|{
  550|  47.3k|    auto n = vscan_internal(source, format, args);
  551|  47.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  47.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|  47.3k|    else {
  555|  47.3k|        source.sync_all();
  556|  47.3k|    }
  557|  47.3k|    return n;
  558|  47.3k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.00M|{
  564|  1.00M|    return vscan_internal(source, format, args);
  565|  1.00M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   155k|{
  570|   155k|    auto n = vscan_internal(source, format, args);
  571|   155k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   155k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.8k, False: 85.1k]
  |  |  ------------------
  ------------------
  572|  70.8k|        source.sync(*n);
  573|  70.8k|    }
  574|  85.1k|    else {
  575|  85.1k|        source.sync_all();
  576|  85.1k|    }
  577|   155k|    return n;
  578|   155k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   246k|{
  654|   246k|    return vscan_value_internal(source, arg);
  655|   246k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  7.89k|{
  659|  7.89k|    auto n = vscan_value_internal(source, arg);
  660|  7.89k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  7.89k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  7.89k|    else {
  664|  7.89k|        source.sync_all();
  665|  7.89k|    }
  666|  7.89k|    return n;
  667|  7.89k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   221k|{
  673|   221k|    return vscan_value_internal(source, arg);
  674|   221k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  28.3k|{
  679|  28.3k|    auto n = vscan_value_internal(source, arg);
  680|  28.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  28.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 14.1k, False: 14.1k]
  |  |  ------------------
  ------------------
  681|  14.1k|        source.sync(*n);
  682|  14.1k|    }
  683|  14.1k|    else {
  684|  14.1k|        source.sync_all();
  685|  14.1k|    }
  686|  28.3k|    return n;
  687|  28.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  94.6k|{
  476|  94.6k|    const auto argcount = args.size();
  477|  94.6k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 15.7k, False: 78.9k]
  |  Branch (477:60): [True: 15.7k, False: 0]
  ------------------
  478|  15.7k|        auto arg = args.get(0);
  479|  15.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  15.7k|    }
  481|       |
  482|  78.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 78.9k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  78.9k|    SCN_UNLIKELY_ATTR
  490|  78.9k|    {
  491|  78.9k|        auto handler = format_handler<false, CharT>{
  492|  78.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  78.9k|    static_cast<    \
  |  |  247|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  78.9k|    static_cast<    \
  |  |  247|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  78.9k|        return vscan_parse_format_string(format, handler);
  494|  78.9k|    }
  495|  78.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.29M|{
   36|  2.29M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.78M, False: 509k]
  ------------------
   37|  1.78M|        return false;
   38|  1.78M|    }
   39|   509k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 509k, False: 0]
  |  Branch (39:39): [True: 509k, False: 0]
  ------------------
   40|  2.29M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  23.6k|{
   69|  23.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  23.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  23.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  23.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  23.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  23.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  23.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  23.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  23.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.70M|    {
  314|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  3.60M|    {
  133|  3.60M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.60M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  3.60M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.70M|    {
  264|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.70M|{
  441|  1.70M|    const auto beg = handler.get_ctx().begin();
  442|  1.70M|    detail::parse_format_string<false>(format, handler);
  443|  1.70M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.9k, False: 1.63M]
  |  |  ------------------
  ------------------
  444|  78.9k|        return unexpected(handler.error);
  445|  78.9k|    }
  446|  1.63M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.70M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  11.8M|    {
  425|  11.8M|        return ctx.get();
  426|  11.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  11.8M|    {
  268|  11.8M|        return contiguous_ctx;
  269|  11.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.34M|    {
  318|  3.34M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.34M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.34M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.70M|{
   92|  1.70M|    auto arg = ctx.arg(id);
   93|  1.70M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.70M|    return arg;
   97|  1.70M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  3.60M|    {
  208|  3.60M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.60M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  3.60M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.60M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  3.60M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.60M, False: 0]
  |  |  ------------------
  ------------------
  218|  3.60M|            visited_args_lower64 |= (1ull << id);
  219|  3.60M|            return;
  220|  3.60M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  3.60M|    {
  193|  3.60M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.60M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  3.60M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.60M, False: 0]
  |  |  ------------------
  ------------------
  199|  3.60M|            return (visited_args_lower64 >> id) & 1ull;
  200|  3.60M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  3.60M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   441k|    {
  177|   441k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 441k, False: 0]
  |  |  ------------------
  ------------------
  178|   441k|            error = err;
  179|   441k|        }
  180|   441k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.70M|    {
  347|  1.70M|        return parse_ctx.next_arg_id();
  348|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.70M|    {
  388|  1.70M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.70M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.70M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.70M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.70M|        auto specs = detail::format_specs{};
  401|  1.70M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.70M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.70M|            arg.type()};
  404|       |
  405|  1.70M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.70M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.70M]
  |  Branch (406:29): [True: 0, False: 1.70M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.70M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.70M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.70M|        on_visit_scan_arg(
  417|  1.70M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.70M|                                           get_ctx().locale()},
  419|  1.70M|            arg);
  420|  1.70M|        return parse_ctx.begin();
  421|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.70M|    {
  112|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.70M|    {
  359|  1.70M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.70M]
  |  Branch (359:23): [True: 0, False: 1.70M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.70M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.70M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.9k, False: 1.63M]
  |  |  ------------------
  ------------------
  366|  78.9k|            on_error(r.error());
  367|  78.9k|        }
  368|  1.63M|        else {
  369|  1.63M|            get_ctx().advance_to(*r);
  370|  1.63M|        }
  371|  1.70M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  3.60M|    {
  140|  3.60M|        {
  141|  3.60M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 3.60M]
  ------------------
  142|  3.60M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 3.60M]
  ------------------
  143|  3.60M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  3.60M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  3.60M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 3.60M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  3.60M|        }
  150|       |
  151|  3.60M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 3.60M, False: 0]
  ------------------
  152|  3.60M|            return;
  153|  3.60M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  3.60M|    {
  188|  3.60M|        return error;
  189|  3.60M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  10.8M|    {
  184|  10.8M|        return static_cast<bool>(error);
  185|  10.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|  78.9k|    {
  314|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|  78.9k|    {
  241|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  78.9k|{
  441|  78.9k|    const auto beg = handler.get_ctx().begin();
  442|  78.9k|    detail::parse_format_string<false>(format, handler);
  443|  78.9k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.9k, False: 0]
  |  |  ------------------
  ------------------
  444|  78.9k|        return unexpected(handler.error);
  445|  78.9k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  78.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   394k|    {
  425|   394k|        return ctx.get();
  426|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   394k|    {
  245|   394k|        return ctx;
  246|   394k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|  78.9k|    {
  318|  78.9k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 78.9k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|  78.9k|{
   92|  78.9k|    auto arg = ctx.arg(id);
   93|  78.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  78.9k|    return arg;
   97|  78.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|  78.9k|    {
  347|  78.9k|        return parse_ctx.next_arg_id();
  348|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|  78.9k|    {
  388|  78.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  78.9k|        set_arg_as_visited(arg_id);
  390|       |
  391|  78.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 78.9k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  78.9k|        auto specs = detail::format_specs{};
  401|  78.9k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  78.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  78.9k|            arg.type()};
  404|       |
  405|  78.9k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  78.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 78.9k]
  |  Branch (406:29): [True: 0, False: 78.9k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  78.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  78.9k|        parse_ctx.advance_to(begin);
  415|       |
  416|  78.9k|        on_visit_scan_arg(
  417|  78.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  78.9k|                                           get_ctx().locale()},
  419|  78.9k|            arg);
  420|  78.9k|        return parse_ctx.begin();
  421|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|  78.9k|    {
  112|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  78.9k|    {
  359|  78.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 78.9k]
  |  Branch (359:23): [True: 0, False: 78.9k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  78.9k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  78.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.9k, False: 0]
  |  |  ------------------
  ------------------
  366|  78.9k|            on_error(r.error());
  367|  78.9k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|  78.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.20M|{
  456|  2.20M|    const auto argcount = args.size();
  457|  2.20M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 493k, False: 1.70M]
  |  Branch (457:60): [True: 493k, False: 0]
  ------------------
  458|   493k|        auto arg = args.get(0);
  459|   493k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   493k|    static_cast<    \
  |  |  247|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   493k|    }
  461|       |
  462|  1.70M|    auto handler = format_handler<true, CharT>{
  463|  1.70M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.70M|                                       source.data() + source.size()},
  465|  1.70M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.70M|    static_cast<    \
  |  |  247|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.70M|    static_cast<    \
  |  |  247|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.70M|    return vscan_parse_format_string(format, handler);
  467|  2.20M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   740k|{
   49|   740k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   740k|    auto reader =
   55|   740k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   740k|            ranges::subrange<const CharT*>{source.data(),
   57|   740k|                                           source.data() + source.size()},
   58|   740k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   740k|    static_cast<    \
  |  |  247|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   740k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   740k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   740k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   740k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 716k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|   740k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   716k|    return ranges::distance(source.data(), it);
   61|   740k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.00M|{
  456|  2.00M|    const auto argcount = args.size();
  457|  2.00M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 443k, False: 1.56M]
  |  Branch (457:60): [True: 443k, False: 0]
  ------------------
  458|   443k|        auto arg = args.get(0);
  459|   443k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   443k|    static_cast<    \
  |  |  247|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   443k|    }
  461|       |
  462|  1.56M|    auto handler = format_handler<true, CharT>{
  463|  1.56M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.56M|                                       source.data() + source.size()},
  465|  1.56M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.56M|    static_cast<    \
  |  |  247|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.56M|    static_cast<    \
  |  |  247|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.56M|    return vscan_parse_format_string(format, handler);
  467|  2.00M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.32M|{
   36|  2.32M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.82M, False: 500k]
  ------------------
   37|  1.82M|        return false;
   38|  1.82M|    }
   39|   500k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 500k, False: 0]
  |  Branch (39:39): [True: 500k, False: 0]
  ------------------
   40|  2.32M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   665k|{
   49|   665k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 665k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   665k|    auto reader =
   55|   665k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   665k|            ranges::subrange<const CharT*>{source.data(),
   57|   665k|                                           source.data() + source.size()},
   58|   665k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   665k|    static_cast<    \
  |  |  247|   665k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   665k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   665k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   665k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   665k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.5k, False: 622k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.5k|    }                                                  \
  |  |  |  |   70|   665k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   622k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   622k|    return ranges::distance(source.data(), it);
   61|   665k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.56M|    {
  314|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.56M|    {
  264|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.56M|{
  441|  1.56M|    const auto beg = handler.get_ctx().begin();
  442|  1.56M|    detail::parse_format_string<false>(format, handler);
  443|  1.56M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 1.42M]
  |  |  ------------------
  ------------------
  444|   141k|        return unexpected(handler.error);
  445|   141k|    }
  446|  1.42M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.56M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  10.6M|    {
  425|  10.6M|        return ctx.get();
  426|  10.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  10.6M|    {
  268|  10.6M|        return contiguous_ctx;
  269|  10.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  2.98M|    {
  318|  2.98M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 2.98M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  2.98M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.56M|{
   92|  1.56M|    auto arg = ctx.arg(id);
   93|  1.56M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.56M|    return arg;
   97|  1.56M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.56M|    {
  347|  1.56M|        return parse_ctx.next_arg_id();
  348|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.56M|    {
  388|  1.56M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.56M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.56M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.56M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.56M|        auto specs = detail::format_specs{};
  401|  1.56M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.56M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.56M|            arg.type()};
  404|       |
  405|  1.56M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.56M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.56M]
  |  Branch (406:29): [True: 0, False: 1.56M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.56M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.56M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.56M|        on_visit_scan_arg(
  417|  1.56M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.56M|                                           get_ctx().locale()},
  419|  1.56M|            arg);
  420|  1.56M|        return parse_ctx.begin();
  421|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.56M|    {
  112|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.56M|    {
  359|  1.56M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.56M]
  |  Branch (359:23): [True: 0, False: 1.56M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.56M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.56M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 1.42M]
  |  |  ------------------
  ------------------
  366|   141k|            on_error(r.error());
  367|   141k|        }
  368|  1.42M|        else {
  369|  1.42M|            get_ctx().advance_to(*r);
  370|  1.42M|        }
  371|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   311k|{
  476|   311k|    const auto argcount = args.size();
  477|   311k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 56.7k, False: 255k]
  |  Branch (477:60): [True: 56.7k, False: 0]
  ------------------
  478|  56.7k|        auto arg = args.get(0);
  479|  56.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  56.7k|    static_cast<    \
  |  |  247|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  56.7k|    }
  481|       |
  482|   255k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 255k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   255k|    SCN_UNLIKELY_ATTR
  490|   255k|    {
  491|   255k|        auto handler = format_handler<false, CharT>{
  492|   255k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   255k|    static_cast<    \
  |  |  247|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   255k|        return vscan_parse_format_string(format, handler);
  494|   255k|    }
  495|   255k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  85.0k|{
   69|  85.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.0k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  85.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  85.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 85.0k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  85.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  85.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  85.0k|    static_cast<    \
  |  |  247|  85.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  85.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  85.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.5k, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.5k|    }                                                  \
  |  |  |  |   70|  85.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  42.5k|    return it.position();
   86|  85.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   255k|    {
  314|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   255k|    {
  241|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   255k|{
  441|   255k|    const auto beg = handler.get_ctx().begin();
  442|   255k|    detail::parse_format_string<false>(format, handler);
  443|   255k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 113k]
  |  |  ------------------
  ------------------
  444|   141k|        return unexpected(handler.error);
  445|   141k|    }
  446|   113k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   255k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.50M|    {
  425|  1.50M|        return ctx.get();
  426|  1.50M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.50M|    {
  245|  1.50M|        return ctx;
  246|  1.50M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   368k|    {
  318|   368k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 368k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   368k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   255k|{
   92|   255k|    auto arg = ctx.arg(id);
   93|   255k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   255k|    return arg;
   97|   255k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   255k|    {
  347|   255k|        return parse_ctx.next_arg_id();
  348|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   255k|    {
  388|   255k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   255k|        set_arg_as_visited(arg_id);
  390|       |
  391|   255k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 255k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   255k|        auto specs = detail::format_specs{};
  401|   255k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   255k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   255k|            arg.type()};
  404|       |
  405|   255k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   255k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 255k]
  |  Branch (406:29): [True: 0, False: 255k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   255k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   255k|        parse_ctx.advance_to(begin);
  415|       |
  416|   255k|        on_visit_scan_arg(
  417|   255k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   255k|                                           get_ctx().locale()},
  419|   255k|            arg);
  420|   255k|        return parse_ctx.begin();
  421|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   255k|    {
  112|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   255k|    {
  359|   255k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 255k]
  |  Branch (359:23): [True: 0, False: 255k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   255k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   255k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 113k]
  |  |  ------------------
  ------------------
  366|   141k|            on_error(r.error());
  367|   141k|        }
  368|   113k|        else {
  369|   113k|            get_ctx().advance_to(*r);
  370|   113k|        }
  371|   255k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   246k|{
  502|   246k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   246k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  7.89k|{
  502|  7.89k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  7.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  7.89k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   221k|{
  502|   221k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   221k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  28.3k|{
  502|  28.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  28.3k|}

LLVMFuzzerTestOneInput:
   54|  2.63k|{
   55|  2.63k|    scn::fuzz::run({data, size});
   56|  2.63k|    return 0;
   57|  2.63k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  2.63k|{
   33|  2.63k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.63k]
  |  Branch (33:42): [True: 0, False: 2.63k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.63k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   38|       |
   39|  2.63k|    auto f =
   40|  2.63k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.63k|    do_basic_run(sv, f);
   42|       |
   43|  2.63k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   44|  2.63k|                                          L"{:g}", L"{:L}");
   45|  2.63k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.63k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.09k, False: 531]
  ------------------
   47|  2.09k|        do_basic_run(wsv_transcode, wf);
   48|  2.09k|    }
   49|  2.63k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.63k|{
   25|  2.63k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.63k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.63k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.63k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.63k|{
   25|  2.63k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.63k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.63k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.63k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  4.72k|{
   25|  4.72k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.72k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.72k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  4.72k|{
   25|  4.72k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.72k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.72k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.72k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.63k|{
   52|  2.63k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.63k|    std::copy(data.begin(), data.end(),
   57|  2.63k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.63k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.63k|    const auto wsv_reinterpret_size =
   62|  2.63k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 63, False: 2.56k]
  ------------------
   63|  2.63k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.63k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.63k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.63k|    std::wstring_view wsv_transcoded;
   69|  2.63k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 2.09k, False: 531]
  ------------------
   70|  2.09k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  2.09k|        else {
   79|  2.09k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  2.09k|            wstring_buffer_transcoded_wide.resize(size);
   81|  2.09k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  2.09k|                sv.data(), sv.size(),
   83|  2.09k|                reinterpret_cast<char32_t*>(
   84|  2.09k|                    wstring_buffer_transcoded_wide.data()));
   85|  2.09k|        }
   86|  2.09k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  2.09k|    }
   88|       |
   89|  2.63k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.63k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.63k|{
  140|  2.63k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.63k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.63k|    buf.resize(sizeof...(Args));
  143|  2.63k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.63k|    return {buf.data(), buf.size()};
  145|  2.63k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.63k|{
  126|  2.63k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.63k|        return format_string_view_buffer;
  128|  2.63k|    }
  129|  2.63k|    else {
  130|  2.63k|        return wformat_string_view_buffer;
  131|  2.63k|    }
  132|  2.63k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.63k|{
  200|  2.63k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.63k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.63k|                                   format_strings);
  203|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|   340k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   340k|            auto result = scn::scan<T>(
  156|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   340k|                scn::runtime_format(f));
  158|   340k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 324k]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|   324k|            it = result->begin();
  162|   324k|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|   340k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   340k|            auto result = scn::scan<T>(
  170|   340k|                global_locale,
  171|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   340k|                scn::runtime_format(f));
  173|   340k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 324k]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|   324k|            it = result->begin();
  177|   324k|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  74.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  74.8k|            auto result = scn::scan_value<T>(
  185|  74.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  74.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 72.2k]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|  72.2k|            it = result->begin();
  190|  72.2k|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|   377k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   377k|            auto result = scn::scan<T>(
  156|   377k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   377k|                scn::runtime_format(f));
  158|   377k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 362k]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|   362k|            it = result->begin();
  162|   362k|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|   377k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   377k|            auto result = scn::scan<T>(
  170|   377k|                global_locale,
  171|   377k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   377k|                scn::runtime_format(f));
  173|   377k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 362k]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|   362k|            it = result->begin();
  177|   362k|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  85.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  85.1k|            auto result = scn::scan_value<T>(
  185|  85.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  85.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 82.5k]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|  82.5k|            it = result->begin();
  190|  82.5k|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|   382k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   382k|            auto result = scn::scan<T>(
  156|   382k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   382k|                scn::runtime_format(f));
  158|   382k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 367k]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|   367k|            it = result->begin();
  162|   367k|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|   382k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   382k|            auto result = scn::scan<T>(
  170|   382k|                global_locale,
  171|   382k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   382k|                scn::runtime_format(f));
  173|   382k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 367k]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|   367k|            it = result->begin();
  177|   367k|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  86.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  86.7k|            auto result = scn::scan_value<T>(
  185|  86.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  86.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 84.1k]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|  84.1k|            it = result->begin();
  190|  84.1k|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|  15.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.7k|            auto result = scn::scan<T>(
  156|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.7k|                scn::runtime_format(f));
  158|  15.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 0]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|  15.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.7k|            auto result = scn::scan<T>(
  170|  15.7k|                global_locale,
  171|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.7k|                scn::runtime_format(f));
  173|  15.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 0]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  2.63k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.63k|            auto result = scn::scan_value<T>(
  185|  2.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.63k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 0]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|  15.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.7k|            auto result = scn::scan<T>(
  156|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.7k|                scn::runtime_format(f));
  158|  15.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 0]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|  15.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.7k|            auto result = scn::scan<T>(
  170|  15.7k|                global_locale,
  171|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.7k|                scn::runtime_format(f));
  173|  15.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 0]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  2.63k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.63k|            auto result = scn::scan_value<T>(
  185|  2.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.63k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 0]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.63k|{
  151|       |    // Regular scan
  152|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.7k, False: 2.63k]
  ------------------
  153|  15.7k|        auto it = scn::ranges::begin(source);
  154|  15.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.7k|            auto result = scn::scan<T>(
  156|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.7k|                scn::runtime_format(f));
  158|  15.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.7k, False: 0]
  ------------------
  159|  15.7k|                break;
  160|  15.7k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.7k|    }
  164|       |
  165|       |    // scan localized
  166|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.7k, False: 2.63k]
  ------------------
  167|  15.7k|        auto it = scn::ranges::begin(source);
  168|  15.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.7k|            auto result = scn::scan<T>(
  170|  15.7k|                global_locale,
  171|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.7k|                scn::runtime_format(f));
  173|  15.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.7k, False: 0]
  ------------------
  174|  15.7k|                break;
  175|  15.7k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.7k|    }
  179|       |
  180|       |    // scan_value
  181|  2.63k|    {
  182|  2.63k|        auto it = scn::ranges::begin(source);
  183|  2.63k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.63k|            auto result = scn::scan_value<T>(
  185|  2.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.63k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.63k, False: 0]
  ------------------
  187|  2.63k|                break;
  188|  2.63k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.63k|    }
  192|  2.63k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.63k|{
  109|  2.63k|    using char_type = ranges::range_value_t<Source>;
  110|  2.63k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.63k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.63k|              std::back_inserter(deque));
  113|  2.63k|    return deque;
  114|  2.63k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.63k|{
   98|  2.63k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.63k|        return noncontiguous_buffer;
  100|  2.63k|    }
  101|  2.63k|    else {
  102|  2.63k|        return wnoncontiguous_buffer;
  103|  2.63k|    }
  104|  2.63k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.63k|{
  140|  2.63k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.63k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.63k|    buf.resize(sizeof...(Args));
  143|  2.63k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.63k|    return {buf.data(), buf.size()};
  145|  2.63k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.63k|{
  126|  2.63k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.63k|        return format_string_view_buffer;
  128|  2.63k|    }
  129|  2.63k|    else {
  130|  2.63k|        return wformat_string_view_buffer;
  131|  2.63k|    }
  132|  2.63k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  4.72k|{
  200|  4.72k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  4.72k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  4.72k|                                   format_strings);
  203|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|   312k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   312k|            auto result = scn::scan<T>(
  156|   312k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   312k|                scn::runtime_format(f));
  158|   312k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 283k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|   283k|            it = result->begin();
  162|   283k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|   312k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   312k|            auto result = scn::scan<T>(
  170|   312k|                global_locale,
  171|   312k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   312k|                scn::runtime_format(f));
  173|   312k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 283k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|   283k|            it = result->begin();
  177|   283k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  67.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  67.4k|            auto result = scn::scan_value<T>(
  185|  67.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  67.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 62.7k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  62.7k|            it = result->begin();
  190|  62.7k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|   343k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   343k|            auto result = scn::scan<T>(
  156|   343k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   343k|                scn::runtime_format(f));
  158|   343k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 315k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|   315k|            it = result->begin();
  162|   315k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|   343k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   343k|            auto result = scn::scan<T>(
  170|   343k|                global_locale,
  171|   343k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   343k|                scn::runtime_format(f));
  173|   343k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 315k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|   315k|            it = result->begin();
  177|   315k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  76.4k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  76.4k|            auto result = scn::scan_value<T>(
  185|  76.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  76.4k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 71.6k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  71.6k|            it = result->begin();
  190|  71.6k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|   348k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   348k|            auto result = scn::scan<T>(
  156|   348k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   348k|                scn::runtime_format(f));
  158|   348k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 320k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|   320k|            it = result->begin();
  162|   320k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|   348k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   348k|            auto result = scn::scan<T>(
  170|   348k|                global_locale,
  171|   348k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   348k|                scn::runtime_format(f));
  173|   348k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 320k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|   320k|            it = result->begin();
  177|   320k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  77.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  77.8k|            auto result = scn::scan_value<T>(
  185|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  77.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 73.1k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  73.1k|            it = result->begin();
  190|  73.1k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|  51.9k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  51.9k|            auto result = scn::scan<T>(
  156|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.9k|                scn::runtime_format(f));
  158|  51.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 23.6k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|  23.6k|            it = result->begin();
  162|  23.6k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|  51.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  51.9k|            auto result = scn::scan<T>(
  170|  51.9k|                global_locale,
  171|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  51.9k|                scn::runtime_format(f));
  173|  51.9k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 23.6k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|  23.6k|            it = result->begin();
  177|  23.6k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  9.45k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  9.45k|            auto result = scn::scan_value<T>(
  185|  9.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  9.45k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 4.72k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  4.72k|            it = result->begin();
  190|  4.72k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|  51.9k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  51.9k|            auto result = scn::scan<T>(
  156|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.9k|                scn::runtime_format(f));
  158|  51.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 23.6k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|  23.6k|            it = result->begin();
  162|  23.6k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|  51.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  51.9k|            auto result = scn::scan<T>(
  170|  51.9k|                global_locale,
  171|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  51.9k|                scn::runtime_format(f));
  173|  51.9k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 23.6k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|  23.6k|            it = result->begin();
  177|  23.6k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  9.45k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  9.45k|            auto result = scn::scan_value<T>(
  185|  9.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  9.45k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 4.72k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  4.72k|            it = result->begin();
  190|  4.72k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.72k|{
  151|       |    // Regular scan
  152|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 28.3k, False: 4.72k]
  ------------------
  153|  28.3k|        auto it = scn::ranges::begin(source);
  154|  51.9k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  51.9k|            auto result = scn::scan<T>(
  156|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  51.9k|                scn::runtime_format(f));
  158|  51.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.3k, False: 23.6k]
  ------------------
  159|  28.3k|                break;
  160|  28.3k|            }
  161|  23.6k|            it = result->begin();
  162|  23.6k|        }
  163|  28.3k|    }
  164|       |
  165|       |    // scan localized
  166|  28.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 28.3k, False: 4.72k]
  ------------------
  167|  28.3k|        auto it = scn::ranges::begin(source);
  168|  51.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  51.9k|            auto result = scn::scan<T>(
  170|  51.9k|                global_locale,
  171|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  51.9k|                scn::runtime_format(f));
  173|  51.9k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 28.3k, False: 23.6k]
  ------------------
  174|  28.3k|                break;
  175|  28.3k|            }
  176|  23.6k|            it = result->begin();
  177|  23.6k|        }
  178|  28.3k|    }
  179|       |
  180|       |    // scan_value
  181|  4.72k|    {
  182|  4.72k|        auto it = scn::ranges::begin(source);
  183|  9.45k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  9.45k|            auto result = scn::scan_value<T>(
  185|  9.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  9.45k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.72k, False: 4.72k]
  ------------------
  187|  4.72k|                break;
  188|  4.72k|            }
  189|  4.72k|            it = result->begin();
  190|  4.72k|        }
  191|  4.72k|    }
  192|  4.72k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  4.72k|{
  109|  4.72k|    using char_type = ranges::range_value_t<Source>;
  110|  4.72k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  4.72k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  4.72k|              std::back_inserter(deque));
  113|  4.72k|    return deque;
  114|  4.72k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  4.72k|{
   98|  4.72k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  4.72k|        return noncontiguous_buffer;
  100|  4.72k|    }
  101|  4.72k|    else {
  102|  4.72k|        return wnoncontiguous_buffer;
  103|  4.72k|    }
  104|  4.72k|}

